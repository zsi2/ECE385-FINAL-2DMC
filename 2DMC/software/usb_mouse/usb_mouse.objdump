
usb_mouse.elf:     file format elf32-littlenios2
usb_mouse.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000133c4 memsz 0x000133c4 flags r-x
    LOAD off    0x000143e4 vaddr 0x100133e4 paddr 0x10014ed0 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000169bc vaddr 0x100169bc paddr 0x100169bc align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012808  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009ac  10012a38  10012a38  00013a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  100133e4  10014ed0  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  100169bc  100169bc  000169bc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  10016b20  10016b20  00015ed0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015ed0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ef8  00000000  00000000  00015ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023788  00000000  00000000  00016df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000090ff  00000000  00000000  0003a578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bafe  00000000  00000000  00043677  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002194  00000000  00000000  0004f178  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003a0f  00000000  00000000  0005130c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001786c  00000000  00000000  00054d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006c588  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d0  00000000  00000000  0006c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00070ffb  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00070ffe  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007100a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007100b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007100c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00071010  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00071014  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00071018  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00071023  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0007102e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000011  00000000  00000000  00071039  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  0007104a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10012a38 l    d  .rodata	00000000 .rodata
100133e4 l    d  .rwdata	00000000 .rwdata
100169bc l    d  .bss	00000000 .bss
10016b20 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_mouse_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
100169bc l     O .bss	00000002 ctl_reg.3584
100169be l     O .bss	00000002 no_device.3585
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1001312a l     O .rodata	00000010 zeroes.4404
100056a0 l     F .text	000000bc __sbprintf
1001313a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100058b0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10007408 l     F .text	00000008 __fp_unlock
1000741c l     F .text	0000019c __sinit.part.1
100075b8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
100133e4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10013828 l     O .rwdata	00000020 lc_ctype_charset
10013808 l     O .rwdata	00000020 lc_message_charset
10013848 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1001316c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000aa8c l     F .text	000000fc __sprint_r.part.0
10013290 l     O .rodata	00000010 zeroes.4349
1000c0c8 l     F .text	000000bc __sbprintf
100132a0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10010110 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10010224 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10010250 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10010344 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1001042c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10010518 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100106f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10014ec0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10010998 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010ad4 l     F .text	00000034 alt_dev_reg
10013e30 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010dc4 l     F .text	0000020c altera_avalon_jtag_uart_irq
10010fd0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
10011608 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100119a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011e00 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011f60 l     F .text	0000003c alt_get_errno
10011f9c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
100169f4 g     O .bss	00000004 alt_instruction_exception_handler
1000a0d0 g     F .text	00000074 _mprec_log10
1000a1bc g     F .text	0000008c __any_on
1000c67c g     F .text	00000054 _isatty_r
10013178 g     O .rodata	00000028 __mprec_tinytens
10010630 g     F .text	0000007c alt_main
1000323c g     F .text	000000c0 _puts_r
10016a20 g     O .bss	00000100 alt_irq
1000c6d0 g     F .text	00000060 _lseek_r
10014ed0 g       *ABS*	00000000 __flash_rwdata_start
1000eae8 g     F .text	00000088 .hidden __eqdf2
10016b20 g       *ABS*	00000000 __alt_heap_start
10003200 g     F .text	0000003c printf
1000c8e8 g     F .text	0000009c _wcrtomb_r
1000a94c g     F .text	0000005c __sseek
10007768 g     F .text	00000010 __sinit
1000c790 g     F .text	00000140 __swbuf_r
1000823c g     F .text	0000007c _setlocale_r
100075c0 g     F .text	00000078 __sfmoreglue
100106d0 g     F .text	00000024 __malloc_unlock
10008f0c g     F .text	0000015c memmove
10007750 g     F .text	00000018 _cleanup
10009190 g     F .text	000000a8 _Balloc
1000eb70 g     F .text	000000dc .hidden __gtdf2
10012388 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000c620 g     F .text	0000005c _fstat_r
100169d8 g     O .bss	00000004 errno
1000a8c8 g     F .text	00000008 __seofread
100169e0 g     O .bss	00000004 alt_argv
1001ce90 g       *ABS*	00000000 _gp
10010968 g     F .text	00000030 usleep
10013cb0 g     O .rwdata	00000180 alt_fd_list
100123ac g     F .text	00000090 alt_find_dev
10008dc4 g     F .text	00000148 memcpy
10007410 g     F .text	0000000c _cleanup_r
1000ff28 g     F .text	000000dc .hidden __floatsidf
10011ee4 g     F .text	0000007c alt_io_redirect
1000ec4c g     F .text	000000f4 .hidden __ltdf2
10012a38 g       *ABS*	00000000 __DTOR_END__
100032fc g     F .text	00000014 puts
10012608 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000a7ac g     F .text	00000074 __fpclassifyd
1000a02c g     F .text	000000a4 __ratio
1000c0ac g     F .text	0000001c __vfiprintf_internal
100111c8 g     F .text	0000021c altera_avalon_jtag_uart_read
100031d0 g     F .text	00000030 _printf_r
1000d788 g     F .text	00000064 .hidden __udivsi3
10010380 g     F .text	000000ac isatty
100131c8 g     O .rodata	000000c8 __mprec_tens
100082b8 g     F .text	0000000c __locale_charset
100169d4 g     O .bss	00000004 __malloc_top_pad
10014e98 g     O .rwdata	00000004 __mb_cur_max
100082e8 g     F .text	0000000c _localeconv_r
100095c4 g     F .text	0000003c __i2b
10007bec g     F .text	000004c8 __sfvwrite_r
1000a820 g     F .text	00000054 _sbrk_r
1000c730 g     F .text	00000060 _read_r
10014eb8 g     O .rwdata	00000004 alt_max_fd
1000c314 g     F .text	000000f0 _fclose_r
100073d8 g     F .text	00000030 fflush
100169d0 g     O .bss	00000004 __malloc_max_sbrked_mem
1000d86c g     F .text	000008ac .hidden __adddf3
10009dd4 g     F .text	0000010c __b2d
1000d0cc g     F .text	000005c4 .hidden __umoddi3
10010554 g     F .text	000000dc lseek
10014e90 g     O .rwdata	00000004 _global_impure_ptr
1000a248 g     F .text	00000564 _realloc_r
10016b20 g       *ABS*	00000000 __bss_end
10011d10 g     F .text	000000f0 alt_iic_isr_register
10012280 g     F .text	00000108 alt_tick
1000cad0 g     F .text	000005fc .hidden __udivdi3
1000c57c g     F .text	00000024 _fputwc_r
100131a0 g     O .rodata	00000028 __mprec_bigtens
100093a8 g     F .text	00000104 __s2b
10010004 g     F .text	000000a8 .hidden __floatunsidf
10009b14 g     F .text	00000060 __mcmp
10007788 g     F .text	00000018 __fp_lock_all
10011cc4 g     F .text	0000004c alt_ic_irq_enabled
100121e4 g     F .text	0000009c alt_alarm_stop
100169e8 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10013c88 g     O .rwdata	00000028 alt_dev_null
10011980 g     F .text	00000020 alt_dcache_flush_all
100094ac g     F .text	00000068 __hi0bits
1000fea8 g     F .text	00000080 .hidden __fixdfsi
10014ed0 g       *ABS*	00000000 __ram_rwdata_end
10014eb0 g     O .rwdata	00000008 alt_dev_list
100109d4 g     F .text	00000100 write
100133e4 g       *ABS*	00000000 __ram_rodata_end
1001028c g     F .text	000000b8 fstat
1000ec4c g     F .text	000000f4 .hidden __ledf2
1000988c g     F .text	00000140 __pow5mult
1000aba0 g     F .text	0000150c ___vfiprintf_internal_r
100169c8 g     O .bss	00000004 __nlocale_changed
1000d7ec g     F .text	00000058 .hidden __umodsi3
10016b20 g       *ABS*	00000000 end
10010d04 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10012a38 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10011680 g     F .text	0000007c alt_avalon_timer_sc_init
100100ac g     F .text	00000064 .hidden __clzsi2
100113e4 g     F .text	00000224 altera_avalon_jtag_uart_write
10007778 g     F .text	00000004 __sfp_lock_acquire
10008ce0 g     F .text	000000e4 memchr
100033a8 g     F .text	000022dc ___vfprintf_internal_r
100078dc g     F .text	00000310 _free_r
100082c4 g     F .text	00000010 __locale_mb_cur_max
10012884 g     F .text	00000180 __call_exitprocs
100169c4 g     O .bss	00000004 __mlocale_changed
10014e9c g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
100169ec g     O .bss	00000004 _alt_tick_rate
100099cc g     F .text	00000148 __lshift
100169f0 g     O .bss	00000004 _alt_nticks
10010730 g     F .text	00000104 read
10010b40 g     F .text	00000060 alt_sys_init
1001276c g     F .text	00000118 __register_exitproc
10009600 g     F .text	0000028c __multiply
10011070 g     F .text	00000068 altera_avalon_jtag_uart_close
1000d844 g     F .text	00000028 .hidden __mulsi3
100133e4 g       *ABS*	00000000 __ram_rwdata_start
10012a38 g       *ABS*	00000000 __ram_rodata_start
100169f8 g     O .bss	00000028 __malloc_current_mallinfo
10009ee0 g     F .text	0000014c __d2b
10010ba0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10012544 g     F .text	000000c4 alt_get_fd
10011828 g     F .text	00000158 alt_busy_sleep
1000c1e4 g     F .text	00000054 _close_r
100126f0 g     F .text	0000007c memcmp
10010c60 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10016b20 g       *ABS*	00000000 __alt_stack_base
10010cb0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000575c g     F .text	00000154 __swsetup_r
1000e118 g     F .text	000009d0 .hidden __divdf3
10007638 g     F .text	00000118 __sfp
1000a144 g     F .text	00000078 __copybits
10013880 g     O .rwdata	00000408 __malloc_av_
10007784 g     F .text	00000004 __sinit_lock_release
1000ed40 g     F .text	0000086c .hidden __muldf3
1000a874 g     F .text	00000054 __sread
1001243c g     F .text	00000108 alt_find_file
100119dc g     F .text	000000a4 alt_dev_llist_insert
100106ac g     F .text	00000024 __malloc_lock
100108b8 g     F .text	000000b0 sbrk
1000737c g     F .text	0000005c _fflush_r
1000c238 g     F .text	000000dc _calloc_r
100169bc g       *ABS*	00000000 __bss_start
10009068 g     F .text	00000128 memset
100003f4 g     F .text	00002ddc main
100169e4 g     O .bss	00000004 alt_envp
100169cc g     O .bss	00000004 __malloc_max_total_mem
10010c00 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000c8d0 g     F .text	00000018 __swbuf
1000a9a8 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000c404 g     F .text	00000014 fclose
10005ad8 g     F .text	00001688 _dtoa_r
100084d4 g     F .text	0000080c _malloc_r
1000ca44 g     F .text	00000030 __ascii_wctomb
10014ebc g     O .rwdata	00000004 alt_errno
100080b4 g     F .text	000000c4 _fwalk
1000d690 g     F .text	00000084 .hidden __divsi3
100077b8 g     F .text	00000124 _malloc_trim_r
10012a38 g       *ABS*	00000000 __CTOR_END__
1000a9b0 g     F .text	000000dc strcmp
10012a38 g       *ABS*	00000000 __flash_rodata_start
10012a38 g       *ABS*	00000000 __DTOR_LIST__
1000eae8 g     F .text	00000088 .hidden __nedf2
10000308 g     F .text	00000038 UsbRead
10010b08 g     F .text	00000038 alt_irq_init
10010834 g     F .text	00000084 alt_release_fd
1000026c g     F .text	00000054 maxmin
100132b0 g     O .rodata	00000100 .hidden __clz_tab
100169c0 g     O .bss	00000004 _PathLocale
100126a4 g     F .text	00000014 atexit
1000c184 g     F .text	00000060 _write_r
100082f4 g     F .text	00000018 setlocale
10014e94 g     O .rwdata	00000004 _impure_ptr
100169dc g     O .bss	00000004 alt_argc
10007160 g     F .text	0000021c __sflush_r
10011ae0 g     F .text	00000060 _do_dtors
100082e0 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10009d70 g     F .text	00000064 __ulp
100077a0 g     F .text	00000018 __fp_unlock_all
10014ea8 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000830c g     F .text	0000000c localeconv
10011b60 g     F .text	00000050 alt_ic_isr_register
10014ed0 g       *ABS*	00000000 _edata
10016b20 g       *ABS*	00000000 _end
100002c0 g     F .text	00000048 UsbWrite
1000c418 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
100110d8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10011c38 g     F .text	0000008c alt_ic_irq_disable
1000a8d0 g     F .text	0000007c __swrite
10014ea0 g     O .rwdata	00000004 __malloc_trim_threshold
100082d4 g     F .text	0000000c __locale_msgcharset
100126b8 g     F .text	00000038 exit
10008178 g     F .text	000000c4 _fwalk_reent
10009b74 g     F .text	000001fc __mdiff
1000d714 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000777c g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10012a04 g     F .text	00000034 _exit
100116fc g     F .text	0000012c alt_alarm_start
10008318 g     F .text	000001bc __smakebuf_r
10003310 g     F .text	00000098 strlen
10012088 g     F .text	0000015c open
1000eb70 g     F .text	000000dc .hidden __gedf2
10014ea4 g     O .rwdata	00000004 __wctomb
1000ab88 g     F .text	00000018 __sprint_r
10011b40 g     F .text	00000020 alt_icache_flush_all
10014ec4 g     O .rwdata	00000004 alt_priority_mask
10011bb0 g     F .text	00000088 alt_ic_irq_enable
10005684 g     F .text	0000001c __vfprintf_internal
1000ca74 g     F .text	0000005c _wctomb_r
1000f5ac g     F .text	000008fc .hidden __subdf3
10009514 g     F .text	000000b0 __lo0bits
10014ec8 g     O .rwdata	00000008 alt_alarm_list
10011a80 g     F .text	00000060 _do_ctors
10000340 g     F .text	000000b4 UsbSoftReset
1000c984 g     F .text	000000c0 wcrtomb
1001014c g     F .text	000000d8 close
10010494 g     F .text	00000084 alt_load
1000c5a0 g     F .text	00000080 fputwc
10007780 g     F .text	00000004 __sinit_lock_acquire
10009260 g     F .text	00000148 __multadd
10009238 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	109a8804 	addi	r2,r2,27168
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	109a8804 	addi	r2,r2,27168
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6d917 	ldw	r2,-25756(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6d917 	ldw	r2,-25756(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b3a414 	ori	gp,gp,52880
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	109a6f14 	ori	r2,r2,27068

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18dac814 	ori	r3,r3,27424

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	00104940 	call	10010494 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00106300 	call	10010630 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <maxmin>:
*
******************************************************************************/
void UsbSoftReset();
//--------------------------------------
int maxmin(int no, int max, int min)
{
1000026c:	defffc04 	addi	sp,sp,-16
10000270:	df000315 	stw	fp,12(sp)
10000274:	df000304 	addi	fp,sp,12
10000278:	e13ffd15 	stw	r4,-12(fp)
1000027c:	e17ffe15 	stw	r5,-8(fp)
10000280:	e1bfff15 	stw	r6,-4(fp)
    if (no > max)
10000284:	e0bffd17 	ldw	r2,-12(fp)
10000288:	e0fffe17 	ldw	r3,-8(fp)
1000028c:	1880020e 	bge	r3,r2,10000298 <maxmin+0x2c>
    {
        no = max;
10000290:	e0bffe17 	ldw	r2,-8(fp)
10000294:	e0bffd15 	stw	r2,-12(fp)
    }
    if (no < min)
10000298:	e0fffd17 	ldw	r3,-12(fp)
1000029c:	e0bfff17 	ldw	r2,-4(fp)
100002a0:	1880020e 	bge	r3,r2,100002ac <maxmin+0x40>
    {
        no = min;
100002a4:	e0bfff17 	ldw	r2,-4(fp)
100002a8:	e0bffd15 	stw	r2,-12(fp)
    }

    return (no);
100002ac:	e0bffd17 	ldw	r2,-12(fp)
}
100002b0:	e037883a 	mov	sp,fp
100002b4:	df000017 	ldw	fp,0(sp)
100002b8:	dec00104 	addi	sp,sp,4
100002bc:	f800283a 	ret

100002c0 <UsbWrite>:
*
* @note     None
*
******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
100002c0:	defffd04 	addi	sp,sp,-12
100002c4:	df000215 	stw	fp,8(sp)
100002c8:	df000204 	addi	fp,sp,8
100002cc:	2007883a 	mov	r3,r4
100002d0:	2805883a 	mov	r2,r5
100002d4:	e0fffe0d 	sth	r3,-8(fp)
100002d8:	e0bfff0d 	sth	r2,-4(fp)
    //XIo_Out16(USB_ADDRESS, Address);
    IOWR(CY7C67200_BASE, HPI_ADDR, Address);
100002dc:	e0fffe0b 	ldhu	r3,-8(fp)
100002e0:	00803a04 	movi	r2,232
100002e4:	10c00035 	stwio	r3,0(r2)
    //usleep(10);

    //XIo_Out16(USB_DATA, Data);
    IOWR(CY7C67200_BASE, HPI_DATA, Data);
100002e8:	e0ffff0b 	ldhu	r3,-4(fp)
100002ec:	00803804 	movi	r2,224
100002f0:	10c00035 	stwio	r3,0(r2)
}
100002f4:	0001883a 	nop
100002f8:	e037883a 	mov	sp,fp
100002fc:	df000017 	ldw	fp,0(sp)
10000300:	dec00104 	addi	sp,sp,4
10000304:	f800283a 	ret

10000308 <UsbRead>:
*
* @note     None
*
******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10000308:	defffe04 	addi	sp,sp,-8
1000030c:	df000115 	stw	fp,4(sp)
10000310:	df000104 	addi	fp,sp,4
10000314:	2005883a 	mov	r2,r4
10000318:	e0bfff0d 	sth	r2,-4(fp)
    //XIo_Out16(HPI_ADDR, Address);
    IOWR(CY7C67200_BASE, HPI_ADDR, Address);
1000031c:	e0ffff0b 	ldhu	r3,-4(fp)
10000320:	00803a04 	movi	r2,232
10000324:	10c00035 	stwio	r3,0(r2)
    //usleep(20);
    return IORD(CY7C67200_BASE, HPI_DATA);
10000328:	00803804 	movi	r2,224
1000032c:	10800037 	ldwio	r2,0(r2)
}
10000330:	e037883a 	mov	sp,fp
10000334:	df000017 	ldw	fp,0(sp)
10000338:	dec00104 	addi	sp,sp,4
1000033c:	f800283a 	ret

10000340 <UsbSoftReset>:
*
* @note     None
*
******************************************************************************/
void UsbSoftReset()
{
10000340:	defffe04 	addi	sp,sp,-8
10000344:	dfc00115 	stw	ra,4(sp)
10000348:	df000015 	stw	fp,0(sp)
1000034c:	d839883a 	mov	fp,sp
    //XIo_Out16(USB_MAILBOX, COMM_RESET);
    IOWR(CY7C67200_BASE, HPI_MAILBOX, COMM_RESET); //COMM_JUMP2CODE
10000350:	00fe9414 	movui	r3,64080
10000354:	00803904 	movi	r2,228
10000358:	10c00035 	stwio	r3,0(r2)
    usleep(100000);
1000035c:	010000b4 	movhi	r4,2
10000360:	2121a804 	addi	r4,r4,-31072
10000364:	00109680 	call	10010968 <usleep>
    printf("[USB INIT]:reset finished!\n");
10000368:	01040074 	movhi	r4,4097
1000036c:	210a8e04 	addi	r4,r4,10808
10000370:	00032fc0 	call	100032fc <puts>

    usleep(500000);
10000374:	01000234 	movhi	r4,8
10000378:	21284804 	addi	r4,r4,-24288
1000037c:	00109680 	call	10010968 <usleep>
    printf("[USB INIT]:Clear up the interrupt\r\n");
10000380:	01040074 	movhi	r4,4097
10000384:	210a9504 	addi	r4,r4,10836
10000388:	00032fc0 	call	100032fc <puts>
    IORD(CY7C67200_BASE, HPI_MAILBOX);
1000038c:	00803904 	movi	r2,228
10000390:	10800037 	ldwio	r2,0(r2)
    IORD(CY7C67200_BASE, HPI_STATUS);
10000394:	00803b04 	movi	r2,236
10000398:	10800037 	ldwio	r2,0(r2)

    // Had to add the write due to a bug in BIOS where they overwrite
    // the mailbox after initialization with garbage.  The read clears
    // any pending interrupts.
    UsbRead(HPI_SIE1_MSG_ADR);
1000039c:	01005104 	movi	r4,324
100003a0:	00003080 	call	10000308 <UsbRead>
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
100003a4:	000b883a 	mov	r5,zero
100003a8:	01005104 	movi	r4,324
100003ac:	00002c00 	call	100002c0 <UsbWrite>
    UsbRead(HPI_SIE2_MSG_ADR);
100003b0:	01005204 	movi	r4,328
100003b4:	00003080 	call	10000308 <UsbRead>
    UsbWrite(HPI_SIE2_MSG_ADR, 0);
100003b8:	000b883a 	mov	r5,zero
100003bc:	01005204 	movi	r4,328
100003c0:	00002c00 	call	100002c0 <UsbWrite>

    UsbWrite(HOST1_STAT_REG, 0xFFFF);
100003c4:	017fffd4 	movui	r5,65535
100003c8:	01302414 	movui	r4,49296
100003cc:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(HOST2_STAT_REG, 0xFFFF);
100003d0:	017fffd4 	movui	r5,65535
100003d4:	01302c14 	movui	r4,49328
100003d8:	00002c00 	call	100002c0 <UsbWrite>
}
100003dc:	0001883a 	nop
100003e0:	e037883a 	mov	sp,fp
100003e4:	dfc00117 	ldw	ra,4(sp)
100003e8:	df000017 	ldw	fp,0(sp)
100003ec:	dec00204 	addi	sp,sp,8
100003f0:	f800283a 	ret

100003f4 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100003f4:	defff604 	addi	sp,sp,-40
100003f8:	dfc00915 	stw	ra,36(sp)
100003fc:	df000815 	stw	fp,32(sp)
10000400:	df000804 	addi	fp,sp,32
    alt_u16 intStat;
    alt_u16 usb_ctl_val;
    static alt_u16 ctl_reg = 0;
    static alt_u16 no_device = 0;
    alt_u16 fs_device = 0;
10000404:	e03ffd0d 	sth	zero,-12(fp)
    signed char button_value;
    int px = 320;
10000408:	00805004 	movi	r2,320
1000040c:	e0bff915 	stw	r2,-28(fp)
    int py = 240;
10000410:	00803c04 	movi	r2,240
10000414:	e0bffa15 	stw	r2,-24(fp)
    signed char dx = 0;
10000418:	e03ffb05 	stb	zero,-20(fp)
    signed char dy = 0;
1000041c:	e03ffb45 	stb	zero,-19(fp)
    alt_u8 pbutton = 0;
10000420:	e03ffb85 	stb	zero,-18(fp)
    alt_u8 toggle = 0;
10000424:	e03ffbc5 	stb	zero,-17(fp)
    alt_u8 data_size;
    signed short read;
    signed char dx_prev1 = 0;
10000428:	e03ffc05 	stb	zero,-16(fp)
    signed char dx_prev2 = 0;
1000042c:	e03ffc45 	stb	zero,-15(fp)
    signed char dx_prev3 = 0;
10000430:	e03ffd85 	stb	zero,-10(fp)
    signed char dy_prev1 = 0;
10000434:	e03ffc85 	stb	zero,-14(fp)
    signed char dy_prev2 = 0;
10000438:	e03ffcc5 	stb	zero,-13(fp)
    signed char dy_prev3 = 0;
1000043c:	e03ffdc5 	stb	zero,-9(fp)

    //----------------------------------------SIE1 initial---------------------------------------------------//
USB_HOT_PLUG:
    UsbSoftReset();
10000440:	00003400 	call	10000340 <UsbSoftReset>
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10000444:	000b883a 	mov	r5,zero
10000448:	01005104 	movi	r4,324
1000044c:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(HOST1_STAT_REG, 0xFFFF);
10000450:	017fffd4 	movui	r5,65535
10000454:	01302414 	movui	r4,49296
10000458:	00002c00 	call	100002c0 <UsbWrite>

    /* Set HUSB_pEOT time */
    UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
1000045c:	01409604 	movi	r5,600
10000460:	01006d04 	movi	r4,436
10000464:	00002c00 	call	100002c0 <UsbWrite>

    usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN; // | SOFEOP1_TO_HPI_EN;
10000468:	00811004 	movi	r2,1088
1000046c:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000470:	e0bff80b 	ldhu	r2,-32(fp)
10000474:	100b883a 	mov	r5,r2
10000478:	01005084 	movi	r4,322
1000047c:	00002c00 	call	100002c0 <UsbWrite>

    intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN;
10000480:	00808404 	movi	r2,528
10000484:	e0bffe0d 	sth	r2,-8(fp)
    UsbWrite(HOST1_IRQ_EN_REG, intStat);
10000488:	e0bffe0b 	ldhu	r2,-8(fp)
1000048c:	100b883a 	mov	r5,r2
10000490:	01302314 	movui	r4,49292
10000494:	00002c00 	call	100002c0 <UsbWrite>

    UsbWrite(COMM_R0, 0x0000);                  //reset time
10000498:	000b883a 	mov	r5,zero
1000049c:	01007104 	movi	r4,452
100004a0:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R1, 0x0000);                  //port number
100004a4:	000b883a 	mov	r5,zero
100004a8:	01007184 	movi	r4,454
100004ac:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R2, 0x0000);                  //r1
100004b0:	000b883a 	mov	r5,zero
100004b4:	01007204 	movi	r4,456
100004b8:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R3, 0x0000);                  //r1
100004bc:	000b883a 	mov	r5,zero
100004c0:	01007284 	movi	r4,458
100004c4:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R4, 0x0000);                  //r1
100004c8:	000b883a 	mov	r5,zero
100004cc:	01007304 	movi	r4,460
100004d0:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R5, 0x0000);                  //r1
100004d4:	000b883a 	mov	r5,zero
100004d8:	01007384 	movi	r4,462
100004dc:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R6, 0x0000);                  //r1
100004e0:	000b883a 	mov	r5,zero
100004e4:	01007404 	movi	r4,464
100004e8:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R7, 0x0000);                  //r1
100004ec:	000b883a 	mov	r5,zero
100004f0:	01007484 	movi	r4,466
100004f4:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R8, 0x0000);                  //r1
100004f8:	000b883a 	mov	r5,zero
100004fc:	01007504 	movi	r4,468
10000500:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R9, 0x0000);                  //r1
10000504:	000b883a 	mov	r5,zero
10000508:	01007584 	movi	r4,470
1000050c:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R10, 0x0000);                 //r1
10000510:	000b883a 	mov	r5,zero
10000514:	01007604 	movi	r4,472
10000518:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R11, 0x0000);                 //r1
1000051c:	000b883a 	mov	r5,zero
10000520:	01007684 	movi	r4,474
10000524:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R12, 0x0000);                 //r1
10000528:	000b883a 	mov	r5,zero
1000052c:	01007704 	movi	r4,476
10000530:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R13, 0x0000);                 //r1
10000534:	000b883a 	mov	r5,zero
10000538:	01007784 	movi	r4,478
1000053c:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_INT_NUM, HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10000540:	01401c84 	movi	r5,114
10000544:	01007084 	movi	r4,450
10000548:	00002c00 	call	100002c0 <UsbWrite>
    IOWR(CY7C67200_BASE, HPI_MAILBOX, 0xCE01);
1000054c:	00f38054 	movui	r3,52737
10000550:	00803904 	movi	r2,228
10000554:	10c00035 	stwio	r3,0(r2)

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & 0xFFFF)) //read sie1 msg register
10000558:	0001883a 	nop
1000055c:	00803b04 	movi	r2,236
10000560:	10800037 	ldwio	r2,0(r2)
10000564:	10bfffcc 	andi	r2,r2,65535
10000568:	103ffc26 	beq	r2,zero,1000055c <__alt_data_end+0xf800055c>
    {
    }
    while (IORD(CY7C67200_BASE, HPI_MAILBOX) != COMM_ACK)
1000056c:	00000706 	br	1000058c <main+0x198>
    {
        printf("[ERROR]:routine mailbox data is %x\n", IORD(CY7C67200_BASE, HPI_MAILBOX));
10000570:	00803904 	movi	r2,228
10000574:	10800037 	ldwio	r2,0(r2)
10000578:	100b883a 	mov	r5,r2
1000057c:	01040074 	movhi	r4,4097
10000580:	210a9e04 	addi	r4,r4,10872
10000584:	00032000 	call	10003200 <printf>
        goto USB_HOT_PLUG;
10000588:	003fad06 	br	10000440 <__alt_data_end+0xf8000440>
    IOWR(CY7C67200_BASE, HPI_MAILBOX, 0xCE01);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & 0xFFFF)) //read sie1 msg register
    {
    }
    while (IORD(CY7C67200_BASE, HPI_MAILBOX) != COMM_ACK)
1000058c:	00803904 	movi	r2,228
10000590:	10800037 	ldwio	r2,0(r2)
10000594:	1083fb58 	cmpnei	r2,r2,4077
10000598:	103ff51e 	bne	r2,zero,10000570 <__alt_data_end+0xf8000570>
        printf("[ERROR]:routine mailbox data is %x\n", IORD(CY7C67200_BASE, HPI_MAILBOX));
        goto USB_HOT_PLUG;
    }

    //usleep(30*1000);
    UsbWrite(COMM_INT_NUM, HUSB_RESET_INT); //husb reset
1000059c:	01401d04 	movi	r5,116
100005a0:	01007084 	movi	r4,450
100005a4:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R0, 0x003c);              //reset time
100005a8:	01400f04 	movi	r5,60
100005ac:	01007104 	movi	r4,452
100005b0:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R1, 0x0000);              //port number
100005b4:	000b883a 	mov	r5,zero
100005b8:	01007184 	movi	r4,454
100005bc:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R2, 0x0000);              //r1
100005c0:	000b883a 	mov	r5,zero
100005c4:	01007204 	movi	r4,456
100005c8:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R3, 0x0000);              //r1
100005cc:	000b883a 	mov	r5,zero
100005d0:	01007284 	movi	r4,458
100005d4:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R4, 0x0000);              //r1
100005d8:	000b883a 	mov	r5,zero
100005dc:	01007304 	movi	r4,460
100005e0:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R5, 0x0000);              //r1
100005e4:	000b883a 	mov	r5,zero
100005e8:	01007384 	movi	r4,462
100005ec:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R6, 0x0000);              //r1
100005f0:	000b883a 	mov	r5,zero
100005f4:	01007404 	movi	r4,464
100005f8:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R7, 0x0000);              //r1
100005fc:	000b883a 	mov	r5,zero
10000600:	01007484 	movi	r4,466
10000604:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R8, 0x0000);              //r1
10000608:	000b883a 	mov	r5,zero
1000060c:	01007504 	movi	r4,468
10000610:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R9, 0x0000);              //r1
10000614:	000b883a 	mov	r5,zero
10000618:	01007584 	movi	r4,470
1000061c:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R10, 0x0000);             //r1
10000620:	000b883a 	mov	r5,zero
10000624:	01007604 	movi	r4,472
10000628:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R11, 0x0000);             //r1
1000062c:	000b883a 	mov	r5,zero
10000630:	01007684 	movi	r4,474
10000634:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R12, 0x0000);             //r1
10000638:	000b883a 	mov	r5,zero
1000063c:	01007704 	movi	r4,476
10000640:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R13, 0x0000);             //r1
10000644:	000b883a 	mov	r5,zero
10000648:	01007784 	movi	r4,478
1000064c:	00002c00 	call	100002c0 <UsbWrite>

    IOWR(CY7C67200_BASE, HPI_MAILBOX, 0xCE01);
10000650:	00f38054 	movui	r3,52737
10000654:	00803904 	movi	r2,228
10000658:	10c00035 	stwio	r3,0(r2)

    while (IORD(CY7C67200_BASE, HPI_MAILBOX) != COMM_ACK)
1000065c:	0001883a 	nop
10000660:	00803904 	movi	r2,228
10000664:	10800037 	ldwio	r2,0(r2)
10000668:	1083fb58 	cmpnei	r2,r2,4077
1000066c:	10000726 	beq	r2,zero,1000068c <main+0x298>
    {
        printf("[ERROR]:routine mailbox data is %x\n", IORD(CY7C67200_BASE, HPI_MAILBOX));
10000670:	00803904 	movi	r2,228
10000674:	10800037 	ldwio	r2,0(r2)
10000678:	100b883a 	mov	r5,r2
1000067c:	01040074 	movhi	r4,4097
10000680:	210a9e04 	addi	r4,r4,10872
10000684:	00032000 	call	10003200 <printf>
        goto USB_HOT_PLUG;
10000688:	003f6d06 	br	10000440 <__alt_data_end+0xf8000440>
    }

    //usleep(30*1000);
    ctl_reg = USB1_CTL_REG;
1000068c:	00b02284 	movi	r2,-16246
10000690:	d0a6cb0d 	sth	r2,-25812(gp)
    no_device = (A_DP_STAT | A_DM_STAT);
10000694:	008c0004 	movi	r2,12288
10000698:	d0a6cb8d 	sth	r2,-25810(gp)
    fs_device = A_DP_STAT;
1000069c:	00880004 	movi	r2,8192
100006a0:	e0bffd0d 	sth	r2,-12(fp)

    usb_ctl_val = UsbRead(ctl_reg);
100006a4:	d0a6cb0b 	ldhu	r2,-25812(gp)
100006a8:	10bfffcc 	andi	r2,r2,65535
100006ac:	1009883a 	mov	r4,r2
100006b0:	00003080 	call	10000308 <UsbRead>
100006b4:	e0bff80d 	sth	r2,-32(fp)

    //printf("[SIE1 INIT]:USB 1 Control Register reg is %x\n",UsbRead(0xC08A));

    //------------------------------------------------------set address -----------------------------------------------------------------
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
100006b8:	00c14004 	movi	r3,1280
100006bc:	00803a04 	movi	r2,232
100006c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100006c4:	00c14304 	movi	r3,1292
100006c8:	00803804 	movi	r2,224
100006cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100006d0:	00c00204 	movi	r3,8
100006d4:	00803804 	movi	r2,224
100006d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x00D0);
100006dc:	00c03404 	movi	r3,208
100006e0:	00803804 	movi	r2,224
100006e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
100006e8:	00c00044 	movi	r3,1
100006ec:	00803804 	movi	r2,224
100006f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
100006f4:	00c004c4 	movi	r3,19
100006f8:	00803804 	movi	r2,224
100006fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10000700:	00c14504 	movi	r3,1300
10000704:	00803804 	movi	r2,224
10000708:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0500);
1000070c:	00c14004 	movi	r3,1280
10000710:	00803804 	movi	r2,224
10000714:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0002); //device address
10000718:	00c00084 	movi	r3,2
1000071c:	00803804 	movi	r2,224
10000720:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000724:	0007883a 	mov	r3,zero
10000728:	00803804 	movi	r2,224
1000072c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000730:	0007883a 	mov	r3,zero
10000734:	00803804 	movi	r2,224
10000738:	10c00035 	stwio	r3,0(r2)

    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
1000073c:	0007883a 	mov	r3,zero
10000740:	00803804 	movi	r2,224
10000744:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
10000748:	0007883a 	mov	r3,zero
1000074c:	00803804 	movi	r2,224
10000750:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0090); //device address
10000754:	00c02404 	movi	r3,144
10000758:	00803804 	movi	r2,224
1000075c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041);
10000760:	00c01044 	movi	r3,65
10000764:	00803804 	movi	r2,224
10000768:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
1000076c:	00c004c4 	movi	r3,19
10000770:	00803804 	movi	r2,224
10000774:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000778:	0007883a 	mov	r3,zero
1000077c:	00803804 	movi	r2,224
10000780:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10000784:	01414004 	movi	r5,1280
10000788:	01006c04 	movi	r4,432
1000078c:	00002c00 	call	100002c0 <UsbWrite>

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000790:	00003806 	br	10000874 <main+0x480>
    {
        //the starting address
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10000794:	00c14004 	movi	r3,1280
10000798:	00803a04 	movi	r2,232
1000079c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100007a0:	00c14304 	movi	r3,1292
100007a4:	00803804 	movi	r2,224
100007a8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100007ac:	00c00204 	movi	r3,8
100007b0:	00803804 	movi	r2,224
100007b4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x00D0);
100007b8:	00c03404 	movi	r3,208
100007bc:	00803804 	movi	r2,224
100007c0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
100007c4:	00c00044 	movi	r3,1
100007c8:	00803804 	movi	r2,224
100007cc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
100007d0:	00c004c4 	movi	r3,19
100007d4:	00803804 	movi	r2,224
100007d8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
100007dc:	00c14504 	movi	r3,1300
100007e0:	00803804 	movi	r2,224
100007e4:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0500);
100007e8:	00c14004 	movi	r3,1280
100007ec:	00803804 	movi	r2,224
100007f0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0002); //device address
100007f4:	00c00084 	movi	r3,2
100007f8:	00803804 	movi	r2,224
100007fc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000800:	0007883a 	mov	r3,zero
10000804:	00803804 	movi	r2,224
10000808:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
1000080c:	0007883a 	mov	r3,zero
10000810:	00803804 	movi	r2,224
10000814:	10c00035 	stwio	r3,0(r2)
        //IN
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10000818:	0007883a 	mov	r3,zero
1000081c:	00803804 	movi	r2,224
10000820:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
10000824:	0007883a 	mov	r3,zero
10000828:	00803804 	movi	r2,224
1000082c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0090); //device address
10000830:	00c02404 	movi	r3,144
10000834:	00803804 	movi	r2,224
10000838:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041);
1000083c:	00c01044 	movi	r3,65
10000840:	00803804 	movi	r2,224
10000844:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000848:	00c004c4 	movi	r3,19
1000084c:	00803804 	movi	r2,224
10000850:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000854:	0007883a 	mov	r3,zero
10000858:	00803804 	movi	r2,224
1000085c:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10000860:	01414004 	movi	r5,1280
10000864:	01006c04 	movi	r4,432
10000868:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
1000086c:	0109c404 	movi	r4,10000
10000870:	00109680 	call	10010968 <usleep>
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000874:	00803b04 	movi	r2,236
10000878:	10800037 	ldwio	r2,0(r2)
1000087c:	1080040c 	andi	r2,r2,16
10000880:	103fc426 	beq	r2,zero,10000794 <__alt_data_end+0xf8000794>
        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10000884:	01005104 	movi	r4,324
10000888:	00003080 	call	10000308 <UsbRead>
1000088c:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10000890:	000b883a 	mov	r5,zero
10000894:	01005104 	movi	r4,324
10000898:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
1000089c:	00000d06 	br	100008d4 <main+0x4e0>
    {
        if (usb_ctl_val == 0x000)
100008a0:	e0bff80b 	ldhu	r2,-32(fp)
100008a4:	10000526 	beq	r2,zero,100008bc <main+0x4c8>
        {
        }
        else
        {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
100008a8:	e0bff80b 	ldhu	r2,-32(fp)
100008ac:	100b883a 	mov	r5,r2
100008b0:	01040074 	movhi	r4,4097
100008b4:	210aa704 	addi	r4,r4,10908
100008b8:	00032000 	call	10003200 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100008bc:	01005104 	movi	r4,324
100008c0:	00003080 	call	10000308 <UsbRead>
100008c4:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
100008c8:	000b883a 	mov	r5,zero
100008cc:	01005104 	movi	r4,324
100008d0:	00002c00 	call	100002c0 <UsbWrite>
    }

    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100008d4:	e0bff80b 	ldhu	r2,-32(fp)
100008d8:	10840018 	cmpnei	r2,r2,4096
100008dc:	103ff01e 	bne	r2,zero,100008a0 <__alt_data_end+0xf80008a0>
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
        //goto USB_HOT_PLUG;
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
100008e0:	00c14184 	movi	r3,1286
100008e4:	00803a04 	movi	r2,232
100008e8:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
100008ec:	00803804 	movi	r2,224
100008f0:	10800037 	ldwio	r2,0(r2)
100008f4:	100b883a 	mov	r5,r2
100008f8:	01040074 	movhi	r4,4097
100008fc:	210aaf04 	addi	r4,r4,10940
10000900:	00032000 	call	10003200 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10000904:	00c14204 	movi	r3,1288
10000908:	00803a04 	movi	r2,232
1000090c:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10000910:	00803804 	movi	r2,224
10000914:	10800037 	ldwio	r2,0(r2)
10000918:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n", usb_ctl_val);
1000091c:	e0bff80b 	ldhu	r2,-32(fp)
10000920:	100b883a 	mov	r5,r2
10000924:	01040074 	movhi	r4,4097
10000928:	210aba04 	addi	r4,r4,10984
1000092c:	00032000 	call	10003200 <printf>
    while (usb_ctl_val != 0x03)
10000930:	e0bff80b 	ldhu	r2,-32(fp)
10000934:	108000e0 	cmpeqi	r2,r2,3
10000938:	1000161e 	bne	r2,zero,10000994 <main+0x5a0>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
1000093c:	00803b04 	movi	r2,236
10000940:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10000944:	01005104 	movi	r4,324
10000948:	00003080 	call	10000308 <UsbRead>
1000094c:	10bfffcc 	andi	r2,r2,65535
10000950:	10840018 	cmpnei	r2,r2,4096
10000954:	1000081e 	bne	r2,zero,10000978 <main+0x584>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10000958:	000b883a 	mov	r5,zero
1000095c:	01005104 	movi	r4,324
10000960:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000964:	0001883a 	nop
10000968:	00803b04 	movi	r2,236
1000096c:	10800037 	ldwio	r2,0(r2)
10000970:	1080040c 	andi	r2,r2,16
10000974:	103ffc26 	beq	r2,zero,10000968 <__alt_data_end+0xf8000968>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10000978:	00c14204 	movi	r3,1288
1000097c:	00803a04 	movi	r2,232
10000980:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10000984:	00803804 	movi	r2,224
10000988:	10800037 	ldwio	r2,0(r2)
1000098c:	e0bff80d 	sth	r2,-32(fp)

        goto USB_HOT_PLUG;
10000990:	003eab06 	br	10000440 <__alt_data_end+0xf8000440>
    }

    printf("------------[ENUM PROCESS]:set address pass!---------------\n");
10000994:	01040074 	movhi	r4,4097
10000998:	210ac604 	addi	r4,r4,11032
1000099c:	00032fc0 	call	100032fc <puts>

    //-------------------------------get device descriptor-1 -----------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
100009a0:	00c14004 	movi	r3,1280
100009a4:	00803a04 	movi	r2,232
100009a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100009ac:	00c14304 	movi	r3,1292
100009b0:	00803804 	movi	r2,224
100009b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100009b8:	00c00204 	movi	r3,8
100009bc:	00803804 	movi	r2,224
100009c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
100009c4:	00c0b404 	movi	r3,720
100009c8:	00803804 	movi	r2,224
100009cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
100009d0:	00c00044 	movi	r3,1
100009d4:	00803804 	movi	r2,224
100009d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
100009dc:	00c004c4 	movi	r3,19
100009e0:	00803804 	movi	r2,224
100009e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
100009e8:	00c14504 	movi	r3,1300
100009ec:	00803804 	movi	r2,224
100009f0:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
100009f4:	00c1a004 	movi	r3,1664
100009f8:	00803804 	movi	r2,224
100009fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0100);
10000a00:	00c04004 	movi	r3,256
10000a04:	00803804 	movi	r2,224
10000a08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000a0c:	0007883a 	mov	r3,zero
10000a10:	00803804 	movi	r2,224
10000a14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008);
10000a18:	00c00204 	movi	r3,8
10000a1c:	00803804 	movi	r2,224
10000a20:	10c00035 	stwio	r3,0(r2)

    //data phase IN
    IOWR(CY7C67200_BASE, HPI_DATA, 0x052C); //
10000a24:	00c14b04 	movi	r3,1324
10000a28:	00803804 	movi	r2,224
10000a2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //
10000a30:	00c00204 	movi	r3,8
10000a34:	00803804 	movi	r2,224
10000a38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //
10000a3c:	00c0a404 	movi	r3,656
10000a40:	00803804 	movi	r2,224
10000a44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041);
10000a48:	00c01044 	movi	r3,65
10000a4c:	00803804 	movi	r2,224
10000a50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000a54:	00c004c4 	movi	r3,19
10000a58:	00803804 	movi	r2,224
10000a5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0520);
10000a60:	00c14804 	movi	r3,1312
10000a64:	00803804 	movi	r2,224
10000a68:	10c00035 	stwio	r3,0(r2)

    //    //status phase
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10000a6c:	0007883a 	mov	r3,zero
10000a70:	00803804 	movi	r2,224
10000a74:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
10000a78:	0007883a 	mov	r3,zero
10000a7c:	00803804 	movi	r2,224
10000a80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //device address
10000a84:	00c08404 	movi	r3,528
10000a88:	00803804 	movi	r2,224
10000a8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041);
10000a90:	00c01044 	movi	r3,65
10000a94:	00803804 	movi	r2,224
10000a98:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000a9c:	00c004c4 	movi	r3,19
10000aa0:	00803804 	movi	r2,224
10000aa4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000aa8:	0007883a 	mov	r3,zero
10000aac:	00803804 	movi	r2,224
10000ab0:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10000ab4:	01414004 	movi	r5,1280
10000ab8:	01006c04 	movi	r4,432
10000abc:	00002c00 	call	100002c0 <UsbWrite>

    //usleep(10*1000);
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000ac0:	00004a06 	br	10000bec <main+0x7f8>
    {
        //the starting address
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10000ac4:	00c14004 	movi	r3,1280
10000ac8:	00803a04 	movi	r2,232
10000acc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10000ad0:	00c14304 	movi	r3,1292
10000ad4:	00803804 	movi	r2,224
10000ad8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10000adc:	00c00204 	movi	r3,8
10000ae0:	00803804 	movi	r2,224
10000ae4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
10000ae8:	00c0b404 	movi	r3,720
10000aec:	00803804 	movi	r2,224
10000af0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10000af4:	00c00044 	movi	r3,1
10000af8:	00803804 	movi	r2,224
10000afc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000b00:	00c004c4 	movi	r3,19
10000b04:	00803804 	movi	r2,224
10000b08:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10000b0c:	00c14504 	movi	r3,1300
10000b10:	00803804 	movi	r2,224
10000b14:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0680);
10000b18:	00c1a004 	movi	r3,1664
10000b1c:	00803804 	movi	r2,224
10000b20:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0100);
10000b24:	00c04004 	movi	r3,256
10000b28:	00803804 	movi	r2,224
10000b2c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000b30:	0007883a 	mov	r3,zero
10000b34:	00803804 	movi	r2,224
10000b38:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008);
10000b3c:	00c00204 	movi	r3,8
10000b40:	00803804 	movi	r2,224
10000b44:	10c00035 	stwio	r3,0(r2)

        //data phase IN
        IOWR(CY7C67200_BASE, HPI_DATA, 0x052C); //
10000b48:	00c14b04 	movi	r3,1324
10000b4c:	00803804 	movi	r2,224
10000b50:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //
10000b54:	00c00204 	movi	r3,8
10000b58:	00803804 	movi	r2,224
10000b5c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //
10000b60:	00c0a404 	movi	r3,656
10000b64:	00803804 	movi	r2,224
10000b68:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041);
10000b6c:	00c01044 	movi	r3,65
10000b70:	00803804 	movi	r2,224
10000b74:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000b78:	00c004c4 	movi	r3,19
10000b7c:	00803804 	movi	r2,224
10000b80:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0520);
10000b84:	00c14804 	movi	r3,1312
10000b88:	00803804 	movi	r2,224
10000b8c:	10c00035 	stwio	r3,0(r2)

        //    //status phase
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10000b90:	0007883a 	mov	r3,zero
10000b94:	00803804 	movi	r2,224
10000b98:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
10000b9c:	0007883a 	mov	r3,zero
10000ba0:	00803804 	movi	r2,224
10000ba4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //device address
10000ba8:	00c08404 	movi	r3,528
10000bac:	00803804 	movi	r2,224
10000bb0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041);
10000bb4:	00c01044 	movi	r3,65
10000bb8:	00803804 	movi	r2,224
10000bbc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000bc0:	00c004c4 	movi	r3,19
10000bc4:	00803804 	movi	r2,224
10000bc8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000bcc:	0007883a 	mov	r3,zero
10000bd0:	00803804 	movi	r2,224
10000bd4:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10000bd8:	01414004 	movi	r5,1280
10000bdc:	01006c04 	movi	r4,432
10000be0:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
10000be4:	0109c404 	movi	r4,10000
10000be8:	00109680 	call	10010968 <usleep>
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr

    //usleep(10*1000);
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000bec:	00803b04 	movi	r2,236
10000bf0:	10800037 	ldwio	r2,0(r2)
10000bf4:	1080040c 	andi	r2,r2,16
10000bf8:	103fb226 	beq	r2,zero,10000ac4 <__alt_data_end+0xf8000ac4>
        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10000bfc:	01005104 	movi	r4,324
10000c00:	00003080 	call	10000308 <UsbRead>
10000c04:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10000c08:	000b883a 	mov	r5,zero
10000c0c:	01005104 	movi	r4,324
10000c10:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10000c14:	00000d06 	br	10000c4c <main+0x858>
    {
        if (usb_ctl_val == 0x000)
10000c18:	e0bff80b 	ldhu	r2,-32(fp)
10000c1c:	10000526 	beq	r2,zero,10000c34 <main+0x840>
        {
        }
        else
        {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
10000c20:	e0bff80b 	ldhu	r2,-32(fp)
10000c24:	100b883a 	mov	r5,r2
10000c28:	01040074 	movhi	r4,4097
10000c2c:	210aa704 	addi	r4,r4,10908
10000c30:	00032000 	call	10003200 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10000c34:	01005104 	movi	r4,324
10000c38:	00003080 	call	10000308 <UsbRead>
10000c3c:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
10000c40:	000b883a 	mov	r5,zero
10000c44:	01005104 	movi	r4,324
10000c48:	00002c00 	call	100002c0 <UsbWrite>
    }

    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10000c4c:	e0bff80b 	ldhu	r2,-32(fp)
10000c50:	10840018 	cmpnei	r2,r2,4096
10000c54:	103ff01e 	bne	r2,zero,10000c18 <__alt_data_end+0xf8000c18>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
10000c58:	00c14184 	movi	r3,1286
10000c5c:	00803a04 	movi	r2,232
10000c60:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
10000c64:	00803804 	movi	r2,224
10000c68:	10800037 	ldwio	r2,0(r2)
10000c6c:	100b883a 	mov	r5,r2
10000c70:	01040074 	movhi	r4,4097
10000c74:	210ad504 	addi	r4,r4,11092
10000c78:	00032000 	call	10003200 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10000c7c:	00c14204 	movi	r3,1288
10000c80:	00803a04 	movi	r2,232
10000c84:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10000c88:	00803804 	movi	r2,224
10000c8c:	10800037 	ldwio	r2,0(r2)
10000c90:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
10000c94:	e0bff80b 	ldhu	r2,-32(fp)
10000c98:	100b883a 	mov	r5,r2
10000c9c:	01040074 	movhi	r4,4097
10000ca0:	210ae004 	addi	r4,r4,11136
10000ca4:	00032000 	call	10003200 <printf>
    while (usb_ctl_val != 0x03)
10000ca8:	00001506 	br	10000d00 <main+0x90c>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
10000cac:	00803b04 	movi	r2,236
10000cb0:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10000cb4:	01005104 	movi	r4,324
10000cb8:	00003080 	call	10000308 <UsbRead>
10000cbc:	10bfffcc 	andi	r2,r2,65535
10000cc0:	10840018 	cmpnei	r2,r2,4096
10000cc4:	1000081e 	bne	r2,zero,10000ce8 <main+0x8f4>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10000cc8:	000b883a 	mov	r5,zero
10000ccc:	01005104 	movi	r4,324
10000cd0:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000cd4:	0001883a 	nop
10000cd8:	00803b04 	movi	r2,236
10000cdc:	10800037 	ldwio	r2,0(r2)
10000ce0:	1080040c 	andi	r2,r2,16
10000ce4:	103ffc26 	beq	r2,zero,10000cd8 <__alt_data_end+0xf8000cd8>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10000ce8:	00c14204 	movi	r3,1288
10000cec:	00803a04 	movi	r2,232
10000cf0:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10000cf4:	00803804 	movi	r2,224
10000cf8:	10800037 	ldwio	r2,0(r2)
10000cfc:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
10000d00:	e0bff80b 	ldhu	r2,-32(fp)
10000d04:	108000d8 	cmpnei	r2,r2,3
10000d08:	103fe81e 	bne	r2,zero,10000cac <__alt_data_end+0xf8000cac>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("---------------[ENUM PROCESS]:get device descriptor-1 pass!-----------------\n");
10000d0c:	01040074 	movhi	r4,4097
10000d10:	210aec04 	addi	r4,r4,11184
10000d14:	00032fc0 	call	100032fc <puts>

    //--------------------------------get device descriptor-1---------------------------------------------//
    //get device descriptor
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10000d18:	00c14004 	movi	r3,1280
10000d1c:	00803a04 	movi	r2,232
10000d20:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10000d24:	00c14304 	movi	r3,1292
10000d28:	00803804 	movi	r2,224
10000d2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10000d30:	00c00204 	movi	r3,8
10000d34:	00803804 	movi	r2,224
10000d38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
10000d3c:	00c0b404 	movi	r3,720
10000d40:	00803804 	movi	r2,224
10000d44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10000d48:	00c00044 	movi	r3,1
10000d4c:	00803804 	movi	r2,224
10000d50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000d54:	00c004c4 	movi	r3,19
10000d58:	00803804 	movi	r2,224
10000d5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10000d60:	00c14504 	movi	r3,1300
10000d64:	00803804 	movi	r2,224
10000d68:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
10000d6c:	00c1a004 	movi	r3,1664
10000d70:	00803804 	movi	r2,224
10000d74:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0100); //e
10000d78:	00c04004 	movi	r3,256
10000d7c:	00803804 	movi	r2,224
10000d80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10000d84:	0007883a 	mov	r3,zero
10000d88:	00803804 	movi	r2,224
10000d8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0012); //2
10000d90:	00c00484 	movi	r3,18
10000d94:	00803804 	movi	r2,224
10000d98:	10c00035 	stwio	r3,0(r2)

    //data phase IN-1
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //514
10000d9c:	00c15104 	movi	r3,1348
10000da0:	00803804 	movi	r2,224
10000da4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
10000da8:	00c00204 	movi	r3,8
10000dac:	00803804 	movi	r2,224
10000db0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10000db4:	00c0a404 	movi	r3,656
10000db8:	00803804 	movi	r2,224
10000dbc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10000dc0:	00c01044 	movi	r3,65
10000dc4:	00803804 	movi	r2,224
10000dc8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10000dcc:	00c004c4 	movi	r3,19
10000dd0:	00803804 	movi	r2,224
10000dd4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
10000dd8:	00c14804 	movi	r3,1312
10000ddc:	00803804 	movi	r2,224
10000de0:	10c00035 	stwio	r3,0(r2)

    //data phase IN-2
    IOWR(CY7C67200_BASE, HPI_DATA, 0x054c); //520
10000de4:	00c15304 	movi	r3,1356
10000de8:	00803804 	movi	r2,224
10000dec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10000df0:	00c00204 	movi	r3,8
10000df4:	00803804 	movi	r2,224
10000df8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10000dfc:	00c0a404 	movi	r3,656
10000e00:	00803804 	movi	r2,224
10000e04:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
10000e08:	00c00044 	movi	r3,1
10000e0c:	00803804 	movi	r2,224
10000e10:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10000e14:	00c004c4 	movi	r3,19
10000e18:	00803804 	movi	r2,224
10000e1c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
10000e20:	00c14b04 	movi	r3,1324
10000e24:	00803804 	movi	r2,224
10000e28:	10c00035 	stwio	r3,0(r2)

    //data phase IN-3
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0554); //c
10000e2c:	00c15504 	movi	r3,1364
10000e30:	00803804 	movi	r2,224
10000e34:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0002); //e
10000e38:	00c00084 	movi	r3,2
10000e3c:	00803804 	movi	r2,224
10000e40:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //530
10000e44:	00c0a404 	movi	r3,656
10000e48:	00803804 	movi	r2,224
10000e4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
10000e50:	00c01044 	movi	r3,65
10000e54:	00803804 	movi	r2,224
10000e58:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10000e5c:	00c004c4 	movi	r3,19
10000e60:	00803804 	movi	r2,224
10000e64:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0538); //6
10000e68:	00c14e04 	movi	r3,1336
10000e6c:	00803804 	movi	r2,224
10000e70:	10c00035 	stwio	r3,0(r2)

    //status phase
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //538
10000e74:	0007883a 	mov	r3,zero
10000e78:	00803804 	movi	r2,224
10000e7c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //a
10000e80:	0007883a 	mov	r3,zero
10000e84:	00803804 	movi	r2,224
10000e88:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //c
10000e8c:	00c08404 	movi	r3,528
10000e90:	00803804 	movi	r2,224
10000e94:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //e
10000e98:	00c01044 	movi	r3,65
10000e9c:	00803804 	movi	r2,224
10000ea0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //540
10000ea4:	00c004c4 	movi	r3,19
10000ea8:	00803804 	movi	r2,224
10000eac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //2
10000eb0:	0007883a 	mov	r3,zero
10000eb4:	00803804 	movi	r2,224
10000eb8:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10000ebc:	01414004 	movi	r5,1280
10000ec0:	01006c04 	movi	r4,432
10000ec4:	00002c00 	call	100002c0 <UsbWrite>

    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000ec8:	00006e06 	br	10001084 <main+0xc90>
    {
        //resend the get device descriptor
        //get device descriptor

        //the starting address
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10000ecc:	00c14004 	movi	r3,1280
10000ed0:	00803a04 	movi	r2,232
10000ed4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10000ed8:	00c14304 	movi	r3,1292
10000edc:	00803804 	movi	r2,224
10000ee0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10000ee4:	00c00204 	movi	r3,8
10000ee8:	00803804 	movi	r2,224
10000eec:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
10000ef0:	00c0b404 	movi	r3,720
10000ef4:	00803804 	movi	r2,224
10000ef8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10000efc:	00c00044 	movi	r3,1
10000f00:	00803804 	movi	r2,224
10000f04:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000f08:	00c004c4 	movi	r3,19
10000f0c:	00803804 	movi	r2,224
10000f10:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10000f14:	00c14504 	movi	r3,1300
10000f18:	00803804 	movi	r2,224
10000f1c:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
10000f20:	00c1a004 	movi	r3,1664
10000f24:	00803804 	movi	r2,224
10000f28:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0100); //e
10000f2c:	00c04004 	movi	r3,256
10000f30:	00803804 	movi	r2,224
10000f34:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10000f38:	0007883a 	mov	r3,zero
10000f3c:	00803804 	movi	r2,224
10000f40:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0012); //2
10000f44:	00c00484 	movi	r3,18
10000f48:	00803804 	movi	r2,224
10000f4c:	10c00035 	stwio	r3,0(r2)

        //data phase IN-1
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //514
10000f50:	00c15104 	movi	r3,1348
10000f54:	00803804 	movi	r2,224
10000f58:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
10000f5c:	00c00204 	movi	r3,8
10000f60:	00803804 	movi	r2,224
10000f64:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10000f68:	00c0a404 	movi	r3,656
10000f6c:	00803804 	movi	r2,224
10000f70:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10000f74:	00c01044 	movi	r3,65
10000f78:	00803804 	movi	r2,224
10000f7c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10000f80:	00c004c4 	movi	r3,19
10000f84:	00803804 	movi	r2,224
10000f88:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
10000f8c:	00c14804 	movi	r3,1312
10000f90:	00803804 	movi	r2,224
10000f94:	10c00035 	stwio	r3,0(r2)

        //data phase IN-2
        IOWR(CY7C67200_BASE, HPI_DATA, 0x054c); //520
10000f98:	00c15304 	movi	r3,1356
10000f9c:	00803804 	movi	r2,224
10000fa0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10000fa4:	00c00204 	movi	r3,8
10000fa8:	00803804 	movi	r2,224
10000fac:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10000fb0:	00c0a404 	movi	r3,656
10000fb4:	00803804 	movi	r2,224
10000fb8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6
10000fbc:	00c00044 	movi	r3,1
10000fc0:	00803804 	movi	r2,224
10000fc4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10000fc8:	00c004c4 	movi	r3,19
10000fcc:	00803804 	movi	r2,224
10000fd0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
10000fd4:	00c14b04 	movi	r3,1324
10000fd8:	00803804 	movi	r2,224
10000fdc:	10c00035 	stwio	r3,0(r2)

        //data phase IN-3
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0554); //c
10000fe0:	00c15504 	movi	r3,1364
10000fe4:	00803804 	movi	r2,224
10000fe8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0002); //e
10000fec:	00c00084 	movi	r3,2
10000ff0:	00803804 	movi	r2,224
10000ff4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //530
10000ff8:	00c0a404 	movi	r3,656
10000ffc:	00803804 	movi	r2,224
10001000:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
10001004:	00c01044 	movi	r3,65
10001008:	00803804 	movi	r2,224
1000100c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10001010:	00c004c4 	movi	r3,19
10001014:	00803804 	movi	r2,224
10001018:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0538); //6
1000101c:	00c14e04 	movi	r3,1336
10001020:	00803804 	movi	r2,224
10001024:	10c00035 	stwio	r3,0(r2)

        //status phase
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //538
10001028:	0007883a 	mov	r3,zero
1000102c:	00803804 	movi	r2,224
10001030:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //a
10001034:	0007883a 	mov	r3,zero
10001038:	00803804 	movi	r2,224
1000103c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //c
10001040:	00c08404 	movi	r3,528
10001044:	00803804 	movi	r2,224
10001048:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //e
1000104c:	00c01044 	movi	r3,65
10001050:	00803804 	movi	r2,224
10001054:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //540
10001058:	00c004c4 	movi	r3,19
1000105c:	00803804 	movi	r2,224
10001060:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //2
10001064:	0007883a 	mov	r3,zero
10001068:	00803804 	movi	r2,224
1000106c:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001070:	01414004 	movi	r5,1280
10001074:	01006c04 	movi	r4,432
10001078:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
1000107c:	0109c404 	movi	r4,10000
10001080:	00109680 	call	10010968 <usleep>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr

    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001084:	00803b04 	movi	r2,236
10001088:	10800037 	ldwio	r2,0(r2)
1000108c:	1080040c 	andi	r2,r2,16
10001090:	103f8e26 	beq	r2,zero,10000ecc <__alt_data_end+0xf8000ecc>
        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10001094:	01005104 	movi	r4,324
10001098:	00003080 	call	10000308 <UsbRead>
1000109c:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
100010a0:	000b883a 	mov	r5,zero
100010a4:	01005104 	movi	r4,324
100010a8:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100010ac:	00000d06 	br	100010e4 <main+0xcf0>
    {
        if (usb_ctl_val == 0x000)
100010b0:	e0bff80b 	ldhu	r2,-32(fp)
100010b4:	10000526 	beq	r2,zero,100010cc <main+0xcd8>
        {
        }
        else
        {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
100010b8:	e0bff80b 	ldhu	r2,-32(fp)
100010bc:	100b883a 	mov	r5,r2
100010c0:	01040074 	movhi	r4,4097
100010c4:	210aa704 	addi	r4,r4,10908
100010c8:	00032000 	call	10003200 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100010cc:	01005104 	movi	r4,324
100010d0:	00003080 	call	10000308 <UsbRead>
100010d4:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
100010d8:	000b883a 	mov	r5,zero
100010dc:	01005104 	movi	r4,324
100010e0:	00002c00 	call	100002c0 <UsbWrite>
    }

    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100010e4:	e0bff80b 	ldhu	r2,-32(fp)
100010e8:	10840018 	cmpnei	r2,r2,4096
100010ec:	103ff01e 	bne	r2,zero,100010b0 <__alt_data_end+0xf80010b0>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
100010f0:	00c14184 	movi	r3,1286
100010f4:	00803a04 	movi	r2,232
100010f8:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
100010fc:	00803804 	movi	r2,224
10001100:	10800037 	ldwio	r2,0(r2)
10001104:	100b883a 	mov	r5,r2
10001108:	01040074 	movhi	r4,4097
1000110c:	210ad504 	addi	r4,r4,11092
10001110:	00032000 	call	10003200 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001114:	00c14204 	movi	r3,1288
10001118:	00803a04 	movi	r2,232
1000111c:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001120:	00803804 	movi	r2,224
10001124:	10800037 	ldwio	r2,0(r2)
10001128:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
1000112c:	e0bff80b 	ldhu	r2,-32(fp)
10001130:	100b883a 	mov	r5,r2
10001134:	01040074 	movhi	r4,4097
10001138:	210ae004 	addi	r4,r4,11136
1000113c:	00032000 	call	10003200 <printf>
    while (usb_ctl_val != 0x03)
10001140:	00001506 	br	10001198 <main+0xda4>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
10001144:	00803b04 	movi	r2,236
10001148:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
1000114c:	01005104 	movi	r4,324
10001150:	00003080 	call	10000308 <UsbRead>
10001154:	10bfffcc 	andi	r2,r2,65535
10001158:	10840018 	cmpnei	r2,r2,4096
1000115c:	1000081e 	bne	r2,zero,10001180 <main+0xd8c>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001160:	000b883a 	mov	r5,zero
10001164:	01005104 	movi	r4,324
10001168:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
1000116c:	0001883a 	nop
10001170:	00803b04 	movi	r2,236
10001174:	10800037 	ldwio	r2,0(r2)
10001178:	1080040c 	andi	r2,r2,16
1000117c:	103ffc26 	beq	r2,zero,10001170 <__alt_data_end+0xf8001170>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001180:	00c14204 	movi	r3,1288
10001184:	00803a04 	movi	r2,232
10001188:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
1000118c:	00803804 	movi	r2,224
10001190:	10800037 	ldwio	r2,0(r2)
10001194:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
10001198:	e0bff80b 	ldhu	r2,-32(fp)
1000119c:	108000d8 	cmpnei	r2,r2,3
100011a0:	103fe81e 	bne	r2,zero,10001144 <__alt_data_end+0xf8001144>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("------------[ENUM PROCESS]:get device descriptor-2 pass!--------------\n");
100011a4:	01040074 	movhi	r4,4097
100011a8:	210b0004 	addi	r4,r4,11264
100011ac:	00032fc0 	call	100032fc <puts>
    //    printf("\n[ENUM PROCESS]:TD rec data8 is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

    //-----------------------------------get configuration descriptor -1 ----------------------------------//
    //usleep(1000);
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
100011b0:	00c14004 	movi	r3,1280
100011b4:	00803a04 	movi	r2,232
100011b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100011bc:	00c14304 	movi	r3,1292
100011c0:	00803804 	movi	r2,224
100011c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100011c8:	00c00204 	movi	r3,8
100011cc:	00803804 	movi	r2,224
100011d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
100011d4:	00c0b404 	movi	r3,720
100011d8:	00803804 	movi	r2,224
100011dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
100011e0:	00c00044 	movi	r3,1
100011e4:	00803804 	movi	r2,224
100011e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
100011ec:	00c004c4 	movi	r3,19
100011f0:	00803804 	movi	r2,224
100011f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
100011f8:	00c14504 	movi	r3,1300
100011fc:	00803804 	movi	r2,224
10001200:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
10001204:	00c1a004 	movi	r3,1664
10001208:	00803804 	movi	r2,224
1000120c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0200); //e
10001210:	00c08004 	movi	r3,512
10001214:	00803804 	movi	r2,224
10001218:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
1000121c:	0007883a 	mov	r3,zero
10001220:	00803804 	movi	r2,224
10001224:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0009); //2
10001228:	00c00244 	movi	r3,9
1000122c:	00803804 	movi	r2,224
10001230:	10c00035 	stwio	r3,0(r2)

    //data phase IN-1
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //514
10001234:	00c15104 	movi	r3,1348
10001238:	00803804 	movi	r2,224
1000123c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
10001240:	00c00204 	movi	r3,8
10001244:	00803804 	movi	r2,224
10001248:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
1000124c:	00c0a404 	movi	r3,656
10001250:	00803804 	movi	r2,224
10001254:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10001258:	00c01044 	movi	r3,65
1000125c:	00803804 	movi	r2,224
10001260:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10001264:	00c004c4 	movi	r3,19
10001268:	00803804 	movi	r2,224
1000126c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
10001270:	00c14804 	movi	r3,1312
10001274:	00803804 	movi	r2,224
10001278:	10c00035 	stwio	r3,0(r2)

    //data phase IN-2
    IOWR(CY7C67200_BASE, HPI_DATA, 0x054c); //520
1000127c:	00c15304 	movi	r3,1356
10001280:	00803804 	movi	r2,224
10001284:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //2
10001288:	00c00044 	movi	r3,1
1000128c:	00803804 	movi	r2,224
10001290:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10001294:	00c0a404 	movi	r3,656
10001298:	00803804 	movi	r2,224
1000129c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
100012a0:	00c00044 	movi	r3,1
100012a4:	00803804 	movi	r2,224
100012a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
100012ac:	00c004c4 	movi	r3,19
100012b0:	00803804 	movi	r2,224
100012b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
100012b8:	00c14b04 	movi	r3,1324
100012bc:	00803804 	movi	r2,224
100012c0:	10c00035 	stwio	r3,0(r2)

    //status phase
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //52c
100012c4:	0007883a 	mov	r3,zero
100012c8:	00803804 	movi	r2,224
100012cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //e
100012d0:	0007883a 	mov	r3,zero
100012d4:	00803804 	movi	r2,224
100012d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //530
100012dc:	00c08404 	movi	r3,528
100012e0:	00803804 	movi	r2,224
100012e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
100012e8:	00c01044 	movi	r3,65
100012ec:	00803804 	movi	r2,224
100012f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
100012f4:	00c004c4 	movi	r3,19
100012f8:	00803804 	movi	r2,224
100012fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6
10001300:	0007883a 	mov	r3,zero
10001304:	00803804 	movi	r2,224
10001308:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
1000130c:	01414004 	movi	r5,1280
10001310:	01006c04 	movi	r4,432
10001314:	00002c00 	call	100002c0 <UsbWrite>

    //usleep(10*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001318:	00005c06 	br	1000148c <main+0x1098>
    {
        //resend the get device descriptor
        //get device descriptor

        //the starting address
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
1000131c:	00c14004 	movi	r3,1280
10001320:	00803a04 	movi	r2,232
10001324:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10001328:	00c14304 	movi	r3,1292
1000132c:	00803804 	movi	r2,224
10001330:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10001334:	00c00204 	movi	r3,8
10001338:	00803804 	movi	r2,224
1000133c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
10001340:	00c0b404 	movi	r3,720
10001344:	00803804 	movi	r2,224
10001348:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
1000134c:	00c00044 	movi	r3,1
10001350:	00803804 	movi	r2,224
10001354:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001358:	00c004c4 	movi	r3,19
1000135c:	00803804 	movi	r2,224
10001360:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001364:	00c14504 	movi	r3,1300
10001368:	00803804 	movi	r2,224
1000136c:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
10001370:	00c1a004 	movi	r3,1664
10001374:	00803804 	movi	r2,224
10001378:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0200); //e
1000137c:	00c08004 	movi	r3,512
10001380:	00803804 	movi	r2,224
10001384:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10001388:	0007883a 	mov	r3,zero
1000138c:	00803804 	movi	r2,224
10001390:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0009); //2
10001394:	00c00244 	movi	r3,9
10001398:	00803804 	movi	r2,224
1000139c:	10c00035 	stwio	r3,0(r2)

        //data phase IN-1
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //514
100013a0:	00c15104 	movi	r3,1348
100013a4:	00803804 	movi	r2,224
100013a8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
100013ac:	00c00204 	movi	r3,8
100013b0:	00803804 	movi	r2,224
100013b4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
100013b8:	00c0a404 	movi	r3,656
100013bc:	00803804 	movi	r2,224
100013c0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
100013c4:	00c01044 	movi	r3,65
100013c8:	00803804 	movi	r2,224
100013cc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
100013d0:	00c004c4 	movi	r3,19
100013d4:	00803804 	movi	r2,224
100013d8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
100013dc:	00c14804 	movi	r3,1312
100013e0:	00803804 	movi	r2,224
100013e4:	10c00035 	stwio	r3,0(r2)

        //data phase IN-2
        IOWR(CY7C67200_BASE, HPI_DATA, 0x054c); //520
100013e8:	00c15304 	movi	r3,1356
100013ec:	00803804 	movi	r2,224
100013f0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //2
100013f4:	00c00044 	movi	r3,1
100013f8:	00803804 	movi	r2,224
100013fc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10001400:	00c0a404 	movi	r3,656
10001404:	00803804 	movi	r2,224
10001408:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
1000140c:	00c00044 	movi	r3,1
10001410:	00803804 	movi	r2,224
10001414:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10001418:	00c004c4 	movi	r3,19
1000141c:	00803804 	movi	r2,224
10001420:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
10001424:	00c14b04 	movi	r3,1324
10001428:	00803804 	movi	r2,224
1000142c:	10c00035 	stwio	r3,0(r2)

        //status phase
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //52c
10001430:	0007883a 	mov	r3,zero
10001434:	00803804 	movi	r2,224
10001438:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //e
1000143c:	0007883a 	mov	r3,zero
10001440:	00803804 	movi	r2,224
10001444:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //530
10001448:	00c08404 	movi	r3,528
1000144c:	00803804 	movi	r2,224
10001450:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
10001454:	00c01044 	movi	r3,65
10001458:	00803804 	movi	r2,224
1000145c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10001460:	00c004c4 	movi	r3,19
10001464:	00803804 	movi	r2,224
10001468:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6
1000146c:	0007883a 	mov	r3,zero
10001470:	00803804 	movi	r2,224
10001474:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001478:	01414004 	movi	r5,1280
1000147c:	01006c04 	movi	r4,432
10001480:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
10001484:	0109c404 	movi	r4,10000
10001488:	00109680 	call	10010968 <usleep>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr

    //usleep(10*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
1000148c:	00803b04 	movi	r2,236
10001490:	10800037 	ldwio	r2,0(r2)
10001494:	1080040c 	andi	r2,r2,16
10001498:	103fa026 	beq	r2,zero,1000131c <__alt_data_end+0xf800131c>

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
1000149c:	01005104 	movi	r4,324
100014a0:	00003080 	call	10000308 <UsbRead>
100014a4:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
100014a8:	000b883a 	mov	r5,zero
100014ac:	01005104 	movi	r4,324
100014b0:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100014b4:	00000d06 	br	100014ec <main+0x10f8>
    {
        if (usb_ctl_val == 0x000)
100014b8:	e0bff80b 	ldhu	r2,-32(fp)
100014bc:	10000526 	beq	r2,zero,100014d4 <main+0x10e0>
        {
        }
        else
        {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
100014c0:	e0bff80b 	ldhu	r2,-32(fp)
100014c4:	100b883a 	mov	r5,r2
100014c8:	01040074 	movhi	r4,4097
100014cc:	210aa704 	addi	r4,r4,10908
100014d0:	00032000 	call	10003200 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100014d4:	01005104 	movi	r4,324
100014d8:	00003080 	call	10000308 <UsbRead>
100014dc:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
100014e0:	000b883a 	mov	r5,zero
100014e4:	01005104 	movi	r4,324
100014e8:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100014ec:	e0bff80b 	ldhu	r2,-32(fp)
100014f0:	10840018 	cmpnei	r2,r2,4096
100014f4:	103ff01e 	bne	r2,zero,100014b8 <__alt_data_end+0xf80014b8>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
100014f8:	00c14184 	movi	r3,1286
100014fc:	00803a04 	movi	r2,232
10001500:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
10001504:	00803804 	movi	r2,224
10001508:	10800037 	ldwio	r2,0(r2)
1000150c:	100b883a 	mov	r5,r2
10001510:	01040074 	movhi	r4,4097
10001514:	210b1204 	addi	r4,r4,11336
10001518:	00032000 	call	10003200 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
1000151c:	00c14204 	movi	r3,1288
10001520:	00803a04 	movi	r2,232
10001524:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001528:	00803804 	movi	r2,224
1000152c:	10800037 	ldwio	r2,0(r2)
10001530:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n", usb_ctl_val);
10001534:	e0bff80b 	ldhu	r2,-32(fp)
10001538:	100b883a 	mov	r5,r2
1000153c:	01040074 	movhi	r4,4097
10001540:	210b1d04 	addi	r4,r4,11380
10001544:	00032000 	call	10003200 <printf>
    while (usb_ctl_val != 0x03)
10001548:	00001506 	br	100015a0 <main+0x11ac>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
1000154c:	00803b04 	movi	r2,236
10001550:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10001554:	01005104 	movi	r4,324
10001558:	00003080 	call	10000308 <UsbRead>
1000155c:	10bfffcc 	andi	r2,r2,65535
10001560:	10840018 	cmpnei	r2,r2,4096
10001564:	1000081e 	bne	r2,zero,10001588 <main+0x1194>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001568:	000b883a 	mov	r5,zero
1000156c:	01005104 	movi	r4,324
10001570:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001574:	0001883a 	nop
10001578:	00803b04 	movi	r2,236
1000157c:	10800037 	ldwio	r2,0(r2)
10001580:	1080040c 	andi	r2,r2,16
10001584:	103ffc26 	beq	r2,zero,10001578 <__alt_data_end+0xf8001578>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001588:	00c14204 	movi	r3,1288
1000158c:	00803a04 	movi	r2,232
10001590:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001594:	00803804 	movi	r2,224
10001598:	10800037 	ldwio	r2,0(r2)
1000159c:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
100015a0:	e0bff80b 	ldhu	r2,-32(fp)
100015a4:	108000d8 	cmpnei	r2,r2,3
100015a8:	103fe81e 	bne	r2,zero,1000154c <__alt_data_end+0xf800154c>
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }
    printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
100015ac:	01040074 	movhi	r4,4097
100015b0:	210b2904 	addi	r4,r4,11428
100015b4:	00032fc0 	call	100032fc <puts>

    //-----------------------------------get configuration descriptor-2------------------------------------//
    //get device descriptor
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
100015b8:	00c14004 	movi	r3,1280
100015bc:	00803a04 	movi	r2,232
100015c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100015c4:	00c14304 	movi	r3,1292
100015c8:	00803804 	movi	r2,224
100015cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100015d0:	00c00204 	movi	r3,8
100015d4:	00803804 	movi	r2,224
100015d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
100015dc:	00c0b404 	movi	r3,720
100015e0:	00803804 	movi	r2,224
100015e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
100015e8:	00c00044 	movi	r3,1
100015ec:	00803804 	movi	r2,224
100015f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
100015f4:	00c004c4 	movi	r3,19
100015f8:	00803804 	movi	r2,224
100015fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001600:	00c14504 	movi	r3,1300
10001604:	00803804 	movi	r2,224
10001608:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
1000160c:	00c1a004 	movi	r3,1664
10001610:	00803804 	movi	r2,224
10001614:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0200); //e //config
10001618:	00c08004 	movi	r3,512
1000161c:	00803804 	movi	r2,224
10001620:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10001624:	0007883a 	mov	r3,zero
10001628:	00803804 	movi	r2,224
1000162c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x00FF); //2
10001630:	00c03fc4 	movi	r3,255
10001634:	00803804 	movi	r2,224
10001638:	10c00035 	stwio	r3,0(r2)

    //data phase IN-1
    IOWR(CY7C67200_BASE, HPI_DATA, 0x055c); //514
1000163c:	00c15704 	movi	r3,1372
10001640:	00803804 	movi	r2,224
10001644:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
10001648:	00c00204 	movi	r3,8
1000164c:	00803804 	movi	r2,224
10001650:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10001654:	00c0a404 	movi	r3,656
10001658:	00803804 	movi	r2,224
1000165c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10001660:	00c01044 	movi	r3,65
10001664:	00803804 	movi	r2,224
10001668:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
1000166c:	00c004c4 	movi	r3,19
10001670:	00803804 	movi	r2,224
10001674:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
10001678:	00c14804 	movi	r3,1312
1000167c:	00803804 	movi	r2,224
10001680:	10c00035 	stwio	r3,0(r2)

    //data phase IN-2
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0564); //520
10001684:	00c15904 	movi	r3,1380
10001688:	00803804 	movi	r2,224
1000168c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10001690:	00c00204 	movi	r3,8
10001694:	00803804 	movi	r2,224
10001698:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
1000169c:	00c0a404 	movi	r3,656
100016a0:	00803804 	movi	r2,224
100016a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
100016a8:	00c00044 	movi	r3,1
100016ac:	00803804 	movi	r2,224
100016b0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
100016b4:	00c004c4 	movi	r3,19
100016b8:	00803804 	movi	r2,224
100016bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
100016c0:	00c14b04 	movi	r3,1324
100016c4:	00803804 	movi	r2,224
100016c8:	10c00035 	stwio	r3,0(r2)

    //data phase IN-3
    IOWR(CY7C67200_BASE, HPI_DATA, 0x056c); //52c
100016cc:	00c15b04 	movi	r3,1388
100016d0:	00803804 	movi	r2,224
100016d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //e
100016d8:	00c00204 	movi	r3,8
100016dc:	00803804 	movi	r2,224
100016e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //530
100016e4:	00c0a404 	movi	r3,656
100016e8:	00803804 	movi	r2,224
100016ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
100016f0:	00c01044 	movi	r3,65
100016f4:	00803804 	movi	r2,224
100016f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
100016fc:	00c004c4 	movi	r3,19
10001700:	00803804 	movi	r2,224
10001704:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0538); //6
10001708:	00c14e04 	movi	r3,1336
1000170c:	00803804 	movi	r2,224
10001710:	10c00035 	stwio	r3,0(r2)

    //data phase IN-4
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0574); //538
10001714:	00c15d04 	movi	r3,1396
10001718:	00803804 	movi	r2,224
1000171c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //a
10001720:	00c00204 	movi	r3,8
10001724:	00803804 	movi	r2,224
10001728:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //c
1000172c:	00c0a404 	movi	r3,656
10001730:	00803804 	movi	r2,224
10001734:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //e //data0
10001738:	00c00044 	movi	r3,1
1000173c:	00803804 	movi	r2,224
10001740:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //540
10001744:	00c004c4 	movi	r3,19
10001748:	00803804 	movi	r2,224
1000174c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //2
10001750:	00c15104 	movi	r3,1348
10001754:	00803804 	movi	r2,224
10001758:	10c00035 	stwio	r3,0(r2)

    //data phase IN-5
    IOWR(CY7C67200_BASE, HPI_DATA, 0x057c); //544
1000175c:	00c15f04 	movi	r3,1404
10001760:	00803804 	movi	r2,224
10001764:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0002); //6
10001768:	00c00084 	movi	r3,2
1000176c:	00803804 	movi	r2,224
10001770:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10001774:	00c0a404 	movi	r3,656
10001778:	00803804 	movi	r2,224
1000177c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a //data1
10001780:	00c01044 	movi	r3,65
10001784:	00803804 	movi	r2,224
10001788:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
1000178c:	00c004c4 	movi	r3,19
10001790:	00803804 	movi	r2,224
10001794:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0550); //e
10001798:	00c15404 	movi	r3,1360
1000179c:	00803804 	movi	r2,224
100017a0:	10c00035 	stwio	r3,0(r2)

    //status phase
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //550
100017a4:	0007883a 	mov	r3,zero
100017a8:	00803804 	movi	r2,224
100017ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //2
100017b0:	0007883a 	mov	r3,zero
100017b4:	00803804 	movi	r2,224
100017b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //4
100017bc:	00c08404 	movi	r3,528
100017c0:	00803804 	movi	r2,224
100017c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //6
100017c8:	00c01044 	movi	r3,65
100017cc:	00803804 	movi	r2,224
100017d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
100017d4:	00c004c4 	movi	r3,19
100017d8:	00803804 	movi	r2,224
100017dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //a
100017e0:	0007883a 	mov	r3,zero
100017e4:	00803804 	movi	r2,224
100017e8:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100017ec:	01414004 	movi	r5,1280
100017f0:	01006c04 	movi	r4,432
100017f4:	00002c00 	call	100002c0 <UsbWrite>

    usleep(100 * 1000);
100017f8:	010000b4 	movhi	r4,2
100017fc:	2121a804 	addi	r4,r4,-31072
10001800:	00109680 	call	10010968 <usleep>
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001804:	00009206 	br	10001a50 <main+0x165c>
    {
        //the starting address
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10001808:	00c14004 	movi	r3,1280
1000180c:	00803a04 	movi	r2,232
10001810:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10001814:	00c14304 	movi	r3,1292
10001818:	00803804 	movi	r2,224
1000181c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10001820:	00c00204 	movi	r3,8
10001824:	00803804 	movi	r2,224
10001828:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
1000182c:	00c0b404 	movi	r3,720
10001830:	00803804 	movi	r2,224
10001834:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10001838:	00c00044 	movi	r3,1
1000183c:	00803804 	movi	r2,224
10001840:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001844:	00c004c4 	movi	r3,19
10001848:	00803804 	movi	r2,224
1000184c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001850:	00c14504 	movi	r3,1300
10001854:	00803804 	movi	r2,224
10001858:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
1000185c:	00c1a004 	movi	r3,1664
10001860:	00803804 	movi	r2,224
10001864:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0200); //e //config
10001868:	00c08004 	movi	r3,512
1000186c:	00803804 	movi	r2,224
10001870:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10001874:	0007883a 	mov	r3,zero
10001878:	00803804 	movi	r2,224
1000187c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x00FF); //2
10001880:	00c03fc4 	movi	r3,255
10001884:	00803804 	movi	r2,224
10001888:	10c00035 	stwio	r3,0(r2)

        //data phase IN-1
        IOWR(CY7C67200_BASE, HPI_DATA, 0x055c); //514
1000188c:	00c15704 	movi	r3,1372
10001890:	00803804 	movi	r2,224
10001894:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
10001898:	00c00204 	movi	r3,8
1000189c:	00803804 	movi	r2,224
100018a0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
100018a4:	00c0a404 	movi	r3,656
100018a8:	00803804 	movi	r2,224
100018ac:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
100018b0:	00c01044 	movi	r3,65
100018b4:	00803804 	movi	r2,224
100018b8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
100018bc:	00c004c4 	movi	r3,19
100018c0:	00803804 	movi	r2,224
100018c4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
100018c8:	00c14804 	movi	r3,1312
100018cc:	00803804 	movi	r2,224
100018d0:	10c00035 	stwio	r3,0(r2)

        //data phase IN-2
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0564); //520
100018d4:	00c15904 	movi	r3,1380
100018d8:	00803804 	movi	r2,224
100018dc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
100018e0:	00c00204 	movi	r3,8
100018e4:	00803804 	movi	r2,224
100018e8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
100018ec:	00c0a404 	movi	r3,656
100018f0:	00803804 	movi	r2,224
100018f4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
100018f8:	00c00044 	movi	r3,1
100018fc:	00803804 	movi	r2,224
10001900:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10001904:	00c004c4 	movi	r3,19
10001908:	00803804 	movi	r2,224
1000190c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
10001910:	00c14b04 	movi	r3,1324
10001914:	00803804 	movi	r2,224
10001918:	10c00035 	stwio	r3,0(r2)

        //data phase IN-3
        IOWR(CY7C67200_BASE, HPI_DATA, 0x056c); //52c
1000191c:	00c15b04 	movi	r3,1388
10001920:	00803804 	movi	r2,224
10001924:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //e
10001928:	00c00204 	movi	r3,8
1000192c:	00803804 	movi	r2,224
10001930:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //530
10001934:	00c0a404 	movi	r3,656
10001938:	00803804 	movi	r2,224
1000193c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
10001940:	00c01044 	movi	r3,65
10001944:	00803804 	movi	r2,224
10001948:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
1000194c:	00c004c4 	movi	r3,19
10001950:	00803804 	movi	r2,224
10001954:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0538); //6
10001958:	00c14e04 	movi	r3,1336
1000195c:	00803804 	movi	r2,224
10001960:	10c00035 	stwio	r3,0(r2)

        //data phase IN-4
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0574); //538
10001964:	00c15d04 	movi	r3,1396
10001968:	00803804 	movi	r2,224
1000196c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //a
10001970:	00c00204 	movi	r3,8
10001974:	00803804 	movi	r2,224
10001978:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //c
1000197c:	00c0a404 	movi	r3,656
10001980:	00803804 	movi	r2,224
10001984:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //e //data0
10001988:	00c00044 	movi	r3,1
1000198c:	00803804 	movi	r2,224
10001990:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //540
10001994:	00c004c4 	movi	r3,19
10001998:	00803804 	movi	r2,224
1000199c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //2
100019a0:	00c15104 	movi	r3,1348
100019a4:	00803804 	movi	r2,224
100019a8:	10c00035 	stwio	r3,0(r2)

        //data phase IN-5
        IOWR(CY7C67200_BASE, HPI_DATA, 0x057c); //544
100019ac:	00c15f04 	movi	r3,1404
100019b0:	00803804 	movi	r2,224
100019b4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0002); //6
100019b8:	00c00084 	movi	r3,2
100019bc:	00803804 	movi	r2,224
100019c0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
100019c4:	00c0a404 	movi	r3,656
100019c8:	00803804 	movi	r2,224
100019cc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a //data1
100019d0:	00c01044 	movi	r3,65
100019d4:	00803804 	movi	r2,224
100019d8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
100019dc:	00c004c4 	movi	r3,19
100019e0:	00803804 	movi	r2,224
100019e4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0550); //e
100019e8:	00c15404 	movi	r3,1360
100019ec:	00803804 	movi	r2,224
100019f0:	10c00035 	stwio	r3,0(r2)

        //status phase
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //550
100019f4:	0007883a 	mov	r3,zero
100019f8:	00803804 	movi	r2,224
100019fc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //2
10001a00:	0007883a 	mov	r3,zero
10001a04:	00803804 	movi	r2,224
10001a08:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //4
10001a0c:	00c08404 	movi	r3,528
10001a10:	00803804 	movi	r2,224
10001a14:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //6
10001a18:	00c01044 	movi	r3,65
10001a1c:	00803804 	movi	r2,224
10001a20:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10001a24:	00c004c4 	movi	r3,19
10001a28:	00803804 	movi	r2,224
10001a2c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //a
10001a30:	0007883a 	mov	r3,zero
10001a34:	00803804 	movi	r2,224
10001a38:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a3c:	01414004 	movi	r5,1280
10001a40:	01006c04 	movi	r4,432
10001a44:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
10001a48:	0109c404 	movi	r4,10000
10001a4c:	00109680 	call	10010968 <usleep>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr

    usleep(100 * 1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001a50:	00803b04 	movi	r2,236
10001a54:	10800037 	ldwio	r2,0(r2)
10001a58:	1080040c 	andi	r2,r2,16
10001a5c:	103f6a26 	beq	r2,zero,10001808 <__alt_data_end+0xf8001808>

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10001a60:	01005104 	movi	r4,324
10001a64:	00003080 	call	10000308 <UsbRead>
10001a68:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001a6c:	000b883a 	mov	r5,zero
10001a70:	01005104 	movi	r4,324
10001a74:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10001a78:	00000d06 	br	10001ab0 <main+0x16bc>
    {
        if (usb_ctl_val == 0x000)
10001a7c:	e0bff80b 	ldhu	r2,-32(fp)
10001a80:	10000526 	beq	r2,zero,10001a98 <main+0x16a4>
        {
        }
        else
        {
            printf("[SIE MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
10001a84:	e0bff80b 	ldhu	r2,-32(fp)
10001a88:	100b883a 	mov	r5,r2
10001a8c:	01040074 	movhi	r4,4097
10001a90:	210b3c04 	addi	r4,r4,11504
10001a94:	00032000 	call	10003200 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10001a98:	01005104 	movi	r4,324
10001a9c:	00003080 	call	10000308 <UsbRead>
10001aa0:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001aa4:	000b883a 	mov	r5,zero
10001aa8:	01005104 	movi	r4,324
10001aac:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
    }
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10001ab0:	e0bff80b 	ldhu	r2,-32(fp)
10001ab4:	10840018 	cmpnei	r2,r2,4096
10001ab8:	103ff01e 	bne	r2,zero,10001a7c <__alt_data_end+0xf8001a7c>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
10001abc:	00c14184 	movi	r3,1286
10001ac0:	00803a04 	movi	r2,232
10001ac4:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
10001ac8:	00803804 	movi	r2,224
10001acc:	10800037 	ldwio	r2,0(r2)
10001ad0:	100b883a 	mov	r5,r2
10001ad4:	01040074 	movhi	r4,4097
10001ad8:	210b4404 	addi	r4,r4,11536
10001adc:	00032000 	call	10003200 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001ae0:	00c14204 	movi	r3,1288
10001ae4:	00803a04 	movi	r2,232
10001ae8:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001aec:	00803804 	movi	r2,224
10001af0:	10800037 	ldwio	r2,0(r2)
10001af4:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n", usb_ctl_val);
10001af8:	e0bff80b 	ldhu	r2,-32(fp)
10001afc:	100b883a 	mov	r5,r2
10001b00:	01040074 	movhi	r4,4097
10001b04:	210b4f04 	addi	r4,r4,11580
10001b08:	00032000 	call	10003200 <printf>
    while (usb_ctl_val != 0x03)
10001b0c:	00001506 	br	10001b64 <main+0x1770>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
10001b10:	00803b04 	movi	r2,236
10001b14:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10001b18:	01005104 	movi	r4,324
10001b1c:	00003080 	call	10000308 <UsbRead>
10001b20:	10bfffcc 	andi	r2,r2,65535
10001b24:	10840018 	cmpnei	r2,r2,4096
10001b28:	1000081e 	bne	r2,zero,10001b4c <main+0x1758>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001b2c:	000b883a 	mov	r5,zero
10001b30:	01005104 	movi	r4,324
10001b34:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001b38:	0001883a 	nop
10001b3c:	00803b04 	movi	r2,236
10001b40:	10800037 	ldwio	r2,0(r2)
10001b44:	1080040c 	andi	r2,r2,16
10001b48:	103ffc26 	beq	r2,zero,10001b3c <__alt_data_end+0xf8001b3c>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001b4c:	00c14204 	movi	r3,1288
10001b50:	00803a04 	movi	r2,232
10001b54:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001b58:	00803804 	movi	r2,224
10001b5c:	10800037 	ldwio	r2,0(r2)
10001b60:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
10001b64:	e0bff80b 	ldhu	r2,-32(fp)
10001b68:	108000d8 	cmpnei	r2,r2,3
10001b6c:	103fe81e 	bne	r2,zero,10001b10 <__alt_data_end+0xf8001b10>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("-----------[ENUM PROCESS]:get configuration descriptor-2 pass!------------\n");
10001b70:	01040074 	movhi	r4,4097
10001b74:	210b5b04 	addi	r4,r4,11628
10001b78:	00032fc0 	call	100032fc <puts>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x056c); //the start address
10001b7c:	00c15b04 	movi	r3,1388
10001b80:	00803a04 	movi	r2,232
10001b84:	10c00035 	stwio	r3,0(r2)

    if ((IORD(CY7C67200_BASE, HPI_DATA) & 0x0ff) == 0x02)
10001b88:	00803804 	movi	r2,224
10001b8c:	10800037 	ldwio	r2,0(r2)
10001b90:	10803fcc 	andi	r2,r2,255
10001b94:	10800098 	cmpnei	r2,r2,2
10001b98:	1000041e 	bne	r2,zero,10001bac <main+0x17b8>
    {
        printf("\n[INFO]:check TD rec data7 \n[INFO]:Mouse Detected!!!\n\n");
10001b9c:	01040074 	movhi	r4,4097
10001ba0:	210b6e04 	addi	r4,r4,11704
10001ba4:	00032fc0 	call	100032fc <puts>
10001ba8:	00000306 	br	10001bb8 <main+0x17c4>
    }
    else
    {
        printf("\n[INFO]:Mouse Not Detected!!! \n\n");
10001bac:	01040074 	movhi	r4,4097
10001bb0:	210b7c04 	addi	r4,r4,11760
10001bb4:	00032fc0 	call	100032fc <puts>
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x057a); //the start address
10001bb8:	00c15e84 	movi	r3,1402
10001bbc:	00803a04 	movi	r2,232
10001bc0:	10c00035 	stwio	r3,0(r2)

    data_size = (IORD(CY7C67200_BASE, HPI_DATA) >> 8) & 0x0ff;
10001bc4:	00803804 	movi	r2,224
10001bc8:	10800037 	ldwio	r2,0(r2)
10001bcc:	1005d23a 	srai	r2,r2,8
10001bd0:	e0bffe85 	stb	r2,-6(fp)
    printf("[ENUM PROCESS]:data packet size is %d\n", data_size);
10001bd4:	e0bffe83 	ldbu	r2,-6(fp)
10001bd8:	100b883a 	mov	r5,r2
10001bdc:	01040074 	movhi	r4,4097
10001be0:	210b8404 	addi	r4,r4,11792
10001be4:	00032000 	call	10003200 <printf>

    //------------------------------------set configuration -----------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10001be8:	00c14004 	movi	r3,1280
10001bec:	00803a04 	movi	r2,232
10001bf0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10001bf4:	00c14304 	movi	r3,1292
10001bf8:	00803804 	movi	r2,224
10001bfc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10001c00:	00c00204 	movi	r3,8
10001c04:	00803804 	movi	r2,224
10001c08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //port address
10001c0c:	00c0b404 	movi	r3,720
10001c10:	00803804 	movi	r2,224
10001c14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10001c18:	00c00044 	movi	r3,1
10001c1c:	00803804 	movi	r2,224
10001c20:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001c24:	00c004c4 	movi	r3,19
10001c28:	00803804 	movi	r2,224
10001c2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001c30:	00c14504 	movi	r3,1300
10001c34:	00803804 	movi	r2,224
10001c38:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0900);
10001c3c:	00c24004 	movi	r3,2304
10001c40:	00803804 	movi	r2,224
10001c44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //device address
10001c48:	00c00044 	movi	r3,1
10001c4c:	00803804 	movi	r2,224
10001c50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001c54:	0007883a 	mov	r3,zero
10001c58:	00803804 	movi	r2,224
10001c5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001c60:	0007883a 	mov	r3,zero
10001c64:	00803804 	movi	r2,224
10001c68:	10c00035 	stwio	r3,0(r2)
    //in packet
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10001c6c:	0007883a 	mov	r3,zero
10001c70:	00803804 	movi	r2,224
10001c74:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
10001c78:	0007883a 	mov	r3,zero
10001c7c:	00803804 	movi	r2,224
10001c80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //device address
10001c84:	00c0a404 	movi	r3,656
10001c88:	00803804 	movi	r2,224
10001c8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //data 1
10001c90:	00c01044 	movi	r3,65
10001c94:	00803804 	movi	r2,224
10001c98:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001c9c:	00c004c4 	movi	r3,19
10001ca0:	00803804 	movi	r2,224
10001ca4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001ca8:	0007883a 	mov	r3,zero
10001cac:	00803804 	movi	r2,224
10001cb0:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001cb4:	01414004 	movi	r5,1280
10001cb8:	01006c04 	movi	r4,432
10001cbc:	00002c00 	call	100002c0 <UsbWrite>
    //usleep(10*1000);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001cc0:	00003806 	br	10001da4 <main+0x19b0>
    {
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10001cc4:	00c14004 	movi	r3,1280
10001cc8:	00803a04 	movi	r2,232
10001ccc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10001cd0:	00c14304 	movi	r3,1292
10001cd4:	00803804 	movi	r2,224
10001cd8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10001cdc:	00c00204 	movi	r3,8
10001ce0:	00803804 	movi	r2,224
10001ce4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0);
10001ce8:	00c0b404 	movi	r3,720
10001cec:	00803804 	movi	r2,224
10001cf0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10001cf4:	00c00044 	movi	r3,1
10001cf8:	00803804 	movi	r2,224
10001cfc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001d00:	00c004c4 	movi	r3,19
10001d04:	00803804 	movi	r2,224
10001d08:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001d0c:	00c14504 	movi	r3,1300
10001d10:	00803804 	movi	r2,224
10001d14:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0900);
10001d18:	00c24004 	movi	r3,2304
10001d1c:	00803804 	movi	r2,224
10001d20:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //device address
10001d24:	00c00044 	movi	r3,1
10001d28:	00803804 	movi	r2,224
10001d2c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001d30:	0007883a 	mov	r3,zero
10001d34:	00803804 	movi	r2,224
10001d38:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001d3c:	0007883a 	mov	r3,zero
10001d40:	00803804 	movi	r2,224
10001d44:	10c00035 	stwio	r3,0(r2)
        //in packet
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10001d48:	0007883a 	mov	r3,zero
10001d4c:	00803804 	movi	r2,224
10001d50:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
10001d54:	0007883a 	mov	r3,zero
10001d58:	00803804 	movi	r2,224
10001d5c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //device address
10001d60:	00c0a404 	movi	r3,656
10001d64:	00803804 	movi	r2,224
10001d68:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //data 1
10001d6c:	00c01044 	movi	r3,65
10001d70:	00803804 	movi	r2,224
10001d74:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001d78:	00c004c4 	movi	r3,19
10001d7c:	00803804 	movi	r2,224
10001d80:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001d84:	0007883a 	mov	r3,zero
10001d88:	00803804 	movi	r2,224
10001d8c:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d90:	01414004 	movi	r5,1280
10001d94:	01006c04 	movi	r4,432
10001d98:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
10001d9c:	0109c404 	movi	r4,10000
10001da0:	00109680 	call	10010968 <usleep>
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001da4:	00803b04 	movi	r2,236
10001da8:	10800037 	ldwio	r2,0(r2)
10001dac:	1080040c 	andi	r2,r2,16
10001db0:	103fc426 	beq	r2,zero,10001cc4 <__alt_data_end+0xf8001cc4>

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10001db4:	01005104 	movi	r4,324
10001db8:	00003080 	call	10000308 <UsbRead>
10001dbc:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001dc0:	000b883a 	mov	r5,zero
10001dc4:	01005104 	movi	r4,324
10001dc8:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10001dcc:	00000d06 	br	10001e04 <main+0x1a10>
    {
        if (usb_ctl_val == 0x000)
10001dd0:	e0bff80b 	ldhu	r2,-32(fp)
10001dd4:	10000526 	beq	r2,zero,10001dec <main+0x19f8>
        {
        }
        else
        {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
10001dd8:	e0bff80b 	ldhu	r2,-32(fp)
10001ddc:	100b883a 	mov	r5,r2
10001de0:	01040074 	movhi	r4,4097
10001de4:	210aa704 	addi	r4,r4,10908
10001de8:	00032000 	call	10003200 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10001dec:	01005104 	movi	r4,324
10001df0:	00003080 	call	10000308 <UsbRead>
10001df4:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001df8:	000b883a 	mov	r5,zero
10001dfc:	01005104 	movi	r4,324
10001e00:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10001e04:	e0bff80b 	ldhu	r2,-32(fp)
10001e08:	10840018 	cmpnei	r2,r2,4096
10001e0c:	103ff01e 	bne	r2,zero,10001dd0 <__alt_data_end+0xf8001dd0>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
10001e10:	00c14184 	movi	r3,1286
10001e14:	00803a04 	movi	r2,232
10001e18:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
10001e1c:	00803804 	movi	r2,224
10001e20:	10800037 	ldwio	r2,0(r2)
10001e24:	100b883a 	mov	r5,r2
10001e28:	01040074 	movhi	r4,4097
10001e2c:	210b8e04 	addi	r4,r4,11832
10001e30:	00032000 	call	10003200 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001e34:	00c14204 	movi	r3,1288
10001e38:	00803a04 	movi	r2,232
10001e3c:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001e40:	00803804 	movi	r2,224
10001e44:	10800037 	ldwio	r2,0(r2)
10001e48:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n", usb_ctl_val);
10001e4c:	e0bff80b 	ldhu	r2,-32(fp)
10001e50:	100b883a 	mov	r5,r2
10001e54:	01040074 	movhi	r4,4097
10001e58:	210b9904 	addi	r4,r4,11876
10001e5c:	00032000 	call	10003200 <printf>
    while (usb_ctl_val != 0x03)
10001e60:	00001506 	br	10001eb8 <main+0x1ac4>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
10001e64:	00803b04 	movi	r2,236
10001e68:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10001e6c:	01005104 	movi	r4,324
10001e70:	00003080 	call	10000308 <UsbRead>
10001e74:	10bfffcc 	andi	r2,r2,65535
10001e78:	10840018 	cmpnei	r2,r2,4096
10001e7c:	1000081e 	bne	r2,zero,10001ea0 <main+0x1aac>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001e80:	000b883a 	mov	r5,zero
10001e84:	01005104 	movi	r4,324
10001e88:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001e8c:	0001883a 	nop
10001e90:	00803b04 	movi	r2,236
10001e94:	10800037 	ldwio	r2,0(r2)
10001e98:	1080040c 	andi	r2,r2,16
10001e9c:	103ffc26 	beq	r2,zero,10001e90 <__alt_data_end+0xf8001e90>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001ea0:	00c14204 	movi	r3,1288
10001ea4:	00803a04 	movi	r2,232
10001ea8:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001eac:	00803804 	movi	r2,224
10001eb0:	10800037 	ldwio	r2,0(r2)
10001eb4:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
10001eb8:	e0bff80b 	ldhu	r2,-32(fp)
10001ebc:	108000d8 	cmpnei	r2,r2,3
10001ec0:	103fe81e 	bne	r2,zero,10001e64 <__alt_data_end+0xf8001e64>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("------------[ENUM PROCESS]:set configuration pass!-------------------\n");
10001ec4:	01040074 	movhi	r4,4097
10001ec8:	210ba504 	addi	r4,r4,11924
10001ecc:	00032fc0 	call	100032fc <puts>

    //----------------------------------------------classe request out ------------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10001ed0:	00c14004 	movi	r3,1280
10001ed4:	00803a04 	movi	r2,232
10001ed8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10001edc:	00c14304 	movi	r3,1292
10001ee0:	00803804 	movi	r2,224
10001ee4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10001ee8:	00c00204 	movi	r3,8
10001eec:	00803804 	movi	r2,224
10001ef0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //port address
10001ef4:	00c0b404 	movi	r3,720
10001ef8:	00803804 	movi	r2,224
10001efc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10001f00:	00c00044 	movi	r3,1
10001f04:	00803804 	movi	r2,224
10001f08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001f0c:	00c004c4 	movi	r3,19
10001f10:	00803804 	movi	r2,224
10001f14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001f18:	00c14504 	movi	r3,1300
10001f1c:	00803804 	movi	r2,224
10001f20:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0A21);
10001f24:	00c28844 	movi	r3,2593
10001f28:	00803804 	movi	r2,224
10001f2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //device address
10001f30:	0007883a 	mov	r3,zero
10001f34:	00803804 	movi	r2,224
10001f38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001f3c:	0007883a 	mov	r3,zero
10001f40:	00803804 	movi	r2,224
10001f44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001f48:	0007883a 	mov	r3,zero
10001f4c:	00803804 	movi	r2,224
10001f50:	10c00035 	stwio	r3,0(r2)
    //in packet
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10001f54:	0007883a 	mov	r3,zero
10001f58:	00803804 	movi	r2,224
10001f5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number /data length
10001f60:	0007883a 	mov	r3,zero
10001f64:	00803804 	movi	r2,224
10001f68:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //device address
10001f6c:	00c0a404 	movi	r3,656
10001f70:	00803804 	movi	r2,224
10001f74:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //data 1
10001f78:	00c01044 	movi	r3,65
10001f7c:	00803804 	movi	r2,224
10001f80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001f84:	00c004c4 	movi	r3,19
10001f88:	00803804 	movi	r2,224
10001f8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001f90:	0007883a 	mov	r3,zero
10001f94:	00803804 	movi	r2,224
10001f98:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001f9c:	01414004 	movi	r5,1280
10001fa0:	01006c04 	movi	r4,432
10001fa4:	00002c00 	call	100002c0 <UsbWrite>
    //usleep(10*1000);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001fa8:	00003806 	br	1000208c <main+0x1c98>
    {
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10001fac:	00c14004 	movi	r3,1280
10001fb0:	00803a04 	movi	r2,232
10001fb4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10001fb8:	00c14304 	movi	r3,1292
10001fbc:	00803804 	movi	r2,224
10001fc0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10001fc4:	00c00204 	movi	r3,8
10001fc8:	00803804 	movi	r2,224
10001fcc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0);
10001fd0:	00c0b404 	movi	r3,720
10001fd4:	00803804 	movi	r2,224
10001fd8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10001fdc:	00c00044 	movi	r3,1
10001fe0:	00803804 	movi	r2,224
10001fe4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001fe8:	00c004c4 	movi	r3,19
10001fec:	00803804 	movi	r2,224
10001ff0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001ff4:	00c14504 	movi	r3,1300
10001ff8:	00803804 	movi	r2,224
10001ffc:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0A21);
10002000:	00c28844 	movi	r3,2593
10002004:	00803804 	movi	r2,224
10002008:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //device address
1000200c:	0007883a 	mov	r3,zero
10002010:	00803804 	movi	r2,224
10002014:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10002018:	0007883a 	mov	r3,zero
1000201c:	00803804 	movi	r2,224
10002020:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10002024:	0007883a 	mov	r3,zero
10002028:	00803804 	movi	r2,224
1000202c:	10c00035 	stwio	r3,0(r2)
        //in packet
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10002030:	0007883a 	mov	r3,zero
10002034:	00803804 	movi	r2,224
10002038:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
1000203c:	0007883a 	mov	r3,zero
10002040:	00803804 	movi	r2,224
10002044:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //device address
10002048:	00c0a404 	movi	r3,656
1000204c:	00803804 	movi	r2,224
10002050:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //data 1
10002054:	00c01044 	movi	r3,65
10002058:	00803804 	movi	r2,224
1000205c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10002060:	00c004c4 	movi	r3,19
10002064:	00803804 	movi	r2,224
10002068:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
1000206c:	0007883a 	mov	r3,zero
10002070:	00803804 	movi	r2,224
10002074:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10002078:	01414004 	movi	r5,1280
1000207c:	01006c04 	movi	r4,432
10002080:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
10002084:	0109c404 	movi	r4,10000
10002088:	00109680 	call	10010968 <usleep>
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
1000208c:	00803b04 	movi	r2,236
10002090:	10800037 	ldwio	r2,0(r2)
10002094:	1080040c 	andi	r2,r2,16
10002098:	103fc426 	beq	r2,zero,10001fac <__alt_data_end+0xf8001fac>

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
1000209c:	01005104 	movi	r4,324
100020a0:	00003080 	call	10000308 <UsbRead>
100020a4:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
100020a8:	000b883a 	mov	r5,zero
100020ac:	01005104 	movi	r4,324
100020b0:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100020b4:	00000d06 	br	100020ec <main+0x1cf8>
    {
        if (usb_ctl_val == 0x000)
100020b8:	e0bff80b 	ldhu	r2,-32(fp)
100020bc:	10000526 	beq	r2,zero,100020d4 <main+0x1ce0>
        {
        }
        else
        {
            printf("[SIE1 MSG]:SIE 1 msg reg is %x\n", usb_ctl_val);
100020c0:	e0bff80b 	ldhu	r2,-32(fp)
100020c4:	100b883a 	mov	r5,r2
100020c8:	01040074 	movhi	r4,4097
100020cc:	210bb704 	addi	r4,r4,11996
100020d0:	00032000 	call	10003200 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100020d4:	01005104 	movi	r4,324
100020d8:	00003080 	call	10000308 <UsbRead>
100020dc:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
100020e0:	000b883a 	mov	r5,zero
100020e4:	01005104 	movi	r4,324
100020e8:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100020ec:	e0bff80b 	ldhu	r2,-32(fp)
100020f0:	10840018 	cmpnei	r2,r2,4096
100020f4:	103ff01e 	bne	r2,zero,100020b8 <__alt_data_end+0xf80020b8>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
100020f8:	00c14184 	movi	r3,1286
100020fc:	00803a04 	movi	r2,232
10002100:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
10002104:	00803804 	movi	r2,224
10002108:	10800037 	ldwio	r2,0(r2)
1000210c:	100b883a 	mov	r5,r2
10002110:	01040074 	movhi	r4,4097
10002114:	210bbf04 	addi	r4,r4,12028
10002118:	00032000 	call	10003200 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
1000211c:	00c14204 	movi	r3,1288
10002120:	00803a04 	movi	r2,232
10002124:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10002128:	00803804 	movi	r2,224
1000212c:	10800037 	ldwio	r2,0(r2)
10002130:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
10002134:	e0bff80b 	ldhu	r2,-32(fp)
10002138:	100b883a 	mov	r5,r2
1000213c:	01040074 	movhi	r4,4097
10002140:	210bca04 	addi	r4,r4,12072
10002144:	00032000 	call	10003200 <printf>
    while (usb_ctl_val != 0x03)
10002148:	00001506 	br	100021a0 <main+0x1dac>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
1000214c:	00803b04 	movi	r2,236
10002150:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10002154:	01005104 	movi	r4,324
10002158:	00003080 	call	10000308 <UsbRead>
1000215c:	10bfffcc 	andi	r2,r2,65535
10002160:	10840018 	cmpnei	r2,r2,4096
10002164:	1000081e 	bne	r2,zero,10002188 <main+0x1d94>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002168:	000b883a 	mov	r5,zero
1000216c:	01005104 	movi	r4,324
10002170:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002174:	0001883a 	nop
10002178:	00803b04 	movi	r2,236
1000217c:	10800037 	ldwio	r2,0(r2)
10002180:	1080040c 	andi	r2,r2,16
10002184:	103ffc26 	beq	r2,zero,10002178 <__alt_data_end+0xf8002178>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10002188:	00c14204 	movi	r3,1288
1000218c:	00803a04 	movi	r2,232
10002190:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10002194:	00803804 	movi	r2,224
10002198:	10800037 	ldwio	r2,0(r2)
1000219c:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
100021a0:	e0bff80b 	ldhu	r2,-32(fp)
100021a4:	108000d8 	cmpnei	r2,r2,3
100021a8:	103fe81e 	bne	r2,zero,1000214c <__alt_data_end+0xf800214c>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("------------[ENUM PROCESS]:classe request out pass!-------------------\n");
100021ac:	01040074 	movhi	r4,4097
100021b0:	210bd604 	addi	r4,r4,12120
100021b4:	00032fc0 	call	100032fc <puts>

    //----------------------------------get descriptor(class 0x21) request out --------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
100021b8:	00c14004 	movi	r3,1280
100021bc:	00803a04 	movi	r2,232
100021c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100021c4:	00c14304 	movi	r3,1292
100021c8:	00803804 	movi	r2,224
100021cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100021d0:	00c00204 	movi	r3,8
100021d4:	00803804 	movi	r2,224
100021d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //port address
100021dc:	00c0b404 	movi	r3,720
100021e0:	00803804 	movi	r2,224
100021e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
100021e8:	00c00044 	movi	r3,1
100021ec:	00803804 	movi	r2,224
100021f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
100021f4:	00c004c4 	movi	r3,19
100021f8:	00803804 	movi	r2,224
100021fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10002200:	00c14504 	movi	r3,1300
10002204:	00803804 	movi	r2,224
10002208:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0681); //c
1000220c:	00c1a044 	movi	r3,1665
10002210:	00803804 	movi	r2,224
10002214:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x2100); //e //config
10002218:	00c84004 	movi	r3,8448
1000221c:	00803804 	movi	r2,224
10002220:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10002224:	0007883a 	mov	r3,zero
10002228:	00803804 	movi	r2,224
1000222c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x007B); //2
10002230:	00c01ec4 	movi	r3,123
10002234:	00803804 	movi	r2,224
10002238:	10c00035 	stwio	r3,0(r2)

    //data phase IN-1
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //514
1000223c:	00c15104 	movi	r3,1348
10002240:	00803804 	movi	r2,224
10002244:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
10002248:	00c00204 	movi	r3,8
1000224c:	00803804 	movi	r2,224
10002250:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10002254:	00c0a404 	movi	r3,656
10002258:	00803804 	movi	r2,224
1000225c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10002260:	00c01044 	movi	r3,65
10002264:	00803804 	movi	r2,224
10002268:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
1000226c:	00c004c4 	movi	r3,19
10002270:	00803804 	movi	r2,224
10002274:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
10002278:	00c14804 	movi	r3,1312
1000227c:	00803804 	movi	r2,224
10002280:	10c00035 	stwio	r3,0(r2)

    //status phase
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //52c
10002284:	0007883a 	mov	r3,zero
10002288:	00803804 	movi	r2,224
1000228c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //e
10002290:	0007883a 	mov	r3,zero
10002294:	00803804 	movi	r2,224
10002298:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //530
1000229c:	00c08404 	movi	r3,528
100022a0:	00803804 	movi	r2,224
100022a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
100022a8:	00c01044 	movi	r3,65
100022ac:	00803804 	movi	r2,224
100022b0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
100022b4:	00c004c4 	movi	r3,19
100022b8:	00803804 	movi	r2,224
100022bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6
100022c0:	0007883a 	mov	r3,zero
100022c4:	00803804 	movi	r2,224
100022c8:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100022cc:	01414004 	movi	r5,1280
100022d0:	01006c04 	movi	r4,432
100022d4:	00002c00 	call	100002c0 <UsbWrite>
    //usleep(10*1000);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
100022d8:	00004a06 	br	10002404 <main+0x2010>
    {
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
100022dc:	00c14004 	movi	r3,1280
100022e0:	00803a04 	movi	r2,232
100022e4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100022e8:	00c14304 	movi	r3,1292
100022ec:	00803804 	movi	r2,224
100022f0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100022f4:	00c00204 	movi	r3,8
100022f8:	00803804 	movi	r2,224
100022fc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //port address
10002300:	00c0b404 	movi	r3,720
10002304:	00803804 	movi	r2,224
10002308:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
1000230c:	00c00044 	movi	r3,1
10002310:	00803804 	movi	r2,224
10002314:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10002318:	00c004c4 	movi	r3,19
1000231c:	00803804 	movi	r2,224
10002320:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10002324:	00c14504 	movi	r3,1300
10002328:	00803804 	movi	r2,224
1000232c:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0681); //c
10002330:	00c1a044 	movi	r3,1665
10002334:	00803804 	movi	r2,224
10002338:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x2100); //e //config
1000233c:	00c84004 	movi	r3,8448
10002340:	00803804 	movi	r2,224
10002344:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10002348:	0007883a 	mov	r3,zero
1000234c:	00803804 	movi	r2,224
10002350:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x007B); //2
10002354:	00c01ec4 	movi	r3,123
10002358:	00803804 	movi	r2,224
1000235c:	10c00035 	stwio	r3,0(r2)

        //data phase IN-1
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //514
10002360:	00c15104 	movi	r3,1348
10002364:	00803804 	movi	r2,224
10002368:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
1000236c:	00c00204 	movi	r3,8
10002370:	00803804 	movi	r2,224
10002374:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10002378:	00c0a404 	movi	r3,656
1000237c:	00803804 	movi	r2,224
10002380:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10002384:	00c01044 	movi	r3,65
10002388:	00803804 	movi	r2,224
1000238c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10002390:	00c004c4 	movi	r3,19
10002394:	00803804 	movi	r2,224
10002398:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
1000239c:	00c14804 	movi	r3,1312
100023a0:	00803804 	movi	r2,224
100023a4:	10c00035 	stwio	r3,0(r2)

        //status phase
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //52c
100023a8:	0007883a 	mov	r3,zero
100023ac:	00803804 	movi	r2,224
100023b0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //e
100023b4:	0007883a 	mov	r3,zero
100023b8:	00803804 	movi	r2,224
100023bc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //530
100023c0:	00c08404 	movi	r3,528
100023c4:	00803804 	movi	r2,224
100023c8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
100023cc:	00c01044 	movi	r3,65
100023d0:	00803804 	movi	r2,224
100023d4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
100023d8:	00c004c4 	movi	r3,19
100023dc:	00803804 	movi	r2,224
100023e0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6
100023e4:	0007883a 	mov	r3,zero
100023e8:	00803804 	movi	r2,224
100023ec:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100023f0:	01414004 	movi	r5,1280
100023f4:	01006c04 	movi	r4,432
100023f8:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
100023fc:	0109c404 	movi	r4,10000
10002400:	00109680 	call	10010968 <usleep>
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002404:	00803b04 	movi	r2,236
10002408:	10800037 	ldwio	r2,0(r2)
1000240c:	1080040c 	andi	r2,r2,16
10002410:	103fb226 	beq	r2,zero,100022dc <__alt_data_end+0xf80022dc>

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002414:	01005104 	movi	r4,324
10002418:	00003080 	call	10000308 <UsbRead>
1000241c:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002420:	000b883a 	mov	r5,zero
10002424:	01005104 	movi	r4,324
10002428:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
1000242c:	00000d06 	br	10002464 <main+0x2070>
    {
        if (usb_ctl_val == 0x000)
10002430:	e0bff80b 	ldhu	r2,-32(fp)
10002434:	10000526 	beq	r2,zero,1000244c <main+0x2058>
        {
        }
        else
        {
            printf("[SIE MSG]:SIE 1 msg reg is %x\n", usb_ctl_val);
10002438:	e0bff80b 	ldhu	r2,-32(fp)
1000243c:	100b883a 	mov	r5,r2
10002440:	01040074 	movhi	r4,4097
10002444:	210be804 	addi	r4,r4,12192
10002448:	00032000 	call	10003200 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
1000244c:	01005104 	movi	r4,324
10002450:	00003080 	call	10000308 <UsbRead>
10002454:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002458:	000b883a 	mov	r5,zero
1000245c:	01005104 	movi	r4,324
10002460:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10002464:	e0bff80b 	ldhu	r2,-32(fp)
10002468:	10840018 	cmpnei	r2,r2,4096
1000246c:	103ff01e 	bne	r2,zero,10002430 <__alt_data_end+0xf8002430>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
10002470:	00c14184 	movi	r3,1286
10002474:	00803a04 	movi	r2,232
10002478:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
1000247c:	00803804 	movi	r2,224
10002480:	10800037 	ldwio	r2,0(r2)
10002484:	100b883a 	mov	r5,r2
10002488:	01040074 	movhi	r4,4097
1000248c:	210bbf04 	addi	r4,r4,12028
10002490:	00032000 	call	10003200 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10002494:	00c14204 	movi	r3,1288
10002498:	00803a04 	movi	r2,232
1000249c:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
100024a0:	00803804 	movi	r2,224
100024a4:	10800037 	ldwio	r2,0(r2)
100024a8:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
100024ac:	e0bff80b 	ldhu	r2,-32(fp)
100024b0:	100b883a 	mov	r5,r2
100024b4:	01040074 	movhi	r4,4097
100024b8:	210bca04 	addi	r4,r4,12072
100024bc:	00032000 	call	10003200 <printf>
    while (usb_ctl_val != 0x03)
100024c0:	00001506 	br	10002518 <main+0x2124>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
100024c4:	00803b04 	movi	r2,236
100024c8:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
100024cc:	01005104 	movi	r4,324
100024d0:	00003080 	call	10000308 <UsbRead>
100024d4:	10bfffcc 	andi	r2,r2,65535
100024d8:	10840018 	cmpnei	r2,r2,4096
100024dc:	1000081e 	bne	r2,zero,10002500 <main+0x210c>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
100024e0:	000b883a 	mov	r5,zero
100024e4:	01005104 	movi	r4,324
100024e8:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
100024ec:	0001883a 	nop
100024f0:	00803b04 	movi	r2,236
100024f4:	10800037 	ldwio	r2,0(r2)
100024f8:	1080040c 	andi	r2,r2,16
100024fc:	103ffc26 	beq	r2,zero,100024f0 <__alt_data_end+0xf80024f0>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10002500:	00c14204 	movi	r3,1288
10002504:	00803a04 	movi	r2,232
10002508:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
1000250c:	00803804 	movi	r2,224
10002510:	10800037 	ldwio	r2,0(r2)
10002514:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
10002518:	e0bff80b 	ldhu	r2,-32(fp)
1000251c:	108000d8 	cmpnei	r2,r2,3
10002520:	103fe81e 	bne	r2,zero,100024c4 <__alt_data_end+0xf80024c4>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("------------[ENUM PROCESS]:get descriptor (class 0x21) pass!-------------------\n");
10002524:	01040074 	movhi	r4,4097
10002528:	210bf004 	addi	r4,r4,12224
1000252c:	00032fc0 	call	100032fc <puts>

    //-------------------------------get descriptor (class 0x22)-------------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10002530:	00c14004 	movi	r3,1280
10002534:	00803a04 	movi	r2,232
10002538:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
1000253c:	00c14304 	movi	r3,1292
10002540:	00803804 	movi	r2,224
10002544:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10002548:	00c00204 	movi	r3,8
1000254c:	00803804 	movi	r2,224
10002550:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
10002554:	00c0b404 	movi	r3,720
10002558:	00803804 	movi	r2,224
1000255c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10002560:	00c00044 	movi	r3,1
10002564:	00803804 	movi	r2,224
10002568:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
1000256c:	00c004c4 	movi	r3,19
10002570:	00803804 	movi	r2,224
10002574:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10002578:	00c14504 	movi	r3,1300
1000257c:	00803804 	movi	r2,224
10002580:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0681); //c
10002584:	00c1a044 	movi	r3,1665
10002588:	00803804 	movi	r2,224
1000258c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x2200); //e //config
10002590:	00c88004 	movi	r3,8704
10002594:	00803804 	movi	r2,224
10002598:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
1000259c:	0007883a 	mov	r3,zero
100025a0:	00803804 	movi	r2,224
100025a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x007B); //2
100025a8:	00c01ec4 	movi	r3,123
100025ac:	00803804 	movi	r2,224
100025b0:	10c00035 	stwio	r3,0(r2)

    //data phase IN-1
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0580); //514
100025b4:	00c16004 	movi	r3,1408
100025b8:	00803804 	movi	r2,224
100025bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
100025c0:	00c00204 	movi	r3,8
100025c4:	00803804 	movi	r2,224
100025c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
100025cc:	00c0a404 	movi	r3,656
100025d0:	00803804 	movi	r2,224
100025d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
100025d8:	00c01044 	movi	r3,65
100025dc:	00803804 	movi	r2,224
100025e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
100025e4:	00c004c4 	movi	r3,19
100025e8:	00803804 	movi	r2,224
100025ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
100025f0:	00c14804 	movi	r3,1312
100025f4:	00803804 	movi	r2,224
100025f8:	10c00035 	stwio	r3,0(r2)

    //data phase IN-2
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0588); //520
100025fc:	00c16204 	movi	r3,1416
10002600:	00803804 	movi	r2,224
10002604:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10002608:	00c00204 	movi	r3,8
1000260c:	00803804 	movi	r2,224
10002610:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10002614:	00c0a404 	movi	r3,656
10002618:	00803804 	movi	r2,224
1000261c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
10002620:	00c00044 	movi	r3,1
10002624:	00803804 	movi	r2,224
10002628:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
1000262c:	00c004c4 	movi	r3,19
10002630:	00803804 	movi	r2,224
10002634:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
10002638:	00c14b04 	movi	r3,1324
1000263c:	00803804 	movi	r2,224
10002640:	10c00035 	stwio	r3,0(r2)

    //data phase IN-3
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0590); //52c
10002644:	00c16404 	movi	r3,1424
10002648:	00803804 	movi	r2,224
1000264c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //e
10002650:	00c00204 	movi	r3,8
10002654:	00803804 	movi	r2,224
10002658:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //530
1000265c:	00c0a404 	movi	r3,656
10002660:	00803804 	movi	r2,224
10002664:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
10002668:	00c01044 	movi	r3,65
1000266c:	00803804 	movi	r2,224
10002670:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10002674:	00c004c4 	movi	r3,19
10002678:	00803804 	movi	r2,224
1000267c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0538); //6
10002680:	00c14e04 	movi	r3,1336
10002684:	00803804 	movi	r2,224
10002688:	10c00035 	stwio	r3,0(r2)

    //data phase IN-4
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0598); //538
1000268c:	00c16604 	movi	r3,1432
10002690:	00803804 	movi	r2,224
10002694:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //a
10002698:	00c00204 	movi	r3,8
1000269c:	00803804 	movi	r2,224
100026a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //c
100026a4:	00c0a404 	movi	r3,656
100026a8:	00803804 	movi	r2,224
100026ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //e //data0
100026b0:	00c00044 	movi	r3,1
100026b4:	00803804 	movi	r2,224
100026b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //540
100026bc:	00c004c4 	movi	r3,19
100026c0:	00803804 	movi	r2,224
100026c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //2
100026c8:	00c15104 	movi	r3,1348
100026cc:	00803804 	movi	r2,224
100026d0:	10c00035 	stwio	r3,0(r2)

    //data phase IN-5
    IOWR(CY7C67200_BASE, HPI_DATA, 0x05a0); //544
100026d4:	00c16804 	movi	r3,1440
100026d8:	00803804 	movi	r2,224
100026dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
100026e0:	00c00204 	movi	r3,8
100026e4:	00803804 	movi	r2,224
100026e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
100026ec:	00c0a404 	movi	r3,656
100026f0:	00803804 	movi	r2,224
100026f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a //data1
100026f8:	00c01044 	movi	r3,65
100026fc:	00803804 	movi	r2,224
10002700:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10002704:	00c004c4 	movi	r3,19
10002708:	00803804 	movi	r2,224
1000270c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0550); //e
10002710:	00c15404 	movi	r3,1360
10002714:	00803804 	movi	r2,224
10002718:	10c00035 	stwio	r3,0(r2)

    //data phase IN-6
    IOWR(CY7C67200_BASE, HPI_DATA, 0x05a8); //550
1000271c:	00c16a04 	movi	r3,1448
10002720:	00803804 	movi	r2,224
10002724:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10002728:	00c00204 	movi	r3,8
1000272c:	00803804 	movi	r2,224
10002730:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10002734:	00c0a404 	movi	r3,656
10002738:	00803804 	movi	r2,224
1000273c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
10002740:	00c00044 	movi	r3,1
10002744:	00803804 	movi	r2,224
10002748:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
1000274c:	00c004c4 	movi	r3,19
10002750:	00803804 	movi	r2,224
10002754:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x055c); //a
10002758:	00c15704 	movi	r3,1372
1000275c:	00803804 	movi	r2,224
10002760:	10c00035 	stwio	r3,0(r2)

    //data phase IN-7
    IOWR(CY7C67200_BASE, HPI_DATA, 0x05b0); //c
10002764:	00c16c04 	movi	r3,1456
10002768:	00803804 	movi	r2,224
1000276c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //e
10002770:	00c00204 	movi	r3,8
10002774:	00803804 	movi	r2,224
10002778:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //560
1000277c:	00c0a404 	movi	r3,656
10002780:	00803804 	movi	r2,224
10002784:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2 //data1
10002788:	00c01044 	movi	r3,65
1000278c:	00803804 	movi	r2,224
10002790:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10002794:	00c004c4 	movi	r3,19
10002798:	00803804 	movi	r2,224
1000279c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0568); //6
100027a0:	00c15a04 	movi	r3,1384
100027a4:	00803804 	movi	r2,224
100027a8:	10c00035 	stwio	r3,0(r2)

    //data phase IN-8
    IOWR(CY7C67200_BASE, HPI_DATA, 0x05b8); //8
100027ac:	00c16e04 	movi	r3,1464
100027b0:	00803804 	movi	r2,224
100027b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0003); //a
100027b8:	00c000c4 	movi	r3,3
100027bc:	00803804 	movi	r2,224
100027c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //c
100027c4:	00c0a404 	movi	r3,656
100027c8:	00803804 	movi	r2,224
100027cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //e //data0
100027d0:	00c00044 	movi	r3,1
100027d4:	00803804 	movi	r2,224
100027d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //570
100027dc:	00c004c4 	movi	r3,19
100027e0:	00803804 	movi	r2,224
100027e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0574); //2
100027e8:	00c15d04 	movi	r3,1396
100027ec:	00803804 	movi	r2,224
100027f0:	10c00035 	stwio	r3,0(r2)

    //status phase
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //574
100027f4:	0007883a 	mov	r3,zero
100027f8:	00803804 	movi	r2,224
100027fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6
10002800:	0007883a 	mov	r3,zero
10002804:	00803804 	movi	r2,224
10002808:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //8
1000280c:	00c08404 	movi	r3,528
10002810:	00803804 	movi	r2,224
10002814:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10002818:	00c01044 	movi	r3,65
1000281c:	00803804 	movi	r2,224
10002820:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10002824:	00c004c4 	movi	r3,19
10002828:	00803804 	movi	r2,224
1000282c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //e
10002830:	0007883a 	mov	r3,zero
10002834:	00803804 	movi	r2,224
10002838:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
1000283c:	01414004 	movi	r5,1280
10002840:	01006c04 	movi	r4,432
10002844:	00002c00 	call	100002c0 <UsbWrite>

    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002848:	0000c806 	br	10002b6c <main+0x2778>
    {
        //the starting address
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
1000284c:	00c14004 	movi	r3,1280
10002850:	00803a04 	movi	r2,232
10002854:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10002858:	00c14304 	movi	r3,1292
1000285c:	00803804 	movi	r2,224
10002860:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10002864:	00c00204 	movi	r3,8
10002868:	00803804 	movi	r2,224
1000286c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
10002870:	00c0b404 	movi	r3,720
10002874:	00803804 	movi	r2,224
10002878:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
1000287c:	00c00044 	movi	r3,1
10002880:	00803804 	movi	r2,224
10002884:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10002888:	00c004c4 	movi	r3,19
1000288c:	00803804 	movi	r2,224
10002890:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10002894:	00c14504 	movi	r3,1300
10002898:	00803804 	movi	r2,224
1000289c:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0681); //c
100028a0:	00c1a044 	movi	r3,1665
100028a4:	00803804 	movi	r2,224
100028a8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x2200); //e //config
100028ac:	00c88004 	movi	r3,8704
100028b0:	00803804 	movi	r2,224
100028b4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
100028b8:	0007883a 	mov	r3,zero
100028bc:	00803804 	movi	r2,224
100028c0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x007B); //2
100028c4:	00c01ec4 	movi	r3,123
100028c8:	00803804 	movi	r2,224
100028cc:	10c00035 	stwio	r3,0(r2)

        //data phase IN-1
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0580); //514
100028d0:	00c16004 	movi	r3,1408
100028d4:	00803804 	movi	r2,224
100028d8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
100028dc:	00c00204 	movi	r3,8
100028e0:	00803804 	movi	r2,224
100028e4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
100028e8:	00c0a404 	movi	r3,656
100028ec:	00803804 	movi	r2,224
100028f0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
100028f4:	00c01044 	movi	r3,65
100028f8:	00803804 	movi	r2,224
100028fc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10002900:	00c004c4 	movi	r3,19
10002904:	00803804 	movi	r2,224
10002908:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
1000290c:	00c14804 	movi	r3,1312
10002910:	00803804 	movi	r2,224
10002914:	10c00035 	stwio	r3,0(r2)

        //data phase IN-2
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0588); //520
10002918:	00c16204 	movi	r3,1416
1000291c:	00803804 	movi	r2,224
10002920:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10002924:	00c00204 	movi	r3,8
10002928:	00803804 	movi	r2,224
1000292c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10002930:	00c0a404 	movi	r3,656
10002934:	00803804 	movi	r2,224
10002938:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
1000293c:	00c00044 	movi	r3,1
10002940:	00803804 	movi	r2,224
10002944:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10002948:	00c004c4 	movi	r3,19
1000294c:	00803804 	movi	r2,224
10002950:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
10002954:	00c14b04 	movi	r3,1324
10002958:	00803804 	movi	r2,224
1000295c:	10c00035 	stwio	r3,0(r2)

        //data phase IN-3
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0590); //52c
10002960:	00c16404 	movi	r3,1424
10002964:	00803804 	movi	r2,224
10002968:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //e
1000296c:	00c00204 	movi	r3,8
10002970:	00803804 	movi	r2,224
10002974:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //530
10002978:	00c0a404 	movi	r3,656
1000297c:	00803804 	movi	r2,224
10002980:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
10002984:	00c01044 	movi	r3,65
10002988:	00803804 	movi	r2,224
1000298c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10002990:	00c004c4 	movi	r3,19
10002994:	00803804 	movi	r2,224
10002998:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0538); //6
1000299c:	00c14e04 	movi	r3,1336
100029a0:	00803804 	movi	r2,224
100029a4:	10c00035 	stwio	r3,0(r2)

        //data phase IN-4
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0598); //538
100029a8:	00c16604 	movi	r3,1432
100029ac:	00803804 	movi	r2,224
100029b0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //a
100029b4:	00c00204 	movi	r3,8
100029b8:	00803804 	movi	r2,224
100029bc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //c
100029c0:	00c0a404 	movi	r3,656
100029c4:	00803804 	movi	r2,224
100029c8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //e //data0
100029cc:	00c00044 	movi	r3,1
100029d0:	00803804 	movi	r2,224
100029d4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //540
100029d8:	00c004c4 	movi	r3,19
100029dc:	00803804 	movi	r2,224
100029e0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //2
100029e4:	00c15104 	movi	r3,1348
100029e8:	00803804 	movi	r2,224
100029ec:	10c00035 	stwio	r3,0(r2)

        //data phase IN-5
        IOWR(CY7C67200_BASE, HPI_DATA, 0x05a0); //544
100029f0:	00c16804 	movi	r3,1440
100029f4:	00803804 	movi	r2,224
100029f8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
100029fc:	00c00204 	movi	r3,8
10002a00:	00803804 	movi	r2,224
10002a04:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10002a08:	00c0a404 	movi	r3,656
10002a0c:	00803804 	movi	r2,224
10002a10:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a //data1
10002a14:	00c01044 	movi	r3,65
10002a18:	00803804 	movi	r2,224
10002a1c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10002a20:	00c004c4 	movi	r3,19
10002a24:	00803804 	movi	r2,224
10002a28:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0550); //e
10002a2c:	00c15404 	movi	r3,1360
10002a30:	00803804 	movi	r2,224
10002a34:	10c00035 	stwio	r3,0(r2)

        //data phase IN-6
        IOWR(CY7C67200_BASE, HPI_DATA, 0x05a8); //550
10002a38:	00c16a04 	movi	r3,1448
10002a3c:	00803804 	movi	r2,224
10002a40:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10002a44:	00c00204 	movi	r3,8
10002a48:	00803804 	movi	r2,224
10002a4c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10002a50:	00c0a404 	movi	r3,656
10002a54:	00803804 	movi	r2,224
10002a58:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
10002a5c:	00c00044 	movi	r3,1
10002a60:	00803804 	movi	r2,224
10002a64:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10002a68:	00c004c4 	movi	r3,19
10002a6c:	00803804 	movi	r2,224
10002a70:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x055c); //a
10002a74:	00c15704 	movi	r3,1372
10002a78:	00803804 	movi	r2,224
10002a7c:	10c00035 	stwio	r3,0(r2)

        //data phase IN-7
        IOWR(CY7C67200_BASE, HPI_DATA, 0x05b0); //c
10002a80:	00c16c04 	movi	r3,1456
10002a84:	00803804 	movi	r2,224
10002a88:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //e
10002a8c:	00c00204 	movi	r3,8
10002a90:	00803804 	movi	r2,224
10002a94:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //560
10002a98:	00c0a404 	movi	r3,656
10002a9c:	00803804 	movi	r2,224
10002aa0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2 //data1
10002aa4:	00c01044 	movi	r3,65
10002aa8:	00803804 	movi	r2,224
10002aac:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10002ab0:	00c004c4 	movi	r3,19
10002ab4:	00803804 	movi	r2,224
10002ab8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0568); //6
10002abc:	00c15a04 	movi	r3,1384
10002ac0:	00803804 	movi	r2,224
10002ac4:	10c00035 	stwio	r3,0(r2)

        //data phase IN-8
        IOWR(CY7C67200_BASE, HPI_DATA, 0x05b8); //8
10002ac8:	00c16e04 	movi	r3,1464
10002acc:	00803804 	movi	r2,224
10002ad0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0003); //a
10002ad4:	00c000c4 	movi	r3,3
10002ad8:	00803804 	movi	r2,224
10002adc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //c
10002ae0:	00c0a404 	movi	r3,656
10002ae4:	00803804 	movi	r2,224
10002ae8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //e //data1
10002aec:	00c00044 	movi	r3,1
10002af0:	00803804 	movi	r2,224
10002af4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //570
10002af8:	00c004c4 	movi	r3,19
10002afc:	00803804 	movi	r2,224
10002b00:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0574); //2
10002b04:	00c15d04 	movi	r3,1396
10002b08:	00803804 	movi	r2,224
10002b0c:	10c00035 	stwio	r3,0(r2)

        //status phase
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //574
10002b10:	0007883a 	mov	r3,zero
10002b14:	00803804 	movi	r2,224
10002b18:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6
10002b1c:	0007883a 	mov	r3,zero
10002b20:	00803804 	movi	r2,224
10002b24:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //8
10002b28:	00c08404 	movi	r3,528
10002b2c:	00803804 	movi	r2,224
10002b30:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10002b34:	00c01044 	movi	r3,65
10002b38:	00803804 	movi	r2,224
10002b3c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10002b40:	00c004c4 	movi	r3,19
10002b44:	00803804 	movi	r2,224
10002b48:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //e
10002b4c:	0007883a 	mov	r3,zero
10002b50:	00803804 	movi	r2,224
10002b54:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10002b58:	01414004 	movi	r5,1280
10002b5c:	01006c04 	movi	r4,432
10002b60:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
10002b64:	0109c404 	movi	r4,10000
10002b68:	00109680 	call	10010968 <usleep>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr

    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002b6c:	00803b04 	movi	r2,236
10002b70:	10800037 	ldwio	r2,0(r2)
10002b74:	1080040c 	andi	r2,r2,16
10002b78:	103f3426 	beq	r2,zero,1000284c <__alt_data_end+0xf800284c>

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002b7c:	01005104 	movi	r4,324
10002b80:	00003080 	call	10000308 <UsbRead>
10002b84:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002b88:	000b883a 	mov	r5,zero
10002b8c:	01005104 	movi	r4,324
10002b90:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10002b94:	00000d06 	br	10002bcc <main+0x27d8>
    {
        if (usb_ctl_val == 0x000)
10002b98:	e0bff80b 	ldhu	r2,-32(fp)
10002b9c:	10000526 	beq	r2,zero,10002bb4 <main+0x27c0>
        {
        }
        else
        {
            printf("[SIE1 MSG]: SIE 1 msg reg is %x\n", usb_ctl_val);
10002ba0:	e0bff80b 	ldhu	r2,-32(fp)
10002ba4:	100b883a 	mov	r5,r2
10002ba8:	01040074 	movhi	r4,4097
10002bac:	210c0404 	addi	r4,r4,12304
10002bb0:	00032000 	call	10003200 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002bb4:	01005104 	movi	r4,324
10002bb8:	00003080 	call	10000308 <UsbRead>
10002bbc:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002bc0:	000b883a 	mov	r5,zero
10002bc4:	01005104 	movi	r4,324
10002bc8:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10002bcc:	e0bff80b 	ldhu	r2,-32(fp)
10002bd0:	10840018 	cmpnei	r2,r2,4096
10002bd4:	103ff01e 	bne	r2,zero,10002b98 <__alt_data_end+0xf8002b98>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
10002bd8:	00c14184 	movi	r3,1286
10002bdc:	00803a04 	movi	r2,232
10002be0:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
10002be4:	00803804 	movi	r2,224
10002be8:	10800037 	ldwio	r2,0(r2)
10002bec:	100b883a 	mov	r5,r2
10002bf0:	01040074 	movhi	r4,4097
10002bf4:	210c0d04 	addi	r4,r4,12340
10002bf8:	00032000 	call	10003200 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10002bfc:	00c14204 	movi	r3,1288
10002c00:	00803a04 	movi	r2,232
10002c04:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10002c08:	00803804 	movi	r2,224
10002c0c:	10800037 	ldwio	r2,0(r2)
10002c10:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n", usb_ctl_val);
10002c14:	e0bff80b 	ldhu	r2,-32(fp)
10002c18:	100b883a 	mov	r5,r2
10002c1c:	01040074 	movhi	r4,4097
10002c20:	210c1904 	addi	r4,r4,12388
10002c24:	00032000 	call	10003200 <printf>
    while (usb_ctl_val != 0x03)
10002c28:	00001506 	br	10002c80 <main+0x288c>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
10002c2c:	00803b04 	movi	r2,236
10002c30:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10002c34:	01005104 	movi	r4,324
10002c38:	00003080 	call	10000308 <UsbRead>
10002c3c:	10bfffcc 	andi	r2,r2,65535
10002c40:	10840018 	cmpnei	r2,r2,4096
10002c44:	1000081e 	bne	r2,zero,10002c68 <main+0x2874>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002c48:	000b883a 	mov	r5,zero
10002c4c:	01005104 	movi	r4,324
10002c50:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002c54:	0001883a 	nop
10002c58:	00803b04 	movi	r2,236
10002c5c:	10800037 	ldwio	r2,0(r2)
10002c60:	1080040c 	andi	r2,r2,16
10002c64:	103ffc26 	beq	r2,zero,10002c58 <__alt_data_end+0xf8002c58>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10002c68:	00c14204 	movi	r3,1288
10002c6c:	00803a04 	movi	r2,232
10002c70:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10002c74:	00803804 	movi	r2,224
10002c78:	10800037 	ldwio	r2,0(r2)
10002c7c:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
10002c80:	e0bff80b 	ldhu	r2,-32(fp)
10002c84:	108000d8 	cmpnei	r2,r2,3
10002c88:	103fe81e 	bne	r2,zero,10002c2c <__alt_data_end+0xf8002c2c>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) pass!----------------\n");
10002c8c:	01040074 	movhi	r4,4097
10002c90:	210c2504 	addi	r4,r4,12436
10002c94:	00032fc0 	call	100032fc <puts>

    //-----------------------------------get mouse x y button value------------------------------------------------//
    usleep(10000);
10002c98:	0109c404 	movi	r4,10000
10002c9c:	00109680 	call	10010968 <usleep>
    while (1)
    {
        toggle++;
10002ca0:	e0bffbc3 	ldbu	r2,-17(fp)
10002ca4:	10800044 	addi	r2,r2,1
10002ca8:	e0bffbc5 	stb	r2,-17(fp)
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10002cac:	00c14004 	movi	r3,1280
10002cb0:	00803a04 	movi	r2,232
10002cb4:	10c00035 	stwio	r3,0(r2)
        //data phase IN-1
        IOWR(CY7C67200_BASE, HPI_DATA, 0x051c); //500
10002cb8:	00c14704 	movi	r3,1308
10002cbc:	00803804 	movi	r2,224
10002cc0:	10c00035 	stwio	r3,0(r2)
        if (data_size == 8)
10002cc4:	e0bffe83 	ldbu	r2,-6(fp)
10002cc8:	10800218 	cmpnei	r2,r2,8
10002ccc:	1000041e 	bne	r2,zero,10002ce0 <main+0x28ec>
        {
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0006); //2 data length
10002cd0:	00c00184 	movi	r3,6
10002cd4:	00803804 	movi	r2,224
10002cd8:	10c00035 	stwio	r3,0(r2)
10002cdc:	00000406 	br	10002cf0 <main+0x28fc>
        }
        else
        {
            IOWR(CY7C67200_BASE, HPI_DATA, 0x000f & data_size); //2 data length
10002ce0:	e0bffe83 	ldbu	r2,-6(fp)
10002ce4:	10c003cc 	andi	r3,r2,15
10002ce8:	00803804 	movi	r2,224
10002cec:	10c00035 	stwio	r3,0(r2)
        }
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0291); //4 //endpoint 1
10002cf0:	00c0a444 	movi	r3,657
10002cf4:	00803804 	movi	r2,224
10002cf8:	10c00035 	stwio	r3,0(r2)
        if (toggle % 2)
10002cfc:	e0bffbc3 	ldbu	r2,-17(fp)
10002d00:	1080004c 	andi	r2,r2,1
10002d04:	10803fcc 	andi	r2,r2,255
10002d08:	10000426 	beq	r2,zero,10002d1c <main+0x2928>
        {
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data 1
10002d0c:	00c00044 	movi	r3,1
10002d10:	00803804 	movi	r2,224
10002d14:	10c00035 	stwio	r3,0(r2)
10002d18:	00000306 	br	10002d28 <main+0x2934>
        }
        else
        {
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //6 //data 1
10002d1c:	00c01044 	movi	r3,65
10002d20:	00803804 	movi	r2,224
10002d24:	10c00035 	stwio	r3,0(r2)
        }
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);    //8
10002d28:	00c004c4 	movi	r3,19
10002d2c:	00803804 	movi	r2,224
10002d30:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);    //a
10002d34:	0007883a 	mov	r3,zero
10002d38:	00803804 	movi	r2,224
10002d3c:	10c00035 	stwio	r3,0(r2)
        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10002d40:	01414004 	movi	r5,1280
10002d44:	01006c04 	movi	r4,432
10002d48:	00002c00 	call	100002c0 <UsbWrite>
        //usleep(10*1000);
        while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002d4c:	00002a06 	br	10002df8 <main+0x2a04>
        {
            IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10002d50:	00c14004 	movi	r3,1280
10002d54:	00803a04 	movi	r2,232
10002d58:	10c00035 	stwio	r3,0(r2)
            //data phase IN-1
            IOWR(CY7C67200_BASE, HPI_DATA, 0x051c); //500
10002d5c:	00c14704 	movi	r3,1308
10002d60:	00803804 	movi	r2,224
10002d64:	10c00035 	stwio	r3,0(r2)
            if (data_size == 8)
10002d68:	e0bffe83 	ldbu	r2,-6(fp)
10002d6c:	10800218 	cmpnei	r2,r2,8
10002d70:	1000041e 	bne	r2,zero,10002d84 <main+0x2990>
            {
                IOWR(CY7C67200_BASE, HPI_DATA, 0x0006); //2 data length
10002d74:	00c00184 	movi	r3,6
10002d78:	00803804 	movi	r2,224
10002d7c:	10c00035 	stwio	r3,0(r2)
10002d80:	00000406 	br	10002d94 <main+0x29a0>
            }
            else
            {
                IOWR(CY7C67200_BASE, HPI_DATA, 0x000f & data_size); //2 data length
10002d84:	e0bffe83 	ldbu	r2,-6(fp)
10002d88:	10c003cc 	andi	r3,r2,15
10002d8c:	00803804 	movi	r2,224
10002d90:	10c00035 	stwio	r3,0(r2)
            }
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0291); //4 //endpoint 1
10002d94:	00c0a444 	movi	r3,657
10002d98:	00803804 	movi	r2,224
10002d9c:	10c00035 	stwio	r3,0(r2)
            if (toggle % 2)
10002da0:	e0bffbc3 	ldbu	r2,-17(fp)
10002da4:	1080004c 	andi	r2,r2,1
10002da8:	10803fcc 	andi	r2,r2,255
10002dac:	10000426 	beq	r2,zero,10002dc0 <main+0x29cc>
            {
                IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data 1
10002db0:	00c00044 	movi	r3,1
10002db4:	00803804 	movi	r2,224
10002db8:	10c00035 	stwio	r3,0(r2)
10002dbc:	00000306 	br	10002dcc <main+0x29d8>
            }
            else
            {
                IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //6 //data 1
10002dc0:	00c01044 	movi	r3,65
10002dc4:	00803804 	movi	r2,224
10002dc8:	10c00035 	stwio	r3,0(r2)
            }
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);    //8
10002dcc:	00c004c4 	movi	r3,19
10002dd0:	00803804 	movi	r2,224
10002dd4:	10c00035 	stwio	r3,0(r2)
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);    //a
10002dd8:	0007883a 	mov	r3,zero
10002ddc:	00803804 	movi	r2,224
10002de0:	10c00035 	stwio	r3,0(r2)
            UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10002de4:	01414004 	movi	r5,1280
10002de8:	01006c04 	movi	r4,432
10002dec:	00002c00 	call	100002c0 <UsbWrite>
            usleep(10 * 1000);
10002df0:	0109c404 	movi	r4,10000
10002df4:	00109680 	call	10010968 <usleep>
        }
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);    //8
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);    //a
        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        //usleep(10*1000);
        while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002df8:	00803b04 	movi	r2,236
10002dfc:	10800037 	ldwio	r2,0(r2)
10002e00:	1080040c 	andi	r2,r2,16
10002e04:	103fd226 	beq	r2,zero,10002d50 <__alt_data_end+0xf8002d50>
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);    //8
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);    //a
            UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
            usleep(10 * 1000);
        } //end while
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002e08:	01005104 	movi	r4,324
10002e0c:	00003080 	call	10000308 <UsbRead>
10002e10:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002e14:	000b883a 	mov	r5,zero
10002e18:	01005104 	movi	r4,324
10002e1c:	00002c00 	call	100002c0 <UsbWrite>
        while (usb_ctl_val != 0x1000) //read sie1 msg register
10002e20:	00000d06 	br	10002e58 <main+0x2a64>
        {
            if (usb_ctl_val == 0x000)
10002e24:	e0bff80b 	ldhu	r2,-32(fp)
10002e28:	10000526 	beq	r2,zero,10002e40 <main+0x2a4c>
            {
            }
            else
            {
                printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
10002e2c:	e0bff80b 	ldhu	r2,-32(fp)
10002e30:	100b883a 	mov	r5,r2
10002e34:	01040074 	movhi	r4,4097
10002e38:	210aa704 	addi	r4,r4,10908
10002e3c:	00032000 	call	10003200 <printf>
            }
            usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002e40:	01005104 	movi	r4,324
10002e44:	00003080 	call	10000308 <UsbRead>
10002e48:	e0bff80d 	sth	r2,-32(fp)
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002e4c:	000b883a 	mov	r5,zero
10002e50:	01005104 	movi	r4,324
10002e54:	00002c00 	call	100002c0 <UsbWrite>
            UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
            usleep(10 * 1000);
        } //end while
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
        while (usb_ctl_val != 0x1000) //read sie1 msg register
10002e58:	e0bff80b 	ldhu	r2,-32(fp)
10002e5c:	10840018 	cmpnei	r2,r2,4096
10002e60:	103ff01e 	bne	r2,zero,10002e24 <__alt_data_end+0xf8002e24>
                printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
            }
            usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
        }
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10002e64:	00c14204 	movi	r3,1288
10002e68:	00803a04 	movi	r2,232
10002e6c:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10002e70:	00803804 	movi	r2,224
10002e74:	10800037 	ldwio	r2,0(r2)
10002e78:	e0bff80d 	sth	r2,-32(fp)

        if (usb_ctl_val != 0x03)
10002e7c:	e0bff80b 	ldhu	r2,-32(fp)
10002e80:	108000e0 	cmpeqi	r2,r2,3
10002e84:	1000051e 	bne	r2,zero,10002e9c <main+0x2aa8>
        {
            pbutton = 0;
10002e88:	e03ffb85 	stb	zero,-18(fp)
            dx = 0;
10002e8c:	e03ffb05 	stb	zero,-20(fp)
            dy = 0;
10002e90:	e03ffb45 	stb	zero,-19(fp)
            button_value = 0;
10002e94:	e03ffec5 	stb	zero,-5(fp)
10002e98:	0000a506 	br	10003130 <main+0x2d3c>
        }

        else
        {
            if (data_size != 8)
10002e9c:	e0bffe83 	ldbu	r2,-6(fp)
10002ea0:	10800220 	cmpeqi	r2,r2,8
10002ea4:	10006c1e 	bne	r2,zero,10003058 <main+0x2c64>
            {
                //printf("\n----------------\n");
                
                
                IOWR(CY7C67200_BASE, HPI_ADDR, 0x051c); //the start address
10002ea8:	00c14704 	movi	r3,1308
10002eac:	00803a04 	movi	r2,232
10002eb0:	10c00035 	stwio	r3,0(r2)
                read = (signed short) IORD(CY7C67200_BASE, HPI_DATA);
10002eb4:	00803804 	movi	r2,224
10002eb8:	10800037 	ldwio	r2,0(r2)
10002ebc:	e0bfff0d 	sth	r2,-4(fp)
                //printf("the read from 0x051c is: 0x%04x\n",read);
                button_value = (signed char)(read & 0xff);
10002ec0:	e0bfff0b 	ldhu	r2,-4(fp)
10002ec4:	e0bffec5 	stb	r2,-5(fp)
                }
                else
                {
                    pbutton = 0;
                }*/
                pbutton = button_value & 0x07;
10002ec8:	e0bffec3 	ldbu	r2,-5(fp)
10002ecc:	108001cc 	andi	r2,r2,7
10002ed0:	e0bffb85 	stb	r2,-18(fp)
                
                
                

                button_value = (signed char)((read >> 8) & 0xff);
10002ed4:	e0bfff0f 	ldh	r2,-4(fp)
10002ed8:	1005d23a 	srai	r2,r2,8
10002edc:	e0bffec5 	stb	r2,-5(fp)
                    else
                    {
                        dx = (signed char)((button_value) & 0xff);
                    }
                }*/
                dx = button_value;
10002ee0:	e0bffec3 	ldbu	r2,-5(fp)
10002ee4:	e0bffb05 	stb	r2,-20(fp)
                //printf("[dx, dx_prev1, dx_prev2, dx_prev3]:%d, %d, %d, %d\n", dx, dx_prev1, dx_prev2, dx_prev3);
                //if (dx_prev2 < -48 && dx_prev1 < -80 && dx >0){
                if ((dx_prev2 < -4 && dx_prev1 < dx_prev2 && dx > 0) || (dx_prev2 <=0 && dx_prev2 - dx_prev1 > 40 && dx>0)){
10002ee8:	e0bffc47 	ldb	r2,-15(fp)
10002eec:	10bfff08 	cmpgei	r2,r2,-4
10002ef0:	1000051e 	bne	r2,zero,10002f08 <main+0x2b14>
10002ef4:	e0fffc07 	ldb	r3,-16(fp)
10002ef8:	e0bffc47 	ldb	r2,-15(fp)
10002efc:	1880020e 	bge	r3,r2,10002f08 <main+0x2b14>
10002f00:	e0bffb07 	ldb	r2,-20(fp)
10002f04:	00800916 	blt	zero,r2,10002f2c <main+0x2b38>
10002f08:	e0bffc47 	ldb	r2,-15(fp)
10002f0c:	00800a16 	blt	zero,r2,10002f38 <main+0x2b44>
10002f10:	e0fffc47 	ldb	r3,-15(fp)
10002f14:	e0bffc07 	ldb	r2,-16(fp)
10002f18:	1885c83a 	sub	r2,r3,r2
10002f1c:	10800a50 	cmplti	r2,r2,41
10002f20:	1000051e 	bne	r2,zero,10002f38 <main+0x2b44>
10002f24:	e0bffb07 	ldb	r2,-20(fp)
10002f28:	0080030e 	bge	zero,r2,10002f38 <main+0x2b44>
                //if ((dx_prev2 <=0 && dx_prev1 < dx_prev2 && dx > 0) || (dx_prev2 <0 && dx_prev1 <= dx_prev2  && dx>0)){
                //if ((dx_prev3 <=0 && dx_prev1 < dx_prev2 && dx_prev2 < dx_prev3 && dx > 0) || (dx_prev3 <0 && dx_prev2 - dx_prev1 > dx_prev3 - dx_prev2 && dx>0)){
                    dx = -128;
10002f2c:	00bfe004 	movi	r2,-128
10002f30:	e0bffb05 	stb	r2,-20(fp)
10002f34:	00001306 	br	10002f84 <main+0x2b90>
                }
                //else if(dx_prev1 > 48 && dx_prev1 > 80 && dx <0){
                else if((dx_prev2> 4 && dx_prev1 > dx_prev2 && dx <0) || (dx_prev2 >=0 && dx_prev1 - dx_prev2 > 40 && dx<0)){
10002f38:	e0bffc47 	ldb	r2,-15(fp)
10002f3c:	10800150 	cmplti	r2,r2,5
10002f40:	1000051e 	bne	r2,zero,10002f58 <main+0x2b64>
10002f44:	e0bffc07 	ldb	r2,-16(fp)
10002f48:	e0fffc47 	ldb	r3,-15(fp)
10002f4c:	1880020e 	bge	r3,r2,10002f58 <main+0x2b64>
10002f50:	e0bffb07 	ldb	r2,-20(fp)
10002f54:	10000916 	blt	r2,zero,10002f7c <main+0x2b88>
10002f58:	e0bffc47 	ldb	r2,-15(fp)
10002f5c:	10000916 	blt	r2,zero,10002f84 <main+0x2b90>
10002f60:	e0fffc07 	ldb	r3,-16(fp)
10002f64:	e0bffc47 	ldb	r2,-15(fp)
10002f68:	1885c83a 	sub	r2,r3,r2
10002f6c:	10800a50 	cmplti	r2,r2,41
10002f70:	1000041e 	bne	r2,zero,10002f84 <main+0x2b90>
10002f74:	e0bffb07 	ldb	r2,-20(fp)
10002f78:	1000020e 	bge	r2,zero,10002f84 <main+0x2b90>
                //else if((dx_prev2 >=0 && dx_prev1 > dx_prev2 && dx <0) || (dx_prev2 >0 && dx_prev1 >= dx_prev2 && dx<0)){
                //else if ((dx_prev3 >=0 && dx_prev1 > dx_prev2 && dx_prev2 > dx_prev3 && dx < 0) || (dx_prev3 >0 && dx_prev1 - dx_prev2 > dx_prev2 - dx_prev3 && dx<0)){
                    dx = 127;
10002f7c:	00801fc4 	movi	r2,127
10002f80:	e0bffb05 	stb	r2,-20(fp)
                }
                
                
                
                IOWR(CY7C67200_BASE, HPI_ADDR, 0x051e);
10002f84:	00c14784 	movi	r3,1310
10002f88:	00803a04 	movi	r2,232
10002f8c:	10c00035 	stwio	r3,0(r2)
                read = (signed short) IORD(CY7C67200_BASE, HPI_DATA);
10002f90:	00803804 	movi	r2,224
10002f94:	10800037 	ldwio	r2,0(r2)
10002f98:	e0bfff0d 	sth	r2,-4(fp)
                //printf("the read from 0x051e is: 0x%04x\n", read);
                button_value = (signed char)((read / 16));
10002f9c:	e0bfff0f 	ldh	r2,-4(fp)
10002fa0:	1000010e 	bge	r2,zero,10002fa8 <main+0x2bb4>
10002fa4:	108003c4 	addi	r2,r2,15
10002fa8:	1005d13a 	srai	r2,r2,4
10002fac:	e0bffec5 	stb	r2,-5(fp)
                    else
                    {
                        dy = (signed char)(button_value & 0xff);
                    }
                }*/
                dy = button_value;
10002fb0:	e0bffec3 	ldbu	r2,-5(fp)
10002fb4:	e0bffb45 	stb	r2,-19(fp)
                //printf("[dy, dy_prev1, dy_prev2, dy_prev3]:%d, %d, %d, %d\n", dy, dy_prev1, dy_prev2, dy_prev3);
                if ((dy_prev2 < -4 && dy_prev1 < dy_prev2 && dy > 0) || (dy_prev2 <=0 && dy_prev2 - dy_prev1 > 40 && dy>0)){
10002fb8:	e0bffcc7 	ldb	r2,-13(fp)
10002fbc:	10bfff08 	cmpgei	r2,r2,-4
10002fc0:	1000051e 	bne	r2,zero,10002fd8 <main+0x2be4>
10002fc4:	e0fffc87 	ldb	r3,-14(fp)
10002fc8:	e0bffcc7 	ldb	r2,-13(fp)
10002fcc:	1880020e 	bge	r3,r2,10002fd8 <main+0x2be4>
10002fd0:	e0bffb47 	ldb	r2,-19(fp)
10002fd4:	00800916 	blt	zero,r2,10002ffc <main+0x2c08>
10002fd8:	e0bffcc7 	ldb	r2,-13(fp)
10002fdc:	00800a16 	blt	zero,r2,10003008 <main+0x2c14>
10002fe0:	e0fffcc7 	ldb	r3,-13(fp)
10002fe4:	e0bffc87 	ldb	r2,-14(fp)
10002fe8:	1885c83a 	sub	r2,r3,r2
10002fec:	10800a50 	cmplti	r2,r2,41
10002ff0:	1000051e 	bne	r2,zero,10003008 <main+0x2c14>
10002ff4:	e0bffb47 	ldb	r2,-19(fp)
10002ff8:	0080030e 	bge	zero,r2,10003008 <main+0x2c14>
                    dy = -128;
10002ffc:	00bfe004 	movi	r2,-128
10003000:	e0bffb45 	stb	r2,-19(fp)
10003004:	00004a06 	br	10003130 <main+0x2d3c>
                }
                else if((dy_prev2> 4 && dy_prev1 > dy_prev2 && dy <0) || (dy_prev2 >=0 && dy_prev1 - dy_prev2 > 40 && dy<0)){
10003008:	e0bffcc7 	ldb	r2,-13(fp)
1000300c:	10800150 	cmplti	r2,r2,5
10003010:	1000051e 	bne	r2,zero,10003028 <main+0x2c34>
10003014:	e0bffc87 	ldb	r2,-14(fp)
10003018:	e0fffcc7 	ldb	r3,-13(fp)
1000301c:	1880020e 	bge	r3,r2,10003028 <main+0x2c34>
10003020:	e0bffb47 	ldb	r2,-19(fp)
10003024:	10000916 	blt	r2,zero,1000304c <main+0x2c58>
10003028:	e0bffcc7 	ldb	r2,-13(fp)
1000302c:	10004016 	blt	r2,zero,10003130 <main+0x2d3c>
10003030:	e0fffc87 	ldb	r3,-14(fp)
10003034:	e0bffcc7 	ldb	r2,-13(fp)
10003038:	1885c83a 	sub	r2,r3,r2
1000303c:	10800a50 	cmplti	r2,r2,41
10003040:	10003b1e 	bne	r2,zero,10003130 <main+0x2d3c>
10003044:	e0bffb47 	ldb	r2,-19(fp)
10003048:	1000390e 	bge	r2,zero,10003130 <main+0x2d3c>
                    dy = 127;
1000304c:	00801fc4 	movi	r2,127
10003050:	e0bffb45 	stb	r2,-19(fp)
10003054:	00003606 	br	10003130 <main+0x2d3c>
                read = (signed short)IORD(CY7C67200_BASE, HPI_DATA);
                printf("the read from 0x0500 is: 0x%04x\n", read);*/
            }
            else //>8
            {
                IOWR(CY7C67200_BASE, HPI_ADDR, 0x051c); //the start address
10003058:	00c14704 	movi	r3,1308
1000305c:	00803a04 	movi	r2,232
10003060:	10c00035 	stwio	r3,0(r2)
                button_value = IORD(CY7C67200_BASE, HPI_DATA);
10003064:	00803804 	movi	r2,224
10003068:	10800037 	ldwio	r2,0(r2)
1000306c:	e0bffec5 	stb	r2,-5(fp)
                if (((button_value >> 8) & 0x00ff) == 0x0001)
10003070:	e0bffec7 	ldb	r2,-5(fp)
10003074:	1005d23a 	srai	r2,r2,8
10003078:	10803fcc 	andi	r2,r2,255
1000307c:	10800058 	cmpnei	r2,r2,1
10003080:	1000031e 	bne	r2,zero,10003090 <main+0x2c9c>
                {
                    //printf("left button\n");
                    pbutton = 1;
10003084:	00800044 	movi	r2,1
10003088:	e0bffb85 	stb	r2,-18(fp)
1000308c:	00000906 	br	100030b4 <main+0x2cc0>
                }
                else if (((button_value >> 8) & 0x00ff) == 0x0002)
10003090:	e0bffec7 	ldb	r2,-5(fp)
10003094:	1005d23a 	srai	r2,r2,8
10003098:	10803fcc 	andi	r2,r2,255
1000309c:	10800098 	cmpnei	r2,r2,2
100030a0:	1000031e 	bne	r2,zero,100030b0 <main+0x2cbc>
                {
                    //printf("right button\n");
                    pbutton = 2;
100030a4:	00800084 	movi	r2,2
100030a8:	e0bffb85 	stb	r2,-18(fp)
100030ac:	00000106 	br	100030b4 <main+0x2cc0>
                }
                else
                {
                    pbutton = 0;
100030b0:	e03ffb85 	stb	zero,-18(fp)
                }
                button_value = IORD(CY7C67200_BASE, HPI_DATA);
100030b4:	00803804 	movi	r2,224
100030b8:	10800037 	ldwio	r2,0(r2)
100030bc:	e0bffec5 	stb	r2,-5(fp)
                if ((signed char)((button_value >> 8) & 0x00ff) != 0)
100030c0:	e0bffec7 	ldb	r2,-5(fp)
100030c4:	1005d23a 	srai	r2,r2,8
100030c8:	10803fcc 	andi	r2,r2,255
100030cc:	1080201c 	xori	r2,r2,128
100030d0:	10bfe004 	addi	r2,r2,-128
100030d4:	10000c26 	beq	r2,zero,10003108 <main+0x2d14>
                {
                    if ((signed char)((button_value >> 8) & 0x00ff) == dy)
100030d8:	e0bffec7 	ldb	r2,-5(fp)
100030dc:	1005d23a 	srai	r2,r2,8
100030e0:	10c03fcc 	andi	r3,r2,255
100030e4:	18c0201c 	xori	r3,r3,128
100030e8:	18ffe004 	addi	r3,r3,-128
100030ec:	e0bffb47 	ldb	r2,-19(fp)
100030f0:	1880021e 	bne	r3,r2,100030fc <main+0x2d08>
                    {
                        dy = 0;
100030f4:	e03ffb45 	stb	zero,-19(fp)
100030f8:	00000306 	br	10003108 <main+0x2d14>
                    }
                    else
                    {
                        dy = (signed char)((button_value >> 8) & 0x00ff);
100030fc:	e0bffec7 	ldb	r2,-5(fp)
10003100:	1005d23a 	srai	r2,r2,8
10003104:	e0bffb45 	stb	r2,-19(fp)
                    }
                }

                if (button_value & 0x0ff)
10003108:	e0bffec7 	ldb	r2,-5(fp)
1000310c:	10803fcc 	andi	r2,r2,255
10003110:	10000726 	beq	r2,zero,10003130 <main+0x2d3c>
                {
                    //printf("dy value is %d\n",button_value&0xff);
                    if ((signed char)(button_value & 0x00ff) == dx)
10003114:	e0fffec7 	ldb	r3,-5(fp)
10003118:	e0bffb07 	ldb	r2,-20(fp)
1000311c:	1880021e 	bne	r3,r2,10003128 <main+0x2d34>
                    {
                        dx = 0;
10003120:	e03ffb05 	stb	zero,-20(fp)
10003124:	00000206 	br	10003130 <main+0x2d3c>
                    }
                    else
                    {
                        dx = (signed char)(button_value & 0xff);
10003128:	e0bffec3 	ldbu	r2,-5(fp)
1000312c:	e0bffb05 	stb	r2,-20(fp)
                    }
                }
            }
        }

        dx_prev3 = dx_prev2;
10003130:	e0bffc43 	ldbu	r2,-15(fp)
10003134:	e0bffd85 	stb	r2,-10(fp)
        dx_prev2 = dx_prev1;
10003138:	e0bffc03 	ldbu	r2,-16(fp)
1000313c:	e0bffc45 	stb	r2,-15(fp)
        dx_prev1 = dx;
10003140:	e0bffb03 	ldbu	r2,-20(fp)
10003144:	e0bffc05 	stb	r2,-16(fp)
        dy_prev3 = dy_prev2;
10003148:	e0bffcc3 	ldbu	r2,-13(fp)
1000314c:	e0bffdc5 	stb	r2,-9(fp)
        dy_prev2 = dy_prev1;
10003150:	e0bffc83 	ldbu	r2,-14(fp)
10003154:	e0bffcc5 	stb	r2,-13(fp)
        dy_prev1 = dy;
10003158:	e0bffb43 	ldbu	r2,-19(fp)
1000315c:	e0bffc85 	stb	r2,-14(fp)

        px = px + dx;
10003160:	e0bffb07 	ldb	r2,-20(fp)
10003164:	e0fff917 	ldw	r3,-28(fp)
10003168:	1885883a 	add	r2,r3,r2
1000316c:	e0bff915 	stw	r2,-28(fp)
        py = py + dy;
10003170:	e0bffb47 	ldb	r2,-19(fp)
10003174:	e0fffa17 	ldw	r3,-24(fp)
10003178:	1885883a 	add	r2,r3,r2
1000317c:	e0bffa15 	stw	r2,-24(fp)

        px = maxmin(px, 639, 0);
10003180:	000d883a 	mov	r6,zero
10003184:	01409fc4 	movi	r5,639
10003188:	e13ff917 	ldw	r4,-28(fp)
1000318c:	000026c0 	call	1000026c <maxmin>
10003190:	e0bff915 	stw	r2,-28(fp)
        py = maxmin(py, 479, 0);
10003194:	000d883a 	mov	r6,zero
10003198:	014077c4 	movi	r5,479
1000319c:	e13ffa17 	ldw	r4,-24(fp)
100031a0:	000026c0 	call	1000026c <maxmin>
100031a4:	e0bffa15 	stw	r2,-24(fp)

        *mouse_x = px;
100031a8:	00803004 	movi	r2,192
100031ac:	e0fff917 	ldw	r3,-28(fp)
100031b0:	10c00015 	stw	r3,0(r2)
        *mouse_y = py;
100031b4:	00802c04 	movi	r2,176
100031b8:	e0fffa17 	ldw	r3,-24(fp)
100031bc:	10c00015 	stw	r3,0(r2)
        *mouse_click = pbutton;
100031c0:	00802804 	movi	r2,160
100031c4:	e0fffb83 	ldbu	r3,-18(fp)
100031c8:	10c00005 	stb	r3,0(r2)

            usleep(200);
        }
        */

    } //end while
100031cc:	003eb406 	br	10002ca0 <__alt_data_end+0xf8002ca0>

100031d0 <_printf_r>:
100031d0:	defffd04 	addi	sp,sp,-12
100031d4:	2805883a 	mov	r2,r5
100031d8:	dfc00015 	stw	ra,0(sp)
100031dc:	d9800115 	stw	r6,4(sp)
100031e0:	d9c00215 	stw	r7,8(sp)
100031e4:	21400217 	ldw	r5,8(r4)
100031e8:	d9c00104 	addi	r7,sp,4
100031ec:	100d883a 	mov	r6,r2
100031f0:	00033a80 	call	100033a8 <___vfprintf_internal_r>
100031f4:	dfc00017 	ldw	ra,0(sp)
100031f8:	dec00304 	addi	sp,sp,12
100031fc:	f800283a 	ret

10003200 <printf>:
10003200:	defffc04 	addi	sp,sp,-16
10003204:	dfc00015 	stw	ra,0(sp)
10003208:	d9400115 	stw	r5,4(sp)
1000320c:	d9800215 	stw	r6,8(sp)
10003210:	d9c00315 	stw	r7,12(sp)
10003214:	00840074 	movhi	r2,4097
10003218:	1093a504 	addi	r2,r2,20116
1000321c:	10800017 	ldw	r2,0(r2)
10003220:	200b883a 	mov	r5,r4
10003224:	d9800104 	addi	r6,sp,4
10003228:	11000217 	ldw	r4,8(r2)
1000322c:	00056840 	call	10005684 <__vfprintf_internal>
10003230:	dfc00017 	ldw	ra,0(sp)
10003234:	dec00404 	addi	sp,sp,16
10003238:	f800283a 	ret

1000323c <_puts_r>:
1000323c:	defff604 	addi	sp,sp,-40
10003240:	dc000715 	stw	r16,28(sp)
10003244:	2021883a 	mov	r16,r4
10003248:	2809883a 	mov	r4,r5
1000324c:	dc400815 	stw	r17,32(sp)
10003250:	dfc00915 	stw	ra,36(sp)
10003254:	2823883a 	mov	r17,r5
10003258:	00033100 	call	10003310 <strlen>
1000325c:	10c00044 	addi	r3,r2,1
10003260:	d8800115 	stw	r2,4(sp)
10003264:	00840074 	movhi	r2,4097
10003268:	108c3904 	addi	r2,r2,12516
1000326c:	d8800215 	stw	r2,8(sp)
10003270:	00800044 	movi	r2,1
10003274:	d8800315 	stw	r2,12(sp)
10003278:	00800084 	movi	r2,2
1000327c:	dc400015 	stw	r17,0(sp)
10003280:	d8c00615 	stw	r3,24(sp)
10003284:	dec00415 	stw	sp,16(sp)
10003288:	d8800515 	stw	r2,20(sp)
1000328c:	80000226 	beq	r16,zero,10003298 <_puts_r+0x5c>
10003290:	80800e17 	ldw	r2,56(r16)
10003294:	10001426 	beq	r2,zero,100032e8 <_puts_r+0xac>
10003298:	81400217 	ldw	r5,8(r16)
1000329c:	2880030b 	ldhu	r2,12(r5)
100032a0:	10c8000c 	andi	r3,r2,8192
100032a4:	1800061e 	bne	r3,zero,100032c0 <_puts_r+0x84>
100032a8:	29001917 	ldw	r4,100(r5)
100032ac:	00f7ffc4 	movi	r3,-8193
100032b0:	10880014 	ori	r2,r2,8192
100032b4:	20c6703a 	and	r3,r4,r3
100032b8:	2880030d 	sth	r2,12(r5)
100032bc:	28c01915 	stw	r3,100(r5)
100032c0:	d9800404 	addi	r6,sp,16
100032c4:	8009883a 	mov	r4,r16
100032c8:	0007bec0 	call	10007bec <__sfvwrite_r>
100032cc:	1000091e 	bne	r2,zero,100032f4 <_puts_r+0xb8>
100032d0:	00800284 	movi	r2,10
100032d4:	dfc00917 	ldw	ra,36(sp)
100032d8:	dc400817 	ldw	r17,32(sp)
100032dc:	dc000717 	ldw	r16,28(sp)
100032e0:	dec00a04 	addi	sp,sp,40
100032e4:	f800283a 	ret
100032e8:	8009883a 	mov	r4,r16
100032ec:	00077680 	call	10007768 <__sinit>
100032f0:	003fe906 	br	10003298 <__alt_data_end+0xf8003298>
100032f4:	00bfffc4 	movi	r2,-1
100032f8:	003ff606 	br	100032d4 <__alt_data_end+0xf80032d4>

100032fc <puts>:
100032fc:	00840074 	movhi	r2,4097
10003300:	1093a504 	addi	r2,r2,20116
10003304:	200b883a 	mov	r5,r4
10003308:	11000017 	ldw	r4,0(r2)
1000330c:	000323c1 	jmpi	1000323c <_puts_r>

10003310 <strlen>:
10003310:	208000cc 	andi	r2,r4,3
10003314:	10002026 	beq	r2,zero,10003398 <strlen+0x88>
10003318:	20800007 	ldb	r2,0(r4)
1000331c:	10002026 	beq	r2,zero,100033a0 <strlen+0x90>
10003320:	2005883a 	mov	r2,r4
10003324:	00000206 	br	10003330 <strlen+0x20>
10003328:	10c00007 	ldb	r3,0(r2)
1000332c:	18001826 	beq	r3,zero,10003390 <strlen+0x80>
10003330:	10800044 	addi	r2,r2,1
10003334:	10c000cc 	andi	r3,r2,3
10003338:	183ffb1e 	bne	r3,zero,10003328 <__alt_data_end+0xf8003328>
1000333c:	10c00017 	ldw	r3,0(r2)
10003340:	01ffbff4 	movhi	r7,65279
10003344:	39ffbfc4 	addi	r7,r7,-257
10003348:	00ca303a 	nor	r5,zero,r3
1000334c:	01a02074 	movhi	r6,32897
10003350:	19c7883a 	add	r3,r3,r7
10003354:	31a02004 	addi	r6,r6,-32640
10003358:	1946703a 	and	r3,r3,r5
1000335c:	1986703a 	and	r3,r3,r6
10003360:	1800091e 	bne	r3,zero,10003388 <strlen+0x78>
10003364:	10800104 	addi	r2,r2,4
10003368:	10c00017 	ldw	r3,0(r2)
1000336c:	19cb883a 	add	r5,r3,r7
10003370:	00c6303a 	nor	r3,zero,r3
10003374:	28c6703a 	and	r3,r5,r3
10003378:	1986703a 	and	r3,r3,r6
1000337c:	183ff926 	beq	r3,zero,10003364 <__alt_data_end+0xf8003364>
10003380:	00000106 	br	10003388 <strlen+0x78>
10003384:	10800044 	addi	r2,r2,1
10003388:	10c00007 	ldb	r3,0(r2)
1000338c:	183ffd1e 	bne	r3,zero,10003384 <__alt_data_end+0xf8003384>
10003390:	1105c83a 	sub	r2,r2,r4
10003394:	f800283a 	ret
10003398:	2005883a 	mov	r2,r4
1000339c:	003fe706 	br	1000333c <__alt_data_end+0xf800333c>
100033a0:	0005883a 	mov	r2,zero
100033a4:	f800283a 	ret

100033a8 <___vfprintf_internal_r>:
100033a8:	deffb804 	addi	sp,sp,-288
100033ac:	dfc04715 	stw	ra,284(sp)
100033b0:	ddc04515 	stw	r23,276(sp)
100033b4:	dd404315 	stw	r21,268(sp)
100033b8:	d9002d15 	stw	r4,180(sp)
100033bc:	282f883a 	mov	r23,r5
100033c0:	302b883a 	mov	r21,r6
100033c4:	d9c02e15 	stw	r7,184(sp)
100033c8:	df004615 	stw	fp,280(sp)
100033cc:	dd804415 	stw	r22,272(sp)
100033d0:	dd004215 	stw	r20,264(sp)
100033d4:	dcc04115 	stw	r19,260(sp)
100033d8:	dc804015 	stw	r18,256(sp)
100033dc:	dc403f15 	stw	r17,252(sp)
100033e0:	dc003e15 	stw	r16,248(sp)
100033e4:	00082e80 	call	100082e8 <_localeconv_r>
100033e8:	10800017 	ldw	r2,0(r2)
100033ec:	1009883a 	mov	r4,r2
100033f0:	d8803415 	stw	r2,208(sp)
100033f4:	00033100 	call	10003310 <strlen>
100033f8:	d8803715 	stw	r2,220(sp)
100033fc:	d8802d17 	ldw	r2,180(sp)
10003400:	10000226 	beq	r2,zero,1000340c <___vfprintf_internal_r+0x64>
10003404:	10800e17 	ldw	r2,56(r2)
10003408:	1000fb26 	beq	r2,zero,100037f8 <___vfprintf_internal_r+0x450>
1000340c:	b880030b 	ldhu	r2,12(r23)
10003410:	10c8000c 	andi	r3,r2,8192
10003414:	1800061e 	bne	r3,zero,10003430 <___vfprintf_internal_r+0x88>
10003418:	b9001917 	ldw	r4,100(r23)
1000341c:	00f7ffc4 	movi	r3,-8193
10003420:	10880014 	ori	r2,r2,8192
10003424:	20c6703a 	and	r3,r4,r3
10003428:	b880030d 	sth	r2,12(r23)
1000342c:	b8c01915 	stw	r3,100(r23)
10003430:	10c0020c 	andi	r3,r2,8
10003434:	1800c326 	beq	r3,zero,10003744 <___vfprintf_internal_r+0x39c>
10003438:	b8c00417 	ldw	r3,16(r23)
1000343c:	1800c126 	beq	r3,zero,10003744 <___vfprintf_internal_r+0x39c>
10003440:	1080068c 	andi	r2,r2,26
10003444:	00c00284 	movi	r3,10
10003448:	10c0c626 	beq	r2,r3,10003764 <___vfprintf_internal_r+0x3bc>
1000344c:	d8c00404 	addi	r3,sp,16
10003450:	05040074 	movhi	r20,4097
10003454:	d9001e04 	addi	r4,sp,120
10003458:	a50c4a84 	addi	r20,r20,12586
1000345c:	d8c01e15 	stw	r3,120(sp)
10003460:	d8002015 	stw	zero,128(sp)
10003464:	d8001f15 	stw	zero,124(sp)
10003468:	d8003315 	stw	zero,204(sp)
1000346c:	d8003615 	stw	zero,216(sp)
10003470:	d8003815 	stw	zero,224(sp)
10003474:	1811883a 	mov	r8,r3
10003478:	d8003915 	stw	zero,228(sp)
1000347c:	d8003a15 	stw	zero,232(sp)
10003480:	d8002f15 	stw	zero,188(sp)
10003484:	d9002815 	stw	r4,160(sp)
10003488:	a8800007 	ldb	r2,0(r21)
1000348c:	10028b26 	beq	r2,zero,10003ebc <___vfprintf_internal_r+0xb14>
10003490:	00c00944 	movi	r3,37
10003494:	a823883a 	mov	r17,r21
10003498:	10c0021e 	bne	r2,r3,100034a4 <___vfprintf_internal_r+0xfc>
1000349c:	00001406 	br	100034f0 <___vfprintf_internal_r+0x148>
100034a0:	10c00326 	beq	r2,r3,100034b0 <___vfprintf_internal_r+0x108>
100034a4:	8c400044 	addi	r17,r17,1
100034a8:	88800007 	ldb	r2,0(r17)
100034ac:	103ffc1e 	bne	r2,zero,100034a0 <__alt_data_end+0xf80034a0>
100034b0:	8d61c83a 	sub	r16,r17,r21
100034b4:	80000e26 	beq	r16,zero,100034f0 <___vfprintf_internal_r+0x148>
100034b8:	d8c02017 	ldw	r3,128(sp)
100034bc:	d8801f17 	ldw	r2,124(sp)
100034c0:	45400015 	stw	r21,0(r8)
100034c4:	1c07883a 	add	r3,r3,r16
100034c8:	10800044 	addi	r2,r2,1
100034cc:	d8c02015 	stw	r3,128(sp)
100034d0:	44000115 	stw	r16,4(r8)
100034d4:	d8801f15 	stw	r2,124(sp)
100034d8:	00c001c4 	movi	r3,7
100034dc:	1880a916 	blt	r3,r2,10003784 <___vfprintf_internal_r+0x3dc>
100034e0:	42000204 	addi	r8,r8,8
100034e4:	d9402f17 	ldw	r5,188(sp)
100034e8:	2c0b883a 	add	r5,r5,r16
100034ec:	d9402f15 	stw	r5,188(sp)
100034f0:	88800007 	ldb	r2,0(r17)
100034f4:	1000aa26 	beq	r2,zero,100037a0 <___vfprintf_internal_r+0x3f8>
100034f8:	8d400044 	addi	r21,r17,1
100034fc:	8c400047 	ldb	r17,1(r17)
10003500:	0021883a 	mov	r16,zero
10003504:	00bfffc4 	movi	r2,-1
10003508:	0025883a 	mov	r18,zero
1000350c:	dc002905 	stb	r16,164(sp)
10003510:	d8002785 	stb	zero,158(sp)
10003514:	d8002b05 	stb	zero,172(sp)
10003518:	d8802a15 	stw	r2,168(sp)
1000351c:	d8003115 	stw	zero,196(sp)
10003520:	04c01604 	movi	r19,88
10003524:	05800244 	movi	r22,9
10003528:	9021883a 	mov	r16,r18
1000352c:	4039883a 	mov	fp,r8
10003530:	ad400044 	addi	r21,r21,1
10003534:	88bff804 	addi	r2,r17,-32
10003538:	98833236 	bltu	r19,r2,10004204 <___vfprintf_internal_r+0xe5c>
1000353c:	100490ba 	slli	r2,r2,2
10003540:	00c40034 	movhi	r3,4096
10003544:	18cd5504 	addi	r3,r3,13652
10003548:	10c5883a 	add	r2,r2,r3
1000354c:	10800017 	ldw	r2,0(r2)
10003550:	1000683a 	jmp	r2
10003554:	100040fc 	xorhi	zero,r2,259
10003558:	10004204 	addi	zero,r2,264
1000355c:	10004204 	addi	zero,r2,264
10003560:	1000411c 	xori	zero,r2,260
10003564:	10004204 	addi	zero,r2,264
10003568:	10004204 	addi	zero,r2,264
1000356c:	10004204 	addi	zero,r2,264
10003570:	10004204 	addi	zero,r2,264
10003574:	10004204 	addi	zero,r2,264
10003578:	10004204 	addi	zero,r2,264
1000357c:	10003804 	addi	zero,r2,224
10003580:	1000400c 	andi	zero,r2,256
10003584:	10004204 	addi	zero,r2,264
10003588:	100036c8 	cmpgei	zero,r2,219
1000358c:	10003828 	cmpgeui	zero,r2,224
10003590:	10004204 	addi	zero,r2,264
10003594:	10003878 	rdprs	zero,r2,225
10003598:	10003884 	addi	zero,r2,226
1000359c:	10003884 	addi	zero,r2,226
100035a0:	10003884 	addi	zero,r2,226
100035a4:	10003884 	addi	zero,r2,226
100035a8:	10003884 	addi	zero,r2,226
100035ac:	10003884 	addi	zero,r2,226
100035b0:	10003884 	addi	zero,r2,226
100035b4:	10003884 	addi	zero,r2,226
100035b8:	10003884 	addi	zero,r2,226
100035bc:	10004204 	addi	zero,r2,264
100035c0:	10004204 	addi	zero,r2,264
100035c4:	10004204 	addi	zero,r2,264
100035c8:	10004204 	addi	zero,r2,264
100035cc:	10004204 	addi	zero,r2,264
100035d0:	10004204 	addi	zero,r2,264
100035d4:	10004204 	addi	zero,r2,264
100035d8:	10004204 	addi	zero,r2,264
100035dc:	10004204 	addi	zero,r2,264
100035e0:	10004204 	addi	zero,r2,264
100035e4:	100038c0 	call	1100038c <_gp+0xfe34fc>
100035e8:	10003988 	cmpgei	zero,r2,230
100035ec:	10004204 	addi	zero,r2,264
100035f0:	10003988 	cmpgei	zero,r2,230
100035f4:	10004204 	addi	zero,r2,264
100035f8:	10004204 	addi	zero,r2,264
100035fc:	10004204 	addi	zero,r2,264
10003600:	10004204 	addi	zero,r2,264
10003604:	10003a34 	orhi	zero,r2,232
10003608:	10004204 	addi	zero,r2,264
1000360c:	10004204 	addi	zero,r2,264
10003610:	10003a40 	call	110003a4 <_gp+0xfe3514>
10003614:	10004204 	addi	zero,r2,264
10003618:	10004204 	addi	zero,r2,264
1000361c:	10004204 	addi	zero,r2,264
10003620:	10004204 	addi	zero,r2,264
10003624:	10004204 	addi	zero,r2,264
10003628:	10003ec4 	addi	zero,r2,251
1000362c:	10004204 	addi	zero,r2,264
10003630:	10004204 	addi	zero,r2,264
10003634:	10003f30 	cmpltui	zero,r2,252
10003638:	10004204 	addi	zero,r2,264
1000363c:	10004204 	addi	zero,r2,264
10003640:	10004204 	addi	zero,r2,264
10003644:	10004204 	addi	zero,r2,264
10003648:	10004204 	addi	zero,r2,264
1000364c:	10004204 	addi	zero,r2,264
10003650:	10004204 	addi	zero,r2,264
10003654:	10004204 	addi	zero,r2,264
10003658:	10004204 	addi	zero,r2,264
1000365c:	10004204 	addi	zero,r2,264
10003660:	100041a8 	cmpgeui	zero,r2,262
10003664:	10004128 	cmpgeui	zero,r2,260
10003668:	10003988 	cmpgei	zero,r2,230
1000366c:	10003988 	cmpgei	zero,r2,230
10003670:	10003988 	cmpgei	zero,r2,230
10003674:	10004148 	cmpgei	zero,r2,261
10003678:	10004128 	cmpgeui	zero,r2,260
1000367c:	10004204 	addi	zero,r2,264
10003680:	10004204 	addi	zero,r2,264
10003684:	10004154 	ori	zero,r2,261
10003688:	10004204 	addi	zero,r2,264
1000368c:	10004168 	cmpgeui	zero,r2,261
10003690:	10003fec 	andhi	zero,r2,255
10003694:	100036d4 	ori	zero,r2,219
10003698:	10004024 	muli	zero,r2,256
1000369c:	10004204 	addi	zero,r2,264
100036a0:	10004030 	cmpltui	zero,r2,256
100036a4:	10004204 	addi	zero,r2,264
100036a8:	10004094 	ori	zero,r2,258
100036ac:	10004204 	addi	zero,r2,264
100036b0:	10004204 	addi	zero,r2,264
100036b4:	100040b4 	orhi	zero,r2,258
100036b8:	d8c03117 	ldw	r3,196(sp)
100036bc:	d8802e15 	stw	r2,184(sp)
100036c0:	00c7c83a 	sub	r3,zero,r3
100036c4:	d8c03115 	stw	r3,196(sp)
100036c8:	84000114 	ori	r16,r16,4
100036cc:	ac400007 	ldb	r17,0(r21)
100036d0:	003f9706 	br	10003530 <__alt_data_end+0xf8003530>
100036d4:	00800c04 	movi	r2,48
100036d8:	d8802705 	stb	r2,156(sp)
100036dc:	00801e04 	movi	r2,120
100036e0:	d8802745 	stb	r2,157(sp)
100036e4:	d9002a17 	ldw	r4,168(sp)
100036e8:	d8802e17 	ldw	r2,184(sp)
100036ec:	d8002785 	stb	zero,158(sp)
100036f0:	e011883a 	mov	r8,fp
100036f4:	10c00104 	addi	r3,r2,4
100036f8:	14c00017 	ldw	r19,0(r2)
100036fc:	002d883a 	mov	r22,zero
10003700:	80800094 	ori	r2,r16,2
10003704:	2002ca16 	blt	r4,zero,10004230 <___vfprintf_internal_r+0xe88>
10003708:	00bfdfc4 	movi	r2,-129
1000370c:	80a4703a 	and	r18,r16,r2
10003710:	d8c02e15 	stw	r3,184(sp)
10003714:	94800094 	ori	r18,r18,2
10003718:	9802b41e 	bne	r19,zero,100041ec <___vfprintf_internal_r+0xe44>
1000371c:	01440074 	movhi	r5,4097
10003720:	294c4304 	addi	r5,r5,12556
10003724:	d9403915 	stw	r5,228(sp)
10003728:	04401e04 	movi	r17,120
1000372c:	d8802a17 	ldw	r2,168(sp)
10003730:	0039883a 	mov	fp,zero
10003734:	1001fa26 	beq	r2,zero,10003f20 <___vfprintf_internal_r+0xb78>
10003738:	0027883a 	mov	r19,zero
1000373c:	002d883a 	mov	r22,zero
10003740:	00021906 	br	10003fa8 <___vfprintf_internal_r+0xc00>
10003744:	d9002d17 	ldw	r4,180(sp)
10003748:	b80b883a 	mov	r5,r23
1000374c:	000575c0 	call	1000575c <__swsetup_r>
10003750:	1005dc1e 	bne	r2,zero,10004ec4 <___vfprintf_internal_r+0x1b1c>
10003754:	b880030b 	ldhu	r2,12(r23)
10003758:	00c00284 	movi	r3,10
1000375c:	1080068c 	andi	r2,r2,26
10003760:	10ff3a1e 	bne	r2,r3,1000344c <__alt_data_end+0xf800344c>
10003764:	b880038f 	ldh	r2,14(r23)
10003768:	103f3816 	blt	r2,zero,1000344c <__alt_data_end+0xf800344c>
1000376c:	d9c02e17 	ldw	r7,184(sp)
10003770:	d9002d17 	ldw	r4,180(sp)
10003774:	a80d883a 	mov	r6,r21
10003778:	b80b883a 	mov	r5,r23
1000377c:	00056a00 	call	100056a0 <__sbprintf>
10003780:	00001106 	br	100037c8 <___vfprintf_internal_r+0x420>
10003784:	d9002d17 	ldw	r4,180(sp)
10003788:	d9801e04 	addi	r6,sp,120
1000378c:	b80b883a 	mov	r5,r23
10003790:	000ab880 	call	1000ab88 <__sprint_r>
10003794:	1000081e 	bne	r2,zero,100037b8 <___vfprintf_internal_r+0x410>
10003798:	da000404 	addi	r8,sp,16
1000379c:	003f5106 	br	100034e4 <__alt_data_end+0xf80034e4>
100037a0:	d8802017 	ldw	r2,128(sp)
100037a4:	10000426 	beq	r2,zero,100037b8 <___vfprintf_internal_r+0x410>
100037a8:	d9002d17 	ldw	r4,180(sp)
100037ac:	d9801e04 	addi	r6,sp,120
100037b0:	b80b883a 	mov	r5,r23
100037b4:	000ab880 	call	1000ab88 <__sprint_r>
100037b8:	b880030b 	ldhu	r2,12(r23)
100037bc:	1080100c 	andi	r2,r2,64
100037c0:	1005c01e 	bne	r2,zero,10004ec4 <___vfprintf_internal_r+0x1b1c>
100037c4:	d8802f17 	ldw	r2,188(sp)
100037c8:	dfc04717 	ldw	ra,284(sp)
100037cc:	df004617 	ldw	fp,280(sp)
100037d0:	ddc04517 	ldw	r23,276(sp)
100037d4:	dd804417 	ldw	r22,272(sp)
100037d8:	dd404317 	ldw	r21,268(sp)
100037dc:	dd004217 	ldw	r20,264(sp)
100037e0:	dcc04117 	ldw	r19,260(sp)
100037e4:	dc804017 	ldw	r18,256(sp)
100037e8:	dc403f17 	ldw	r17,252(sp)
100037ec:	dc003e17 	ldw	r16,248(sp)
100037f0:	dec04804 	addi	sp,sp,288
100037f4:	f800283a 	ret
100037f8:	d9002d17 	ldw	r4,180(sp)
100037fc:	00077680 	call	10007768 <__sinit>
10003800:	003f0206 	br	1000340c <__alt_data_end+0xf800340c>
10003804:	d9002e17 	ldw	r4,184(sp)
10003808:	d9402e17 	ldw	r5,184(sp)
1000380c:	21000017 	ldw	r4,0(r4)
10003810:	28800104 	addi	r2,r5,4
10003814:	d9003115 	stw	r4,196(sp)
10003818:	203fa716 	blt	r4,zero,100036b8 <__alt_data_end+0xf80036b8>
1000381c:	d8802e15 	stw	r2,184(sp)
10003820:	ac400007 	ldb	r17,0(r21)
10003824:	003f4206 	br	10003530 <__alt_data_end+0xf8003530>
10003828:	ac400007 	ldb	r17,0(r21)
1000382c:	01000a84 	movi	r4,42
10003830:	a8c00044 	addi	r3,r21,1
10003834:	89075826 	beq	r17,r4,10005598 <___vfprintf_internal_r+0x21f0>
10003838:	8cbff404 	addi	r18,r17,-48
1000383c:	b486ae36 	bltu	r22,r18,100052f8 <___vfprintf_internal_r+0x1f50>
10003840:	0009883a 	mov	r4,zero
10003844:	1823883a 	mov	r17,r3
10003848:	01400284 	movi	r5,10
1000384c:	000d8440 	call	1000d844 <__mulsi3>
10003850:	88c00007 	ldb	r3,0(r17)
10003854:	1489883a 	add	r4,r2,r18
10003858:	8d400044 	addi	r21,r17,1
1000385c:	1cbff404 	addi	r18,r3,-48
10003860:	a823883a 	mov	r17,r21
10003864:	b4bff82e 	bgeu	r22,r18,10003848 <__alt_data_end+0xf8003848>
10003868:	1823883a 	mov	r17,r3
1000386c:	2005f616 	blt	r4,zero,10005048 <___vfprintf_internal_r+0x1ca0>
10003870:	d9002a15 	stw	r4,168(sp)
10003874:	003f2f06 	br	10003534 <__alt_data_end+0xf8003534>
10003878:	84002014 	ori	r16,r16,128
1000387c:	ac400007 	ldb	r17,0(r21)
10003880:	003f2b06 	br	10003530 <__alt_data_end+0xf8003530>
10003884:	8cbff404 	addi	r18,r17,-48
10003888:	d8003115 	stw	zero,196(sp)
1000388c:	0009883a 	mov	r4,zero
10003890:	a823883a 	mov	r17,r21
10003894:	01400284 	movi	r5,10
10003898:	000d8440 	call	1000d844 <__mulsi3>
1000389c:	88c00007 	ldb	r3,0(r17)
100038a0:	9089883a 	add	r4,r18,r2
100038a4:	ad400044 	addi	r21,r21,1
100038a8:	1cbff404 	addi	r18,r3,-48
100038ac:	a823883a 	mov	r17,r21
100038b0:	b4bff82e 	bgeu	r22,r18,10003894 <__alt_data_end+0xf8003894>
100038b4:	1823883a 	mov	r17,r3
100038b8:	d9003115 	stw	r4,196(sp)
100038bc:	003f1d06 	br	10003534 <__alt_data_end+0xf8003534>
100038c0:	8025883a 	mov	r18,r16
100038c4:	dc002903 	ldbu	r16,164(sp)
100038c8:	e011883a 	mov	r8,fp
100038cc:	84003fcc 	andi	r16,r16,255
100038d0:	8007531e 	bne	r16,zero,10005620 <___vfprintf_internal_r+0x2278>
100038d4:	94800414 	ori	r18,r18,16
100038d8:	9080080c 	andi	r2,r18,32
100038dc:	1003a326 	beq	r2,zero,1000476c <___vfprintf_internal_r+0x13c4>
100038e0:	d9002e17 	ldw	r4,184(sp)
100038e4:	20800117 	ldw	r2,4(r4)
100038e8:	24c00017 	ldw	r19,0(r4)
100038ec:	21000204 	addi	r4,r4,8
100038f0:	d9002e15 	stw	r4,184(sp)
100038f4:	102d883a 	mov	r22,r2
100038f8:	10047316 	blt	r2,zero,10004ac8 <___vfprintf_internal_r+0x1720>
100038fc:	d9002a17 	ldw	r4,168(sp)
10003900:	df002783 	ldbu	fp,158(sp)
10003904:	2003e416 	blt	r4,zero,10004898 <___vfprintf_internal_r+0x14f0>
10003908:	00ffdfc4 	movi	r3,-129
1000390c:	9d84b03a 	or	r2,r19,r22
10003910:	90e4703a 	and	r18,r18,r3
10003914:	10018026 	beq	r2,zero,10003f18 <___vfprintf_internal_r+0xb70>
10003918:	b003ab26 	beq	r22,zero,100047c8 <___vfprintf_internal_r+0x1420>
1000391c:	dc402915 	stw	r17,164(sp)
10003920:	dc001e04 	addi	r16,sp,120
10003924:	b023883a 	mov	r17,r22
10003928:	402d883a 	mov	r22,r8
1000392c:	9809883a 	mov	r4,r19
10003930:	880b883a 	mov	r5,r17
10003934:	01800284 	movi	r6,10
10003938:	000f883a 	mov	r7,zero
1000393c:	000d0cc0 	call	1000d0cc <__umoddi3>
10003940:	10800c04 	addi	r2,r2,48
10003944:	843fffc4 	addi	r16,r16,-1
10003948:	9809883a 	mov	r4,r19
1000394c:	880b883a 	mov	r5,r17
10003950:	80800005 	stb	r2,0(r16)
10003954:	01800284 	movi	r6,10
10003958:	000f883a 	mov	r7,zero
1000395c:	000cad00 	call	1000cad0 <__udivdi3>
10003960:	1027883a 	mov	r19,r2
10003964:	10c4b03a 	or	r2,r2,r3
10003968:	1823883a 	mov	r17,r3
1000396c:	103fef1e 	bne	r2,zero,1000392c <__alt_data_end+0xf800392c>
10003970:	d8c02817 	ldw	r3,160(sp)
10003974:	dc402917 	ldw	r17,164(sp)
10003978:	b011883a 	mov	r8,r22
1000397c:	1c07c83a 	sub	r3,r3,r16
10003980:	d8c02b15 	stw	r3,172(sp)
10003984:	00005f06 	br	10003b04 <___vfprintf_internal_r+0x75c>
10003988:	8025883a 	mov	r18,r16
1000398c:	dc002903 	ldbu	r16,164(sp)
10003990:	e011883a 	mov	r8,fp
10003994:	84003fcc 	andi	r16,r16,255
10003998:	80071e1e 	bne	r16,zero,10005614 <___vfprintf_internal_r+0x226c>
1000399c:	9080020c 	andi	r2,r18,8
100039a0:	1004af26 	beq	r2,zero,10004c60 <___vfprintf_internal_r+0x18b8>
100039a4:	d9002e17 	ldw	r4,184(sp)
100039a8:	d9402e17 	ldw	r5,184(sp)
100039ac:	d8802e17 	ldw	r2,184(sp)
100039b0:	21000017 	ldw	r4,0(r4)
100039b4:	29400117 	ldw	r5,4(r5)
100039b8:	10800204 	addi	r2,r2,8
100039bc:	d9003615 	stw	r4,216(sp)
100039c0:	d9403815 	stw	r5,224(sp)
100039c4:	d8802e15 	stw	r2,184(sp)
100039c8:	d9003617 	ldw	r4,216(sp)
100039cc:	d9403817 	ldw	r5,224(sp)
100039d0:	da003d15 	stw	r8,244(sp)
100039d4:	04000044 	movi	r16,1
100039d8:	000a7ac0 	call	1000a7ac <__fpclassifyd>
100039dc:	da003d17 	ldw	r8,244(sp)
100039e0:	1404441e 	bne	r2,r16,10004af4 <___vfprintf_internal_r+0x174c>
100039e4:	d9003617 	ldw	r4,216(sp)
100039e8:	d9403817 	ldw	r5,224(sp)
100039ec:	000d883a 	mov	r6,zero
100039f0:	000f883a 	mov	r7,zero
100039f4:	000ec4c0 	call	1000ec4c <__ledf2>
100039f8:	da003d17 	ldw	r8,244(sp)
100039fc:	1005e316 	blt	r2,zero,1000518c <___vfprintf_internal_r+0x1de4>
10003a00:	df002783 	ldbu	fp,158(sp)
10003a04:	008011c4 	movi	r2,71
10003a08:	1445580e 	bge	r2,r17,10004f6c <___vfprintf_internal_r+0x1bc4>
10003a0c:	04040074 	movhi	r16,4097
10003a10:	840c3b04 	addi	r16,r16,12524
10003a14:	00c000c4 	movi	r3,3
10003a18:	00bfdfc4 	movi	r2,-129
10003a1c:	d8c02915 	stw	r3,164(sp)
10003a20:	90a4703a 	and	r18,r18,r2
10003a24:	d8c02b15 	stw	r3,172(sp)
10003a28:	d8002a15 	stw	zero,168(sp)
10003a2c:	d8003215 	stw	zero,200(sp)
10003a30:	00003a06 	br	10003b1c <___vfprintf_internal_r+0x774>
10003a34:	84000214 	ori	r16,r16,8
10003a38:	ac400007 	ldb	r17,0(r21)
10003a3c:	003ebc06 	br	10003530 <__alt_data_end+0xf8003530>
10003a40:	8025883a 	mov	r18,r16
10003a44:	dc002903 	ldbu	r16,164(sp)
10003a48:	e011883a 	mov	r8,fp
10003a4c:	84003fcc 	andi	r16,r16,255
10003a50:	8007001e 	bne	r16,zero,10005654 <___vfprintf_internal_r+0x22ac>
10003a54:	94800414 	ori	r18,r18,16
10003a58:	9080080c 	andi	r2,r18,32
10003a5c:	1002fa26 	beq	r2,zero,10004648 <___vfprintf_internal_r+0x12a0>
10003a60:	d9002e17 	ldw	r4,184(sp)
10003a64:	d9402a17 	ldw	r5,168(sp)
10003a68:	d8002785 	stb	zero,158(sp)
10003a6c:	20800204 	addi	r2,r4,8
10003a70:	24c00017 	ldw	r19,0(r4)
10003a74:	25800117 	ldw	r22,4(r4)
10003a78:	2804b116 	blt	r5,zero,10004d40 <___vfprintf_internal_r+0x1998>
10003a7c:	013fdfc4 	movi	r4,-129
10003a80:	9d86b03a 	or	r3,r19,r22
10003a84:	d8802e15 	stw	r2,184(sp)
10003a88:	9124703a 	and	r18,r18,r4
10003a8c:	1802fb1e 	bne	r3,zero,1000467c <___vfprintf_internal_r+0x12d4>
10003a90:	d8c02a17 	ldw	r3,168(sp)
10003a94:	0039883a 	mov	fp,zero
10003a98:	1805e526 	beq	r3,zero,10005230 <___vfprintf_internal_r+0x1e88>
10003a9c:	0027883a 	mov	r19,zero
10003aa0:	002d883a 	mov	r22,zero
10003aa4:	dc001e04 	addi	r16,sp,120
10003aa8:	9806d0fa 	srli	r3,r19,3
10003aac:	b008977a 	slli	r4,r22,29
10003ab0:	b02cd0fa 	srli	r22,r22,3
10003ab4:	9cc001cc 	andi	r19,r19,7
10003ab8:	98800c04 	addi	r2,r19,48
10003abc:	843fffc4 	addi	r16,r16,-1
10003ac0:	20e6b03a 	or	r19,r4,r3
10003ac4:	80800005 	stb	r2,0(r16)
10003ac8:	9d86b03a 	or	r3,r19,r22
10003acc:	183ff61e 	bne	r3,zero,10003aa8 <__alt_data_end+0xf8003aa8>
10003ad0:	90c0004c 	andi	r3,r18,1
10003ad4:	18014126 	beq	r3,zero,10003fdc <___vfprintf_internal_r+0xc34>
10003ad8:	10803fcc 	andi	r2,r2,255
10003adc:	1080201c 	xori	r2,r2,128
10003ae0:	10bfe004 	addi	r2,r2,-128
10003ae4:	00c00c04 	movi	r3,48
10003ae8:	10c13c26 	beq	r2,r3,10003fdc <___vfprintf_internal_r+0xc34>
10003aec:	80ffffc5 	stb	r3,-1(r16)
10003af0:	d8c02817 	ldw	r3,160(sp)
10003af4:	80bfffc4 	addi	r2,r16,-1
10003af8:	1021883a 	mov	r16,r2
10003afc:	1887c83a 	sub	r3,r3,r2
10003b00:	d8c02b15 	stw	r3,172(sp)
10003b04:	d8802b17 	ldw	r2,172(sp)
10003b08:	d9002a17 	ldw	r4,168(sp)
10003b0c:	1100010e 	bge	r2,r4,10003b14 <___vfprintf_internal_r+0x76c>
10003b10:	2005883a 	mov	r2,r4
10003b14:	d8802915 	stw	r2,164(sp)
10003b18:	d8003215 	stw	zero,200(sp)
10003b1c:	e7003fcc 	andi	fp,fp,255
10003b20:	e700201c 	xori	fp,fp,128
10003b24:	e73fe004 	addi	fp,fp,-128
10003b28:	e0000326 	beq	fp,zero,10003b38 <___vfprintf_internal_r+0x790>
10003b2c:	d8c02917 	ldw	r3,164(sp)
10003b30:	18c00044 	addi	r3,r3,1
10003b34:	d8c02915 	stw	r3,164(sp)
10003b38:	90c0008c 	andi	r3,r18,2
10003b3c:	d8c02c15 	stw	r3,176(sp)
10003b40:	18000326 	beq	r3,zero,10003b50 <___vfprintf_internal_r+0x7a8>
10003b44:	d8c02917 	ldw	r3,164(sp)
10003b48:	18c00084 	addi	r3,r3,2
10003b4c:	d8c02915 	stw	r3,164(sp)
10003b50:	90c0210c 	andi	r3,r18,132
10003b54:	d8c03015 	stw	r3,192(sp)
10003b58:	1801c51e 	bne	r3,zero,10004270 <___vfprintf_internal_r+0xec8>
10003b5c:	d9003117 	ldw	r4,196(sp)
10003b60:	d8c02917 	ldw	r3,164(sp)
10003b64:	20e7c83a 	sub	r19,r4,r3
10003b68:	04c1c10e 	bge	zero,r19,10004270 <___vfprintf_internal_r+0xec8>
10003b6c:	02400404 	movi	r9,16
10003b70:	d8c02017 	ldw	r3,128(sp)
10003b74:	d8801f17 	ldw	r2,124(sp)
10003b78:	4cc52f0e 	bge	r9,r19,10005038 <___vfprintf_internal_r+0x1c90>
10003b7c:	01440074 	movhi	r5,4097
10003b80:	294c4e84 	addi	r5,r5,12602
10003b84:	dc403b15 	stw	r17,236(sp)
10003b88:	d9403515 	stw	r5,212(sp)
10003b8c:	9823883a 	mov	r17,r19
10003b90:	482d883a 	mov	r22,r9
10003b94:	9027883a 	mov	r19,r18
10003b98:	070001c4 	movi	fp,7
10003b9c:	8025883a 	mov	r18,r16
10003ba0:	dc002d17 	ldw	r16,180(sp)
10003ba4:	00000306 	br	10003bb4 <___vfprintf_internal_r+0x80c>
10003ba8:	8c7ffc04 	addi	r17,r17,-16
10003bac:	42000204 	addi	r8,r8,8
10003bb0:	b440130e 	bge	r22,r17,10003c00 <___vfprintf_internal_r+0x858>
10003bb4:	01040074 	movhi	r4,4097
10003bb8:	18c00404 	addi	r3,r3,16
10003bbc:	10800044 	addi	r2,r2,1
10003bc0:	210c4e84 	addi	r4,r4,12602
10003bc4:	41000015 	stw	r4,0(r8)
10003bc8:	45800115 	stw	r22,4(r8)
10003bcc:	d8c02015 	stw	r3,128(sp)
10003bd0:	d8801f15 	stw	r2,124(sp)
10003bd4:	e0bff40e 	bge	fp,r2,10003ba8 <__alt_data_end+0xf8003ba8>
10003bd8:	d9801e04 	addi	r6,sp,120
10003bdc:	b80b883a 	mov	r5,r23
10003be0:	8009883a 	mov	r4,r16
10003be4:	000ab880 	call	1000ab88 <__sprint_r>
10003be8:	103ef31e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10003bec:	8c7ffc04 	addi	r17,r17,-16
10003bf0:	d8c02017 	ldw	r3,128(sp)
10003bf4:	d8801f17 	ldw	r2,124(sp)
10003bf8:	da000404 	addi	r8,sp,16
10003bfc:	b47fed16 	blt	r22,r17,10003bb4 <__alt_data_end+0xf8003bb4>
10003c00:	9021883a 	mov	r16,r18
10003c04:	9825883a 	mov	r18,r19
10003c08:	8827883a 	mov	r19,r17
10003c0c:	dc403b17 	ldw	r17,236(sp)
10003c10:	d9403517 	ldw	r5,212(sp)
10003c14:	98c7883a 	add	r3,r19,r3
10003c18:	10800044 	addi	r2,r2,1
10003c1c:	41400015 	stw	r5,0(r8)
10003c20:	44c00115 	stw	r19,4(r8)
10003c24:	d8c02015 	stw	r3,128(sp)
10003c28:	d8801f15 	stw	r2,124(sp)
10003c2c:	010001c4 	movi	r4,7
10003c30:	2082c516 	blt	r4,r2,10004748 <___vfprintf_internal_r+0x13a0>
10003c34:	df002787 	ldb	fp,158(sp)
10003c38:	42000204 	addi	r8,r8,8
10003c3c:	e0000c26 	beq	fp,zero,10003c70 <___vfprintf_internal_r+0x8c8>
10003c40:	d8801f17 	ldw	r2,124(sp)
10003c44:	d9002784 	addi	r4,sp,158
10003c48:	18c00044 	addi	r3,r3,1
10003c4c:	10800044 	addi	r2,r2,1
10003c50:	41000015 	stw	r4,0(r8)
10003c54:	01000044 	movi	r4,1
10003c58:	41000115 	stw	r4,4(r8)
10003c5c:	d8c02015 	stw	r3,128(sp)
10003c60:	d8801f15 	stw	r2,124(sp)
10003c64:	010001c4 	movi	r4,7
10003c68:	20825e16 	blt	r4,r2,100045e4 <___vfprintf_internal_r+0x123c>
10003c6c:	42000204 	addi	r8,r8,8
10003c70:	d8802c17 	ldw	r2,176(sp)
10003c74:	10000c26 	beq	r2,zero,10003ca8 <___vfprintf_internal_r+0x900>
10003c78:	d8801f17 	ldw	r2,124(sp)
10003c7c:	d9002704 	addi	r4,sp,156
10003c80:	18c00084 	addi	r3,r3,2
10003c84:	10800044 	addi	r2,r2,1
10003c88:	41000015 	stw	r4,0(r8)
10003c8c:	01000084 	movi	r4,2
10003c90:	41000115 	stw	r4,4(r8)
10003c94:	d8c02015 	stw	r3,128(sp)
10003c98:	d8801f15 	stw	r2,124(sp)
10003c9c:	010001c4 	movi	r4,7
10003ca0:	20825816 	blt	r4,r2,10004604 <___vfprintf_internal_r+0x125c>
10003ca4:	42000204 	addi	r8,r8,8
10003ca8:	d9003017 	ldw	r4,192(sp)
10003cac:	00802004 	movi	r2,128
10003cb0:	2081bb26 	beq	r4,r2,100043a0 <___vfprintf_internal_r+0xff8>
10003cb4:	d9402a17 	ldw	r5,168(sp)
10003cb8:	d8802b17 	ldw	r2,172(sp)
10003cbc:	28adc83a 	sub	r22,r5,r2
10003cc0:	0580310e 	bge	zero,r22,10003d88 <___vfprintf_internal_r+0x9e0>
10003cc4:	07000404 	movi	fp,16
10003cc8:	d8801f17 	ldw	r2,124(sp)
10003ccc:	e584360e 	bge	fp,r22,10004da8 <___vfprintf_internal_r+0x1a00>
10003cd0:	01440074 	movhi	r5,4097
10003cd4:	294c4a84 	addi	r5,r5,12586
10003cd8:	dc402a15 	stw	r17,168(sp)
10003cdc:	d9402c15 	stw	r5,176(sp)
10003ce0:	b023883a 	mov	r17,r22
10003ce4:	04c001c4 	movi	r19,7
10003ce8:	a82d883a 	mov	r22,r21
10003cec:	902b883a 	mov	r21,r18
10003cf0:	8025883a 	mov	r18,r16
10003cf4:	dc002d17 	ldw	r16,180(sp)
10003cf8:	00000306 	br	10003d08 <___vfprintf_internal_r+0x960>
10003cfc:	8c7ffc04 	addi	r17,r17,-16
10003d00:	42000204 	addi	r8,r8,8
10003d04:	e440110e 	bge	fp,r17,10003d4c <___vfprintf_internal_r+0x9a4>
10003d08:	18c00404 	addi	r3,r3,16
10003d0c:	10800044 	addi	r2,r2,1
10003d10:	45000015 	stw	r20,0(r8)
10003d14:	47000115 	stw	fp,4(r8)
10003d18:	d8c02015 	stw	r3,128(sp)
10003d1c:	d8801f15 	stw	r2,124(sp)
10003d20:	98bff60e 	bge	r19,r2,10003cfc <__alt_data_end+0xf8003cfc>
10003d24:	d9801e04 	addi	r6,sp,120
10003d28:	b80b883a 	mov	r5,r23
10003d2c:	8009883a 	mov	r4,r16
10003d30:	000ab880 	call	1000ab88 <__sprint_r>
10003d34:	103ea01e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10003d38:	8c7ffc04 	addi	r17,r17,-16
10003d3c:	d8c02017 	ldw	r3,128(sp)
10003d40:	d8801f17 	ldw	r2,124(sp)
10003d44:	da000404 	addi	r8,sp,16
10003d48:	e47fef16 	blt	fp,r17,10003d08 <__alt_data_end+0xf8003d08>
10003d4c:	9021883a 	mov	r16,r18
10003d50:	a825883a 	mov	r18,r21
10003d54:	b02b883a 	mov	r21,r22
10003d58:	882d883a 	mov	r22,r17
10003d5c:	dc402a17 	ldw	r17,168(sp)
10003d60:	d9002c17 	ldw	r4,176(sp)
10003d64:	1d87883a 	add	r3,r3,r22
10003d68:	10800044 	addi	r2,r2,1
10003d6c:	41000015 	stw	r4,0(r8)
10003d70:	45800115 	stw	r22,4(r8)
10003d74:	d8c02015 	stw	r3,128(sp)
10003d78:	d8801f15 	stw	r2,124(sp)
10003d7c:	010001c4 	movi	r4,7
10003d80:	20821016 	blt	r4,r2,100045c4 <___vfprintf_internal_r+0x121c>
10003d84:	42000204 	addi	r8,r8,8
10003d88:	9080400c 	andi	r2,r18,256
10003d8c:	10013a1e 	bne	r2,zero,10004278 <___vfprintf_internal_r+0xed0>
10003d90:	d9402b17 	ldw	r5,172(sp)
10003d94:	d8801f17 	ldw	r2,124(sp)
10003d98:	44000015 	stw	r16,0(r8)
10003d9c:	1947883a 	add	r3,r3,r5
10003da0:	10800044 	addi	r2,r2,1
10003da4:	41400115 	stw	r5,4(r8)
10003da8:	d8c02015 	stw	r3,128(sp)
10003dac:	d8801f15 	stw	r2,124(sp)
10003db0:	010001c4 	movi	r4,7
10003db4:	2081f516 	blt	r4,r2,1000458c <___vfprintf_internal_r+0x11e4>
10003db8:	42000204 	addi	r8,r8,8
10003dbc:	9480010c 	andi	r18,r18,4
10003dc0:	90003226 	beq	r18,zero,10003e8c <___vfprintf_internal_r+0xae4>
10003dc4:	d9403117 	ldw	r5,196(sp)
10003dc8:	d8802917 	ldw	r2,164(sp)
10003dcc:	28a1c83a 	sub	r16,r5,r2
10003dd0:	04002e0e 	bge	zero,r16,10003e8c <___vfprintf_internal_r+0xae4>
10003dd4:	04400404 	movi	r17,16
10003dd8:	d8801f17 	ldw	r2,124(sp)
10003ddc:	8c04c40e 	bge	r17,r16,100050f0 <___vfprintf_internal_r+0x1d48>
10003de0:	01440074 	movhi	r5,4097
10003de4:	294c4e84 	addi	r5,r5,12602
10003de8:	d9403515 	stw	r5,212(sp)
10003dec:	048001c4 	movi	r18,7
10003df0:	dcc02d17 	ldw	r19,180(sp)
10003df4:	00000306 	br	10003e04 <___vfprintf_internal_r+0xa5c>
10003df8:	843ffc04 	addi	r16,r16,-16
10003dfc:	42000204 	addi	r8,r8,8
10003e00:	8c00130e 	bge	r17,r16,10003e50 <___vfprintf_internal_r+0xaa8>
10003e04:	01040074 	movhi	r4,4097
10003e08:	18c00404 	addi	r3,r3,16
10003e0c:	10800044 	addi	r2,r2,1
10003e10:	210c4e84 	addi	r4,r4,12602
10003e14:	41000015 	stw	r4,0(r8)
10003e18:	44400115 	stw	r17,4(r8)
10003e1c:	d8c02015 	stw	r3,128(sp)
10003e20:	d8801f15 	stw	r2,124(sp)
10003e24:	90bff40e 	bge	r18,r2,10003df8 <__alt_data_end+0xf8003df8>
10003e28:	d9801e04 	addi	r6,sp,120
10003e2c:	b80b883a 	mov	r5,r23
10003e30:	9809883a 	mov	r4,r19
10003e34:	000ab880 	call	1000ab88 <__sprint_r>
10003e38:	103e5f1e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10003e3c:	843ffc04 	addi	r16,r16,-16
10003e40:	d8c02017 	ldw	r3,128(sp)
10003e44:	d8801f17 	ldw	r2,124(sp)
10003e48:	da000404 	addi	r8,sp,16
10003e4c:	8c3fed16 	blt	r17,r16,10003e04 <__alt_data_end+0xf8003e04>
10003e50:	d9403517 	ldw	r5,212(sp)
10003e54:	1c07883a 	add	r3,r3,r16
10003e58:	10800044 	addi	r2,r2,1
10003e5c:	41400015 	stw	r5,0(r8)
10003e60:	44000115 	stw	r16,4(r8)
10003e64:	d8c02015 	stw	r3,128(sp)
10003e68:	d8801f15 	stw	r2,124(sp)
10003e6c:	010001c4 	movi	r4,7
10003e70:	2080060e 	bge	r4,r2,10003e8c <___vfprintf_internal_r+0xae4>
10003e74:	d9002d17 	ldw	r4,180(sp)
10003e78:	d9801e04 	addi	r6,sp,120
10003e7c:	b80b883a 	mov	r5,r23
10003e80:	000ab880 	call	1000ab88 <__sprint_r>
10003e84:	103e4c1e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10003e88:	d8c02017 	ldw	r3,128(sp)
10003e8c:	d8803117 	ldw	r2,196(sp)
10003e90:	d9002917 	ldw	r4,164(sp)
10003e94:	1100010e 	bge	r2,r4,10003e9c <___vfprintf_internal_r+0xaf4>
10003e98:	2005883a 	mov	r2,r4
10003e9c:	d9402f17 	ldw	r5,188(sp)
10003ea0:	288b883a 	add	r5,r5,r2
10003ea4:	d9402f15 	stw	r5,188(sp)
10003ea8:	1801c01e 	bne	r3,zero,100045ac <___vfprintf_internal_r+0x1204>
10003eac:	a8800007 	ldb	r2,0(r21)
10003eb0:	d8001f15 	stw	zero,124(sp)
10003eb4:	da000404 	addi	r8,sp,16
10003eb8:	103d751e 	bne	r2,zero,10003490 <__alt_data_end+0xf8003490>
10003ebc:	a823883a 	mov	r17,r21
10003ec0:	003d8b06 	br	100034f0 <__alt_data_end+0xf80034f0>
10003ec4:	8025883a 	mov	r18,r16
10003ec8:	dc002903 	ldbu	r16,164(sp)
10003ecc:	e011883a 	mov	r8,fp
10003ed0:	84003fcc 	andi	r16,r16,255
10003ed4:	8005e51e 	bne	r16,zero,1000566c <___vfprintf_internal_r+0x22c4>
10003ed8:	94800414 	ori	r18,r18,16
10003edc:	9080080c 	andi	r2,r18,32
10003ee0:	10022b26 	beq	r2,zero,10004790 <___vfprintf_internal_r+0x13e8>
10003ee4:	d9002e17 	ldw	r4,184(sp)
10003ee8:	d9402a17 	ldw	r5,168(sp)
10003eec:	d8002785 	stb	zero,158(sp)
10003ef0:	20c00204 	addi	r3,r4,8
10003ef4:	24c00017 	ldw	r19,0(r4)
10003ef8:	25800117 	ldw	r22,4(r4)
10003efc:	28042e16 	blt	r5,zero,10004fb8 <___vfprintf_internal_r+0x1c10>
10003f00:	013fdfc4 	movi	r4,-129
10003f04:	9d84b03a 	or	r2,r19,r22
10003f08:	d8c02e15 	stw	r3,184(sp)
10003f0c:	9124703a 	and	r18,r18,r4
10003f10:	0039883a 	mov	fp,zero
10003f14:	103e801e 	bne	r2,zero,10003918 <__alt_data_end+0xf8003918>
10003f18:	d9002a17 	ldw	r4,168(sp)
10003f1c:	2002e01e 	bne	r4,zero,10004aa0 <___vfprintf_internal_r+0x16f8>
10003f20:	d8002a15 	stw	zero,168(sp)
10003f24:	d8002b15 	stw	zero,172(sp)
10003f28:	dc001e04 	addi	r16,sp,120
10003f2c:	003ef506 	br	10003b04 <__alt_data_end+0xf8003b04>
10003f30:	8025883a 	mov	r18,r16
10003f34:	dc002903 	ldbu	r16,164(sp)
10003f38:	e011883a 	mov	r8,fp
10003f3c:	84003fcc 	andi	r16,r16,255
10003f40:	8005ba1e 	bne	r16,zero,1000562c <___vfprintf_internal_r+0x2284>
10003f44:	01040074 	movhi	r4,4097
10003f48:	210c3e04 	addi	r4,r4,12536
10003f4c:	d9003915 	stw	r4,228(sp)
10003f50:	9080080c 	andi	r2,r18,32
10003f54:	10006126 	beq	r2,zero,100040dc <___vfprintf_internal_r+0xd34>
10003f58:	d9402e17 	ldw	r5,184(sp)
10003f5c:	2cc00017 	ldw	r19,0(r5)
10003f60:	2d800117 	ldw	r22,4(r5)
10003f64:	29400204 	addi	r5,r5,8
10003f68:	d9402e15 	stw	r5,184(sp)
10003f6c:	9080004c 	andi	r2,r18,1
10003f70:	1001ac26 	beq	r2,zero,10004624 <___vfprintf_internal_r+0x127c>
10003f74:	9d84b03a 	or	r2,r19,r22
10003f78:	10038526 	beq	r2,zero,10004d90 <___vfprintf_internal_r+0x19e8>
10003f7c:	d8c02a17 	ldw	r3,168(sp)
10003f80:	00800c04 	movi	r2,48
10003f84:	d8802705 	stb	r2,156(sp)
10003f88:	dc402745 	stb	r17,157(sp)
10003f8c:	d8002785 	stb	zero,158(sp)
10003f90:	90800094 	ori	r2,r18,2
10003f94:	18047916 	blt	r3,zero,1000517c <___vfprintf_internal_r+0x1dd4>
10003f98:	00bfdfc4 	movi	r2,-129
10003f9c:	90a4703a 	and	r18,r18,r2
10003fa0:	94800094 	ori	r18,r18,2
10003fa4:	0039883a 	mov	fp,zero
10003fa8:	d9003917 	ldw	r4,228(sp)
10003fac:	dc001e04 	addi	r16,sp,120
10003fb0:	988003cc 	andi	r2,r19,15
10003fb4:	b006973a 	slli	r3,r22,28
10003fb8:	2085883a 	add	r2,r4,r2
10003fbc:	9826d13a 	srli	r19,r19,4
10003fc0:	10800003 	ldbu	r2,0(r2)
10003fc4:	b02cd13a 	srli	r22,r22,4
10003fc8:	843fffc4 	addi	r16,r16,-1
10003fcc:	1ce6b03a 	or	r19,r3,r19
10003fd0:	80800005 	stb	r2,0(r16)
10003fd4:	9d84b03a 	or	r2,r19,r22
10003fd8:	103ff51e 	bne	r2,zero,10003fb0 <__alt_data_end+0xf8003fb0>
10003fdc:	d8c02817 	ldw	r3,160(sp)
10003fe0:	1c07c83a 	sub	r3,r3,r16
10003fe4:	d8c02b15 	stw	r3,172(sp)
10003fe8:	003ec606 	br	10003b04 <__alt_data_end+0xf8003b04>
10003fec:	8025883a 	mov	r18,r16
10003ff0:	dc002903 	ldbu	r16,164(sp)
10003ff4:	e011883a 	mov	r8,fp
10003ff8:	84003fcc 	andi	r16,r16,255
10003ffc:	803e9626 	beq	r16,zero,10003a58 <__alt_data_end+0xf8003a58>
10004000:	d8c02b03 	ldbu	r3,172(sp)
10004004:	d8c02785 	stb	r3,158(sp)
10004008:	003e9306 	br	10003a58 <__alt_data_end+0xf8003a58>
1000400c:	00c00044 	movi	r3,1
10004010:	d8c02905 	stb	r3,164(sp)
10004014:	00c00ac4 	movi	r3,43
10004018:	d8c02b05 	stb	r3,172(sp)
1000401c:	ac400007 	ldb	r17,0(r21)
10004020:	003d4306 	br	10003530 <__alt_data_end+0xf8003530>
10004024:	84000814 	ori	r16,r16,32
10004028:	ac400007 	ldb	r17,0(r21)
1000402c:	003d4006 	br	10003530 <__alt_data_end+0xf8003530>
10004030:	d8802e17 	ldw	r2,184(sp)
10004034:	8025883a 	mov	r18,r16
10004038:	d8002785 	stb	zero,158(sp)
1000403c:	14000017 	ldw	r16,0(r2)
10004040:	e011883a 	mov	r8,fp
10004044:	14c00104 	addi	r19,r2,4
10004048:	80042d26 	beq	r16,zero,10005100 <___vfprintf_internal_r+0x1d58>
1000404c:	d8c02a17 	ldw	r3,168(sp)
10004050:	1803e416 	blt	r3,zero,10004fe4 <___vfprintf_internal_r+0x1c3c>
10004054:	180d883a 	mov	r6,r3
10004058:	000b883a 	mov	r5,zero
1000405c:	8009883a 	mov	r4,r16
10004060:	df003d15 	stw	fp,244(sp)
10004064:	0008ce00 	call	10008ce0 <memchr>
10004068:	da003d17 	ldw	r8,244(sp)
1000406c:	10046826 	beq	r2,zero,10005210 <___vfprintf_internal_r+0x1e68>
10004070:	1405c83a 	sub	r2,r2,r16
10004074:	d8802b15 	stw	r2,172(sp)
10004078:	1003e016 	blt	r2,zero,10004ffc <___vfprintf_internal_r+0x1c54>
1000407c:	df002783 	ldbu	fp,158(sp)
10004080:	d8802915 	stw	r2,164(sp)
10004084:	dcc02e15 	stw	r19,184(sp)
10004088:	d8002a15 	stw	zero,168(sp)
1000408c:	d8003215 	stw	zero,200(sp)
10004090:	003ea206 	br	10003b1c <__alt_data_end+0xf8003b1c>
10004094:	8025883a 	mov	r18,r16
10004098:	dc002903 	ldbu	r16,164(sp)
1000409c:	e011883a 	mov	r8,fp
100040a0:	84003fcc 	andi	r16,r16,255
100040a4:	803f8d26 	beq	r16,zero,10003edc <__alt_data_end+0xf8003edc>
100040a8:	d8c02b03 	ldbu	r3,172(sp)
100040ac:	d8c02785 	stb	r3,158(sp)
100040b0:	003f8a06 	br	10003edc <__alt_data_end+0xf8003edc>
100040b4:	8025883a 	mov	r18,r16
100040b8:	dc002903 	ldbu	r16,164(sp)
100040bc:	e011883a 	mov	r8,fp
100040c0:	84003fcc 	andi	r16,r16,255
100040c4:	8005661e 	bne	r16,zero,10005660 <___vfprintf_internal_r+0x22b8>
100040c8:	01040074 	movhi	r4,4097
100040cc:	210c4304 	addi	r4,r4,12556
100040d0:	d9003915 	stw	r4,228(sp)
100040d4:	9080080c 	andi	r2,r18,32
100040d8:	103f9f1e 	bne	r2,zero,10003f58 <__alt_data_end+0xf8003f58>
100040dc:	9080040c 	andi	r2,r18,16
100040e0:	1002eb26 	beq	r2,zero,10004c90 <___vfprintf_internal_r+0x18e8>
100040e4:	d8802e17 	ldw	r2,184(sp)
100040e8:	002d883a 	mov	r22,zero
100040ec:	14c00017 	ldw	r19,0(r2)
100040f0:	10800104 	addi	r2,r2,4
100040f4:	d8802e15 	stw	r2,184(sp)
100040f8:	003f9c06 	br	10003f6c <__alt_data_end+0xf8003f6c>
100040fc:	d8802b07 	ldb	r2,172(sp)
10004100:	1002e11e 	bne	r2,zero,10004c88 <___vfprintf_internal_r+0x18e0>
10004104:	00c00044 	movi	r3,1
10004108:	d8c02905 	stb	r3,164(sp)
1000410c:	00c00804 	movi	r3,32
10004110:	d8c02b05 	stb	r3,172(sp)
10004114:	ac400007 	ldb	r17,0(r21)
10004118:	003d0506 	br	10003530 <__alt_data_end+0xf8003530>
1000411c:	84000054 	ori	r16,r16,1
10004120:	ac400007 	ldb	r17,0(r21)
10004124:	003d0206 	br	10003530 <__alt_data_end+0xf8003530>
10004128:	8025883a 	mov	r18,r16
1000412c:	dc002903 	ldbu	r16,164(sp)
10004130:	e011883a 	mov	r8,fp
10004134:	84003fcc 	andi	r16,r16,255
10004138:	803de726 	beq	r16,zero,100038d8 <__alt_data_end+0xf80038d8>
1000413c:	d8c02b03 	ldbu	r3,172(sp)
10004140:	d8c02785 	stb	r3,158(sp)
10004144:	003de406 	br	100038d8 <__alt_data_end+0xf80038d8>
10004148:	84001014 	ori	r16,r16,64
1000414c:	ac400007 	ldb	r17,0(r21)
10004150:	003cf706 	br	10003530 <__alt_data_end+0xf8003530>
10004154:	ac400007 	ldb	r17,0(r21)
10004158:	00801b04 	movi	r2,108
1000415c:	88838f26 	beq	r17,r2,10004f9c <___vfprintf_internal_r+0x1bf4>
10004160:	84000414 	ori	r16,r16,16
10004164:	003cf206 	br	10003530 <__alt_data_end+0xf8003530>
10004168:	8025883a 	mov	r18,r16
1000416c:	dc002903 	ldbu	r16,164(sp)
10004170:	e011883a 	mov	r8,fp
10004174:	84003fcc 	andi	r16,r16,255
10004178:	80053f1e 	bne	r16,zero,10005678 <___vfprintf_internal_r+0x22d0>
1000417c:	9080080c 	andi	r2,r18,32
10004180:	1002d226 	beq	r2,zero,10004ccc <___vfprintf_internal_r+0x1924>
10004184:	d9002e17 	ldw	r4,184(sp)
10004188:	d9402f17 	ldw	r5,188(sp)
1000418c:	20800017 	ldw	r2,0(r4)
10004190:	2807d7fa 	srai	r3,r5,31
10004194:	21000104 	addi	r4,r4,4
10004198:	d9002e15 	stw	r4,184(sp)
1000419c:	11400015 	stw	r5,0(r2)
100041a0:	10c00115 	stw	r3,4(r2)
100041a4:	003cb806 	br	10003488 <__alt_data_end+0xf8003488>
100041a8:	d8c02e17 	ldw	r3,184(sp)
100041ac:	d9002e17 	ldw	r4,184(sp)
100041b0:	8025883a 	mov	r18,r16
100041b4:	18800017 	ldw	r2,0(r3)
100041b8:	21000104 	addi	r4,r4,4
100041bc:	00c00044 	movi	r3,1
100041c0:	e011883a 	mov	r8,fp
100041c4:	d8c02915 	stw	r3,164(sp)
100041c8:	d8002785 	stb	zero,158(sp)
100041cc:	d8801405 	stb	r2,80(sp)
100041d0:	d9002e15 	stw	r4,184(sp)
100041d4:	d8c02b15 	stw	r3,172(sp)
100041d8:	d8002a15 	stw	zero,168(sp)
100041dc:	d8003215 	stw	zero,200(sp)
100041e0:	dc001404 	addi	r16,sp,80
100041e4:	0039883a 	mov	fp,zero
100041e8:	003e5306 	br	10003b38 <__alt_data_end+0xf8003b38>
100041ec:	01040074 	movhi	r4,4097
100041f0:	210c4304 	addi	r4,r4,12556
100041f4:	0039883a 	mov	fp,zero
100041f8:	d9003915 	stw	r4,228(sp)
100041fc:	04401e04 	movi	r17,120
10004200:	003f6906 	br	10003fa8 <__alt_data_end+0xf8003fa8>
10004204:	8025883a 	mov	r18,r16
10004208:	dc002903 	ldbu	r16,164(sp)
1000420c:	e011883a 	mov	r8,fp
10004210:	84003fcc 	andi	r16,r16,255
10004214:	8005081e 	bne	r16,zero,10005638 <___vfprintf_internal_r+0x2290>
10004218:	883d6126 	beq	r17,zero,100037a0 <__alt_data_end+0xf80037a0>
1000421c:	00c00044 	movi	r3,1
10004220:	d8c02915 	stw	r3,164(sp)
10004224:	dc401405 	stb	r17,80(sp)
10004228:	d8002785 	stb	zero,158(sp)
1000422c:	003fe906 	br	100041d4 <__alt_data_end+0xf80041d4>
10004230:	01440074 	movhi	r5,4097
10004234:	294c4304 	addi	r5,r5,12556
10004238:	d9403915 	stw	r5,228(sp)
1000423c:	d8c02e15 	stw	r3,184(sp)
10004240:	1025883a 	mov	r18,r2
10004244:	04401e04 	movi	r17,120
10004248:	9d84b03a 	or	r2,r19,r22
1000424c:	1000fc1e 	bne	r2,zero,10004640 <___vfprintf_internal_r+0x1298>
10004250:	0039883a 	mov	fp,zero
10004254:	00800084 	movi	r2,2
10004258:	10803fcc 	andi	r2,r2,255
1000425c:	00c00044 	movi	r3,1
10004260:	10c20f26 	beq	r2,r3,10004aa0 <___vfprintf_internal_r+0x16f8>
10004264:	00c00084 	movi	r3,2
10004268:	10fd3326 	beq	r2,r3,10003738 <__alt_data_end+0xf8003738>
1000426c:	003e0b06 	br	10003a9c <__alt_data_end+0xf8003a9c>
10004270:	d8c02017 	ldw	r3,128(sp)
10004274:	003e7106 	br	10003c3c <__alt_data_end+0xf8003c3c>
10004278:	00801944 	movi	r2,101
1000427c:	14407e0e 	bge	r2,r17,10004478 <___vfprintf_internal_r+0x10d0>
10004280:	d9003617 	ldw	r4,216(sp)
10004284:	d9403817 	ldw	r5,224(sp)
10004288:	000d883a 	mov	r6,zero
1000428c:	000f883a 	mov	r7,zero
10004290:	d8c03c15 	stw	r3,240(sp)
10004294:	da003d15 	stw	r8,244(sp)
10004298:	000eae80 	call	1000eae8 <__eqdf2>
1000429c:	d8c03c17 	ldw	r3,240(sp)
100042a0:	da003d17 	ldw	r8,244(sp)
100042a4:	1000f71e 	bne	r2,zero,10004684 <___vfprintf_internal_r+0x12dc>
100042a8:	d8801f17 	ldw	r2,124(sp)
100042ac:	01040074 	movhi	r4,4097
100042b0:	210c4a04 	addi	r4,r4,12584
100042b4:	18c00044 	addi	r3,r3,1
100042b8:	10800044 	addi	r2,r2,1
100042bc:	41000015 	stw	r4,0(r8)
100042c0:	01000044 	movi	r4,1
100042c4:	41000115 	stw	r4,4(r8)
100042c8:	d8c02015 	stw	r3,128(sp)
100042cc:	d8801f15 	stw	r2,124(sp)
100042d0:	010001c4 	movi	r4,7
100042d4:	2082b816 	blt	r4,r2,10004db8 <___vfprintf_internal_r+0x1a10>
100042d8:	42000204 	addi	r8,r8,8
100042dc:	d8802617 	ldw	r2,152(sp)
100042e0:	d9403317 	ldw	r5,204(sp)
100042e4:	11400216 	blt	r2,r5,100042f0 <___vfprintf_internal_r+0xf48>
100042e8:	9080004c 	andi	r2,r18,1
100042ec:	103eb326 	beq	r2,zero,10003dbc <__alt_data_end+0xf8003dbc>
100042f0:	d8803717 	ldw	r2,220(sp)
100042f4:	d9003417 	ldw	r4,208(sp)
100042f8:	d9403717 	ldw	r5,220(sp)
100042fc:	1887883a 	add	r3,r3,r2
10004300:	d8801f17 	ldw	r2,124(sp)
10004304:	41000015 	stw	r4,0(r8)
10004308:	41400115 	stw	r5,4(r8)
1000430c:	10800044 	addi	r2,r2,1
10004310:	d8c02015 	stw	r3,128(sp)
10004314:	d8801f15 	stw	r2,124(sp)
10004318:	010001c4 	movi	r4,7
1000431c:	20832916 	blt	r4,r2,10004fc4 <___vfprintf_internal_r+0x1c1c>
10004320:	42000204 	addi	r8,r8,8
10004324:	d8803317 	ldw	r2,204(sp)
10004328:	143fffc4 	addi	r16,r2,-1
1000432c:	043ea30e 	bge	zero,r16,10003dbc <__alt_data_end+0xf8003dbc>
10004330:	04400404 	movi	r17,16
10004334:	d8801f17 	ldw	r2,124(sp)
10004338:	8c00880e 	bge	r17,r16,1000455c <___vfprintf_internal_r+0x11b4>
1000433c:	01440074 	movhi	r5,4097
10004340:	294c4a84 	addi	r5,r5,12586
10004344:	d9402c15 	stw	r5,176(sp)
10004348:	058001c4 	movi	r22,7
1000434c:	dcc02d17 	ldw	r19,180(sp)
10004350:	00000306 	br	10004360 <___vfprintf_internal_r+0xfb8>
10004354:	42000204 	addi	r8,r8,8
10004358:	843ffc04 	addi	r16,r16,-16
1000435c:	8c00820e 	bge	r17,r16,10004568 <___vfprintf_internal_r+0x11c0>
10004360:	18c00404 	addi	r3,r3,16
10004364:	10800044 	addi	r2,r2,1
10004368:	45000015 	stw	r20,0(r8)
1000436c:	44400115 	stw	r17,4(r8)
10004370:	d8c02015 	stw	r3,128(sp)
10004374:	d8801f15 	stw	r2,124(sp)
10004378:	b0bff60e 	bge	r22,r2,10004354 <__alt_data_end+0xf8004354>
1000437c:	d9801e04 	addi	r6,sp,120
10004380:	b80b883a 	mov	r5,r23
10004384:	9809883a 	mov	r4,r19
10004388:	000ab880 	call	1000ab88 <__sprint_r>
1000438c:	103d0a1e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10004390:	d8c02017 	ldw	r3,128(sp)
10004394:	d8801f17 	ldw	r2,124(sp)
10004398:	da000404 	addi	r8,sp,16
1000439c:	003fee06 	br	10004358 <__alt_data_end+0xf8004358>
100043a0:	d9403117 	ldw	r5,196(sp)
100043a4:	d8802917 	ldw	r2,164(sp)
100043a8:	28adc83a 	sub	r22,r5,r2
100043ac:	05be410e 	bge	zero,r22,10003cb4 <__alt_data_end+0xf8003cb4>
100043b0:	07000404 	movi	fp,16
100043b4:	d8801f17 	ldw	r2,124(sp)
100043b8:	e5838f0e 	bge	fp,r22,100051f8 <___vfprintf_internal_r+0x1e50>
100043bc:	01440074 	movhi	r5,4097
100043c0:	294c4a84 	addi	r5,r5,12586
100043c4:	dc403015 	stw	r17,192(sp)
100043c8:	d9402c15 	stw	r5,176(sp)
100043cc:	b023883a 	mov	r17,r22
100043d0:	04c001c4 	movi	r19,7
100043d4:	a82d883a 	mov	r22,r21
100043d8:	902b883a 	mov	r21,r18
100043dc:	8025883a 	mov	r18,r16
100043e0:	dc002d17 	ldw	r16,180(sp)
100043e4:	00000306 	br	100043f4 <___vfprintf_internal_r+0x104c>
100043e8:	8c7ffc04 	addi	r17,r17,-16
100043ec:	42000204 	addi	r8,r8,8
100043f0:	e440110e 	bge	fp,r17,10004438 <___vfprintf_internal_r+0x1090>
100043f4:	18c00404 	addi	r3,r3,16
100043f8:	10800044 	addi	r2,r2,1
100043fc:	45000015 	stw	r20,0(r8)
10004400:	47000115 	stw	fp,4(r8)
10004404:	d8c02015 	stw	r3,128(sp)
10004408:	d8801f15 	stw	r2,124(sp)
1000440c:	98bff60e 	bge	r19,r2,100043e8 <__alt_data_end+0xf80043e8>
10004410:	d9801e04 	addi	r6,sp,120
10004414:	b80b883a 	mov	r5,r23
10004418:	8009883a 	mov	r4,r16
1000441c:	000ab880 	call	1000ab88 <__sprint_r>
10004420:	103ce51e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10004424:	8c7ffc04 	addi	r17,r17,-16
10004428:	d8c02017 	ldw	r3,128(sp)
1000442c:	d8801f17 	ldw	r2,124(sp)
10004430:	da000404 	addi	r8,sp,16
10004434:	e47fef16 	blt	fp,r17,100043f4 <__alt_data_end+0xf80043f4>
10004438:	9021883a 	mov	r16,r18
1000443c:	a825883a 	mov	r18,r21
10004440:	b02b883a 	mov	r21,r22
10004444:	882d883a 	mov	r22,r17
10004448:	dc403017 	ldw	r17,192(sp)
1000444c:	d9002c17 	ldw	r4,176(sp)
10004450:	1d87883a 	add	r3,r3,r22
10004454:	10800044 	addi	r2,r2,1
10004458:	41000015 	stw	r4,0(r8)
1000445c:	45800115 	stw	r22,4(r8)
10004460:	d8c02015 	stw	r3,128(sp)
10004464:	d8801f15 	stw	r2,124(sp)
10004468:	010001c4 	movi	r4,7
1000446c:	20818e16 	blt	r4,r2,10004aa8 <___vfprintf_internal_r+0x1700>
10004470:	42000204 	addi	r8,r8,8
10004474:	003e0f06 	br	10003cb4 <__alt_data_end+0xf8003cb4>
10004478:	d9403317 	ldw	r5,204(sp)
1000447c:	00800044 	movi	r2,1
10004480:	18c00044 	addi	r3,r3,1
10004484:	1141530e 	bge	r2,r5,100049d4 <___vfprintf_internal_r+0x162c>
10004488:	dc401f17 	ldw	r17,124(sp)
1000448c:	00800044 	movi	r2,1
10004490:	40800115 	stw	r2,4(r8)
10004494:	8c400044 	addi	r17,r17,1
10004498:	44000015 	stw	r16,0(r8)
1000449c:	d8c02015 	stw	r3,128(sp)
100044a0:	dc401f15 	stw	r17,124(sp)
100044a4:	008001c4 	movi	r2,7
100044a8:	14416b16 	blt	r2,r17,10004a58 <___vfprintf_internal_r+0x16b0>
100044ac:	42000204 	addi	r8,r8,8
100044b0:	d8803717 	ldw	r2,220(sp)
100044b4:	d9003417 	ldw	r4,208(sp)
100044b8:	8c400044 	addi	r17,r17,1
100044bc:	10c7883a 	add	r3,r2,r3
100044c0:	40800115 	stw	r2,4(r8)
100044c4:	41000015 	stw	r4,0(r8)
100044c8:	d8c02015 	stw	r3,128(sp)
100044cc:	dc401f15 	stw	r17,124(sp)
100044d0:	008001c4 	movi	r2,7
100044d4:	14416916 	blt	r2,r17,10004a7c <___vfprintf_internal_r+0x16d4>
100044d8:	45800204 	addi	r22,r8,8
100044dc:	d9003617 	ldw	r4,216(sp)
100044e0:	d9403817 	ldw	r5,224(sp)
100044e4:	000d883a 	mov	r6,zero
100044e8:	000f883a 	mov	r7,zero
100044ec:	d8c03c15 	stw	r3,240(sp)
100044f0:	000eae80 	call	1000eae8 <__eqdf2>
100044f4:	d8c03c17 	ldw	r3,240(sp)
100044f8:	1000bc26 	beq	r2,zero,100047ec <___vfprintf_internal_r+0x1444>
100044fc:	d9403317 	ldw	r5,204(sp)
10004500:	84000044 	addi	r16,r16,1
10004504:	8c400044 	addi	r17,r17,1
10004508:	28bfffc4 	addi	r2,r5,-1
1000450c:	1887883a 	add	r3,r3,r2
10004510:	b0800115 	stw	r2,4(r22)
10004514:	b4000015 	stw	r16,0(r22)
10004518:	d8c02015 	stw	r3,128(sp)
1000451c:	dc401f15 	stw	r17,124(sp)
10004520:	008001c4 	movi	r2,7
10004524:	14414316 	blt	r2,r17,10004a34 <___vfprintf_internal_r+0x168c>
10004528:	b5800204 	addi	r22,r22,8
1000452c:	d9003a17 	ldw	r4,232(sp)
10004530:	df0022c4 	addi	fp,sp,139
10004534:	8c400044 	addi	r17,r17,1
10004538:	20c7883a 	add	r3,r4,r3
1000453c:	b7000015 	stw	fp,0(r22)
10004540:	b1000115 	stw	r4,4(r22)
10004544:	d8c02015 	stw	r3,128(sp)
10004548:	dc401f15 	stw	r17,124(sp)
1000454c:	008001c4 	movi	r2,7
10004550:	14400e16 	blt	r2,r17,1000458c <___vfprintf_internal_r+0x11e4>
10004554:	b2000204 	addi	r8,r22,8
10004558:	003e1806 	br	10003dbc <__alt_data_end+0xf8003dbc>
1000455c:	01040074 	movhi	r4,4097
10004560:	210c4a84 	addi	r4,r4,12586
10004564:	d9002c15 	stw	r4,176(sp)
10004568:	d9002c17 	ldw	r4,176(sp)
1000456c:	1c07883a 	add	r3,r3,r16
10004570:	44000115 	stw	r16,4(r8)
10004574:	41000015 	stw	r4,0(r8)
10004578:	10800044 	addi	r2,r2,1
1000457c:	d8c02015 	stw	r3,128(sp)
10004580:	d8801f15 	stw	r2,124(sp)
10004584:	010001c4 	movi	r4,7
10004588:	20be0b0e 	bge	r4,r2,10003db8 <__alt_data_end+0xf8003db8>
1000458c:	d9002d17 	ldw	r4,180(sp)
10004590:	d9801e04 	addi	r6,sp,120
10004594:	b80b883a 	mov	r5,r23
10004598:	000ab880 	call	1000ab88 <__sprint_r>
1000459c:	103c861e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
100045a0:	d8c02017 	ldw	r3,128(sp)
100045a4:	da000404 	addi	r8,sp,16
100045a8:	003e0406 	br	10003dbc <__alt_data_end+0xf8003dbc>
100045ac:	d9002d17 	ldw	r4,180(sp)
100045b0:	d9801e04 	addi	r6,sp,120
100045b4:	b80b883a 	mov	r5,r23
100045b8:	000ab880 	call	1000ab88 <__sprint_r>
100045bc:	103e3b26 	beq	r2,zero,10003eac <__alt_data_end+0xf8003eac>
100045c0:	003c7d06 	br	100037b8 <__alt_data_end+0xf80037b8>
100045c4:	d9002d17 	ldw	r4,180(sp)
100045c8:	d9801e04 	addi	r6,sp,120
100045cc:	b80b883a 	mov	r5,r23
100045d0:	000ab880 	call	1000ab88 <__sprint_r>
100045d4:	103c781e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
100045d8:	d8c02017 	ldw	r3,128(sp)
100045dc:	da000404 	addi	r8,sp,16
100045e0:	003de906 	br	10003d88 <__alt_data_end+0xf8003d88>
100045e4:	d9002d17 	ldw	r4,180(sp)
100045e8:	d9801e04 	addi	r6,sp,120
100045ec:	b80b883a 	mov	r5,r23
100045f0:	000ab880 	call	1000ab88 <__sprint_r>
100045f4:	103c701e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
100045f8:	d8c02017 	ldw	r3,128(sp)
100045fc:	da000404 	addi	r8,sp,16
10004600:	003d9b06 	br	10003c70 <__alt_data_end+0xf8003c70>
10004604:	d9002d17 	ldw	r4,180(sp)
10004608:	d9801e04 	addi	r6,sp,120
1000460c:	b80b883a 	mov	r5,r23
10004610:	000ab880 	call	1000ab88 <__sprint_r>
10004614:	103c681e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10004618:	d8c02017 	ldw	r3,128(sp)
1000461c:	da000404 	addi	r8,sp,16
10004620:	003da106 	br	10003ca8 <__alt_data_end+0xf8003ca8>
10004624:	d9402a17 	ldw	r5,168(sp)
10004628:	d8002785 	stb	zero,158(sp)
1000462c:	283f0616 	blt	r5,zero,10004248 <__alt_data_end+0xf8004248>
10004630:	00ffdfc4 	movi	r3,-129
10004634:	9d84b03a 	or	r2,r19,r22
10004638:	90e4703a 	and	r18,r18,r3
1000463c:	103c3b26 	beq	r2,zero,1000372c <__alt_data_end+0xf800372c>
10004640:	0039883a 	mov	fp,zero
10004644:	003e5806 	br	10003fa8 <__alt_data_end+0xf8003fa8>
10004648:	9080040c 	andi	r2,r18,16
1000464c:	1001b326 	beq	r2,zero,10004d1c <___vfprintf_internal_r+0x1974>
10004650:	d8c02e17 	ldw	r3,184(sp)
10004654:	d9002a17 	ldw	r4,168(sp)
10004658:	d8002785 	stb	zero,158(sp)
1000465c:	18800104 	addi	r2,r3,4
10004660:	1cc00017 	ldw	r19,0(r3)
10004664:	002d883a 	mov	r22,zero
10004668:	2001b516 	blt	r4,zero,10004d40 <___vfprintf_internal_r+0x1998>
1000466c:	00ffdfc4 	movi	r3,-129
10004670:	d8802e15 	stw	r2,184(sp)
10004674:	90e4703a 	and	r18,r18,r3
10004678:	983d0526 	beq	r19,zero,10003a90 <__alt_data_end+0xf8003a90>
1000467c:	0039883a 	mov	fp,zero
10004680:	003d0806 	br	10003aa4 <__alt_data_end+0xf8003aa4>
10004684:	dc402617 	ldw	r17,152(sp)
10004688:	0441d30e 	bge	zero,r17,10004dd8 <___vfprintf_internal_r+0x1a30>
1000468c:	dc403217 	ldw	r17,200(sp)
10004690:	d8803317 	ldw	r2,204(sp)
10004694:	1440010e 	bge	r2,r17,1000469c <___vfprintf_internal_r+0x12f4>
10004698:	1023883a 	mov	r17,r2
1000469c:	04400a0e 	bge	zero,r17,100046c8 <___vfprintf_internal_r+0x1320>
100046a0:	d8801f17 	ldw	r2,124(sp)
100046a4:	1c47883a 	add	r3,r3,r17
100046a8:	44000015 	stw	r16,0(r8)
100046ac:	10800044 	addi	r2,r2,1
100046b0:	44400115 	stw	r17,4(r8)
100046b4:	d8c02015 	stw	r3,128(sp)
100046b8:	d8801f15 	stw	r2,124(sp)
100046bc:	010001c4 	movi	r4,7
100046c0:	20826516 	blt	r4,r2,10005058 <___vfprintf_internal_r+0x1cb0>
100046c4:	42000204 	addi	r8,r8,8
100046c8:	88026116 	blt	r17,zero,10005050 <___vfprintf_internal_r+0x1ca8>
100046cc:	d9003217 	ldw	r4,200(sp)
100046d0:	2463c83a 	sub	r17,r4,r17
100046d4:	04407b0e 	bge	zero,r17,100048c4 <___vfprintf_internal_r+0x151c>
100046d8:	05800404 	movi	r22,16
100046dc:	d8801f17 	ldw	r2,124(sp)
100046e0:	b4419d0e 	bge	r22,r17,10004d58 <___vfprintf_internal_r+0x19b0>
100046e4:	01040074 	movhi	r4,4097
100046e8:	210c4a84 	addi	r4,r4,12586
100046ec:	d9002c15 	stw	r4,176(sp)
100046f0:	070001c4 	movi	fp,7
100046f4:	dcc02d17 	ldw	r19,180(sp)
100046f8:	00000306 	br	10004708 <___vfprintf_internal_r+0x1360>
100046fc:	42000204 	addi	r8,r8,8
10004700:	8c7ffc04 	addi	r17,r17,-16
10004704:	b441970e 	bge	r22,r17,10004d64 <___vfprintf_internal_r+0x19bc>
10004708:	18c00404 	addi	r3,r3,16
1000470c:	10800044 	addi	r2,r2,1
10004710:	45000015 	stw	r20,0(r8)
10004714:	45800115 	stw	r22,4(r8)
10004718:	d8c02015 	stw	r3,128(sp)
1000471c:	d8801f15 	stw	r2,124(sp)
10004720:	e0bff60e 	bge	fp,r2,100046fc <__alt_data_end+0xf80046fc>
10004724:	d9801e04 	addi	r6,sp,120
10004728:	b80b883a 	mov	r5,r23
1000472c:	9809883a 	mov	r4,r19
10004730:	000ab880 	call	1000ab88 <__sprint_r>
10004734:	103c201e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10004738:	d8c02017 	ldw	r3,128(sp)
1000473c:	d8801f17 	ldw	r2,124(sp)
10004740:	da000404 	addi	r8,sp,16
10004744:	003fee06 	br	10004700 <__alt_data_end+0xf8004700>
10004748:	d9002d17 	ldw	r4,180(sp)
1000474c:	d9801e04 	addi	r6,sp,120
10004750:	b80b883a 	mov	r5,r23
10004754:	000ab880 	call	1000ab88 <__sprint_r>
10004758:	103c171e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
1000475c:	d8c02017 	ldw	r3,128(sp)
10004760:	df002787 	ldb	fp,158(sp)
10004764:	da000404 	addi	r8,sp,16
10004768:	003d3406 	br	10003c3c <__alt_data_end+0xf8003c3c>
1000476c:	9080040c 	andi	r2,r18,16
10004770:	10016126 	beq	r2,zero,10004cf8 <___vfprintf_internal_r+0x1950>
10004774:	d9402e17 	ldw	r5,184(sp)
10004778:	2cc00017 	ldw	r19,0(r5)
1000477c:	29400104 	addi	r5,r5,4
10004780:	d9402e15 	stw	r5,184(sp)
10004784:	982dd7fa 	srai	r22,r19,31
10004788:	b005883a 	mov	r2,r22
1000478c:	003c5a06 	br	100038f8 <__alt_data_end+0xf80038f8>
10004790:	9080040c 	andi	r2,r18,16
10004794:	10003526 	beq	r2,zero,1000486c <___vfprintf_internal_r+0x14c4>
10004798:	d8c02e17 	ldw	r3,184(sp)
1000479c:	d9002a17 	ldw	r4,168(sp)
100047a0:	d8002785 	stb	zero,158(sp)
100047a4:	18800104 	addi	r2,r3,4
100047a8:	1cc00017 	ldw	r19,0(r3)
100047ac:	002d883a 	mov	r22,zero
100047b0:	20003716 	blt	r4,zero,10004890 <___vfprintf_internal_r+0x14e8>
100047b4:	00ffdfc4 	movi	r3,-129
100047b8:	d8802e15 	stw	r2,184(sp)
100047bc:	90e4703a 	and	r18,r18,r3
100047c0:	0039883a 	mov	fp,zero
100047c4:	983dd426 	beq	r19,zero,10003f18 <__alt_data_end+0xf8003f18>
100047c8:	00800244 	movi	r2,9
100047cc:	14fc5336 	bltu	r2,r19,1000391c <__alt_data_end+0xf800391c>
100047d0:	d8c02817 	ldw	r3,160(sp)
100047d4:	dc001dc4 	addi	r16,sp,119
100047d8:	9cc00c04 	addi	r19,r19,48
100047dc:	1c07c83a 	sub	r3,r3,r16
100047e0:	dcc01dc5 	stb	r19,119(sp)
100047e4:	d8c02b15 	stw	r3,172(sp)
100047e8:	003cc606 	br	10003b04 <__alt_data_end+0xf8003b04>
100047ec:	d8803317 	ldw	r2,204(sp)
100047f0:	143fffc4 	addi	r16,r2,-1
100047f4:	043f4d0e 	bge	zero,r16,1000452c <__alt_data_end+0xf800452c>
100047f8:	07000404 	movi	fp,16
100047fc:	e400810e 	bge	fp,r16,10004a04 <___vfprintf_internal_r+0x165c>
10004800:	01440074 	movhi	r5,4097
10004804:	294c4a84 	addi	r5,r5,12586
10004808:	d9402c15 	stw	r5,176(sp)
1000480c:	01c001c4 	movi	r7,7
10004810:	dcc02d17 	ldw	r19,180(sp)
10004814:	00000306 	br	10004824 <___vfprintf_internal_r+0x147c>
10004818:	b5800204 	addi	r22,r22,8
1000481c:	843ffc04 	addi	r16,r16,-16
10004820:	e4007b0e 	bge	fp,r16,10004a10 <___vfprintf_internal_r+0x1668>
10004824:	18c00404 	addi	r3,r3,16
10004828:	8c400044 	addi	r17,r17,1
1000482c:	b5000015 	stw	r20,0(r22)
10004830:	b7000115 	stw	fp,4(r22)
10004834:	d8c02015 	stw	r3,128(sp)
10004838:	dc401f15 	stw	r17,124(sp)
1000483c:	3c7ff60e 	bge	r7,r17,10004818 <__alt_data_end+0xf8004818>
10004840:	d9801e04 	addi	r6,sp,120
10004844:	b80b883a 	mov	r5,r23
10004848:	9809883a 	mov	r4,r19
1000484c:	d9c03c15 	stw	r7,240(sp)
10004850:	000ab880 	call	1000ab88 <__sprint_r>
10004854:	d9c03c17 	ldw	r7,240(sp)
10004858:	103bd71e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
1000485c:	d8c02017 	ldw	r3,128(sp)
10004860:	dc401f17 	ldw	r17,124(sp)
10004864:	dd800404 	addi	r22,sp,16
10004868:	003fec06 	br	1000481c <__alt_data_end+0xf800481c>
1000486c:	9080100c 	andi	r2,r18,64
10004870:	d8002785 	stb	zero,158(sp)
10004874:	10010e26 	beq	r2,zero,10004cb0 <___vfprintf_internal_r+0x1908>
10004878:	d9402e17 	ldw	r5,184(sp)
1000487c:	d8c02a17 	ldw	r3,168(sp)
10004880:	002d883a 	mov	r22,zero
10004884:	28800104 	addi	r2,r5,4
10004888:	2cc0000b 	ldhu	r19,0(r5)
1000488c:	183fc90e 	bge	r3,zero,100047b4 <__alt_data_end+0xf80047b4>
10004890:	d8802e15 	stw	r2,184(sp)
10004894:	0039883a 	mov	fp,zero
10004898:	9d84b03a 	or	r2,r19,r22
1000489c:	103c1e1e 	bne	r2,zero,10003918 <__alt_data_end+0xf8003918>
100048a0:	00800044 	movi	r2,1
100048a4:	003e6c06 	br	10004258 <__alt_data_end+0xf8004258>
100048a8:	d9002d17 	ldw	r4,180(sp)
100048ac:	d9801e04 	addi	r6,sp,120
100048b0:	b80b883a 	mov	r5,r23
100048b4:	000ab880 	call	1000ab88 <__sprint_r>
100048b8:	103bbf1e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
100048bc:	d8c02017 	ldw	r3,128(sp)
100048c0:	da000404 	addi	r8,sp,16
100048c4:	d9003217 	ldw	r4,200(sp)
100048c8:	d8802617 	ldw	r2,152(sp)
100048cc:	d9403317 	ldw	r5,204(sp)
100048d0:	8123883a 	add	r17,r16,r4
100048d4:	11400216 	blt	r2,r5,100048e0 <___vfprintf_internal_r+0x1538>
100048d8:	9100004c 	andi	r4,r18,1
100048dc:	20000d26 	beq	r4,zero,10004914 <___vfprintf_internal_r+0x156c>
100048e0:	d9003717 	ldw	r4,220(sp)
100048e4:	d9403417 	ldw	r5,208(sp)
100048e8:	1907883a 	add	r3,r3,r4
100048ec:	d9001f17 	ldw	r4,124(sp)
100048f0:	41400015 	stw	r5,0(r8)
100048f4:	d9403717 	ldw	r5,220(sp)
100048f8:	21000044 	addi	r4,r4,1
100048fc:	d8c02015 	stw	r3,128(sp)
10004900:	41400115 	stw	r5,4(r8)
10004904:	d9001f15 	stw	r4,124(sp)
10004908:	014001c4 	movi	r5,7
1000490c:	2901e816 	blt	r5,r4,100050b0 <___vfprintf_internal_r+0x1d08>
10004910:	42000204 	addi	r8,r8,8
10004914:	d9003317 	ldw	r4,204(sp)
10004918:	8121883a 	add	r16,r16,r4
1000491c:	2085c83a 	sub	r2,r4,r2
10004920:	8461c83a 	sub	r16,r16,r17
10004924:	1400010e 	bge	r2,r16,1000492c <___vfprintf_internal_r+0x1584>
10004928:	1021883a 	mov	r16,r2
1000492c:	04000a0e 	bge	zero,r16,10004958 <___vfprintf_internal_r+0x15b0>
10004930:	d9001f17 	ldw	r4,124(sp)
10004934:	1c07883a 	add	r3,r3,r16
10004938:	44400015 	stw	r17,0(r8)
1000493c:	21000044 	addi	r4,r4,1
10004940:	44000115 	stw	r16,4(r8)
10004944:	d8c02015 	stw	r3,128(sp)
10004948:	d9001f15 	stw	r4,124(sp)
1000494c:	014001c4 	movi	r5,7
10004950:	2901fb16 	blt	r5,r4,10005140 <___vfprintf_internal_r+0x1d98>
10004954:	42000204 	addi	r8,r8,8
10004958:	8001f716 	blt	r16,zero,10005138 <___vfprintf_internal_r+0x1d90>
1000495c:	1421c83a 	sub	r16,r2,r16
10004960:	043d160e 	bge	zero,r16,10003dbc <__alt_data_end+0xf8003dbc>
10004964:	04400404 	movi	r17,16
10004968:	d8801f17 	ldw	r2,124(sp)
1000496c:	8c3efb0e 	bge	r17,r16,1000455c <__alt_data_end+0xf800455c>
10004970:	01440074 	movhi	r5,4097
10004974:	294c4a84 	addi	r5,r5,12586
10004978:	d9402c15 	stw	r5,176(sp)
1000497c:	058001c4 	movi	r22,7
10004980:	dcc02d17 	ldw	r19,180(sp)
10004984:	00000306 	br	10004994 <___vfprintf_internal_r+0x15ec>
10004988:	42000204 	addi	r8,r8,8
1000498c:	843ffc04 	addi	r16,r16,-16
10004990:	8c3ef50e 	bge	r17,r16,10004568 <__alt_data_end+0xf8004568>
10004994:	18c00404 	addi	r3,r3,16
10004998:	10800044 	addi	r2,r2,1
1000499c:	45000015 	stw	r20,0(r8)
100049a0:	44400115 	stw	r17,4(r8)
100049a4:	d8c02015 	stw	r3,128(sp)
100049a8:	d8801f15 	stw	r2,124(sp)
100049ac:	b0bff60e 	bge	r22,r2,10004988 <__alt_data_end+0xf8004988>
100049b0:	d9801e04 	addi	r6,sp,120
100049b4:	b80b883a 	mov	r5,r23
100049b8:	9809883a 	mov	r4,r19
100049bc:	000ab880 	call	1000ab88 <__sprint_r>
100049c0:	103b7d1e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
100049c4:	d8c02017 	ldw	r3,128(sp)
100049c8:	d8801f17 	ldw	r2,124(sp)
100049cc:	da000404 	addi	r8,sp,16
100049d0:	003fee06 	br	1000498c <__alt_data_end+0xf800498c>
100049d4:	9088703a 	and	r4,r18,r2
100049d8:	203eab1e 	bne	r4,zero,10004488 <__alt_data_end+0xf8004488>
100049dc:	dc401f17 	ldw	r17,124(sp)
100049e0:	40800115 	stw	r2,4(r8)
100049e4:	44000015 	stw	r16,0(r8)
100049e8:	8c400044 	addi	r17,r17,1
100049ec:	d8c02015 	stw	r3,128(sp)
100049f0:	dc401f15 	stw	r17,124(sp)
100049f4:	008001c4 	movi	r2,7
100049f8:	14400e16 	blt	r2,r17,10004a34 <___vfprintf_internal_r+0x168c>
100049fc:	45800204 	addi	r22,r8,8
10004a00:	003eca06 	br	1000452c <__alt_data_end+0xf800452c>
10004a04:	01040074 	movhi	r4,4097
10004a08:	210c4a84 	addi	r4,r4,12586
10004a0c:	d9002c15 	stw	r4,176(sp)
10004a10:	d8802c17 	ldw	r2,176(sp)
10004a14:	1c07883a 	add	r3,r3,r16
10004a18:	8c400044 	addi	r17,r17,1
10004a1c:	b0800015 	stw	r2,0(r22)
10004a20:	b4000115 	stw	r16,4(r22)
10004a24:	d8c02015 	stw	r3,128(sp)
10004a28:	dc401f15 	stw	r17,124(sp)
10004a2c:	008001c4 	movi	r2,7
10004a30:	147ebd0e 	bge	r2,r17,10004528 <__alt_data_end+0xf8004528>
10004a34:	d9002d17 	ldw	r4,180(sp)
10004a38:	d9801e04 	addi	r6,sp,120
10004a3c:	b80b883a 	mov	r5,r23
10004a40:	000ab880 	call	1000ab88 <__sprint_r>
10004a44:	103b5c1e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10004a48:	d8c02017 	ldw	r3,128(sp)
10004a4c:	dc401f17 	ldw	r17,124(sp)
10004a50:	dd800404 	addi	r22,sp,16
10004a54:	003eb506 	br	1000452c <__alt_data_end+0xf800452c>
10004a58:	d9002d17 	ldw	r4,180(sp)
10004a5c:	d9801e04 	addi	r6,sp,120
10004a60:	b80b883a 	mov	r5,r23
10004a64:	000ab880 	call	1000ab88 <__sprint_r>
10004a68:	103b531e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10004a6c:	d8c02017 	ldw	r3,128(sp)
10004a70:	dc401f17 	ldw	r17,124(sp)
10004a74:	da000404 	addi	r8,sp,16
10004a78:	003e8d06 	br	100044b0 <__alt_data_end+0xf80044b0>
10004a7c:	d9002d17 	ldw	r4,180(sp)
10004a80:	d9801e04 	addi	r6,sp,120
10004a84:	b80b883a 	mov	r5,r23
10004a88:	000ab880 	call	1000ab88 <__sprint_r>
10004a8c:	103b4a1e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10004a90:	d8c02017 	ldw	r3,128(sp)
10004a94:	dc401f17 	ldw	r17,124(sp)
10004a98:	dd800404 	addi	r22,sp,16
10004a9c:	003e8f06 	br	100044dc <__alt_data_end+0xf80044dc>
10004aa0:	0027883a 	mov	r19,zero
10004aa4:	003f4a06 	br	100047d0 <__alt_data_end+0xf80047d0>
10004aa8:	d9002d17 	ldw	r4,180(sp)
10004aac:	d9801e04 	addi	r6,sp,120
10004ab0:	b80b883a 	mov	r5,r23
10004ab4:	000ab880 	call	1000ab88 <__sprint_r>
10004ab8:	103b3f1e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10004abc:	d8c02017 	ldw	r3,128(sp)
10004ac0:	da000404 	addi	r8,sp,16
10004ac4:	003c7b06 	br	10003cb4 <__alt_data_end+0xf8003cb4>
10004ac8:	d9402a17 	ldw	r5,168(sp)
10004acc:	04e7c83a 	sub	r19,zero,r19
10004ad0:	07000b44 	movi	fp,45
10004ad4:	9804c03a 	cmpne	r2,r19,zero
10004ad8:	05adc83a 	sub	r22,zero,r22
10004adc:	df002785 	stb	fp,158(sp)
10004ae0:	b0adc83a 	sub	r22,r22,r2
10004ae4:	28017b16 	blt	r5,zero,100050d4 <___vfprintf_internal_r+0x1d2c>
10004ae8:	00bfdfc4 	movi	r2,-129
10004aec:	90a4703a 	and	r18,r18,r2
10004af0:	003b8906 	br	10003918 <__alt_data_end+0xf8003918>
10004af4:	d9003617 	ldw	r4,216(sp)
10004af8:	d9403817 	ldw	r5,224(sp)
10004afc:	da003d15 	stw	r8,244(sp)
10004b00:	000a7ac0 	call	1000a7ac <__fpclassifyd>
10004b04:	da003d17 	ldw	r8,244(sp)
10004b08:	1000f026 	beq	r2,zero,10004ecc <___vfprintf_internal_r+0x1b24>
10004b0c:	d9002a17 	ldw	r4,168(sp)
10004b10:	05bff7c4 	movi	r22,-33
10004b14:	00bfffc4 	movi	r2,-1
10004b18:	8dac703a 	and	r22,r17,r22
10004b1c:	20820026 	beq	r4,r2,10005320 <___vfprintf_internal_r+0x1f78>
10004b20:	008011c4 	movi	r2,71
10004b24:	b081f726 	beq	r22,r2,10005304 <___vfprintf_internal_r+0x1f5c>
10004b28:	d9003817 	ldw	r4,224(sp)
10004b2c:	90c04014 	ori	r3,r18,256
10004b30:	d8c02c15 	stw	r3,176(sp)
10004b34:	20021516 	blt	r4,zero,1000538c <___vfprintf_internal_r+0x1fe4>
10004b38:	dcc03817 	ldw	r19,224(sp)
10004b3c:	d8002905 	stb	zero,164(sp)
10004b40:	00801984 	movi	r2,102
10004b44:	8881f926 	beq	r17,r2,1000532c <___vfprintf_internal_r+0x1f84>
10004b48:	00801184 	movi	r2,70
10004b4c:	88821c26 	beq	r17,r2,100053c0 <___vfprintf_internal_r+0x2018>
10004b50:	00801144 	movi	r2,69
10004b54:	b081ef26 	beq	r22,r2,10005314 <___vfprintf_internal_r+0x1f6c>
10004b58:	d8c02a17 	ldw	r3,168(sp)
10004b5c:	d8802104 	addi	r2,sp,132
10004b60:	d8800315 	stw	r2,12(sp)
10004b64:	d9403617 	ldw	r5,216(sp)
10004b68:	d8802504 	addi	r2,sp,148
10004b6c:	d9002d17 	ldw	r4,180(sp)
10004b70:	d8800215 	stw	r2,8(sp)
10004b74:	d8802604 	addi	r2,sp,152
10004b78:	d8c00015 	stw	r3,0(sp)
10004b7c:	d8800115 	stw	r2,4(sp)
10004b80:	01c00084 	movi	r7,2
10004b84:	980d883a 	mov	r6,r19
10004b88:	d8c03c15 	stw	r3,240(sp)
10004b8c:	da003d15 	stw	r8,244(sp)
10004b90:	0005ad80 	call	10005ad8 <_dtoa_r>
10004b94:	1021883a 	mov	r16,r2
10004b98:	008019c4 	movi	r2,103
10004b9c:	d8c03c17 	ldw	r3,240(sp)
10004ba0:	da003d17 	ldw	r8,244(sp)
10004ba4:	88817126 	beq	r17,r2,1000516c <___vfprintf_internal_r+0x1dc4>
10004ba8:	008011c4 	movi	r2,71
10004bac:	88829126 	beq	r17,r2,100055f4 <___vfprintf_internal_r+0x224c>
10004bb0:	80f9883a 	add	fp,r16,r3
10004bb4:	d9003617 	ldw	r4,216(sp)
10004bb8:	000d883a 	mov	r6,zero
10004bbc:	000f883a 	mov	r7,zero
10004bc0:	980b883a 	mov	r5,r19
10004bc4:	da003d15 	stw	r8,244(sp)
10004bc8:	000eae80 	call	1000eae8 <__eqdf2>
10004bcc:	da003d17 	ldw	r8,244(sp)
10004bd0:	10018d26 	beq	r2,zero,10005208 <___vfprintf_internal_r+0x1e60>
10004bd4:	d8802117 	ldw	r2,132(sp)
10004bd8:	1700062e 	bgeu	r2,fp,10004bf4 <___vfprintf_internal_r+0x184c>
10004bdc:	01000c04 	movi	r4,48
10004be0:	10c00044 	addi	r3,r2,1
10004be4:	d8c02115 	stw	r3,132(sp)
10004be8:	11000005 	stb	r4,0(r2)
10004bec:	d8802117 	ldw	r2,132(sp)
10004bf0:	173ffb36 	bltu	r2,fp,10004be0 <__alt_data_end+0xf8004be0>
10004bf4:	1405c83a 	sub	r2,r2,r16
10004bf8:	d8803315 	stw	r2,204(sp)
10004bfc:	008011c4 	movi	r2,71
10004c00:	b0817626 	beq	r22,r2,100051dc <___vfprintf_internal_r+0x1e34>
10004c04:	00801944 	movi	r2,101
10004c08:	1442800e 	bge	r2,r17,1000560c <___vfprintf_internal_r+0x2264>
10004c0c:	d8c02617 	ldw	r3,152(sp)
10004c10:	00801984 	movi	r2,102
10004c14:	d8c03215 	stw	r3,200(sp)
10004c18:	8881fe26 	beq	r17,r2,10005414 <___vfprintf_internal_r+0x206c>
10004c1c:	d8c03217 	ldw	r3,200(sp)
10004c20:	d9003317 	ldw	r4,204(sp)
10004c24:	1901dd16 	blt	r3,r4,1000539c <___vfprintf_internal_r+0x1ff4>
10004c28:	9480004c 	andi	r18,r18,1
10004c2c:	90022b1e 	bne	r18,zero,100054dc <___vfprintf_internal_r+0x2134>
10004c30:	1805883a 	mov	r2,r3
10004c34:	18028316 	blt	r3,zero,10005644 <___vfprintf_internal_r+0x229c>
10004c38:	d8c03217 	ldw	r3,200(sp)
10004c3c:	044019c4 	movi	r17,103
10004c40:	d8c02b15 	stw	r3,172(sp)
10004c44:	df002907 	ldb	fp,164(sp)
10004c48:	e001531e 	bne	fp,zero,10005198 <___vfprintf_internal_r+0x1df0>
10004c4c:	df002783 	ldbu	fp,158(sp)
10004c50:	d8802915 	stw	r2,164(sp)
10004c54:	dc802c17 	ldw	r18,176(sp)
10004c58:	d8002a15 	stw	zero,168(sp)
10004c5c:	003baf06 	br	10003b1c <__alt_data_end+0xf8003b1c>
10004c60:	d8c02e17 	ldw	r3,184(sp)
10004c64:	d9002e17 	ldw	r4,184(sp)
10004c68:	d9402e17 	ldw	r5,184(sp)
10004c6c:	18c00017 	ldw	r3,0(r3)
10004c70:	21000117 	ldw	r4,4(r4)
10004c74:	29400204 	addi	r5,r5,8
10004c78:	d8c03615 	stw	r3,216(sp)
10004c7c:	d9003815 	stw	r4,224(sp)
10004c80:	d9402e15 	stw	r5,184(sp)
10004c84:	003b5006 	br	100039c8 <__alt_data_end+0xf80039c8>
10004c88:	ac400007 	ldb	r17,0(r21)
10004c8c:	003a2806 	br	10003530 <__alt_data_end+0xf8003530>
10004c90:	9080100c 	andi	r2,r18,64
10004c94:	1000a826 	beq	r2,zero,10004f38 <___vfprintf_internal_r+0x1b90>
10004c98:	d8c02e17 	ldw	r3,184(sp)
10004c9c:	002d883a 	mov	r22,zero
10004ca0:	1cc0000b 	ldhu	r19,0(r3)
10004ca4:	18c00104 	addi	r3,r3,4
10004ca8:	d8c02e15 	stw	r3,184(sp)
10004cac:	003caf06 	br	10003f6c <__alt_data_end+0xf8003f6c>
10004cb0:	d9002e17 	ldw	r4,184(sp)
10004cb4:	d9402a17 	ldw	r5,168(sp)
10004cb8:	002d883a 	mov	r22,zero
10004cbc:	20800104 	addi	r2,r4,4
10004cc0:	24c00017 	ldw	r19,0(r4)
10004cc4:	283ebb0e 	bge	r5,zero,100047b4 <__alt_data_end+0xf80047b4>
10004cc8:	003ef106 	br	10004890 <__alt_data_end+0xf8004890>
10004ccc:	9080040c 	andi	r2,r18,16
10004cd0:	1000921e 	bne	r2,zero,10004f1c <___vfprintf_internal_r+0x1b74>
10004cd4:	9480100c 	andi	r18,r18,64
10004cd8:	90013926 	beq	r18,zero,100051c0 <___vfprintf_internal_r+0x1e18>
10004cdc:	d9402e17 	ldw	r5,184(sp)
10004ce0:	d8c02f17 	ldw	r3,188(sp)
10004ce4:	28800017 	ldw	r2,0(r5)
10004ce8:	29400104 	addi	r5,r5,4
10004cec:	d9402e15 	stw	r5,184(sp)
10004cf0:	10c0000d 	sth	r3,0(r2)
10004cf4:	0039e406 	br	10003488 <__alt_data_end+0xf8003488>
10004cf8:	9080100c 	andi	r2,r18,64
10004cfc:	10008026 	beq	r2,zero,10004f00 <___vfprintf_internal_r+0x1b58>
10004d00:	d8802e17 	ldw	r2,184(sp)
10004d04:	14c0000f 	ldh	r19,0(r2)
10004d08:	10800104 	addi	r2,r2,4
10004d0c:	d8802e15 	stw	r2,184(sp)
10004d10:	982dd7fa 	srai	r22,r19,31
10004d14:	b005883a 	mov	r2,r22
10004d18:	003af706 	br	100038f8 <__alt_data_end+0xf80038f8>
10004d1c:	9080100c 	andi	r2,r18,64
10004d20:	d8002785 	stb	zero,158(sp)
10004d24:	10008a1e 	bne	r2,zero,10004f50 <___vfprintf_internal_r+0x1ba8>
10004d28:	d9002e17 	ldw	r4,184(sp)
10004d2c:	d9402a17 	ldw	r5,168(sp)
10004d30:	002d883a 	mov	r22,zero
10004d34:	20800104 	addi	r2,r4,4
10004d38:	24c00017 	ldw	r19,0(r4)
10004d3c:	283e4b0e 	bge	r5,zero,1000466c <__alt_data_end+0xf800466c>
10004d40:	9d86b03a 	or	r3,r19,r22
10004d44:	d8802e15 	stw	r2,184(sp)
10004d48:	183e4c1e 	bne	r3,zero,1000467c <__alt_data_end+0xf800467c>
10004d4c:	0039883a 	mov	fp,zero
10004d50:	0005883a 	mov	r2,zero
10004d54:	003d4006 	br	10004258 <__alt_data_end+0xf8004258>
10004d58:	01440074 	movhi	r5,4097
10004d5c:	294c4a84 	addi	r5,r5,12586
10004d60:	d9402c15 	stw	r5,176(sp)
10004d64:	d9402c17 	ldw	r5,176(sp)
10004d68:	1c47883a 	add	r3,r3,r17
10004d6c:	10800044 	addi	r2,r2,1
10004d70:	41400015 	stw	r5,0(r8)
10004d74:	44400115 	stw	r17,4(r8)
10004d78:	d8c02015 	stw	r3,128(sp)
10004d7c:	d8801f15 	stw	r2,124(sp)
10004d80:	010001c4 	movi	r4,7
10004d84:	20bec816 	blt	r4,r2,100048a8 <__alt_data_end+0xf80048a8>
10004d88:	42000204 	addi	r8,r8,8
10004d8c:	003ecd06 	br	100048c4 <__alt_data_end+0xf80048c4>
10004d90:	d9002a17 	ldw	r4,168(sp)
10004d94:	d8002785 	stb	zero,158(sp)
10004d98:	203d2d16 	blt	r4,zero,10004250 <__alt_data_end+0xf8004250>
10004d9c:	00bfdfc4 	movi	r2,-129
10004da0:	90a4703a 	and	r18,r18,r2
10004da4:	003a6106 	br	1000372c <__alt_data_end+0xf800372c>
10004da8:	01040074 	movhi	r4,4097
10004dac:	210c4a84 	addi	r4,r4,12586
10004db0:	d9002c15 	stw	r4,176(sp)
10004db4:	003bea06 	br	10003d60 <__alt_data_end+0xf8003d60>
10004db8:	d9002d17 	ldw	r4,180(sp)
10004dbc:	d9801e04 	addi	r6,sp,120
10004dc0:	b80b883a 	mov	r5,r23
10004dc4:	000ab880 	call	1000ab88 <__sprint_r>
10004dc8:	103a7b1e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10004dcc:	d8c02017 	ldw	r3,128(sp)
10004dd0:	da000404 	addi	r8,sp,16
10004dd4:	003d4106 	br	100042dc <__alt_data_end+0xf80042dc>
10004dd8:	d8801f17 	ldw	r2,124(sp)
10004ddc:	01440074 	movhi	r5,4097
10004de0:	01000044 	movi	r4,1
10004de4:	18c00044 	addi	r3,r3,1
10004de8:	10800044 	addi	r2,r2,1
10004dec:	294c4a04 	addi	r5,r5,12584
10004df0:	41000115 	stw	r4,4(r8)
10004df4:	41400015 	stw	r5,0(r8)
10004df8:	d8c02015 	stw	r3,128(sp)
10004dfc:	d8801f15 	stw	r2,124(sp)
10004e00:	010001c4 	movi	r4,7
10004e04:	20805c16 	blt	r4,r2,10004f78 <___vfprintf_internal_r+0x1bd0>
10004e08:	42000204 	addi	r8,r8,8
10004e0c:	8800041e 	bne	r17,zero,10004e20 <___vfprintf_internal_r+0x1a78>
10004e10:	d8803317 	ldw	r2,204(sp)
10004e14:	1000021e 	bne	r2,zero,10004e20 <___vfprintf_internal_r+0x1a78>
10004e18:	9080004c 	andi	r2,r18,1
10004e1c:	103be726 	beq	r2,zero,10003dbc <__alt_data_end+0xf8003dbc>
10004e20:	d9003717 	ldw	r4,220(sp)
10004e24:	d8801f17 	ldw	r2,124(sp)
10004e28:	d9403417 	ldw	r5,208(sp)
10004e2c:	20c7883a 	add	r3,r4,r3
10004e30:	10800044 	addi	r2,r2,1
10004e34:	41000115 	stw	r4,4(r8)
10004e38:	41400015 	stw	r5,0(r8)
10004e3c:	d8c02015 	stw	r3,128(sp)
10004e40:	d8801f15 	stw	r2,124(sp)
10004e44:	010001c4 	movi	r4,7
10004e48:	20812116 	blt	r4,r2,100052d0 <___vfprintf_internal_r+0x1f28>
10004e4c:	42000204 	addi	r8,r8,8
10004e50:	0463c83a 	sub	r17,zero,r17
10004e54:	0440730e 	bge	zero,r17,10005024 <___vfprintf_internal_r+0x1c7c>
10004e58:	05800404 	movi	r22,16
10004e5c:	b440860e 	bge	r22,r17,10005078 <___vfprintf_internal_r+0x1cd0>
10004e60:	01440074 	movhi	r5,4097
10004e64:	294c4a84 	addi	r5,r5,12586
10004e68:	d9402c15 	stw	r5,176(sp)
10004e6c:	070001c4 	movi	fp,7
10004e70:	dcc02d17 	ldw	r19,180(sp)
10004e74:	00000306 	br	10004e84 <___vfprintf_internal_r+0x1adc>
10004e78:	42000204 	addi	r8,r8,8
10004e7c:	8c7ffc04 	addi	r17,r17,-16
10004e80:	b440800e 	bge	r22,r17,10005084 <___vfprintf_internal_r+0x1cdc>
10004e84:	18c00404 	addi	r3,r3,16
10004e88:	10800044 	addi	r2,r2,1
10004e8c:	45000015 	stw	r20,0(r8)
10004e90:	45800115 	stw	r22,4(r8)
10004e94:	d8c02015 	stw	r3,128(sp)
10004e98:	d8801f15 	stw	r2,124(sp)
10004e9c:	e0bff60e 	bge	fp,r2,10004e78 <__alt_data_end+0xf8004e78>
10004ea0:	d9801e04 	addi	r6,sp,120
10004ea4:	b80b883a 	mov	r5,r23
10004ea8:	9809883a 	mov	r4,r19
10004eac:	000ab880 	call	1000ab88 <__sprint_r>
10004eb0:	103a411e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10004eb4:	d8c02017 	ldw	r3,128(sp)
10004eb8:	d8801f17 	ldw	r2,124(sp)
10004ebc:	da000404 	addi	r8,sp,16
10004ec0:	003fee06 	br	10004e7c <__alt_data_end+0xf8004e7c>
10004ec4:	00bfffc4 	movi	r2,-1
10004ec8:	003a3f06 	br	100037c8 <__alt_data_end+0xf80037c8>
10004ecc:	008011c4 	movi	r2,71
10004ed0:	1440b816 	blt	r2,r17,100051b4 <___vfprintf_internal_r+0x1e0c>
10004ed4:	04040074 	movhi	r16,4097
10004ed8:	840c3c04 	addi	r16,r16,12528
10004edc:	00c000c4 	movi	r3,3
10004ee0:	00bfdfc4 	movi	r2,-129
10004ee4:	d8c02915 	stw	r3,164(sp)
10004ee8:	90a4703a 	and	r18,r18,r2
10004eec:	df002783 	ldbu	fp,158(sp)
10004ef0:	d8c02b15 	stw	r3,172(sp)
10004ef4:	d8002a15 	stw	zero,168(sp)
10004ef8:	d8003215 	stw	zero,200(sp)
10004efc:	003b0706 	br	10003b1c <__alt_data_end+0xf8003b1c>
10004f00:	d8c02e17 	ldw	r3,184(sp)
10004f04:	1cc00017 	ldw	r19,0(r3)
10004f08:	18c00104 	addi	r3,r3,4
10004f0c:	d8c02e15 	stw	r3,184(sp)
10004f10:	982dd7fa 	srai	r22,r19,31
10004f14:	b005883a 	mov	r2,r22
10004f18:	003a7706 	br	100038f8 <__alt_data_end+0xf80038f8>
10004f1c:	d8c02e17 	ldw	r3,184(sp)
10004f20:	d9002f17 	ldw	r4,188(sp)
10004f24:	18800017 	ldw	r2,0(r3)
10004f28:	18c00104 	addi	r3,r3,4
10004f2c:	d8c02e15 	stw	r3,184(sp)
10004f30:	11000015 	stw	r4,0(r2)
10004f34:	00395406 	br	10003488 <__alt_data_end+0xf8003488>
10004f38:	d9002e17 	ldw	r4,184(sp)
10004f3c:	002d883a 	mov	r22,zero
10004f40:	24c00017 	ldw	r19,0(r4)
10004f44:	21000104 	addi	r4,r4,4
10004f48:	d9002e15 	stw	r4,184(sp)
10004f4c:	003c0706 	br	10003f6c <__alt_data_end+0xf8003f6c>
10004f50:	d9402e17 	ldw	r5,184(sp)
10004f54:	d8c02a17 	ldw	r3,168(sp)
10004f58:	002d883a 	mov	r22,zero
10004f5c:	28800104 	addi	r2,r5,4
10004f60:	2cc0000b 	ldhu	r19,0(r5)
10004f64:	183dc10e 	bge	r3,zero,1000466c <__alt_data_end+0xf800466c>
10004f68:	003f7506 	br	10004d40 <__alt_data_end+0xf8004d40>
10004f6c:	04040074 	movhi	r16,4097
10004f70:	840c3a04 	addi	r16,r16,12520
10004f74:	003aa706 	br	10003a14 <__alt_data_end+0xf8003a14>
10004f78:	d9002d17 	ldw	r4,180(sp)
10004f7c:	d9801e04 	addi	r6,sp,120
10004f80:	b80b883a 	mov	r5,r23
10004f84:	000ab880 	call	1000ab88 <__sprint_r>
10004f88:	103a0b1e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10004f8c:	dc402617 	ldw	r17,152(sp)
10004f90:	d8c02017 	ldw	r3,128(sp)
10004f94:	da000404 	addi	r8,sp,16
10004f98:	003f9c06 	br	10004e0c <__alt_data_end+0xf8004e0c>
10004f9c:	ac400043 	ldbu	r17,1(r21)
10004fa0:	84000814 	ori	r16,r16,32
10004fa4:	ad400044 	addi	r21,r21,1
10004fa8:	8c403fcc 	andi	r17,r17,255
10004fac:	8c40201c 	xori	r17,r17,128
10004fb0:	8c7fe004 	addi	r17,r17,-128
10004fb4:	00395e06 	br	10003530 <__alt_data_end+0xf8003530>
10004fb8:	d8c02e15 	stw	r3,184(sp)
10004fbc:	0039883a 	mov	fp,zero
10004fc0:	003e3506 	br	10004898 <__alt_data_end+0xf8004898>
10004fc4:	d9002d17 	ldw	r4,180(sp)
10004fc8:	d9801e04 	addi	r6,sp,120
10004fcc:	b80b883a 	mov	r5,r23
10004fd0:	000ab880 	call	1000ab88 <__sprint_r>
10004fd4:	1039f81e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10004fd8:	d8c02017 	ldw	r3,128(sp)
10004fdc:	da000404 	addi	r8,sp,16
10004fe0:	003cd006 	br	10004324 <__alt_data_end+0xf8004324>
10004fe4:	8009883a 	mov	r4,r16
10004fe8:	df003d15 	stw	fp,244(sp)
10004fec:	00033100 	call	10003310 <strlen>
10004ff0:	d8802b15 	stw	r2,172(sp)
10004ff4:	da003d17 	ldw	r8,244(sp)
10004ff8:	103c200e 	bge	r2,zero,1000407c <__alt_data_end+0xf800407c>
10004ffc:	0005883a 	mov	r2,zero
10005000:	003c1e06 	br	1000407c <__alt_data_end+0xf800407c>
10005004:	d9002d17 	ldw	r4,180(sp)
10005008:	d9801e04 	addi	r6,sp,120
1000500c:	b80b883a 	mov	r5,r23
10005010:	000ab880 	call	1000ab88 <__sprint_r>
10005014:	1039e81e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10005018:	d8c02017 	ldw	r3,128(sp)
1000501c:	d8801f17 	ldw	r2,124(sp)
10005020:	da000404 	addi	r8,sp,16
10005024:	d9403317 	ldw	r5,204(sp)
10005028:	10800044 	addi	r2,r2,1
1000502c:	44000015 	stw	r16,0(r8)
10005030:	28c7883a 	add	r3,r5,r3
10005034:	003b5b06 	br	10003da4 <__alt_data_end+0xf8003da4>
10005038:	01040074 	movhi	r4,4097
1000503c:	210c4e84 	addi	r4,r4,12602
10005040:	d9003515 	stw	r4,212(sp)
10005044:	003af206 	br	10003c10 <__alt_data_end+0xf8003c10>
10005048:	013fffc4 	movi	r4,-1
1000504c:	003a0806 	br	10003870 <__alt_data_end+0xf8003870>
10005050:	0023883a 	mov	r17,zero
10005054:	003d9d06 	br	100046cc <__alt_data_end+0xf80046cc>
10005058:	d9002d17 	ldw	r4,180(sp)
1000505c:	d9801e04 	addi	r6,sp,120
10005060:	b80b883a 	mov	r5,r23
10005064:	000ab880 	call	1000ab88 <__sprint_r>
10005068:	1039d31e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
1000506c:	d8c02017 	ldw	r3,128(sp)
10005070:	da000404 	addi	r8,sp,16
10005074:	003d9406 	br	100046c8 <__alt_data_end+0xf80046c8>
10005078:	01040074 	movhi	r4,4097
1000507c:	210c4a84 	addi	r4,r4,12586
10005080:	d9002c15 	stw	r4,176(sp)
10005084:	d9002c17 	ldw	r4,176(sp)
10005088:	1c47883a 	add	r3,r3,r17
1000508c:	10800044 	addi	r2,r2,1
10005090:	41000015 	stw	r4,0(r8)
10005094:	44400115 	stw	r17,4(r8)
10005098:	d8c02015 	stw	r3,128(sp)
1000509c:	d8801f15 	stw	r2,124(sp)
100050a0:	010001c4 	movi	r4,7
100050a4:	20bfd716 	blt	r4,r2,10005004 <__alt_data_end+0xf8005004>
100050a8:	42000204 	addi	r8,r8,8
100050ac:	003fdd06 	br	10005024 <__alt_data_end+0xf8005024>
100050b0:	d9002d17 	ldw	r4,180(sp)
100050b4:	d9801e04 	addi	r6,sp,120
100050b8:	b80b883a 	mov	r5,r23
100050bc:	000ab880 	call	1000ab88 <__sprint_r>
100050c0:	1039bd1e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
100050c4:	d8802617 	ldw	r2,152(sp)
100050c8:	d8c02017 	ldw	r3,128(sp)
100050cc:	da000404 	addi	r8,sp,16
100050d0:	003e1006 	br	10004914 <__alt_data_end+0xf8004914>
100050d4:	00800044 	movi	r2,1
100050d8:	10803fcc 	andi	r2,r2,255
100050dc:	00c00044 	movi	r3,1
100050e0:	10fa0d26 	beq	r2,r3,10003918 <__alt_data_end+0xf8003918>
100050e4:	00c00084 	movi	r3,2
100050e8:	10fbaf26 	beq	r2,r3,10003fa8 <__alt_data_end+0xf8003fa8>
100050ec:	003a6d06 	br	10003aa4 <__alt_data_end+0xf8003aa4>
100050f0:	01040074 	movhi	r4,4097
100050f4:	210c4e84 	addi	r4,r4,12602
100050f8:	d9003515 	stw	r4,212(sp)
100050fc:	003b5406 	br	10003e50 <__alt_data_end+0xf8003e50>
10005100:	d8802a17 	ldw	r2,168(sp)
10005104:	00c00184 	movi	r3,6
10005108:	1880012e 	bgeu	r3,r2,10005110 <___vfprintf_internal_r+0x1d68>
1000510c:	1805883a 	mov	r2,r3
10005110:	d8802b15 	stw	r2,172(sp)
10005114:	1000ef16 	blt	r2,zero,100054d4 <___vfprintf_internal_r+0x212c>
10005118:	04040074 	movhi	r16,4097
1000511c:	d8802915 	stw	r2,164(sp)
10005120:	dcc02e15 	stw	r19,184(sp)
10005124:	d8002a15 	stw	zero,168(sp)
10005128:	d8003215 	stw	zero,200(sp)
1000512c:	840c4804 	addi	r16,r16,12576
10005130:	0039883a 	mov	fp,zero
10005134:	003a8006 	br	10003b38 <__alt_data_end+0xf8003b38>
10005138:	0021883a 	mov	r16,zero
1000513c:	003e0706 	br	1000495c <__alt_data_end+0xf800495c>
10005140:	d9002d17 	ldw	r4,180(sp)
10005144:	d9801e04 	addi	r6,sp,120
10005148:	b80b883a 	mov	r5,r23
1000514c:	000ab880 	call	1000ab88 <__sprint_r>
10005150:	1039991e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10005154:	d8802617 	ldw	r2,152(sp)
10005158:	d9403317 	ldw	r5,204(sp)
1000515c:	d8c02017 	ldw	r3,128(sp)
10005160:	da000404 	addi	r8,sp,16
10005164:	2885c83a 	sub	r2,r5,r2
10005168:	003dfb06 	br	10004958 <__alt_data_end+0xf8004958>
1000516c:	9080004c 	andi	r2,r18,1
10005170:	103e8f1e 	bne	r2,zero,10004bb0 <__alt_data_end+0xf8004bb0>
10005174:	d8802117 	ldw	r2,132(sp)
10005178:	003e9e06 	br	10004bf4 <__alt_data_end+0xf8004bf4>
1000517c:	1025883a 	mov	r18,r2
10005180:	0039883a 	mov	fp,zero
10005184:	00800084 	movi	r2,2
10005188:	003fd306 	br	100050d8 <__alt_data_end+0xf80050d8>
1000518c:	07000b44 	movi	fp,45
10005190:	df002785 	stb	fp,158(sp)
10005194:	003a1b06 	br	10003a04 <__alt_data_end+0xf8003a04>
10005198:	00c00b44 	movi	r3,45
1000519c:	d8c02785 	stb	r3,158(sp)
100051a0:	d8802915 	stw	r2,164(sp)
100051a4:	dc802c17 	ldw	r18,176(sp)
100051a8:	d8002a15 	stw	zero,168(sp)
100051ac:	07000b44 	movi	fp,45
100051b0:	003a5e06 	br	10003b2c <__alt_data_end+0xf8003b2c>
100051b4:	04040074 	movhi	r16,4097
100051b8:	840c3d04 	addi	r16,r16,12532
100051bc:	003f4706 	br	10004edc <__alt_data_end+0xf8004edc>
100051c0:	d9002e17 	ldw	r4,184(sp)
100051c4:	d9402f17 	ldw	r5,188(sp)
100051c8:	20800017 	ldw	r2,0(r4)
100051cc:	21000104 	addi	r4,r4,4
100051d0:	d9002e15 	stw	r4,184(sp)
100051d4:	11400015 	stw	r5,0(r2)
100051d8:	0038ab06 	br	10003488 <__alt_data_end+0xf8003488>
100051dc:	dd802617 	ldw	r22,152(sp)
100051e0:	00bfff44 	movi	r2,-3
100051e4:	b0801c16 	blt	r22,r2,10005258 <___vfprintf_internal_r+0x1eb0>
100051e8:	d9402a17 	ldw	r5,168(sp)
100051ec:	2d801a16 	blt	r5,r22,10005258 <___vfprintf_internal_r+0x1eb0>
100051f0:	dd803215 	stw	r22,200(sp)
100051f4:	003e8906 	br	10004c1c <__alt_data_end+0xf8004c1c>
100051f8:	01040074 	movhi	r4,4097
100051fc:	210c4a84 	addi	r4,r4,12586
10005200:	d9002c15 	stw	r4,176(sp)
10005204:	003c9106 	br	1000444c <__alt_data_end+0xf800444c>
10005208:	e005883a 	mov	r2,fp
1000520c:	003e7906 	br	10004bf4 <__alt_data_end+0xf8004bf4>
10005210:	d9002a17 	ldw	r4,168(sp)
10005214:	df002783 	ldbu	fp,158(sp)
10005218:	dcc02e15 	stw	r19,184(sp)
1000521c:	d9002915 	stw	r4,164(sp)
10005220:	d9002b15 	stw	r4,172(sp)
10005224:	d8002a15 	stw	zero,168(sp)
10005228:	d8003215 	stw	zero,200(sp)
1000522c:	003a3b06 	br	10003b1c <__alt_data_end+0xf8003b1c>
10005230:	9080004c 	andi	r2,r18,1
10005234:	0039883a 	mov	fp,zero
10005238:	10000426 	beq	r2,zero,1000524c <___vfprintf_internal_r+0x1ea4>
1000523c:	00800c04 	movi	r2,48
10005240:	dc001dc4 	addi	r16,sp,119
10005244:	d8801dc5 	stb	r2,119(sp)
10005248:	003b6406 	br	10003fdc <__alt_data_end+0xf8003fdc>
1000524c:	d8002b15 	stw	zero,172(sp)
10005250:	dc001e04 	addi	r16,sp,120
10005254:	003a2b06 	br	10003b04 <__alt_data_end+0xf8003b04>
10005258:	8c7fff84 	addi	r17,r17,-2
1000525c:	b5bfffc4 	addi	r22,r22,-1
10005260:	dd802615 	stw	r22,152(sp)
10005264:	dc4022c5 	stb	r17,139(sp)
10005268:	b000bf16 	blt	r22,zero,10005568 <___vfprintf_internal_r+0x21c0>
1000526c:	00800ac4 	movi	r2,43
10005270:	d8802305 	stb	r2,140(sp)
10005274:	00800244 	movi	r2,9
10005278:	15807016 	blt	r2,r22,1000543c <___vfprintf_internal_r+0x2094>
1000527c:	00800c04 	movi	r2,48
10005280:	b5800c04 	addi	r22,r22,48
10005284:	d8802345 	stb	r2,141(sp)
10005288:	dd802385 	stb	r22,142(sp)
1000528c:	d88023c4 	addi	r2,sp,143
10005290:	df0022c4 	addi	fp,sp,139
10005294:	d8c03317 	ldw	r3,204(sp)
10005298:	1739c83a 	sub	fp,r2,fp
1000529c:	d9003317 	ldw	r4,204(sp)
100052a0:	e0c7883a 	add	r3,fp,r3
100052a4:	df003a15 	stw	fp,232(sp)
100052a8:	d8c02b15 	stw	r3,172(sp)
100052ac:	00800044 	movi	r2,1
100052b0:	1100b30e 	bge	r2,r4,10005580 <___vfprintf_internal_r+0x21d8>
100052b4:	d8c02b17 	ldw	r3,172(sp)
100052b8:	18c00044 	addi	r3,r3,1
100052bc:	d8c02b15 	stw	r3,172(sp)
100052c0:	1805883a 	mov	r2,r3
100052c4:	1800ac16 	blt	r3,zero,10005578 <___vfprintf_internal_r+0x21d0>
100052c8:	d8003215 	stw	zero,200(sp)
100052cc:	003e5d06 	br	10004c44 <__alt_data_end+0xf8004c44>
100052d0:	d9002d17 	ldw	r4,180(sp)
100052d4:	d9801e04 	addi	r6,sp,120
100052d8:	b80b883a 	mov	r5,r23
100052dc:	000ab880 	call	1000ab88 <__sprint_r>
100052e0:	1039351e 	bne	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
100052e4:	dc402617 	ldw	r17,152(sp)
100052e8:	d8c02017 	ldw	r3,128(sp)
100052ec:	d8801f17 	ldw	r2,124(sp)
100052f0:	da000404 	addi	r8,sp,16
100052f4:	003ed606 	br	10004e50 <__alt_data_end+0xf8004e50>
100052f8:	182b883a 	mov	r21,r3
100052fc:	d8002a15 	stw	zero,168(sp)
10005300:	00388c06 	br	10003534 <__alt_data_end+0xf8003534>
10005304:	d8802a17 	ldw	r2,168(sp)
10005308:	103e071e 	bne	r2,zero,10004b28 <__alt_data_end+0xf8004b28>
1000530c:	dc002a15 	stw	r16,168(sp)
10005310:	003e0506 	br	10004b28 <__alt_data_end+0xf8004b28>
10005314:	d9002a17 	ldw	r4,168(sp)
10005318:	20c00044 	addi	r3,r4,1
1000531c:	003e0f06 	br	10004b5c <__alt_data_end+0xf8004b5c>
10005320:	01400184 	movi	r5,6
10005324:	d9402a15 	stw	r5,168(sp)
10005328:	003dff06 	br	10004b28 <__alt_data_end+0xf8004b28>
1000532c:	d8802104 	addi	r2,sp,132
10005330:	d8800315 	stw	r2,12(sp)
10005334:	d8802504 	addi	r2,sp,148
10005338:	d8800215 	stw	r2,8(sp)
1000533c:	d8802604 	addi	r2,sp,152
10005340:	d8800115 	stw	r2,4(sp)
10005344:	d8802a17 	ldw	r2,168(sp)
10005348:	d9403617 	ldw	r5,216(sp)
1000534c:	d9002d17 	ldw	r4,180(sp)
10005350:	d8800015 	stw	r2,0(sp)
10005354:	01c000c4 	movi	r7,3
10005358:	980d883a 	mov	r6,r19
1000535c:	da003d15 	stw	r8,244(sp)
10005360:	0005ad80 	call	10005ad8 <_dtoa_r>
10005364:	d8c02a17 	ldw	r3,168(sp)
10005368:	da003d17 	ldw	r8,244(sp)
1000536c:	1021883a 	mov	r16,r2
10005370:	10f9883a 	add	fp,r2,r3
10005374:	81000007 	ldb	r4,0(r16)
10005378:	00800c04 	movi	r2,48
1000537c:	20805e26 	beq	r4,r2,100054f8 <___vfprintf_internal_r+0x2150>
10005380:	d8c02617 	ldw	r3,152(sp)
10005384:	e0f9883a 	add	fp,fp,r3
10005388:	003e0a06 	br	10004bb4 <__alt_data_end+0xf8004bb4>
1000538c:	00c00b44 	movi	r3,45
10005390:	24e0003c 	xorhi	r19,r4,32768
10005394:	d8c02905 	stb	r3,164(sp)
10005398:	003de906 	br	10004b40 <__alt_data_end+0xf8004b40>
1000539c:	d8c03217 	ldw	r3,200(sp)
100053a0:	00c07a0e 	bge	zero,r3,1000558c <___vfprintf_internal_r+0x21e4>
100053a4:	00800044 	movi	r2,1
100053a8:	d9003317 	ldw	r4,204(sp)
100053ac:	1105883a 	add	r2,r2,r4
100053b0:	d8802b15 	stw	r2,172(sp)
100053b4:	10004e16 	blt	r2,zero,100054f0 <___vfprintf_internal_r+0x2148>
100053b8:	044019c4 	movi	r17,103
100053bc:	003e2106 	br	10004c44 <__alt_data_end+0xf8004c44>
100053c0:	d9002a17 	ldw	r4,168(sp)
100053c4:	d8802104 	addi	r2,sp,132
100053c8:	d8800315 	stw	r2,12(sp)
100053cc:	d9000015 	stw	r4,0(sp)
100053d0:	d8802504 	addi	r2,sp,148
100053d4:	d9403617 	ldw	r5,216(sp)
100053d8:	d9002d17 	ldw	r4,180(sp)
100053dc:	d8800215 	stw	r2,8(sp)
100053e0:	d8802604 	addi	r2,sp,152
100053e4:	d8800115 	stw	r2,4(sp)
100053e8:	01c000c4 	movi	r7,3
100053ec:	980d883a 	mov	r6,r19
100053f0:	da003d15 	stw	r8,244(sp)
100053f4:	0005ad80 	call	10005ad8 <_dtoa_r>
100053f8:	d8c02a17 	ldw	r3,168(sp)
100053fc:	da003d17 	ldw	r8,244(sp)
10005400:	1021883a 	mov	r16,r2
10005404:	00801184 	movi	r2,70
10005408:	80f9883a 	add	fp,r16,r3
1000540c:	88bfd926 	beq	r17,r2,10005374 <__alt_data_end+0xf8005374>
10005410:	003de806 	br	10004bb4 <__alt_data_end+0xf8004bb4>
10005414:	d9002a17 	ldw	r4,168(sp)
10005418:	00c04d0e 	bge	zero,r3,10005550 <___vfprintf_internal_r+0x21a8>
1000541c:	2000441e 	bne	r4,zero,10005530 <___vfprintf_internal_r+0x2188>
10005420:	9480004c 	andi	r18,r18,1
10005424:	9000421e 	bne	r18,zero,10005530 <___vfprintf_internal_r+0x2188>
10005428:	1805883a 	mov	r2,r3
1000542c:	18006f16 	blt	r3,zero,100055ec <___vfprintf_internal_r+0x2244>
10005430:	d8c03217 	ldw	r3,200(sp)
10005434:	d8c02b15 	stw	r3,172(sp)
10005438:	003e0206 	br	10004c44 <__alt_data_end+0xf8004c44>
1000543c:	df0022c4 	addi	fp,sp,139
10005440:	dc002a15 	stw	r16,168(sp)
10005444:	4027883a 	mov	r19,r8
10005448:	e021883a 	mov	r16,fp
1000544c:	b009883a 	mov	r4,r22
10005450:	01400284 	movi	r5,10
10005454:	000d7140 	call	1000d714 <__modsi3>
10005458:	10800c04 	addi	r2,r2,48
1000545c:	843fffc4 	addi	r16,r16,-1
10005460:	b009883a 	mov	r4,r22
10005464:	01400284 	movi	r5,10
10005468:	80800005 	stb	r2,0(r16)
1000546c:	000d6900 	call	1000d690 <__divsi3>
10005470:	102d883a 	mov	r22,r2
10005474:	00800244 	movi	r2,9
10005478:	15bff416 	blt	r2,r22,1000544c <__alt_data_end+0xf800544c>
1000547c:	9811883a 	mov	r8,r19
10005480:	b0800c04 	addi	r2,r22,48
10005484:	8027883a 	mov	r19,r16
10005488:	997fffc4 	addi	r5,r19,-1
1000548c:	98bfffc5 	stb	r2,-1(r19)
10005490:	dc002a17 	ldw	r16,168(sp)
10005494:	2f006d2e 	bgeu	r5,fp,1000564c <___vfprintf_internal_r+0x22a4>
10005498:	d9c02384 	addi	r7,sp,142
1000549c:	3ccfc83a 	sub	r7,r7,r19
100054a0:	d9002344 	addi	r4,sp,141
100054a4:	e1cf883a 	add	r7,fp,r7
100054a8:	00000106 	br	100054b0 <___vfprintf_internal_r+0x2108>
100054ac:	28800003 	ldbu	r2,0(r5)
100054b0:	20800005 	stb	r2,0(r4)
100054b4:	21000044 	addi	r4,r4,1
100054b8:	29400044 	addi	r5,r5,1
100054bc:	393ffb1e 	bne	r7,r4,100054ac <__alt_data_end+0xf80054ac>
100054c0:	d8802304 	addi	r2,sp,140
100054c4:	14c5c83a 	sub	r2,r2,r19
100054c8:	d8c02344 	addi	r3,sp,141
100054cc:	1885883a 	add	r2,r3,r2
100054d0:	003f7006 	br	10005294 <__alt_data_end+0xf8005294>
100054d4:	0005883a 	mov	r2,zero
100054d8:	003f0f06 	br	10005118 <__alt_data_end+0xf8005118>
100054dc:	d8c03217 	ldw	r3,200(sp)
100054e0:	18c00044 	addi	r3,r3,1
100054e4:	d8c02b15 	stw	r3,172(sp)
100054e8:	1805883a 	mov	r2,r3
100054ec:	183fb20e 	bge	r3,zero,100053b8 <__alt_data_end+0xf80053b8>
100054f0:	0005883a 	mov	r2,zero
100054f4:	003fb006 	br	100053b8 <__alt_data_end+0xf80053b8>
100054f8:	d9003617 	ldw	r4,216(sp)
100054fc:	000d883a 	mov	r6,zero
10005500:	000f883a 	mov	r7,zero
10005504:	980b883a 	mov	r5,r19
10005508:	d8c03c15 	stw	r3,240(sp)
1000550c:	da003d15 	stw	r8,244(sp)
10005510:	000eae80 	call	1000eae8 <__eqdf2>
10005514:	d8c03c17 	ldw	r3,240(sp)
10005518:	da003d17 	ldw	r8,244(sp)
1000551c:	103f9826 	beq	r2,zero,10005380 <__alt_data_end+0xf8005380>
10005520:	00800044 	movi	r2,1
10005524:	10c7c83a 	sub	r3,r2,r3
10005528:	d8c02615 	stw	r3,152(sp)
1000552c:	003f9506 	br	10005384 <__alt_data_end+0xf8005384>
10005530:	d9002a17 	ldw	r4,168(sp)
10005534:	d8c03217 	ldw	r3,200(sp)
10005538:	20800044 	addi	r2,r4,1
1000553c:	1885883a 	add	r2,r3,r2
10005540:	d8802b15 	stw	r2,172(sp)
10005544:	103dbf0e 	bge	r2,zero,10004c44 <__alt_data_end+0xf8004c44>
10005548:	0005883a 	mov	r2,zero
1000554c:	003dbd06 	br	10004c44 <__alt_data_end+0xf8004c44>
10005550:	2000201e 	bne	r4,zero,100055d4 <___vfprintf_internal_r+0x222c>
10005554:	9480004c 	andi	r18,r18,1
10005558:	90001e1e 	bne	r18,zero,100055d4 <___vfprintf_internal_r+0x222c>
1000555c:	00800044 	movi	r2,1
10005560:	d8802b15 	stw	r2,172(sp)
10005564:	003db706 	br	10004c44 <__alt_data_end+0xf8004c44>
10005568:	00800b44 	movi	r2,45
1000556c:	05adc83a 	sub	r22,zero,r22
10005570:	d8802305 	stb	r2,140(sp)
10005574:	003f3f06 	br	10005274 <__alt_data_end+0xf8005274>
10005578:	0005883a 	mov	r2,zero
1000557c:	003f5206 	br	100052c8 <__alt_data_end+0xf80052c8>
10005580:	90a4703a 	and	r18,r18,r2
10005584:	903f4e26 	beq	r18,zero,100052c0 <__alt_data_end+0xf80052c0>
10005588:	003f4a06 	br	100052b4 <__alt_data_end+0xf80052b4>
1000558c:	00800084 	movi	r2,2
10005590:	10c5c83a 	sub	r2,r2,r3
10005594:	003f8406 	br	100053a8 <__alt_data_end+0xf80053a8>
10005598:	d9402e17 	ldw	r5,184(sp)
1000559c:	d9002e17 	ldw	r4,184(sp)
100055a0:	ac400043 	ldbu	r17,1(r21)
100055a4:	29400017 	ldw	r5,0(r5)
100055a8:	20800104 	addi	r2,r4,4
100055ac:	d8802e15 	stw	r2,184(sp)
100055b0:	d9402a15 	stw	r5,168(sp)
100055b4:	182b883a 	mov	r21,r3
100055b8:	283e7b0e 	bge	r5,zero,10004fa8 <__alt_data_end+0xf8004fa8>
100055bc:	8c403fcc 	andi	r17,r17,255
100055c0:	017fffc4 	movi	r5,-1
100055c4:	8c40201c 	xori	r17,r17,128
100055c8:	d9402a15 	stw	r5,168(sp)
100055cc:	8c7fe004 	addi	r17,r17,-128
100055d0:	0037d706 	br	10003530 <__alt_data_end+0xf8003530>
100055d4:	d8c02a17 	ldw	r3,168(sp)
100055d8:	18c00084 	addi	r3,r3,2
100055dc:	d8c02b15 	stw	r3,172(sp)
100055e0:	1805883a 	mov	r2,r3
100055e4:	183d970e 	bge	r3,zero,10004c44 <__alt_data_end+0xf8004c44>
100055e8:	003fd706 	br	10005548 <__alt_data_end+0xf8005548>
100055ec:	0005883a 	mov	r2,zero
100055f0:	003f8f06 	br	10005430 <__alt_data_end+0xf8005430>
100055f4:	9080004c 	andi	r2,r18,1
100055f8:	103f821e 	bne	r2,zero,10005404 <__alt_data_end+0xf8005404>
100055fc:	d8802117 	ldw	r2,132(sp)
10005600:	1405c83a 	sub	r2,r2,r16
10005604:	d8803315 	stw	r2,204(sp)
10005608:	b47ef426 	beq	r22,r17,100051dc <__alt_data_end+0xf80051dc>
1000560c:	dd802617 	ldw	r22,152(sp)
10005610:	003f1206 	br	1000525c <__alt_data_end+0xf800525c>
10005614:	d8c02b03 	ldbu	r3,172(sp)
10005618:	d8c02785 	stb	r3,158(sp)
1000561c:	0038df06 	br	1000399c <__alt_data_end+0xf800399c>
10005620:	d8c02b03 	ldbu	r3,172(sp)
10005624:	d8c02785 	stb	r3,158(sp)
10005628:	0038aa06 	br	100038d4 <__alt_data_end+0xf80038d4>
1000562c:	d8c02b03 	ldbu	r3,172(sp)
10005630:	d8c02785 	stb	r3,158(sp)
10005634:	003a4306 	br	10003f44 <__alt_data_end+0xf8003f44>
10005638:	d8c02b03 	ldbu	r3,172(sp)
1000563c:	d8c02785 	stb	r3,158(sp)
10005640:	003af506 	br	10004218 <__alt_data_end+0xf8004218>
10005644:	0005883a 	mov	r2,zero
10005648:	003d7b06 	br	10004c38 <__alt_data_end+0xf8004c38>
1000564c:	d8802344 	addi	r2,sp,141
10005650:	003f1006 	br	10005294 <__alt_data_end+0xf8005294>
10005654:	d8c02b03 	ldbu	r3,172(sp)
10005658:	d8c02785 	stb	r3,158(sp)
1000565c:	0038fd06 	br	10003a54 <__alt_data_end+0xf8003a54>
10005660:	d8c02b03 	ldbu	r3,172(sp)
10005664:	d8c02785 	stb	r3,158(sp)
10005668:	003a9706 	br	100040c8 <__alt_data_end+0xf80040c8>
1000566c:	d8c02b03 	ldbu	r3,172(sp)
10005670:	d8c02785 	stb	r3,158(sp)
10005674:	003a1806 	br	10003ed8 <__alt_data_end+0xf8003ed8>
10005678:	d8c02b03 	ldbu	r3,172(sp)
1000567c:	d8c02785 	stb	r3,158(sp)
10005680:	003abe06 	br	1000417c <__alt_data_end+0xf800417c>

10005684 <__vfprintf_internal>:
10005684:	00840074 	movhi	r2,4097
10005688:	1093a504 	addi	r2,r2,20116
1000568c:	300f883a 	mov	r7,r6
10005690:	280d883a 	mov	r6,r5
10005694:	200b883a 	mov	r5,r4
10005698:	11000017 	ldw	r4,0(r2)
1000569c:	00033a81 	jmpi	100033a8 <___vfprintf_internal_r>

100056a0 <__sbprintf>:
100056a0:	2880030b 	ldhu	r2,12(r5)
100056a4:	2ac01917 	ldw	r11,100(r5)
100056a8:	2a80038b 	ldhu	r10,14(r5)
100056ac:	2a400717 	ldw	r9,28(r5)
100056b0:	2a000917 	ldw	r8,36(r5)
100056b4:	defee204 	addi	sp,sp,-1144
100056b8:	00c10004 	movi	r3,1024
100056bc:	dc011a15 	stw	r16,1128(sp)
100056c0:	10bfff4c 	andi	r2,r2,65533
100056c4:	2821883a 	mov	r16,r5
100056c8:	d8cb883a 	add	r5,sp,r3
100056cc:	dc811c15 	stw	r18,1136(sp)
100056d0:	dc411b15 	stw	r17,1132(sp)
100056d4:	dfc11d15 	stw	ra,1140(sp)
100056d8:	2025883a 	mov	r18,r4
100056dc:	d881030d 	sth	r2,1036(sp)
100056e0:	dac11915 	stw	r11,1124(sp)
100056e4:	da81038d 	sth	r10,1038(sp)
100056e8:	da410715 	stw	r9,1052(sp)
100056ec:	da010915 	stw	r8,1060(sp)
100056f0:	dec10015 	stw	sp,1024(sp)
100056f4:	dec10415 	stw	sp,1040(sp)
100056f8:	d8c10215 	stw	r3,1032(sp)
100056fc:	d8c10515 	stw	r3,1044(sp)
10005700:	d8010615 	stw	zero,1048(sp)
10005704:	00033a80 	call	100033a8 <___vfprintf_internal_r>
10005708:	1023883a 	mov	r17,r2
1000570c:	10000416 	blt	r2,zero,10005720 <__sbprintf+0x80>
10005710:	d9410004 	addi	r5,sp,1024
10005714:	9009883a 	mov	r4,r18
10005718:	000737c0 	call	1000737c <_fflush_r>
1000571c:	10000d1e 	bne	r2,zero,10005754 <__sbprintf+0xb4>
10005720:	d881030b 	ldhu	r2,1036(sp)
10005724:	1080100c 	andi	r2,r2,64
10005728:	10000326 	beq	r2,zero,10005738 <__sbprintf+0x98>
1000572c:	8080030b 	ldhu	r2,12(r16)
10005730:	10801014 	ori	r2,r2,64
10005734:	8080030d 	sth	r2,12(r16)
10005738:	8805883a 	mov	r2,r17
1000573c:	dfc11d17 	ldw	ra,1140(sp)
10005740:	dc811c17 	ldw	r18,1136(sp)
10005744:	dc411b17 	ldw	r17,1132(sp)
10005748:	dc011a17 	ldw	r16,1128(sp)
1000574c:	dec11e04 	addi	sp,sp,1144
10005750:	f800283a 	ret
10005754:	047fffc4 	movi	r17,-1
10005758:	003ff106 	br	10005720 <__alt_data_end+0xf8005720>

1000575c <__swsetup_r>:
1000575c:	00840074 	movhi	r2,4097
10005760:	defffd04 	addi	sp,sp,-12
10005764:	1093a504 	addi	r2,r2,20116
10005768:	dc400115 	stw	r17,4(sp)
1000576c:	2023883a 	mov	r17,r4
10005770:	11000017 	ldw	r4,0(r2)
10005774:	dc000015 	stw	r16,0(sp)
10005778:	dfc00215 	stw	ra,8(sp)
1000577c:	2821883a 	mov	r16,r5
10005780:	20000226 	beq	r4,zero,1000578c <__swsetup_r+0x30>
10005784:	20800e17 	ldw	r2,56(r4)
10005788:	10003126 	beq	r2,zero,10005850 <__swsetup_r+0xf4>
1000578c:	8080030b 	ldhu	r2,12(r16)
10005790:	10c0020c 	andi	r3,r2,8
10005794:	1009883a 	mov	r4,r2
10005798:	18000f26 	beq	r3,zero,100057d8 <__swsetup_r+0x7c>
1000579c:	80c00417 	ldw	r3,16(r16)
100057a0:	18001526 	beq	r3,zero,100057f8 <__swsetup_r+0x9c>
100057a4:	1100004c 	andi	r4,r2,1
100057a8:	20001c1e 	bne	r4,zero,1000581c <__swsetup_r+0xc0>
100057ac:	1080008c 	andi	r2,r2,2
100057b0:	1000291e 	bne	r2,zero,10005858 <__swsetup_r+0xfc>
100057b4:	80800517 	ldw	r2,20(r16)
100057b8:	80800215 	stw	r2,8(r16)
100057bc:	18001c26 	beq	r3,zero,10005830 <__swsetup_r+0xd4>
100057c0:	0005883a 	mov	r2,zero
100057c4:	dfc00217 	ldw	ra,8(sp)
100057c8:	dc400117 	ldw	r17,4(sp)
100057cc:	dc000017 	ldw	r16,0(sp)
100057d0:	dec00304 	addi	sp,sp,12
100057d4:	f800283a 	ret
100057d8:	2080040c 	andi	r2,r4,16
100057dc:	10002e26 	beq	r2,zero,10005898 <__swsetup_r+0x13c>
100057e0:	2080010c 	andi	r2,r4,4
100057e4:	10001e1e 	bne	r2,zero,10005860 <__swsetup_r+0x104>
100057e8:	80c00417 	ldw	r3,16(r16)
100057ec:	20800214 	ori	r2,r4,8
100057f0:	8080030d 	sth	r2,12(r16)
100057f4:	183feb1e 	bne	r3,zero,100057a4 <__alt_data_end+0xf80057a4>
100057f8:	1100a00c 	andi	r4,r2,640
100057fc:	01408004 	movi	r5,512
10005800:	217fe826 	beq	r4,r5,100057a4 <__alt_data_end+0xf80057a4>
10005804:	800b883a 	mov	r5,r16
10005808:	8809883a 	mov	r4,r17
1000580c:	00083180 	call	10008318 <__smakebuf_r>
10005810:	8080030b 	ldhu	r2,12(r16)
10005814:	80c00417 	ldw	r3,16(r16)
10005818:	003fe206 	br	100057a4 <__alt_data_end+0xf80057a4>
1000581c:	80800517 	ldw	r2,20(r16)
10005820:	80000215 	stw	zero,8(r16)
10005824:	0085c83a 	sub	r2,zero,r2
10005828:	80800615 	stw	r2,24(r16)
1000582c:	183fe41e 	bne	r3,zero,100057c0 <__alt_data_end+0xf80057c0>
10005830:	80c0030b 	ldhu	r3,12(r16)
10005834:	0005883a 	mov	r2,zero
10005838:	1900200c 	andi	r4,r3,128
1000583c:	203fe126 	beq	r4,zero,100057c4 <__alt_data_end+0xf80057c4>
10005840:	18c01014 	ori	r3,r3,64
10005844:	80c0030d 	sth	r3,12(r16)
10005848:	00bfffc4 	movi	r2,-1
1000584c:	003fdd06 	br	100057c4 <__alt_data_end+0xf80057c4>
10005850:	00077680 	call	10007768 <__sinit>
10005854:	003fcd06 	br	1000578c <__alt_data_end+0xf800578c>
10005858:	0005883a 	mov	r2,zero
1000585c:	003fd606 	br	100057b8 <__alt_data_end+0xf80057b8>
10005860:	81400c17 	ldw	r5,48(r16)
10005864:	28000626 	beq	r5,zero,10005880 <__swsetup_r+0x124>
10005868:	80801004 	addi	r2,r16,64
1000586c:	28800326 	beq	r5,r2,1000587c <__swsetup_r+0x120>
10005870:	8809883a 	mov	r4,r17
10005874:	00078dc0 	call	100078dc <_free_r>
10005878:	8100030b 	ldhu	r4,12(r16)
1000587c:	80000c15 	stw	zero,48(r16)
10005880:	80c00417 	ldw	r3,16(r16)
10005884:	00bff6c4 	movi	r2,-37
10005888:	1108703a 	and	r4,r2,r4
1000588c:	80000115 	stw	zero,4(r16)
10005890:	80c00015 	stw	r3,0(r16)
10005894:	003fd506 	br	100057ec <__alt_data_end+0xf80057ec>
10005898:	00800244 	movi	r2,9
1000589c:	88800015 	stw	r2,0(r17)
100058a0:	20801014 	ori	r2,r4,64
100058a4:	8080030d 	sth	r2,12(r16)
100058a8:	00bfffc4 	movi	r2,-1
100058ac:	003fc506 	br	100057c4 <__alt_data_end+0xf80057c4>

100058b0 <quorem>:
100058b0:	defff204 	addi	sp,sp,-56
100058b4:	ddc00b15 	stw	r23,44(sp)
100058b8:	20800417 	ldw	r2,16(r4)
100058bc:	2dc00417 	ldw	r23,16(r5)
100058c0:	dfc00d15 	stw	ra,52(sp)
100058c4:	df000c15 	stw	fp,48(sp)
100058c8:	dd800a15 	stw	r22,40(sp)
100058cc:	dd400915 	stw	r21,36(sp)
100058d0:	dd000815 	stw	r20,32(sp)
100058d4:	dcc00715 	stw	r19,28(sp)
100058d8:	dc800615 	stw	r18,24(sp)
100058dc:	dc400515 	stw	r17,20(sp)
100058e0:	dc000415 	stw	r16,16(sp)
100058e4:	15c07a16 	blt	r2,r23,10005ad0 <quorem+0x220>
100058e8:	bdffffc4 	addi	r23,r23,-1
100058ec:	bde9883a 	add	r20,r23,r23
100058f0:	28c00504 	addi	r3,r5,20
100058f4:	a529883a 	add	r20,r20,r20
100058f8:	1d39883a 	add	fp,r3,r20
100058fc:	24c00504 	addi	r19,r4,20
10005900:	d9400215 	stw	r5,8(sp)
10005904:	9d29883a 	add	r20,r19,r20
10005908:	e1400017 	ldw	r5,0(fp)
1000590c:	d9000015 	stw	r4,0(sp)
10005910:	a1000017 	ldw	r4,0(r20)
10005914:	29400044 	addi	r5,r5,1
10005918:	d8c00115 	stw	r3,4(sp)
1000591c:	dd000315 	stw	r20,12(sp)
10005920:	000d7880 	call	1000d788 <__udivsi3>
10005924:	1025883a 	mov	r18,r2
10005928:	10003026 	beq	r2,zero,100059ec <quorem+0x13c>
1000592c:	dc400117 	ldw	r17,4(sp)
10005930:	9829883a 	mov	r20,r19
10005934:	002d883a 	mov	r22,zero
10005938:	0021883a 	mov	r16,zero
1000593c:	8d400017 	ldw	r21,0(r17)
10005940:	900b883a 	mov	r5,r18
10005944:	8c400104 	addi	r17,r17,4
10005948:	a93fffcc 	andi	r4,r21,65535
1000594c:	000d8440 	call	1000d844 <__mulsi3>
10005950:	a808d43a 	srli	r4,r21,16
10005954:	900b883a 	mov	r5,r18
10005958:	15ad883a 	add	r22,r2,r22
1000595c:	000d8440 	call	1000d844 <__mulsi3>
10005960:	a1000017 	ldw	r4,0(r20)
10005964:	b00cd43a 	srli	r6,r22,16
10005968:	b0ffffcc 	andi	r3,r22,65535
1000596c:	217fffcc 	andi	r5,r4,65535
10005970:	2c21883a 	add	r16,r5,r16
10005974:	80c7c83a 	sub	r3,r16,r3
10005978:	2008d43a 	srli	r4,r4,16
1000597c:	1185883a 	add	r2,r2,r6
10005980:	1821d43a 	srai	r16,r3,16
10005984:	117fffcc 	andi	r5,r2,65535
10005988:	2149c83a 	sub	r4,r4,r5
1000598c:	2421883a 	add	r16,r4,r16
10005990:	8008943a 	slli	r4,r16,16
10005994:	18ffffcc 	andi	r3,r3,65535
10005998:	102cd43a 	srli	r22,r2,16
1000599c:	20c8b03a 	or	r4,r4,r3
100059a0:	a1000015 	stw	r4,0(r20)
100059a4:	8021d43a 	srai	r16,r16,16
100059a8:	a5000104 	addi	r20,r20,4
100059ac:	e47fe32e 	bgeu	fp,r17,1000593c <__alt_data_end+0xf800593c>
100059b0:	d8c00317 	ldw	r3,12(sp)
100059b4:	18800017 	ldw	r2,0(r3)
100059b8:	10000c1e 	bne	r2,zero,100059ec <quorem+0x13c>
100059bc:	18bfff04 	addi	r2,r3,-4
100059c0:	9880082e 	bgeu	r19,r2,100059e4 <quorem+0x134>
100059c4:	18ffff17 	ldw	r3,-4(r3)
100059c8:	18000326 	beq	r3,zero,100059d8 <quorem+0x128>
100059cc:	00000506 	br	100059e4 <quorem+0x134>
100059d0:	10c00017 	ldw	r3,0(r2)
100059d4:	1800031e 	bne	r3,zero,100059e4 <quorem+0x134>
100059d8:	10bfff04 	addi	r2,r2,-4
100059dc:	bdffffc4 	addi	r23,r23,-1
100059e0:	98bffb36 	bltu	r19,r2,100059d0 <__alt_data_end+0xf80059d0>
100059e4:	d8c00017 	ldw	r3,0(sp)
100059e8:	1dc00415 	stw	r23,16(r3)
100059ec:	d9400217 	ldw	r5,8(sp)
100059f0:	d9000017 	ldw	r4,0(sp)
100059f4:	0009b140 	call	10009b14 <__mcmp>
100059f8:	10002816 	blt	r2,zero,10005a9c <quorem+0x1ec>
100059fc:	dc400117 	ldw	r17,4(sp)
10005a00:	94800044 	addi	r18,r18,1
10005a04:	980d883a 	mov	r6,r19
10005a08:	0007883a 	mov	r3,zero
10005a0c:	31000017 	ldw	r4,0(r6)
10005a10:	89400017 	ldw	r5,0(r17)
10005a14:	31800104 	addi	r6,r6,4
10005a18:	20bfffcc 	andi	r2,r4,65535
10005a1c:	10c7883a 	add	r3,r2,r3
10005a20:	28bfffcc 	andi	r2,r5,65535
10005a24:	1885c83a 	sub	r2,r3,r2
10005a28:	280ad43a 	srli	r5,r5,16
10005a2c:	2008d43a 	srli	r4,r4,16
10005a30:	1007d43a 	srai	r3,r2,16
10005a34:	10bfffcc 	andi	r2,r2,65535
10005a38:	2149c83a 	sub	r4,r4,r5
10005a3c:	20c9883a 	add	r4,r4,r3
10005a40:	200a943a 	slli	r5,r4,16
10005a44:	8c400104 	addi	r17,r17,4
10005a48:	2007d43a 	srai	r3,r4,16
10005a4c:	2884b03a 	or	r2,r5,r2
10005a50:	30bfff15 	stw	r2,-4(r6)
10005a54:	e47fed2e 	bgeu	fp,r17,10005a0c <__alt_data_end+0xf8005a0c>
10005a58:	bdc5883a 	add	r2,r23,r23
10005a5c:	1085883a 	add	r2,r2,r2
10005a60:	9887883a 	add	r3,r19,r2
10005a64:	18800017 	ldw	r2,0(r3)
10005a68:	10000c1e 	bne	r2,zero,10005a9c <quorem+0x1ec>
10005a6c:	18bfff04 	addi	r2,r3,-4
10005a70:	9880082e 	bgeu	r19,r2,10005a94 <quorem+0x1e4>
10005a74:	18ffff17 	ldw	r3,-4(r3)
10005a78:	18000326 	beq	r3,zero,10005a88 <quorem+0x1d8>
10005a7c:	00000506 	br	10005a94 <quorem+0x1e4>
10005a80:	10c00017 	ldw	r3,0(r2)
10005a84:	1800031e 	bne	r3,zero,10005a94 <quorem+0x1e4>
10005a88:	10bfff04 	addi	r2,r2,-4
10005a8c:	bdffffc4 	addi	r23,r23,-1
10005a90:	98bffb36 	bltu	r19,r2,10005a80 <__alt_data_end+0xf8005a80>
10005a94:	d8c00017 	ldw	r3,0(sp)
10005a98:	1dc00415 	stw	r23,16(r3)
10005a9c:	9005883a 	mov	r2,r18
10005aa0:	dfc00d17 	ldw	ra,52(sp)
10005aa4:	df000c17 	ldw	fp,48(sp)
10005aa8:	ddc00b17 	ldw	r23,44(sp)
10005aac:	dd800a17 	ldw	r22,40(sp)
10005ab0:	dd400917 	ldw	r21,36(sp)
10005ab4:	dd000817 	ldw	r20,32(sp)
10005ab8:	dcc00717 	ldw	r19,28(sp)
10005abc:	dc800617 	ldw	r18,24(sp)
10005ac0:	dc400517 	ldw	r17,20(sp)
10005ac4:	dc000417 	ldw	r16,16(sp)
10005ac8:	dec00e04 	addi	sp,sp,56
10005acc:	f800283a 	ret
10005ad0:	0005883a 	mov	r2,zero
10005ad4:	003ff206 	br	10005aa0 <__alt_data_end+0xf8005aa0>

10005ad8 <_dtoa_r>:
10005ad8:	20801017 	ldw	r2,64(r4)
10005adc:	deffde04 	addi	sp,sp,-136
10005ae0:	df002015 	stw	fp,128(sp)
10005ae4:	dcc01b15 	stw	r19,108(sp)
10005ae8:	dc801a15 	stw	r18,104(sp)
10005aec:	dc401915 	stw	r17,100(sp)
10005af0:	dc001815 	stw	r16,96(sp)
10005af4:	dfc02115 	stw	ra,132(sp)
10005af8:	ddc01f15 	stw	r23,124(sp)
10005afc:	dd801e15 	stw	r22,120(sp)
10005b00:	dd401d15 	stw	r21,116(sp)
10005b04:	dd001c15 	stw	r20,112(sp)
10005b08:	d9c00315 	stw	r7,12(sp)
10005b0c:	2039883a 	mov	fp,r4
10005b10:	3023883a 	mov	r17,r6
10005b14:	2825883a 	mov	r18,r5
10005b18:	dc002417 	ldw	r16,144(sp)
10005b1c:	3027883a 	mov	r19,r6
10005b20:	10000826 	beq	r2,zero,10005b44 <_dtoa_r+0x6c>
10005b24:	21801117 	ldw	r6,68(r4)
10005b28:	00c00044 	movi	r3,1
10005b2c:	100b883a 	mov	r5,r2
10005b30:	1986983a 	sll	r3,r3,r6
10005b34:	11800115 	stw	r6,4(r2)
10005b38:	10c00215 	stw	r3,8(r2)
10005b3c:	00092380 	call	10009238 <_Bfree>
10005b40:	e0001015 	stw	zero,64(fp)
10005b44:	88002e16 	blt	r17,zero,10005c00 <_dtoa_r+0x128>
10005b48:	80000015 	stw	zero,0(r16)
10005b4c:	889ffc2c 	andhi	r2,r17,32752
10005b50:	00dffc34 	movhi	r3,32752
10005b54:	10c01c26 	beq	r2,r3,10005bc8 <_dtoa_r+0xf0>
10005b58:	000d883a 	mov	r6,zero
10005b5c:	000f883a 	mov	r7,zero
10005b60:	9009883a 	mov	r4,r18
10005b64:	980b883a 	mov	r5,r19
10005b68:	000eae80 	call	1000eae8 <__eqdf2>
10005b6c:	10002b1e 	bne	r2,zero,10005c1c <_dtoa_r+0x144>
10005b70:	d9c02317 	ldw	r7,140(sp)
10005b74:	00800044 	movi	r2,1
10005b78:	38800015 	stw	r2,0(r7)
10005b7c:	d8802517 	ldw	r2,148(sp)
10005b80:	10019e26 	beq	r2,zero,100061fc <_dtoa_r+0x724>
10005b84:	d8c02517 	ldw	r3,148(sp)
10005b88:	00840074 	movhi	r2,4097
10005b8c:	108c4a44 	addi	r2,r2,12585
10005b90:	18800015 	stw	r2,0(r3)
10005b94:	10bfffc4 	addi	r2,r2,-1
10005b98:	dfc02117 	ldw	ra,132(sp)
10005b9c:	df002017 	ldw	fp,128(sp)
10005ba0:	ddc01f17 	ldw	r23,124(sp)
10005ba4:	dd801e17 	ldw	r22,120(sp)
10005ba8:	dd401d17 	ldw	r21,116(sp)
10005bac:	dd001c17 	ldw	r20,112(sp)
10005bb0:	dcc01b17 	ldw	r19,108(sp)
10005bb4:	dc801a17 	ldw	r18,104(sp)
10005bb8:	dc401917 	ldw	r17,100(sp)
10005bbc:	dc001817 	ldw	r16,96(sp)
10005bc0:	dec02204 	addi	sp,sp,136
10005bc4:	f800283a 	ret
10005bc8:	d8c02317 	ldw	r3,140(sp)
10005bcc:	0089c3c4 	movi	r2,9999
10005bd0:	18800015 	stw	r2,0(r3)
10005bd4:	90017726 	beq	r18,zero,100061b4 <_dtoa_r+0x6dc>
10005bd8:	00840074 	movhi	r2,4097
10005bdc:	108c5604 	addi	r2,r2,12632
10005be0:	d9002517 	ldw	r4,148(sp)
10005be4:	203fec26 	beq	r4,zero,10005b98 <__alt_data_end+0xf8005b98>
10005be8:	10c000c7 	ldb	r3,3(r2)
10005bec:	1801781e 	bne	r3,zero,100061d0 <_dtoa_r+0x6f8>
10005bf0:	10c000c4 	addi	r3,r2,3
10005bf4:	d9802517 	ldw	r6,148(sp)
10005bf8:	30c00015 	stw	r3,0(r6)
10005bfc:	003fe606 	br	10005b98 <__alt_data_end+0xf8005b98>
10005c00:	04e00034 	movhi	r19,32768
10005c04:	9cffffc4 	addi	r19,r19,-1
10005c08:	00800044 	movi	r2,1
10005c0c:	8ce6703a 	and	r19,r17,r19
10005c10:	80800015 	stw	r2,0(r16)
10005c14:	9823883a 	mov	r17,r19
10005c18:	003fcc06 	br	10005b4c <__alt_data_end+0xf8005b4c>
10005c1c:	d8800204 	addi	r2,sp,8
10005c20:	d8800015 	stw	r2,0(sp)
10005c24:	d9c00104 	addi	r7,sp,4
10005c28:	900b883a 	mov	r5,r18
10005c2c:	980d883a 	mov	r6,r19
10005c30:	e009883a 	mov	r4,fp
10005c34:	8820d53a 	srli	r16,r17,20
10005c38:	0009ee00 	call	10009ee0 <__d2b>
10005c3c:	d8800915 	stw	r2,36(sp)
10005c40:	8001651e 	bne	r16,zero,100061d8 <_dtoa_r+0x700>
10005c44:	dd800217 	ldw	r22,8(sp)
10005c48:	dc000117 	ldw	r16,4(sp)
10005c4c:	00800804 	movi	r2,32
10005c50:	b421883a 	add	r16,r22,r16
10005c54:	80c10c84 	addi	r3,r16,1074
10005c58:	10c2d10e 	bge	r2,r3,100067a0 <_dtoa_r+0xcc8>
10005c5c:	00801004 	movi	r2,64
10005c60:	81010484 	addi	r4,r16,1042
10005c64:	10c7c83a 	sub	r3,r2,r3
10005c68:	9108d83a 	srl	r4,r18,r4
10005c6c:	88e2983a 	sll	r17,r17,r3
10005c70:	2448b03a 	or	r4,r4,r17
10005c74:	00100040 	call	10010004 <__floatunsidf>
10005c78:	017f8434 	movhi	r5,65040
10005c7c:	01800044 	movi	r6,1
10005c80:	1009883a 	mov	r4,r2
10005c84:	194b883a 	add	r5,r3,r5
10005c88:	843fffc4 	addi	r16,r16,-1
10005c8c:	d9801115 	stw	r6,68(sp)
10005c90:	000d883a 	mov	r6,zero
10005c94:	01cffe34 	movhi	r7,16376
10005c98:	000f5ac0 	call	1000f5ac <__subdf3>
10005c9c:	0198dbf4 	movhi	r6,25455
10005ca0:	01cff4f4 	movhi	r7,16339
10005ca4:	3190d844 	addi	r6,r6,17249
10005ca8:	39e1e9c4 	addi	r7,r7,-30809
10005cac:	1009883a 	mov	r4,r2
10005cb0:	180b883a 	mov	r5,r3
10005cb4:	000ed400 	call	1000ed40 <__muldf3>
10005cb8:	01a2d874 	movhi	r6,35681
10005cbc:	01cff1f4 	movhi	r7,16327
10005cc0:	31b22cc4 	addi	r6,r6,-14157
10005cc4:	39e28a04 	addi	r7,r7,-30168
10005cc8:	180b883a 	mov	r5,r3
10005ccc:	1009883a 	mov	r4,r2
10005cd0:	000d86c0 	call	1000d86c <__adddf3>
10005cd4:	8009883a 	mov	r4,r16
10005cd8:	1029883a 	mov	r20,r2
10005cdc:	1823883a 	mov	r17,r3
10005ce0:	000ff280 	call	1000ff28 <__floatsidf>
10005ce4:	019427f4 	movhi	r6,20639
10005ce8:	01cff4f4 	movhi	r7,16339
10005cec:	319e7ec4 	addi	r6,r6,31227
10005cf0:	39d104c4 	addi	r7,r7,17427
10005cf4:	1009883a 	mov	r4,r2
10005cf8:	180b883a 	mov	r5,r3
10005cfc:	000ed400 	call	1000ed40 <__muldf3>
10005d00:	100d883a 	mov	r6,r2
10005d04:	180f883a 	mov	r7,r3
10005d08:	a009883a 	mov	r4,r20
10005d0c:	880b883a 	mov	r5,r17
10005d10:	000d86c0 	call	1000d86c <__adddf3>
10005d14:	1009883a 	mov	r4,r2
10005d18:	180b883a 	mov	r5,r3
10005d1c:	1029883a 	mov	r20,r2
10005d20:	1823883a 	mov	r17,r3
10005d24:	000fea80 	call	1000fea8 <__fixdfsi>
10005d28:	000d883a 	mov	r6,zero
10005d2c:	000f883a 	mov	r7,zero
10005d30:	a009883a 	mov	r4,r20
10005d34:	880b883a 	mov	r5,r17
10005d38:	d8800515 	stw	r2,20(sp)
10005d3c:	000ec4c0 	call	1000ec4c <__ledf2>
10005d40:	10028716 	blt	r2,zero,10006760 <_dtoa_r+0xc88>
10005d44:	d8c00517 	ldw	r3,20(sp)
10005d48:	00800584 	movi	r2,22
10005d4c:	10c27536 	bltu	r2,r3,10006724 <_dtoa_r+0xc4c>
10005d50:	180490fa 	slli	r2,r3,3
10005d54:	00c40074 	movhi	r3,4097
10005d58:	18cc7204 	addi	r3,r3,12744
10005d5c:	1885883a 	add	r2,r3,r2
10005d60:	11000017 	ldw	r4,0(r2)
10005d64:	11400117 	ldw	r5,4(r2)
10005d68:	900d883a 	mov	r6,r18
10005d6c:	980f883a 	mov	r7,r19
10005d70:	000eb700 	call	1000eb70 <__gedf2>
10005d74:	00828d0e 	bge	zero,r2,100067ac <_dtoa_r+0xcd4>
10005d78:	d9000517 	ldw	r4,20(sp)
10005d7c:	d8000e15 	stw	zero,56(sp)
10005d80:	213fffc4 	addi	r4,r4,-1
10005d84:	d9000515 	stw	r4,20(sp)
10005d88:	b42dc83a 	sub	r22,r22,r16
10005d8c:	b5bfffc4 	addi	r22,r22,-1
10005d90:	b0026f16 	blt	r22,zero,10006750 <_dtoa_r+0xc78>
10005d94:	d8000815 	stw	zero,32(sp)
10005d98:	d9c00517 	ldw	r7,20(sp)
10005d9c:	38026416 	blt	r7,zero,10006730 <_dtoa_r+0xc58>
10005da0:	b1ed883a 	add	r22,r22,r7
10005da4:	d9c00d15 	stw	r7,52(sp)
10005da8:	d8000a15 	stw	zero,40(sp)
10005dac:	d9800317 	ldw	r6,12(sp)
10005db0:	00800244 	movi	r2,9
10005db4:	11811436 	bltu	r2,r6,10006208 <_dtoa_r+0x730>
10005db8:	00800144 	movi	r2,5
10005dbc:	1184e10e 	bge	r2,r6,10007144 <_dtoa_r+0x166c>
10005dc0:	31bfff04 	addi	r6,r6,-4
10005dc4:	d9800315 	stw	r6,12(sp)
10005dc8:	0023883a 	mov	r17,zero
10005dcc:	d9800317 	ldw	r6,12(sp)
10005dd0:	008000c4 	movi	r2,3
10005dd4:	30836726 	beq	r6,r2,10006b74 <_dtoa_r+0x109c>
10005dd8:	1183410e 	bge	r2,r6,10006ae0 <_dtoa_r+0x1008>
10005ddc:	d9c00317 	ldw	r7,12(sp)
10005de0:	00800104 	movi	r2,4
10005de4:	38827c26 	beq	r7,r2,100067d8 <_dtoa_r+0xd00>
10005de8:	00800144 	movi	r2,5
10005dec:	3884c41e 	bne	r7,r2,10007100 <_dtoa_r+0x1628>
10005df0:	00800044 	movi	r2,1
10005df4:	d8800b15 	stw	r2,44(sp)
10005df8:	d8c00517 	ldw	r3,20(sp)
10005dfc:	d9002217 	ldw	r4,136(sp)
10005e00:	1907883a 	add	r3,r3,r4
10005e04:	19800044 	addi	r6,r3,1
10005e08:	d8c00c15 	stw	r3,48(sp)
10005e0c:	d9800615 	stw	r6,24(sp)
10005e10:	0183a40e 	bge	zero,r6,10006ca4 <_dtoa_r+0x11cc>
10005e14:	d9800617 	ldw	r6,24(sp)
10005e18:	3021883a 	mov	r16,r6
10005e1c:	e0001115 	stw	zero,68(fp)
10005e20:	008005c4 	movi	r2,23
10005e24:	1184c92e 	bgeu	r2,r6,1000714c <_dtoa_r+0x1674>
10005e28:	00c00044 	movi	r3,1
10005e2c:	00800104 	movi	r2,4
10005e30:	1085883a 	add	r2,r2,r2
10005e34:	11000504 	addi	r4,r2,20
10005e38:	180b883a 	mov	r5,r3
10005e3c:	18c00044 	addi	r3,r3,1
10005e40:	313ffb2e 	bgeu	r6,r4,10005e30 <__alt_data_end+0xf8005e30>
10005e44:	e1401115 	stw	r5,68(fp)
10005e48:	e009883a 	mov	r4,fp
10005e4c:	00091900 	call	10009190 <_Balloc>
10005e50:	d8800715 	stw	r2,28(sp)
10005e54:	e0801015 	stw	r2,64(fp)
10005e58:	00800384 	movi	r2,14
10005e5c:	1400f736 	bltu	r2,r16,1000623c <_dtoa_r+0x764>
10005e60:	8800f626 	beq	r17,zero,1000623c <_dtoa_r+0x764>
10005e64:	d9c00517 	ldw	r7,20(sp)
10005e68:	01c39a0e 	bge	zero,r7,10006cd4 <_dtoa_r+0x11fc>
10005e6c:	388003cc 	andi	r2,r7,15
10005e70:	100490fa 	slli	r2,r2,3
10005e74:	382bd13a 	srai	r21,r7,4
10005e78:	00c40074 	movhi	r3,4097
10005e7c:	18cc7204 	addi	r3,r3,12744
10005e80:	1885883a 	add	r2,r3,r2
10005e84:	a8c0040c 	andi	r3,r21,16
10005e88:	12400017 	ldw	r9,0(r2)
10005e8c:	12000117 	ldw	r8,4(r2)
10005e90:	18037926 	beq	r3,zero,10006c78 <_dtoa_r+0x11a0>
10005e94:	00840074 	movhi	r2,4097
10005e98:	108c6804 	addi	r2,r2,12704
10005e9c:	11800817 	ldw	r6,32(r2)
10005ea0:	11c00917 	ldw	r7,36(r2)
10005ea4:	9009883a 	mov	r4,r18
10005ea8:	980b883a 	mov	r5,r19
10005eac:	da001715 	stw	r8,92(sp)
10005eb0:	da401615 	stw	r9,88(sp)
10005eb4:	000e1180 	call	1000e118 <__divdf3>
10005eb8:	da001717 	ldw	r8,92(sp)
10005ebc:	da401617 	ldw	r9,88(sp)
10005ec0:	ad4003cc 	andi	r21,r21,15
10005ec4:	040000c4 	movi	r16,3
10005ec8:	1023883a 	mov	r17,r2
10005ecc:	1829883a 	mov	r20,r3
10005ed0:	a8001126 	beq	r21,zero,10005f18 <_dtoa_r+0x440>
10005ed4:	05c40074 	movhi	r23,4097
10005ed8:	bdcc6804 	addi	r23,r23,12704
10005edc:	4805883a 	mov	r2,r9
10005ee0:	4007883a 	mov	r3,r8
10005ee4:	a980004c 	andi	r6,r21,1
10005ee8:	1009883a 	mov	r4,r2
10005eec:	a82bd07a 	srai	r21,r21,1
10005ef0:	180b883a 	mov	r5,r3
10005ef4:	30000426 	beq	r6,zero,10005f08 <_dtoa_r+0x430>
10005ef8:	b9800017 	ldw	r6,0(r23)
10005efc:	b9c00117 	ldw	r7,4(r23)
10005f00:	84000044 	addi	r16,r16,1
10005f04:	000ed400 	call	1000ed40 <__muldf3>
10005f08:	bdc00204 	addi	r23,r23,8
10005f0c:	a83ff51e 	bne	r21,zero,10005ee4 <__alt_data_end+0xf8005ee4>
10005f10:	1013883a 	mov	r9,r2
10005f14:	1811883a 	mov	r8,r3
10005f18:	480d883a 	mov	r6,r9
10005f1c:	400f883a 	mov	r7,r8
10005f20:	8809883a 	mov	r4,r17
10005f24:	a00b883a 	mov	r5,r20
10005f28:	000e1180 	call	1000e118 <__divdf3>
10005f2c:	d8800f15 	stw	r2,60(sp)
10005f30:	d8c01015 	stw	r3,64(sp)
10005f34:	d8c00e17 	ldw	r3,56(sp)
10005f38:	18000626 	beq	r3,zero,10005f54 <_dtoa_r+0x47c>
10005f3c:	d9000f17 	ldw	r4,60(sp)
10005f40:	d9401017 	ldw	r5,64(sp)
10005f44:	000d883a 	mov	r6,zero
10005f48:	01cffc34 	movhi	r7,16368
10005f4c:	000ec4c0 	call	1000ec4c <__ledf2>
10005f50:	10040b16 	blt	r2,zero,10006f80 <_dtoa_r+0x14a8>
10005f54:	8009883a 	mov	r4,r16
10005f58:	000ff280 	call	1000ff28 <__floatsidf>
10005f5c:	d9800f17 	ldw	r6,60(sp)
10005f60:	d9c01017 	ldw	r7,64(sp)
10005f64:	1009883a 	mov	r4,r2
10005f68:	180b883a 	mov	r5,r3
10005f6c:	000ed400 	call	1000ed40 <__muldf3>
10005f70:	000d883a 	mov	r6,zero
10005f74:	01d00734 	movhi	r7,16412
10005f78:	1009883a 	mov	r4,r2
10005f7c:	180b883a 	mov	r5,r3
10005f80:	000d86c0 	call	1000d86c <__adddf3>
10005f84:	1021883a 	mov	r16,r2
10005f88:	d8800617 	ldw	r2,24(sp)
10005f8c:	047f3034 	movhi	r17,64704
10005f90:	1c63883a 	add	r17,r3,r17
10005f94:	10031826 	beq	r2,zero,10006bf8 <_dtoa_r+0x1120>
10005f98:	d8c00517 	ldw	r3,20(sp)
10005f9c:	db000617 	ldw	r12,24(sp)
10005fa0:	d8c01315 	stw	r3,76(sp)
10005fa4:	d9000b17 	ldw	r4,44(sp)
10005fa8:	20038f26 	beq	r4,zero,10006de8 <_dtoa_r+0x1310>
10005fac:	60bfffc4 	addi	r2,r12,-1
10005fb0:	100490fa 	slli	r2,r2,3
10005fb4:	00c40074 	movhi	r3,4097
10005fb8:	18cc7204 	addi	r3,r3,12744
10005fbc:	1885883a 	add	r2,r3,r2
10005fc0:	11800017 	ldw	r6,0(r2)
10005fc4:	11c00117 	ldw	r7,4(r2)
10005fc8:	d8800717 	ldw	r2,28(sp)
10005fcc:	0009883a 	mov	r4,zero
10005fd0:	014ff834 	movhi	r5,16352
10005fd4:	db001615 	stw	r12,88(sp)
10005fd8:	15c00044 	addi	r23,r2,1
10005fdc:	000e1180 	call	1000e118 <__divdf3>
10005fe0:	800d883a 	mov	r6,r16
10005fe4:	880f883a 	mov	r7,r17
10005fe8:	1009883a 	mov	r4,r2
10005fec:	180b883a 	mov	r5,r3
10005ff0:	000f5ac0 	call	1000f5ac <__subdf3>
10005ff4:	d9401017 	ldw	r5,64(sp)
10005ff8:	d9000f17 	ldw	r4,60(sp)
10005ffc:	102b883a 	mov	r21,r2
10006000:	d8c01215 	stw	r3,72(sp)
10006004:	000fea80 	call	1000fea8 <__fixdfsi>
10006008:	1009883a 	mov	r4,r2
1000600c:	1029883a 	mov	r20,r2
10006010:	000ff280 	call	1000ff28 <__floatsidf>
10006014:	d9000f17 	ldw	r4,60(sp)
10006018:	d9401017 	ldw	r5,64(sp)
1000601c:	100d883a 	mov	r6,r2
10006020:	180f883a 	mov	r7,r3
10006024:	000f5ac0 	call	1000f5ac <__subdf3>
10006028:	1823883a 	mov	r17,r3
1000602c:	d8c00717 	ldw	r3,28(sp)
10006030:	d9401217 	ldw	r5,72(sp)
10006034:	a2000c04 	addi	r8,r20,48
10006038:	1021883a 	mov	r16,r2
1000603c:	1a000005 	stb	r8,0(r3)
10006040:	800d883a 	mov	r6,r16
10006044:	880f883a 	mov	r7,r17
10006048:	a809883a 	mov	r4,r21
1000604c:	4029883a 	mov	r20,r8
10006050:	000eb700 	call	1000eb70 <__gedf2>
10006054:	00841d16 	blt	zero,r2,100070cc <_dtoa_r+0x15f4>
10006058:	800d883a 	mov	r6,r16
1000605c:	880f883a 	mov	r7,r17
10006060:	0009883a 	mov	r4,zero
10006064:	014ffc34 	movhi	r5,16368
10006068:	000f5ac0 	call	1000f5ac <__subdf3>
1000606c:	d9401217 	ldw	r5,72(sp)
10006070:	100d883a 	mov	r6,r2
10006074:	180f883a 	mov	r7,r3
10006078:	a809883a 	mov	r4,r21
1000607c:	000eb700 	call	1000eb70 <__gedf2>
10006080:	db001617 	ldw	r12,88(sp)
10006084:	00840e16 	blt	zero,r2,100070c0 <_dtoa_r+0x15e8>
10006088:	00800044 	movi	r2,1
1000608c:	13006b0e 	bge	r2,r12,1000623c <_dtoa_r+0x764>
10006090:	d9000717 	ldw	r4,28(sp)
10006094:	dd800f15 	stw	r22,60(sp)
10006098:	dcc01015 	stw	r19,64(sp)
1000609c:	2319883a 	add	r12,r4,r12
100060a0:	dcc01217 	ldw	r19,72(sp)
100060a4:	602d883a 	mov	r22,r12
100060a8:	dc801215 	stw	r18,72(sp)
100060ac:	b825883a 	mov	r18,r23
100060b0:	00000906 	br	100060d8 <_dtoa_r+0x600>
100060b4:	000f5ac0 	call	1000f5ac <__subdf3>
100060b8:	a80d883a 	mov	r6,r21
100060bc:	980f883a 	mov	r7,r19
100060c0:	1009883a 	mov	r4,r2
100060c4:	180b883a 	mov	r5,r3
100060c8:	000ec4c0 	call	1000ec4c <__ledf2>
100060cc:	1003e816 	blt	r2,zero,10007070 <_dtoa_r+0x1598>
100060d0:	b825883a 	mov	r18,r23
100060d4:	bd83e926 	beq	r23,r22,1000707c <_dtoa_r+0x15a4>
100060d8:	a809883a 	mov	r4,r21
100060dc:	980b883a 	mov	r5,r19
100060e0:	000d883a 	mov	r6,zero
100060e4:	01d00934 	movhi	r7,16420
100060e8:	000ed400 	call	1000ed40 <__muldf3>
100060ec:	000d883a 	mov	r6,zero
100060f0:	01d00934 	movhi	r7,16420
100060f4:	8009883a 	mov	r4,r16
100060f8:	880b883a 	mov	r5,r17
100060fc:	102b883a 	mov	r21,r2
10006100:	1827883a 	mov	r19,r3
10006104:	000ed400 	call	1000ed40 <__muldf3>
10006108:	180b883a 	mov	r5,r3
1000610c:	1009883a 	mov	r4,r2
10006110:	1821883a 	mov	r16,r3
10006114:	1023883a 	mov	r17,r2
10006118:	000fea80 	call	1000fea8 <__fixdfsi>
1000611c:	1009883a 	mov	r4,r2
10006120:	1029883a 	mov	r20,r2
10006124:	000ff280 	call	1000ff28 <__floatsidf>
10006128:	8809883a 	mov	r4,r17
1000612c:	800b883a 	mov	r5,r16
10006130:	100d883a 	mov	r6,r2
10006134:	180f883a 	mov	r7,r3
10006138:	000f5ac0 	call	1000f5ac <__subdf3>
1000613c:	a5000c04 	addi	r20,r20,48
10006140:	a80d883a 	mov	r6,r21
10006144:	980f883a 	mov	r7,r19
10006148:	1009883a 	mov	r4,r2
1000614c:	180b883a 	mov	r5,r3
10006150:	95000005 	stb	r20,0(r18)
10006154:	1021883a 	mov	r16,r2
10006158:	1823883a 	mov	r17,r3
1000615c:	000ec4c0 	call	1000ec4c <__ledf2>
10006160:	bdc00044 	addi	r23,r23,1
10006164:	800d883a 	mov	r6,r16
10006168:	880f883a 	mov	r7,r17
1000616c:	0009883a 	mov	r4,zero
10006170:	014ffc34 	movhi	r5,16368
10006174:	103fcf0e 	bge	r2,zero,100060b4 <__alt_data_end+0xf80060b4>
10006178:	d8c01317 	ldw	r3,76(sp)
1000617c:	d8c00515 	stw	r3,20(sp)
10006180:	d9400917 	ldw	r5,36(sp)
10006184:	e009883a 	mov	r4,fp
10006188:	00092380 	call	10009238 <_Bfree>
1000618c:	d9000517 	ldw	r4,20(sp)
10006190:	d9802317 	ldw	r6,140(sp)
10006194:	d9c02517 	ldw	r7,148(sp)
10006198:	b8000005 	stb	zero,0(r23)
1000619c:	20800044 	addi	r2,r4,1
100061a0:	30800015 	stw	r2,0(r6)
100061a4:	3802aa26 	beq	r7,zero,10006c50 <_dtoa_r+0x1178>
100061a8:	3dc00015 	stw	r23,0(r7)
100061ac:	d8800717 	ldw	r2,28(sp)
100061b0:	003e7906 	br	10005b98 <__alt_data_end+0xf8005b98>
100061b4:	00800434 	movhi	r2,16
100061b8:	10bfffc4 	addi	r2,r2,-1
100061bc:	88a2703a 	and	r17,r17,r2
100061c0:	883e851e 	bne	r17,zero,10005bd8 <__alt_data_end+0xf8005bd8>
100061c4:	00840074 	movhi	r2,4097
100061c8:	108c5304 	addi	r2,r2,12620
100061cc:	003e8406 	br	10005be0 <__alt_data_end+0xf8005be0>
100061d0:	10c00204 	addi	r3,r2,8
100061d4:	003e8706 	br	10005bf4 <__alt_data_end+0xf8005bf4>
100061d8:	01400434 	movhi	r5,16
100061dc:	297fffc4 	addi	r5,r5,-1
100061e0:	994a703a 	and	r5,r19,r5
100061e4:	9009883a 	mov	r4,r18
100061e8:	843f0044 	addi	r16,r16,-1023
100061ec:	294ffc34 	orhi	r5,r5,16368
100061f0:	dd800217 	ldw	r22,8(sp)
100061f4:	d8001115 	stw	zero,68(sp)
100061f8:	003ea506 	br	10005c90 <__alt_data_end+0xf8005c90>
100061fc:	00840074 	movhi	r2,4097
10006200:	108c4a04 	addi	r2,r2,12584
10006204:	003e6406 	br	10005b98 <__alt_data_end+0xf8005b98>
10006208:	e0001115 	stw	zero,68(fp)
1000620c:	000b883a 	mov	r5,zero
10006210:	e009883a 	mov	r4,fp
10006214:	00091900 	call	10009190 <_Balloc>
10006218:	01bfffc4 	movi	r6,-1
1000621c:	01c00044 	movi	r7,1
10006220:	d8800715 	stw	r2,28(sp)
10006224:	d9800c15 	stw	r6,48(sp)
10006228:	e0801015 	stw	r2,64(fp)
1000622c:	d8000315 	stw	zero,12(sp)
10006230:	d9c00b15 	stw	r7,44(sp)
10006234:	d9800615 	stw	r6,24(sp)
10006238:	d8002215 	stw	zero,136(sp)
1000623c:	d8800117 	ldw	r2,4(sp)
10006240:	10008916 	blt	r2,zero,10006468 <_dtoa_r+0x990>
10006244:	d9000517 	ldw	r4,20(sp)
10006248:	00c00384 	movi	r3,14
1000624c:	19008616 	blt	r3,r4,10006468 <_dtoa_r+0x990>
10006250:	200490fa 	slli	r2,r4,3
10006254:	00c40074 	movhi	r3,4097
10006258:	d9802217 	ldw	r6,136(sp)
1000625c:	18cc7204 	addi	r3,r3,12744
10006260:	1885883a 	add	r2,r3,r2
10006264:	14000017 	ldw	r16,0(r2)
10006268:	14400117 	ldw	r17,4(r2)
1000626c:	30016316 	blt	r6,zero,100067fc <_dtoa_r+0xd24>
10006270:	800d883a 	mov	r6,r16
10006274:	880f883a 	mov	r7,r17
10006278:	9009883a 	mov	r4,r18
1000627c:	980b883a 	mov	r5,r19
10006280:	000e1180 	call	1000e118 <__divdf3>
10006284:	180b883a 	mov	r5,r3
10006288:	1009883a 	mov	r4,r2
1000628c:	000fea80 	call	1000fea8 <__fixdfsi>
10006290:	1009883a 	mov	r4,r2
10006294:	102b883a 	mov	r21,r2
10006298:	000ff280 	call	1000ff28 <__floatsidf>
1000629c:	800d883a 	mov	r6,r16
100062a0:	880f883a 	mov	r7,r17
100062a4:	1009883a 	mov	r4,r2
100062a8:	180b883a 	mov	r5,r3
100062ac:	000ed400 	call	1000ed40 <__muldf3>
100062b0:	100d883a 	mov	r6,r2
100062b4:	180f883a 	mov	r7,r3
100062b8:	9009883a 	mov	r4,r18
100062bc:	980b883a 	mov	r5,r19
100062c0:	000f5ac0 	call	1000f5ac <__subdf3>
100062c4:	d9c00717 	ldw	r7,28(sp)
100062c8:	1009883a 	mov	r4,r2
100062cc:	a8800c04 	addi	r2,r21,48
100062d0:	38800005 	stb	r2,0(r7)
100062d4:	3dc00044 	addi	r23,r7,1
100062d8:	d9c00617 	ldw	r7,24(sp)
100062dc:	01800044 	movi	r6,1
100062e0:	180b883a 	mov	r5,r3
100062e4:	2005883a 	mov	r2,r4
100062e8:	39803826 	beq	r7,r6,100063cc <_dtoa_r+0x8f4>
100062ec:	000d883a 	mov	r6,zero
100062f0:	01d00934 	movhi	r7,16420
100062f4:	000ed400 	call	1000ed40 <__muldf3>
100062f8:	000d883a 	mov	r6,zero
100062fc:	000f883a 	mov	r7,zero
10006300:	1009883a 	mov	r4,r2
10006304:	180b883a 	mov	r5,r3
10006308:	1025883a 	mov	r18,r2
1000630c:	1827883a 	mov	r19,r3
10006310:	000eae80 	call	1000eae8 <__eqdf2>
10006314:	103f9a26 	beq	r2,zero,10006180 <__alt_data_end+0xf8006180>
10006318:	d9c00617 	ldw	r7,24(sp)
1000631c:	d8c00717 	ldw	r3,28(sp)
10006320:	b829883a 	mov	r20,r23
10006324:	38bfffc4 	addi	r2,r7,-1
10006328:	18ad883a 	add	r22,r3,r2
1000632c:	00000a06 	br	10006358 <_dtoa_r+0x880>
10006330:	000ed400 	call	1000ed40 <__muldf3>
10006334:	000d883a 	mov	r6,zero
10006338:	000f883a 	mov	r7,zero
1000633c:	1009883a 	mov	r4,r2
10006340:	180b883a 	mov	r5,r3
10006344:	1025883a 	mov	r18,r2
10006348:	1827883a 	mov	r19,r3
1000634c:	b829883a 	mov	r20,r23
10006350:	000eae80 	call	1000eae8 <__eqdf2>
10006354:	103f8a26 	beq	r2,zero,10006180 <__alt_data_end+0xf8006180>
10006358:	800d883a 	mov	r6,r16
1000635c:	880f883a 	mov	r7,r17
10006360:	9009883a 	mov	r4,r18
10006364:	980b883a 	mov	r5,r19
10006368:	000e1180 	call	1000e118 <__divdf3>
1000636c:	180b883a 	mov	r5,r3
10006370:	1009883a 	mov	r4,r2
10006374:	000fea80 	call	1000fea8 <__fixdfsi>
10006378:	1009883a 	mov	r4,r2
1000637c:	102b883a 	mov	r21,r2
10006380:	000ff280 	call	1000ff28 <__floatsidf>
10006384:	800d883a 	mov	r6,r16
10006388:	880f883a 	mov	r7,r17
1000638c:	1009883a 	mov	r4,r2
10006390:	180b883a 	mov	r5,r3
10006394:	000ed400 	call	1000ed40 <__muldf3>
10006398:	100d883a 	mov	r6,r2
1000639c:	180f883a 	mov	r7,r3
100063a0:	9009883a 	mov	r4,r18
100063a4:	980b883a 	mov	r5,r19
100063a8:	000f5ac0 	call	1000f5ac <__subdf3>
100063ac:	aa000c04 	addi	r8,r21,48
100063b0:	a2000005 	stb	r8,0(r20)
100063b4:	000d883a 	mov	r6,zero
100063b8:	01d00934 	movhi	r7,16420
100063bc:	1009883a 	mov	r4,r2
100063c0:	180b883a 	mov	r5,r3
100063c4:	a5c00044 	addi	r23,r20,1
100063c8:	b53fd91e 	bne	r22,r20,10006330 <__alt_data_end+0xf8006330>
100063cc:	100d883a 	mov	r6,r2
100063d0:	180f883a 	mov	r7,r3
100063d4:	1009883a 	mov	r4,r2
100063d8:	180b883a 	mov	r5,r3
100063dc:	000d86c0 	call	1000d86c <__adddf3>
100063e0:	100d883a 	mov	r6,r2
100063e4:	180f883a 	mov	r7,r3
100063e8:	8009883a 	mov	r4,r16
100063ec:	880b883a 	mov	r5,r17
100063f0:	1027883a 	mov	r19,r2
100063f4:	1825883a 	mov	r18,r3
100063f8:	000ec4c0 	call	1000ec4c <__ledf2>
100063fc:	10000816 	blt	r2,zero,10006420 <_dtoa_r+0x948>
10006400:	980d883a 	mov	r6,r19
10006404:	900f883a 	mov	r7,r18
10006408:	8009883a 	mov	r4,r16
1000640c:	880b883a 	mov	r5,r17
10006410:	000eae80 	call	1000eae8 <__eqdf2>
10006414:	103f5a1e 	bne	r2,zero,10006180 <__alt_data_end+0xf8006180>
10006418:	ad40004c 	andi	r21,r21,1
1000641c:	a83f5826 	beq	r21,zero,10006180 <__alt_data_end+0xf8006180>
10006420:	bd3fffc3 	ldbu	r20,-1(r23)
10006424:	b8bfffc4 	addi	r2,r23,-1
10006428:	1007883a 	mov	r3,r2
1000642c:	01400e44 	movi	r5,57
10006430:	d9800717 	ldw	r6,28(sp)
10006434:	00000506 	br	1000644c <_dtoa_r+0x974>
10006438:	18ffffc4 	addi	r3,r3,-1
1000643c:	11824726 	beq	r2,r6,10006d5c <_dtoa_r+0x1284>
10006440:	1d000003 	ldbu	r20,0(r3)
10006444:	102f883a 	mov	r23,r2
10006448:	10bfffc4 	addi	r2,r2,-1
1000644c:	a1003fcc 	andi	r4,r20,255
10006450:	2100201c 	xori	r4,r4,128
10006454:	213fe004 	addi	r4,r4,-128
10006458:	217ff726 	beq	r4,r5,10006438 <__alt_data_end+0xf8006438>
1000645c:	a2000044 	addi	r8,r20,1
10006460:	12000005 	stb	r8,0(r2)
10006464:	003f4606 	br	10006180 <__alt_data_end+0xf8006180>
10006468:	d9000b17 	ldw	r4,44(sp)
1000646c:	2000c826 	beq	r4,zero,10006790 <_dtoa_r+0xcb8>
10006470:	d9800317 	ldw	r6,12(sp)
10006474:	00c00044 	movi	r3,1
10006478:	1980f90e 	bge	r3,r6,10006860 <_dtoa_r+0xd88>
1000647c:	d8800617 	ldw	r2,24(sp)
10006480:	d8c00a17 	ldw	r3,40(sp)
10006484:	157fffc4 	addi	r21,r2,-1
10006488:	1d41f316 	blt	r3,r21,10006c58 <_dtoa_r+0x1180>
1000648c:	1d6bc83a 	sub	r21,r3,r21
10006490:	d9c00617 	ldw	r7,24(sp)
10006494:	3802aa16 	blt	r7,zero,10006f40 <_dtoa_r+0x1468>
10006498:	dd000817 	ldw	r20,32(sp)
1000649c:	d8800617 	ldw	r2,24(sp)
100064a0:	d8c00817 	ldw	r3,32(sp)
100064a4:	01400044 	movi	r5,1
100064a8:	e009883a 	mov	r4,fp
100064ac:	1887883a 	add	r3,r3,r2
100064b0:	d8c00815 	stw	r3,32(sp)
100064b4:	b0ad883a 	add	r22,r22,r2
100064b8:	00095c40 	call	100095c4 <__i2b>
100064bc:	1023883a 	mov	r17,r2
100064c0:	a0000826 	beq	r20,zero,100064e4 <_dtoa_r+0xa0c>
100064c4:	0580070e 	bge	zero,r22,100064e4 <_dtoa_r+0xa0c>
100064c8:	a005883a 	mov	r2,r20
100064cc:	b500b916 	blt	r22,r20,100067b4 <_dtoa_r+0xcdc>
100064d0:	d9000817 	ldw	r4,32(sp)
100064d4:	a0a9c83a 	sub	r20,r20,r2
100064d8:	b0adc83a 	sub	r22,r22,r2
100064dc:	2089c83a 	sub	r4,r4,r2
100064e0:	d9000815 	stw	r4,32(sp)
100064e4:	d9800a17 	ldw	r6,40(sp)
100064e8:	0181810e 	bge	zero,r6,10006af0 <_dtoa_r+0x1018>
100064ec:	d9c00b17 	ldw	r7,44(sp)
100064f0:	3800b326 	beq	r7,zero,100067c0 <_dtoa_r+0xce8>
100064f4:	a800b226 	beq	r21,zero,100067c0 <_dtoa_r+0xce8>
100064f8:	880b883a 	mov	r5,r17
100064fc:	a80d883a 	mov	r6,r21
10006500:	e009883a 	mov	r4,fp
10006504:	000988c0 	call	1000988c <__pow5mult>
10006508:	d9800917 	ldw	r6,36(sp)
1000650c:	100b883a 	mov	r5,r2
10006510:	e009883a 	mov	r4,fp
10006514:	1023883a 	mov	r17,r2
10006518:	00096000 	call	10009600 <__multiply>
1000651c:	1021883a 	mov	r16,r2
10006520:	d8800a17 	ldw	r2,40(sp)
10006524:	d9400917 	ldw	r5,36(sp)
10006528:	e009883a 	mov	r4,fp
1000652c:	1545c83a 	sub	r2,r2,r21
10006530:	d8800a15 	stw	r2,40(sp)
10006534:	00092380 	call	10009238 <_Bfree>
10006538:	d8c00a17 	ldw	r3,40(sp)
1000653c:	18009f1e 	bne	r3,zero,100067bc <_dtoa_r+0xce4>
10006540:	05c00044 	movi	r23,1
10006544:	e009883a 	mov	r4,fp
10006548:	b80b883a 	mov	r5,r23
1000654c:	00095c40 	call	100095c4 <__i2b>
10006550:	d9000d17 	ldw	r4,52(sp)
10006554:	102b883a 	mov	r21,r2
10006558:	2000ce26 	beq	r4,zero,10006894 <_dtoa_r+0xdbc>
1000655c:	200d883a 	mov	r6,r4
10006560:	100b883a 	mov	r5,r2
10006564:	e009883a 	mov	r4,fp
10006568:	000988c0 	call	1000988c <__pow5mult>
1000656c:	d9800317 	ldw	r6,12(sp)
10006570:	102b883a 	mov	r21,r2
10006574:	b981810e 	bge	r23,r6,10006b7c <_dtoa_r+0x10a4>
10006578:	0027883a 	mov	r19,zero
1000657c:	a8800417 	ldw	r2,16(r21)
10006580:	05c00804 	movi	r23,32
10006584:	10800104 	addi	r2,r2,4
10006588:	1085883a 	add	r2,r2,r2
1000658c:	1085883a 	add	r2,r2,r2
10006590:	a885883a 	add	r2,r21,r2
10006594:	11000017 	ldw	r4,0(r2)
10006598:	00094ac0 	call	100094ac <__hi0bits>
1000659c:	b885c83a 	sub	r2,r23,r2
100065a0:	1585883a 	add	r2,r2,r22
100065a4:	108007cc 	andi	r2,r2,31
100065a8:	1000b326 	beq	r2,zero,10006878 <_dtoa_r+0xda0>
100065ac:	00c00804 	movi	r3,32
100065b0:	1887c83a 	sub	r3,r3,r2
100065b4:	01000104 	movi	r4,4
100065b8:	20c2cd0e 	bge	r4,r3,100070f0 <_dtoa_r+0x1618>
100065bc:	00c00704 	movi	r3,28
100065c0:	1885c83a 	sub	r2,r3,r2
100065c4:	d8c00817 	ldw	r3,32(sp)
100065c8:	a0a9883a 	add	r20,r20,r2
100065cc:	b0ad883a 	add	r22,r22,r2
100065d0:	1887883a 	add	r3,r3,r2
100065d4:	d8c00815 	stw	r3,32(sp)
100065d8:	d9800817 	ldw	r6,32(sp)
100065dc:	0180040e 	bge	zero,r6,100065f0 <_dtoa_r+0xb18>
100065e0:	800b883a 	mov	r5,r16
100065e4:	e009883a 	mov	r4,fp
100065e8:	00099cc0 	call	100099cc <__lshift>
100065ec:	1021883a 	mov	r16,r2
100065f0:	0580050e 	bge	zero,r22,10006608 <_dtoa_r+0xb30>
100065f4:	a80b883a 	mov	r5,r21
100065f8:	b00d883a 	mov	r6,r22
100065fc:	e009883a 	mov	r4,fp
10006600:	00099cc0 	call	100099cc <__lshift>
10006604:	102b883a 	mov	r21,r2
10006608:	d9c00e17 	ldw	r7,56(sp)
1000660c:	3801211e 	bne	r7,zero,10006a94 <_dtoa_r+0xfbc>
10006610:	d9800617 	ldw	r6,24(sp)
10006614:	0181380e 	bge	zero,r6,10006af8 <_dtoa_r+0x1020>
10006618:	d8c00b17 	ldw	r3,44(sp)
1000661c:	1800ab1e 	bne	r3,zero,100068cc <_dtoa_r+0xdf4>
10006620:	dc800717 	ldw	r18,28(sp)
10006624:	dcc00617 	ldw	r19,24(sp)
10006628:	9029883a 	mov	r20,r18
1000662c:	00000206 	br	10006638 <_dtoa_r+0xb60>
10006630:	00092600 	call	10009260 <__multadd>
10006634:	1021883a 	mov	r16,r2
10006638:	a80b883a 	mov	r5,r21
1000663c:	8009883a 	mov	r4,r16
10006640:	00058b00 	call	100058b0 <quorem>
10006644:	10800c04 	addi	r2,r2,48
10006648:	90800005 	stb	r2,0(r18)
1000664c:	94800044 	addi	r18,r18,1
10006650:	9507c83a 	sub	r3,r18,r20
10006654:	000f883a 	mov	r7,zero
10006658:	01800284 	movi	r6,10
1000665c:	800b883a 	mov	r5,r16
10006660:	e009883a 	mov	r4,fp
10006664:	1cfff216 	blt	r3,r19,10006630 <__alt_data_end+0xf8006630>
10006668:	1011883a 	mov	r8,r2
1000666c:	d8800617 	ldw	r2,24(sp)
10006670:	0082370e 	bge	zero,r2,10006f50 <_dtoa_r+0x1478>
10006674:	d9000717 	ldw	r4,28(sp)
10006678:	0025883a 	mov	r18,zero
1000667c:	20af883a 	add	r23,r4,r2
10006680:	01800044 	movi	r6,1
10006684:	800b883a 	mov	r5,r16
10006688:	e009883a 	mov	r4,fp
1000668c:	da001715 	stw	r8,92(sp)
10006690:	00099cc0 	call	100099cc <__lshift>
10006694:	a80b883a 	mov	r5,r21
10006698:	1009883a 	mov	r4,r2
1000669c:	d8800915 	stw	r2,36(sp)
100066a0:	0009b140 	call	10009b14 <__mcmp>
100066a4:	da001717 	ldw	r8,92(sp)
100066a8:	0081800e 	bge	zero,r2,10006cac <_dtoa_r+0x11d4>
100066ac:	b93fffc3 	ldbu	r4,-1(r23)
100066b0:	b8bfffc4 	addi	r2,r23,-1
100066b4:	1007883a 	mov	r3,r2
100066b8:	01800e44 	movi	r6,57
100066bc:	d9c00717 	ldw	r7,28(sp)
100066c0:	00000506 	br	100066d8 <_dtoa_r+0xc00>
100066c4:	18ffffc4 	addi	r3,r3,-1
100066c8:	11c12326 	beq	r2,r7,10006b58 <_dtoa_r+0x1080>
100066cc:	19000003 	ldbu	r4,0(r3)
100066d0:	102f883a 	mov	r23,r2
100066d4:	10bfffc4 	addi	r2,r2,-1
100066d8:	21403fcc 	andi	r5,r4,255
100066dc:	2940201c 	xori	r5,r5,128
100066e0:	297fe004 	addi	r5,r5,-128
100066e4:	29bff726 	beq	r5,r6,100066c4 <__alt_data_end+0xf80066c4>
100066e8:	21000044 	addi	r4,r4,1
100066ec:	11000005 	stb	r4,0(r2)
100066f0:	a80b883a 	mov	r5,r21
100066f4:	e009883a 	mov	r4,fp
100066f8:	00092380 	call	10009238 <_Bfree>
100066fc:	883ea026 	beq	r17,zero,10006180 <__alt_data_end+0xf8006180>
10006700:	90000426 	beq	r18,zero,10006714 <_dtoa_r+0xc3c>
10006704:	94400326 	beq	r18,r17,10006714 <_dtoa_r+0xc3c>
10006708:	900b883a 	mov	r5,r18
1000670c:	e009883a 	mov	r4,fp
10006710:	00092380 	call	10009238 <_Bfree>
10006714:	880b883a 	mov	r5,r17
10006718:	e009883a 	mov	r4,fp
1000671c:	00092380 	call	10009238 <_Bfree>
10006720:	003e9706 	br	10006180 <__alt_data_end+0xf8006180>
10006724:	01800044 	movi	r6,1
10006728:	d9800e15 	stw	r6,56(sp)
1000672c:	003d9606 	br	10005d88 <__alt_data_end+0xf8005d88>
10006730:	d8800817 	ldw	r2,32(sp)
10006734:	d8c00517 	ldw	r3,20(sp)
10006738:	d8000d15 	stw	zero,52(sp)
1000673c:	10c5c83a 	sub	r2,r2,r3
10006740:	00c9c83a 	sub	r4,zero,r3
10006744:	d8800815 	stw	r2,32(sp)
10006748:	d9000a15 	stw	r4,40(sp)
1000674c:	003d9706 	br	10005dac <__alt_data_end+0xf8005dac>
10006750:	05adc83a 	sub	r22,zero,r22
10006754:	dd800815 	stw	r22,32(sp)
10006758:	002d883a 	mov	r22,zero
1000675c:	003d8e06 	br	10005d98 <__alt_data_end+0xf8005d98>
10006760:	d9000517 	ldw	r4,20(sp)
10006764:	000ff280 	call	1000ff28 <__floatsidf>
10006768:	100d883a 	mov	r6,r2
1000676c:	180f883a 	mov	r7,r3
10006770:	a009883a 	mov	r4,r20
10006774:	880b883a 	mov	r5,r17
10006778:	000eae80 	call	1000eae8 <__eqdf2>
1000677c:	103d7126 	beq	r2,zero,10005d44 <__alt_data_end+0xf8005d44>
10006780:	d9c00517 	ldw	r7,20(sp)
10006784:	39ffffc4 	addi	r7,r7,-1
10006788:	d9c00515 	stw	r7,20(sp)
1000678c:	003d6d06 	br	10005d44 <__alt_data_end+0xf8005d44>
10006790:	dd400a17 	ldw	r21,40(sp)
10006794:	dd000817 	ldw	r20,32(sp)
10006798:	0023883a 	mov	r17,zero
1000679c:	003f4806 	br	100064c0 <__alt_data_end+0xf80064c0>
100067a0:	10e3c83a 	sub	r17,r2,r3
100067a4:	9448983a 	sll	r4,r18,r17
100067a8:	003d3206 	br	10005c74 <__alt_data_end+0xf8005c74>
100067ac:	d8000e15 	stw	zero,56(sp)
100067b0:	003d7506 	br	10005d88 <__alt_data_end+0xf8005d88>
100067b4:	b005883a 	mov	r2,r22
100067b8:	003f4506 	br	100064d0 <__alt_data_end+0xf80064d0>
100067bc:	dc000915 	stw	r16,36(sp)
100067c0:	d9800a17 	ldw	r6,40(sp)
100067c4:	d9400917 	ldw	r5,36(sp)
100067c8:	e009883a 	mov	r4,fp
100067cc:	000988c0 	call	1000988c <__pow5mult>
100067d0:	1021883a 	mov	r16,r2
100067d4:	003f5a06 	br	10006540 <__alt_data_end+0xf8006540>
100067d8:	01c00044 	movi	r7,1
100067dc:	d9c00b15 	stw	r7,44(sp)
100067e0:	d8802217 	ldw	r2,136(sp)
100067e4:	0081280e 	bge	zero,r2,10006c88 <_dtoa_r+0x11b0>
100067e8:	100d883a 	mov	r6,r2
100067ec:	1021883a 	mov	r16,r2
100067f0:	d8800c15 	stw	r2,48(sp)
100067f4:	d8800615 	stw	r2,24(sp)
100067f8:	003d8806 	br	10005e1c <__alt_data_end+0xf8005e1c>
100067fc:	d8800617 	ldw	r2,24(sp)
10006800:	00be9b16 	blt	zero,r2,10006270 <__alt_data_end+0xf8006270>
10006804:	10010f1e 	bne	r2,zero,10006c44 <_dtoa_r+0x116c>
10006808:	880b883a 	mov	r5,r17
1000680c:	000d883a 	mov	r6,zero
10006810:	01d00534 	movhi	r7,16404
10006814:	8009883a 	mov	r4,r16
10006818:	000ed400 	call	1000ed40 <__muldf3>
1000681c:	900d883a 	mov	r6,r18
10006820:	980f883a 	mov	r7,r19
10006824:	1009883a 	mov	r4,r2
10006828:	180b883a 	mov	r5,r3
1000682c:	000eb700 	call	1000eb70 <__gedf2>
10006830:	002b883a 	mov	r21,zero
10006834:	0023883a 	mov	r17,zero
10006838:	1000bf16 	blt	r2,zero,10006b38 <_dtoa_r+0x1060>
1000683c:	d9802217 	ldw	r6,136(sp)
10006840:	ddc00717 	ldw	r23,28(sp)
10006844:	018c303a 	nor	r6,zero,r6
10006848:	d9800515 	stw	r6,20(sp)
1000684c:	a80b883a 	mov	r5,r21
10006850:	e009883a 	mov	r4,fp
10006854:	00092380 	call	10009238 <_Bfree>
10006858:	883e4926 	beq	r17,zero,10006180 <__alt_data_end+0xf8006180>
1000685c:	003fad06 	br	10006714 <__alt_data_end+0xf8006714>
10006860:	d9c01117 	ldw	r7,68(sp)
10006864:	3801bc26 	beq	r7,zero,10006f58 <_dtoa_r+0x1480>
10006868:	10810cc4 	addi	r2,r2,1075
1000686c:	dd400a17 	ldw	r21,40(sp)
10006870:	dd000817 	ldw	r20,32(sp)
10006874:	003f0a06 	br	100064a0 <__alt_data_end+0xf80064a0>
10006878:	00800704 	movi	r2,28
1000687c:	d9000817 	ldw	r4,32(sp)
10006880:	a0a9883a 	add	r20,r20,r2
10006884:	b0ad883a 	add	r22,r22,r2
10006888:	2089883a 	add	r4,r4,r2
1000688c:	d9000815 	stw	r4,32(sp)
10006890:	003f5106 	br	100065d8 <__alt_data_end+0xf80065d8>
10006894:	d8c00317 	ldw	r3,12(sp)
10006898:	b8c1fc0e 	bge	r23,r3,1000708c <_dtoa_r+0x15b4>
1000689c:	0027883a 	mov	r19,zero
100068a0:	b805883a 	mov	r2,r23
100068a4:	003f3e06 	br	100065a0 <__alt_data_end+0xf80065a0>
100068a8:	880b883a 	mov	r5,r17
100068ac:	e009883a 	mov	r4,fp
100068b0:	000f883a 	mov	r7,zero
100068b4:	01800284 	movi	r6,10
100068b8:	00092600 	call	10009260 <__multadd>
100068bc:	d9000c17 	ldw	r4,48(sp)
100068c0:	1023883a 	mov	r17,r2
100068c4:	0102040e 	bge	zero,r4,100070d8 <_dtoa_r+0x1600>
100068c8:	d9000615 	stw	r4,24(sp)
100068cc:	0500050e 	bge	zero,r20,100068e4 <_dtoa_r+0xe0c>
100068d0:	880b883a 	mov	r5,r17
100068d4:	a00d883a 	mov	r6,r20
100068d8:	e009883a 	mov	r4,fp
100068dc:	00099cc0 	call	100099cc <__lshift>
100068e0:	1023883a 	mov	r17,r2
100068e4:	9801241e 	bne	r19,zero,10006d78 <_dtoa_r+0x12a0>
100068e8:	8829883a 	mov	r20,r17
100068ec:	d9000617 	ldw	r4,24(sp)
100068f0:	dcc00717 	ldw	r19,28(sp)
100068f4:	9480004c 	andi	r18,r18,1
100068f8:	20bfffc4 	addi	r2,r4,-1
100068fc:	9885883a 	add	r2,r19,r2
10006900:	d8800415 	stw	r2,16(sp)
10006904:	dc800615 	stw	r18,24(sp)
10006908:	a80b883a 	mov	r5,r21
1000690c:	8009883a 	mov	r4,r16
10006910:	00058b00 	call	100058b0 <quorem>
10006914:	880b883a 	mov	r5,r17
10006918:	8009883a 	mov	r4,r16
1000691c:	102f883a 	mov	r23,r2
10006920:	0009b140 	call	10009b14 <__mcmp>
10006924:	a80b883a 	mov	r5,r21
10006928:	a00d883a 	mov	r6,r20
1000692c:	e009883a 	mov	r4,fp
10006930:	102d883a 	mov	r22,r2
10006934:	0009b740 	call	10009b74 <__mdiff>
10006938:	1007883a 	mov	r3,r2
1000693c:	10800317 	ldw	r2,12(r2)
10006940:	bc800c04 	addi	r18,r23,48
10006944:	180b883a 	mov	r5,r3
10006948:	10004e1e 	bne	r2,zero,10006a84 <_dtoa_r+0xfac>
1000694c:	8009883a 	mov	r4,r16
10006950:	d8c01615 	stw	r3,88(sp)
10006954:	0009b140 	call	10009b14 <__mcmp>
10006958:	d8c01617 	ldw	r3,88(sp)
1000695c:	e009883a 	mov	r4,fp
10006960:	d8801615 	stw	r2,88(sp)
10006964:	180b883a 	mov	r5,r3
10006968:	00092380 	call	10009238 <_Bfree>
1000696c:	d8801617 	ldw	r2,88(sp)
10006970:	1000041e 	bne	r2,zero,10006984 <_dtoa_r+0xeac>
10006974:	d9800317 	ldw	r6,12(sp)
10006978:	3000021e 	bne	r6,zero,10006984 <_dtoa_r+0xeac>
1000697c:	d8c00617 	ldw	r3,24(sp)
10006980:	18003726 	beq	r3,zero,10006a60 <_dtoa_r+0xf88>
10006984:	b0002016 	blt	r22,zero,10006a08 <_dtoa_r+0xf30>
10006988:	b000041e 	bne	r22,zero,1000699c <_dtoa_r+0xec4>
1000698c:	d9000317 	ldw	r4,12(sp)
10006990:	2000021e 	bne	r4,zero,1000699c <_dtoa_r+0xec4>
10006994:	d8c00617 	ldw	r3,24(sp)
10006998:	18001b26 	beq	r3,zero,10006a08 <_dtoa_r+0xf30>
1000699c:	00810716 	blt	zero,r2,10006dbc <_dtoa_r+0x12e4>
100069a0:	d8c00417 	ldw	r3,16(sp)
100069a4:	9d800044 	addi	r22,r19,1
100069a8:	9c800005 	stb	r18,0(r19)
100069ac:	b02f883a 	mov	r23,r22
100069b0:	98c10626 	beq	r19,r3,10006dcc <_dtoa_r+0x12f4>
100069b4:	800b883a 	mov	r5,r16
100069b8:	000f883a 	mov	r7,zero
100069bc:	01800284 	movi	r6,10
100069c0:	e009883a 	mov	r4,fp
100069c4:	00092600 	call	10009260 <__multadd>
100069c8:	1021883a 	mov	r16,r2
100069cc:	000f883a 	mov	r7,zero
100069d0:	01800284 	movi	r6,10
100069d4:	880b883a 	mov	r5,r17
100069d8:	e009883a 	mov	r4,fp
100069dc:	8d002526 	beq	r17,r20,10006a74 <_dtoa_r+0xf9c>
100069e0:	00092600 	call	10009260 <__multadd>
100069e4:	a00b883a 	mov	r5,r20
100069e8:	000f883a 	mov	r7,zero
100069ec:	01800284 	movi	r6,10
100069f0:	e009883a 	mov	r4,fp
100069f4:	1023883a 	mov	r17,r2
100069f8:	00092600 	call	10009260 <__multadd>
100069fc:	1029883a 	mov	r20,r2
10006a00:	b027883a 	mov	r19,r22
10006a04:	003fc006 	br	10006908 <__alt_data_end+0xf8006908>
10006a08:	9011883a 	mov	r8,r18
10006a0c:	00800e0e 	bge	zero,r2,10006a48 <_dtoa_r+0xf70>
10006a10:	800b883a 	mov	r5,r16
10006a14:	01800044 	movi	r6,1
10006a18:	e009883a 	mov	r4,fp
10006a1c:	da001715 	stw	r8,92(sp)
10006a20:	00099cc0 	call	100099cc <__lshift>
10006a24:	a80b883a 	mov	r5,r21
10006a28:	1009883a 	mov	r4,r2
10006a2c:	1021883a 	mov	r16,r2
10006a30:	0009b140 	call	10009b14 <__mcmp>
10006a34:	da001717 	ldw	r8,92(sp)
10006a38:	0081960e 	bge	zero,r2,10007094 <_dtoa_r+0x15bc>
10006a3c:	00800e44 	movi	r2,57
10006a40:	40817026 	beq	r8,r2,10007004 <_dtoa_r+0x152c>
10006a44:	ba000c44 	addi	r8,r23,49
10006a48:	8825883a 	mov	r18,r17
10006a4c:	9dc00044 	addi	r23,r19,1
10006a50:	9a000005 	stb	r8,0(r19)
10006a54:	a023883a 	mov	r17,r20
10006a58:	dc000915 	stw	r16,36(sp)
10006a5c:	003f2406 	br	100066f0 <__alt_data_end+0xf80066f0>
10006a60:	00800e44 	movi	r2,57
10006a64:	9011883a 	mov	r8,r18
10006a68:	90816626 	beq	r18,r2,10007004 <_dtoa_r+0x152c>
10006a6c:	05bff516 	blt	zero,r22,10006a44 <__alt_data_end+0xf8006a44>
10006a70:	003ff506 	br	10006a48 <__alt_data_end+0xf8006a48>
10006a74:	00092600 	call	10009260 <__multadd>
10006a78:	1023883a 	mov	r17,r2
10006a7c:	1029883a 	mov	r20,r2
10006a80:	003fdf06 	br	10006a00 <__alt_data_end+0xf8006a00>
10006a84:	e009883a 	mov	r4,fp
10006a88:	00092380 	call	10009238 <_Bfree>
10006a8c:	00800044 	movi	r2,1
10006a90:	003fbc06 	br	10006984 <__alt_data_end+0xf8006984>
10006a94:	a80b883a 	mov	r5,r21
10006a98:	8009883a 	mov	r4,r16
10006a9c:	0009b140 	call	10009b14 <__mcmp>
10006aa0:	103edb0e 	bge	r2,zero,10006610 <__alt_data_end+0xf8006610>
10006aa4:	800b883a 	mov	r5,r16
10006aa8:	000f883a 	mov	r7,zero
10006aac:	01800284 	movi	r6,10
10006ab0:	e009883a 	mov	r4,fp
10006ab4:	00092600 	call	10009260 <__multadd>
10006ab8:	1021883a 	mov	r16,r2
10006abc:	d8800517 	ldw	r2,20(sp)
10006ac0:	d8c00b17 	ldw	r3,44(sp)
10006ac4:	10bfffc4 	addi	r2,r2,-1
10006ac8:	d8800515 	stw	r2,20(sp)
10006acc:	183f761e 	bne	r3,zero,100068a8 <__alt_data_end+0xf80068a8>
10006ad0:	d9000c17 	ldw	r4,48(sp)
10006ad4:	0101730e 	bge	zero,r4,100070a4 <_dtoa_r+0x15cc>
10006ad8:	d9000615 	stw	r4,24(sp)
10006adc:	003ed006 	br	10006620 <__alt_data_end+0xf8006620>
10006ae0:	00800084 	movi	r2,2
10006ae4:	3081861e 	bne	r6,r2,10007100 <_dtoa_r+0x1628>
10006ae8:	d8000b15 	stw	zero,44(sp)
10006aec:	003f3c06 	br	100067e0 <__alt_data_end+0xf80067e0>
10006af0:	dc000917 	ldw	r16,36(sp)
10006af4:	003e9206 	br	10006540 <__alt_data_end+0xf8006540>
10006af8:	d9c00317 	ldw	r7,12(sp)
10006afc:	00800084 	movi	r2,2
10006b00:	11fec50e 	bge	r2,r7,10006618 <__alt_data_end+0xf8006618>
10006b04:	d9000617 	ldw	r4,24(sp)
10006b08:	20013c1e 	bne	r4,zero,10006ffc <_dtoa_r+0x1524>
10006b0c:	a80b883a 	mov	r5,r21
10006b10:	000f883a 	mov	r7,zero
10006b14:	01800144 	movi	r6,5
10006b18:	e009883a 	mov	r4,fp
10006b1c:	00092600 	call	10009260 <__multadd>
10006b20:	100b883a 	mov	r5,r2
10006b24:	8009883a 	mov	r4,r16
10006b28:	102b883a 	mov	r21,r2
10006b2c:	0009b140 	call	10009b14 <__mcmp>
10006b30:	dc000915 	stw	r16,36(sp)
10006b34:	00bf410e 	bge	zero,r2,1000683c <__alt_data_end+0xf800683c>
10006b38:	d9c00717 	ldw	r7,28(sp)
10006b3c:	00800c44 	movi	r2,49
10006b40:	38800005 	stb	r2,0(r7)
10006b44:	d8800517 	ldw	r2,20(sp)
10006b48:	3dc00044 	addi	r23,r7,1
10006b4c:	10800044 	addi	r2,r2,1
10006b50:	d8800515 	stw	r2,20(sp)
10006b54:	003f3d06 	br	1000684c <__alt_data_end+0xf800684c>
10006b58:	d9800517 	ldw	r6,20(sp)
10006b5c:	d9c00717 	ldw	r7,28(sp)
10006b60:	00800c44 	movi	r2,49
10006b64:	31800044 	addi	r6,r6,1
10006b68:	d9800515 	stw	r6,20(sp)
10006b6c:	38800005 	stb	r2,0(r7)
10006b70:	003edf06 	br	100066f0 <__alt_data_end+0xf80066f0>
10006b74:	d8000b15 	stw	zero,44(sp)
10006b78:	003c9f06 	br	10005df8 <__alt_data_end+0xf8005df8>
10006b7c:	903e7e1e 	bne	r18,zero,10006578 <__alt_data_end+0xf8006578>
10006b80:	00800434 	movhi	r2,16
10006b84:	10bfffc4 	addi	r2,r2,-1
10006b88:	9884703a 	and	r2,r19,r2
10006b8c:	1000ea1e 	bne	r2,zero,10006f38 <_dtoa_r+0x1460>
10006b90:	9cdffc2c 	andhi	r19,r19,32752
10006b94:	9800e826 	beq	r19,zero,10006f38 <_dtoa_r+0x1460>
10006b98:	d9c00817 	ldw	r7,32(sp)
10006b9c:	b5800044 	addi	r22,r22,1
10006ba0:	04c00044 	movi	r19,1
10006ba4:	39c00044 	addi	r7,r7,1
10006ba8:	d9c00815 	stw	r7,32(sp)
10006bac:	d8800d17 	ldw	r2,52(sp)
10006bb0:	103e721e 	bne	r2,zero,1000657c <__alt_data_end+0xf800657c>
10006bb4:	00800044 	movi	r2,1
10006bb8:	003e7906 	br	100065a0 <__alt_data_end+0xf80065a0>
10006bbc:	8009883a 	mov	r4,r16
10006bc0:	000ff280 	call	1000ff28 <__floatsidf>
10006bc4:	d9800f17 	ldw	r6,60(sp)
10006bc8:	d9c01017 	ldw	r7,64(sp)
10006bcc:	1009883a 	mov	r4,r2
10006bd0:	180b883a 	mov	r5,r3
10006bd4:	000ed400 	call	1000ed40 <__muldf3>
10006bd8:	000d883a 	mov	r6,zero
10006bdc:	01d00734 	movhi	r7,16412
10006be0:	1009883a 	mov	r4,r2
10006be4:	180b883a 	mov	r5,r3
10006be8:	000d86c0 	call	1000d86c <__adddf3>
10006bec:	047f3034 	movhi	r17,64704
10006bf0:	1021883a 	mov	r16,r2
10006bf4:	1c63883a 	add	r17,r3,r17
10006bf8:	d9000f17 	ldw	r4,60(sp)
10006bfc:	d9401017 	ldw	r5,64(sp)
10006c00:	000d883a 	mov	r6,zero
10006c04:	01d00534 	movhi	r7,16404
10006c08:	000f5ac0 	call	1000f5ac <__subdf3>
10006c0c:	800d883a 	mov	r6,r16
10006c10:	880f883a 	mov	r7,r17
10006c14:	1009883a 	mov	r4,r2
10006c18:	180b883a 	mov	r5,r3
10006c1c:	102b883a 	mov	r21,r2
10006c20:	1829883a 	mov	r20,r3
10006c24:	000eb700 	call	1000eb70 <__gedf2>
10006c28:	00806c16 	blt	zero,r2,10006ddc <_dtoa_r+0x1304>
10006c2c:	89e0003c 	xorhi	r7,r17,32768
10006c30:	800d883a 	mov	r6,r16
10006c34:	a809883a 	mov	r4,r21
10006c38:	a00b883a 	mov	r5,r20
10006c3c:	000ec4c0 	call	1000ec4c <__ledf2>
10006c40:	103d7e0e 	bge	r2,zero,1000623c <__alt_data_end+0xf800623c>
10006c44:	002b883a 	mov	r21,zero
10006c48:	0023883a 	mov	r17,zero
10006c4c:	003efb06 	br	1000683c <__alt_data_end+0xf800683c>
10006c50:	d8800717 	ldw	r2,28(sp)
10006c54:	003bd006 	br	10005b98 <__alt_data_end+0xf8005b98>
10006c58:	d9000a17 	ldw	r4,40(sp)
10006c5c:	d9800d17 	ldw	r6,52(sp)
10006c60:	dd400a15 	stw	r21,40(sp)
10006c64:	a905c83a 	sub	r2,r21,r4
10006c68:	308d883a 	add	r6,r6,r2
10006c6c:	d9800d15 	stw	r6,52(sp)
10006c70:	002b883a 	mov	r21,zero
10006c74:	003e0606 	br	10006490 <__alt_data_end+0xf8006490>
10006c78:	9023883a 	mov	r17,r18
10006c7c:	9829883a 	mov	r20,r19
10006c80:	04000084 	movi	r16,2
10006c84:	003c9206 	br	10005ed0 <__alt_data_end+0xf8005ed0>
10006c88:	04000044 	movi	r16,1
10006c8c:	dc000c15 	stw	r16,48(sp)
10006c90:	dc000615 	stw	r16,24(sp)
10006c94:	dc002215 	stw	r16,136(sp)
10006c98:	e0001115 	stw	zero,68(fp)
10006c9c:	000b883a 	mov	r5,zero
10006ca0:	003c6906 	br	10005e48 <__alt_data_end+0xf8005e48>
10006ca4:	3021883a 	mov	r16,r6
10006ca8:	003ffb06 	br	10006c98 <__alt_data_end+0xf8006c98>
10006cac:	1000021e 	bne	r2,zero,10006cb8 <_dtoa_r+0x11e0>
10006cb0:	4200004c 	andi	r8,r8,1
10006cb4:	403e7d1e 	bne	r8,zero,100066ac <__alt_data_end+0xf80066ac>
10006cb8:	01000c04 	movi	r4,48
10006cbc:	00000106 	br	10006cc4 <_dtoa_r+0x11ec>
10006cc0:	102f883a 	mov	r23,r2
10006cc4:	b8bfffc4 	addi	r2,r23,-1
10006cc8:	10c00007 	ldb	r3,0(r2)
10006ccc:	193ffc26 	beq	r3,r4,10006cc0 <__alt_data_end+0xf8006cc0>
10006cd0:	003e8706 	br	100066f0 <__alt_data_end+0xf80066f0>
10006cd4:	d8800517 	ldw	r2,20(sp)
10006cd8:	00a3c83a 	sub	r17,zero,r2
10006cdc:	8800a426 	beq	r17,zero,10006f70 <_dtoa_r+0x1498>
10006ce0:	888003cc 	andi	r2,r17,15
10006ce4:	100490fa 	slli	r2,r2,3
10006ce8:	00c40074 	movhi	r3,4097
10006cec:	18cc7204 	addi	r3,r3,12744
10006cf0:	1885883a 	add	r2,r3,r2
10006cf4:	11800017 	ldw	r6,0(r2)
10006cf8:	11c00117 	ldw	r7,4(r2)
10006cfc:	9009883a 	mov	r4,r18
10006d00:	980b883a 	mov	r5,r19
10006d04:	8823d13a 	srai	r17,r17,4
10006d08:	000ed400 	call	1000ed40 <__muldf3>
10006d0c:	d8800f15 	stw	r2,60(sp)
10006d10:	d8c01015 	stw	r3,64(sp)
10006d14:	8800e826 	beq	r17,zero,100070b8 <_dtoa_r+0x15e0>
10006d18:	05040074 	movhi	r20,4097
10006d1c:	a50c6804 	addi	r20,r20,12704
10006d20:	04000084 	movi	r16,2
10006d24:	8980004c 	andi	r6,r17,1
10006d28:	1009883a 	mov	r4,r2
10006d2c:	8823d07a 	srai	r17,r17,1
10006d30:	180b883a 	mov	r5,r3
10006d34:	30000426 	beq	r6,zero,10006d48 <_dtoa_r+0x1270>
10006d38:	a1800017 	ldw	r6,0(r20)
10006d3c:	a1c00117 	ldw	r7,4(r20)
10006d40:	84000044 	addi	r16,r16,1
10006d44:	000ed400 	call	1000ed40 <__muldf3>
10006d48:	a5000204 	addi	r20,r20,8
10006d4c:	883ff51e 	bne	r17,zero,10006d24 <__alt_data_end+0xf8006d24>
10006d50:	d8800f15 	stw	r2,60(sp)
10006d54:	d8c01015 	stw	r3,64(sp)
10006d58:	003c7606 	br	10005f34 <__alt_data_end+0xf8005f34>
10006d5c:	00c00c04 	movi	r3,48
10006d60:	10c00005 	stb	r3,0(r2)
10006d64:	d8c00517 	ldw	r3,20(sp)
10006d68:	bd3fffc3 	ldbu	r20,-1(r23)
10006d6c:	18c00044 	addi	r3,r3,1
10006d70:	d8c00515 	stw	r3,20(sp)
10006d74:	003db906 	br	1000645c <__alt_data_end+0xf800645c>
10006d78:	89400117 	ldw	r5,4(r17)
10006d7c:	e009883a 	mov	r4,fp
10006d80:	00091900 	call	10009190 <_Balloc>
10006d84:	89800417 	ldw	r6,16(r17)
10006d88:	89400304 	addi	r5,r17,12
10006d8c:	11000304 	addi	r4,r2,12
10006d90:	31800084 	addi	r6,r6,2
10006d94:	318d883a 	add	r6,r6,r6
10006d98:	318d883a 	add	r6,r6,r6
10006d9c:	1027883a 	mov	r19,r2
10006da0:	0008dc40 	call	10008dc4 <memcpy>
10006da4:	01800044 	movi	r6,1
10006da8:	980b883a 	mov	r5,r19
10006dac:	e009883a 	mov	r4,fp
10006db0:	00099cc0 	call	100099cc <__lshift>
10006db4:	1029883a 	mov	r20,r2
10006db8:	003ecc06 	br	100068ec <__alt_data_end+0xf80068ec>
10006dbc:	00800e44 	movi	r2,57
10006dc0:	90809026 	beq	r18,r2,10007004 <_dtoa_r+0x152c>
10006dc4:	92000044 	addi	r8,r18,1
10006dc8:	003f1f06 	br	10006a48 <__alt_data_end+0xf8006a48>
10006dcc:	9011883a 	mov	r8,r18
10006dd0:	8825883a 	mov	r18,r17
10006dd4:	a023883a 	mov	r17,r20
10006dd8:	003e2906 	br	10006680 <__alt_data_end+0xf8006680>
10006ddc:	002b883a 	mov	r21,zero
10006de0:	0023883a 	mov	r17,zero
10006de4:	003f5406 	br	10006b38 <__alt_data_end+0xf8006b38>
10006de8:	61bfffc4 	addi	r6,r12,-1
10006dec:	300490fa 	slli	r2,r6,3
10006df0:	00c40074 	movhi	r3,4097
10006df4:	18cc7204 	addi	r3,r3,12744
10006df8:	1885883a 	add	r2,r3,r2
10006dfc:	11000017 	ldw	r4,0(r2)
10006e00:	11400117 	ldw	r5,4(r2)
10006e04:	d8800717 	ldw	r2,28(sp)
10006e08:	880f883a 	mov	r7,r17
10006e0c:	d9801215 	stw	r6,72(sp)
10006e10:	800d883a 	mov	r6,r16
10006e14:	db001615 	stw	r12,88(sp)
10006e18:	15c00044 	addi	r23,r2,1
10006e1c:	000ed400 	call	1000ed40 <__muldf3>
10006e20:	d9401017 	ldw	r5,64(sp)
10006e24:	d9000f17 	ldw	r4,60(sp)
10006e28:	d8c01515 	stw	r3,84(sp)
10006e2c:	d8801415 	stw	r2,80(sp)
10006e30:	000fea80 	call	1000fea8 <__fixdfsi>
10006e34:	1009883a 	mov	r4,r2
10006e38:	1021883a 	mov	r16,r2
10006e3c:	000ff280 	call	1000ff28 <__floatsidf>
10006e40:	d9000f17 	ldw	r4,60(sp)
10006e44:	d9401017 	ldw	r5,64(sp)
10006e48:	100d883a 	mov	r6,r2
10006e4c:	180f883a 	mov	r7,r3
10006e50:	000f5ac0 	call	1000f5ac <__subdf3>
10006e54:	1829883a 	mov	r20,r3
10006e58:	d8c00717 	ldw	r3,28(sp)
10006e5c:	84000c04 	addi	r16,r16,48
10006e60:	1023883a 	mov	r17,r2
10006e64:	1c000005 	stb	r16,0(r3)
10006e68:	db001617 	ldw	r12,88(sp)
10006e6c:	00800044 	movi	r2,1
10006e70:	60802226 	beq	r12,r2,10006efc <_dtoa_r+0x1424>
10006e74:	d9c00717 	ldw	r7,28(sp)
10006e78:	8805883a 	mov	r2,r17
10006e7c:	b82b883a 	mov	r21,r23
10006e80:	3b19883a 	add	r12,r7,r12
10006e84:	6023883a 	mov	r17,r12
10006e88:	a007883a 	mov	r3,r20
10006e8c:	dc800f15 	stw	r18,60(sp)
10006e90:	000d883a 	mov	r6,zero
10006e94:	01d00934 	movhi	r7,16420
10006e98:	1009883a 	mov	r4,r2
10006e9c:	180b883a 	mov	r5,r3
10006ea0:	000ed400 	call	1000ed40 <__muldf3>
10006ea4:	180b883a 	mov	r5,r3
10006ea8:	1009883a 	mov	r4,r2
10006eac:	1829883a 	mov	r20,r3
10006eb0:	1025883a 	mov	r18,r2
10006eb4:	000fea80 	call	1000fea8 <__fixdfsi>
10006eb8:	1009883a 	mov	r4,r2
10006ebc:	1021883a 	mov	r16,r2
10006ec0:	000ff280 	call	1000ff28 <__floatsidf>
10006ec4:	100d883a 	mov	r6,r2
10006ec8:	180f883a 	mov	r7,r3
10006ecc:	9009883a 	mov	r4,r18
10006ed0:	a00b883a 	mov	r5,r20
10006ed4:	84000c04 	addi	r16,r16,48
10006ed8:	000f5ac0 	call	1000f5ac <__subdf3>
10006edc:	ad400044 	addi	r21,r21,1
10006ee0:	ac3fffc5 	stb	r16,-1(r21)
10006ee4:	ac7fea1e 	bne	r21,r17,10006e90 <__alt_data_end+0xf8006e90>
10006ee8:	1023883a 	mov	r17,r2
10006eec:	d8801217 	ldw	r2,72(sp)
10006ef0:	dc800f17 	ldw	r18,60(sp)
10006ef4:	1829883a 	mov	r20,r3
10006ef8:	b8af883a 	add	r23,r23,r2
10006efc:	d9001417 	ldw	r4,80(sp)
10006f00:	d9401517 	ldw	r5,84(sp)
10006f04:	000d883a 	mov	r6,zero
10006f08:	01cff834 	movhi	r7,16352
10006f0c:	000d86c0 	call	1000d86c <__adddf3>
10006f10:	880d883a 	mov	r6,r17
10006f14:	a00f883a 	mov	r7,r20
10006f18:	1009883a 	mov	r4,r2
10006f1c:	180b883a 	mov	r5,r3
10006f20:	000ec4c0 	call	1000ec4c <__ledf2>
10006f24:	10003e0e 	bge	r2,zero,10007020 <_dtoa_r+0x1548>
10006f28:	d9001317 	ldw	r4,76(sp)
10006f2c:	bd3fffc3 	ldbu	r20,-1(r23)
10006f30:	d9000515 	stw	r4,20(sp)
10006f34:	003d3b06 	br	10006424 <__alt_data_end+0xf8006424>
10006f38:	0027883a 	mov	r19,zero
10006f3c:	003f1b06 	br	10006bac <__alt_data_end+0xf8006bac>
10006f40:	d8800817 	ldw	r2,32(sp)
10006f44:	11e9c83a 	sub	r20,r2,r7
10006f48:	0005883a 	mov	r2,zero
10006f4c:	003d5406 	br	100064a0 <__alt_data_end+0xf80064a0>
10006f50:	00800044 	movi	r2,1
10006f54:	003dc706 	br	10006674 <__alt_data_end+0xf8006674>
10006f58:	d8c00217 	ldw	r3,8(sp)
10006f5c:	00800d84 	movi	r2,54
10006f60:	dd400a17 	ldw	r21,40(sp)
10006f64:	10c5c83a 	sub	r2,r2,r3
10006f68:	dd000817 	ldw	r20,32(sp)
10006f6c:	003d4c06 	br	100064a0 <__alt_data_end+0xf80064a0>
10006f70:	dc800f15 	stw	r18,60(sp)
10006f74:	dcc01015 	stw	r19,64(sp)
10006f78:	04000084 	movi	r16,2
10006f7c:	003bed06 	br	10005f34 <__alt_data_end+0xf8005f34>
10006f80:	d9000617 	ldw	r4,24(sp)
10006f84:	203f0d26 	beq	r4,zero,10006bbc <__alt_data_end+0xf8006bbc>
10006f88:	d9800c17 	ldw	r6,48(sp)
10006f8c:	01bcab0e 	bge	zero,r6,1000623c <__alt_data_end+0xf800623c>
10006f90:	d9401017 	ldw	r5,64(sp)
10006f94:	d9000f17 	ldw	r4,60(sp)
10006f98:	000d883a 	mov	r6,zero
10006f9c:	01d00934 	movhi	r7,16420
10006fa0:	000ed400 	call	1000ed40 <__muldf3>
10006fa4:	81000044 	addi	r4,r16,1
10006fa8:	d8800f15 	stw	r2,60(sp)
10006fac:	d8c01015 	stw	r3,64(sp)
10006fb0:	000ff280 	call	1000ff28 <__floatsidf>
10006fb4:	d9800f17 	ldw	r6,60(sp)
10006fb8:	d9c01017 	ldw	r7,64(sp)
10006fbc:	1009883a 	mov	r4,r2
10006fc0:	180b883a 	mov	r5,r3
10006fc4:	000ed400 	call	1000ed40 <__muldf3>
10006fc8:	01d00734 	movhi	r7,16412
10006fcc:	000d883a 	mov	r6,zero
10006fd0:	1009883a 	mov	r4,r2
10006fd4:	180b883a 	mov	r5,r3
10006fd8:	000d86c0 	call	1000d86c <__adddf3>
10006fdc:	d9c00517 	ldw	r7,20(sp)
10006fe0:	047f3034 	movhi	r17,64704
10006fe4:	1021883a 	mov	r16,r2
10006fe8:	39ffffc4 	addi	r7,r7,-1
10006fec:	d9c01315 	stw	r7,76(sp)
10006ff0:	1c63883a 	add	r17,r3,r17
10006ff4:	db000c17 	ldw	r12,48(sp)
10006ff8:	003bea06 	br	10005fa4 <__alt_data_end+0xf8005fa4>
10006ffc:	dc000915 	stw	r16,36(sp)
10007000:	003e0e06 	br	1000683c <__alt_data_end+0xf800683c>
10007004:	01000e44 	movi	r4,57
10007008:	8825883a 	mov	r18,r17
1000700c:	9dc00044 	addi	r23,r19,1
10007010:	99000005 	stb	r4,0(r19)
10007014:	a023883a 	mov	r17,r20
10007018:	dc000915 	stw	r16,36(sp)
1000701c:	003da406 	br	100066b0 <__alt_data_end+0xf80066b0>
10007020:	d9801417 	ldw	r6,80(sp)
10007024:	d9c01517 	ldw	r7,84(sp)
10007028:	0009883a 	mov	r4,zero
1000702c:	014ff834 	movhi	r5,16352
10007030:	000f5ac0 	call	1000f5ac <__subdf3>
10007034:	880d883a 	mov	r6,r17
10007038:	a00f883a 	mov	r7,r20
1000703c:	1009883a 	mov	r4,r2
10007040:	180b883a 	mov	r5,r3
10007044:	000eb700 	call	1000eb70 <__gedf2>
10007048:	00bc7c0e 	bge	zero,r2,1000623c <__alt_data_end+0xf800623c>
1000704c:	01000c04 	movi	r4,48
10007050:	00000106 	br	10007058 <_dtoa_r+0x1580>
10007054:	102f883a 	mov	r23,r2
10007058:	b8bfffc4 	addi	r2,r23,-1
1000705c:	10c00007 	ldb	r3,0(r2)
10007060:	193ffc26 	beq	r3,r4,10007054 <__alt_data_end+0xf8007054>
10007064:	d9801317 	ldw	r6,76(sp)
10007068:	d9800515 	stw	r6,20(sp)
1000706c:	003c4406 	br	10006180 <__alt_data_end+0xf8006180>
10007070:	d9801317 	ldw	r6,76(sp)
10007074:	d9800515 	stw	r6,20(sp)
10007078:	003cea06 	br	10006424 <__alt_data_end+0xf8006424>
1000707c:	dd800f17 	ldw	r22,60(sp)
10007080:	dcc01017 	ldw	r19,64(sp)
10007084:	dc801217 	ldw	r18,72(sp)
10007088:	003c6c06 	br	1000623c <__alt_data_end+0xf800623c>
1000708c:	903e031e 	bne	r18,zero,1000689c <__alt_data_end+0xf800689c>
10007090:	003ebb06 	br	10006b80 <__alt_data_end+0xf8006b80>
10007094:	103e6c1e 	bne	r2,zero,10006a48 <__alt_data_end+0xf8006a48>
10007098:	4080004c 	andi	r2,r8,1
1000709c:	103e6a26 	beq	r2,zero,10006a48 <__alt_data_end+0xf8006a48>
100070a0:	003e6606 	br	10006a3c <__alt_data_end+0xf8006a3c>
100070a4:	d8c00317 	ldw	r3,12(sp)
100070a8:	00800084 	movi	r2,2
100070ac:	10c02916 	blt	r2,r3,10007154 <_dtoa_r+0x167c>
100070b0:	d9000c17 	ldw	r4,48(sp)
100070b4:	003e8806 	br	10006ad8 <__alt_data_end+0xf8006ad8>
100070b8:	04000084 	movi	r16,2
100070bc:	003b9d06 	br	10005f34 <__alt_data_end+0xf8005f34>
100070c0:	d9001317 	ldw	r4,76(sp)
100070c4:	d9000515 	stw	r4,20(sp)
100070c8:	003cd606 	br	10006424 <__alt_data_end+0xf8006424>
100070cc:	d8801317 	ldw	r2,76(sp)
100070d0:	d8800515 	stw	r2,20(sp)
100070d4:	003c2a06 	br	10006180 <__alt_data_end+0xf8006180>
100070d8:	d9800317 	ldw	r6,12(sp)
100070dc:	00800084 	movi	r2,2
100070e0:	11801516 	blt	r2,r6,10007138 <_dtoa_r+0x1660>
100070e4:	d9c00c17 	ldw	r7,48(sp)
100070e8:	d9c00615 	stw	r7,24(sp)
100070ec:	003df706 	br	100068cc <__alt_data_end+0xf80068cc>
100070f0:	193d3926 	beq	r3,r4,100065d8 <__alt_data_end+0xf80065d8>
100070f4:	00c00f04 	movi	r3,60
100070f8:	1885c83a 	sub	r2,r3,r2
100070fc:	003ddf06 	br	1000687c <__alt_data_end+0xf800687c>
10007100:	e009883a 	mov	r4,fp
10007104:	e0001115 	stw	zero,68(fp)
10007108:	000b883a 	mov	r5,zero
1000710c:	00091900 	call	10009190 <_Balloc>
10007110:	d8800715 	stw	r2,28(sp)
10007114:	d8c00717 	ldw	r3,28(sp)
10007118:	00bfffc4 	movi	r2,-1
1000711c:	01000044 	movi	r4,1
10007120:	d8800c15 	stw	r2,48(sp)
10007124:	e0c01015 	stw	r3,64(fp)
10007128:	d9000b15 	stw	r4,44(sp)
1000712c:	d8800615 	stw	r2,24(sp)
10007130:	d8002215 	stw	zero,136(sp)
10007134:	003c4106 	br	1000623c <__alt_data_end+0xf800623c>
10007138:	d8c00c17 	ldw	r3,48(sp)
1000713c:	d8c00615 	stw	r3,24(sp)
10007140:	003e7006 	br	10006b04 <__alt_data_end+0xf8006b04>
10007144:	04400044 	movi	r17,1
10007148:	003b2006 	br	10005dcc <__alt_data_end+0xf8005dcc>
1000714c:	000b883a 	mov	r5,zero
10007150:	003b3d06 	br	10005e48 <__alt_data_end+0xf8005e48>
10007154:	d8800c17 	ldw	r2,48(sp)
10007158:	d8800615 	stw	r2,24(sp)
1000715c:	003e6906 	br	10006b04 <__alt_data_end+0xf8006b04>

10007160 <__sflush_r>:
10007160:	2880030b 	ldhu	r2,12(r5)
10007164:	defffb04 	addi	sp,sp,-20
10007168:	dcc00315 	stw	r19,12(sp)
1000716c:	dc400115 	stw	r17,4(sp)
10007170:	dfc00415 	stw	ra,16(sp)
10007174:	dc800215 	stw	r18,8(sp)
10007178:	dc000015 	stw	r16,0(sp)
1000717c:	10c0020c 	andi	r3,r2,8
10007180:	2823883a 	mov	r17,r5
10007184:	2027883a 	mov	r19,r4
10007188:	1800311e 	bne	r3,zero,10007250 <__sflush_r+0xf0>
1000718c:	28c00117 	ldw	r3,4(r5)
10007190:	10820014 	ori	r2,r2,2048
10007194:	2880030d 	sth	r2,12(r5)
10007198:	00c04b0e 	bge	zero,r3,100072c8 <__sflush_r+0x168>
1000719c:	8a000a17 	ldw	r8,40(r17)
100071a0:	40002326 	beq	r8,zero,10007230 <__sflush_r+0xd0>
100071a4:	9c000017 	ldw	r16,0(r19)
100071a8:	10c4000c 	andi	r3,r2,4096
100071ac:	98000015 	stw	zero,0(r19)
100071b0:	18004826 	beq	r3,zero,100072d4 <__sflush_r+0x174>
100071b4:	89801417 	ldw	r6,80(r17)
100071b8:	10c0010c 	andi	r3,r2,4
100071bc:	18000626 	beq	r3,zero,100071d8 <__sflush_r+0x78>
100071c0:	88c00117 	ldw	r3,4(r17)
100071c4:	88800c17 	ldw	r2,48(r17)
100071c8:	30cdc83a 	sub	r6,r6,r3
100071cc:	10000226 	beq	r2,zero,100071d8 <__sflush_r+0x78>
100071d0:	88800f17 	ldw	r2,60(r17)
100071d4:	308dc83a 	sub	r6,r6,r2
100071d8:	89400717 	ldw	r5,28(r17)
100071dc:	000f883a 	mov	r7,zero
100071e0:	9809883a 	mov	r4,r19
100071e4:	403ee83a 	callr	r8
100071e8:	00ffffc4 	movi	r3,-1
100071ec:	10c04426 	beq	r2,r3,10007300 <__sflush_r+0x1a0>
100071f0:	88c0030b 	ldhu	r3,12(r17)
100071f4:	89000417 	ldw	r4,16(r17)
100071f8:	88000115 	stw	zero,4(r17)
100071fc:	197dffcc 	andi	r5,r3,63487
10007200:	8940030d 	sth	r5,12(r17)
10007204:	89000015 	stw	r4,0(r17)
10007208:	18c4000c 	andi	r3,r3,4096
1000720c:	18002c1e 	bne	r3,zero,100072c0 <__sflush_r+0x160>
10007210:	89400c17 	ldw	r5,48(r17)
10007214:	9c000015 	stw	r16,0(r19)
10007218:	28000526 	beq	r5,zero,10007230 <__sflush_r+0xd0>
1000721c:	88801004 	addi	r2,r17,64
10007220:	28800226 	beq	r5,r2,1000722c <__sflush_r+0xcc>
10007224:	9809883a 	mov	r4,r19
10007228:	00078dc0 	call	100078dc <_free_r>
1000722c:	88000c15 	stw	zero,48(r17)
10007230:	0005883a 	mov	r2,zero
10007234:	dfc00417 	ldw	ra,16(sp)
10007238:	dcc00317 	ldw	r19,12(sp)
1000723c:	dc800217 	ldw	r18,8(sp)
10007240:	dc400117 	ldw	r17,4(sp)
10007244:	dc000017 	ldw	r16,0(sp)
10007248:	dec00504 	addi	sp,sp,20
1000724c:	f800283a 	ret
10007250:	2c800417 	ldw	r18,16(r5)
10007254:	903ff626 	beq	r18,zero,10007230 <__alt_data_end+0xf8007230>
10007258:	2c000017 	ldw	r16,0(r5)
1000725c:	108000cc 	andi	r2,r2,3
10007260:	2c800015 	stw	r18,0(r5)
10007264:	84a1c83a 	sub	r16,r16,r18
10007268:	1000131e 	bne	r2,zero,100072b8 <__sflush_r+0x158>
1000726c:	28800517 	ldw	r2,20(r5)
10007270:	88800215 	stw	r2,8(r17)
10007274:	04000316 	blt	zero,r16,10007284 <__sflush_r+0x124>
10007278:	003fed06 	br	10007230 <__alt_data_end+0xf8007230>
1000727c:	90a5883a 	add	r18,r18,r2
10007280:	043feb0e 	bge	zero,r16,10007230 <__alt_data_end+0xf8007230>
10007284:	88800917 	ldw	r2,36(r17)
10007288:	89400717 	ldw	r5,28(r17)
1000728c:	800f883a 	mov	r7,r16
10007290:	900d883a 	mov	r6,r18
10007294:	9809883a 	mov	r4,r19
10007298:	103ee83a 	callr	r2
1000729c:	80a1c83a 	sub	r16,r16,r2
100072a0:	00bff616 	blt	zero,r2,1000727c <__alt_data_end+0xf800727c>
100072a4:	88c0030b 	ldhu	r3,12(r17)
100072a8:	00bfffc4 	movi	r2,-1
100072ac:	18c01014 	ori	r3,r3,64
100072b0:	88c0030d 	sth	r3,12(r17)
100072b4:	003fdf06 	br	10007234 <__alt_data_end+0xf8007234>
100072b8:	0005883a 	mov	r2,zero
100072bc:	003fec06 	br	10007270 <__alt_data_end+0xf8007270>
100072c0:	88801415 	stw	r2,80(r17)
100072c4:	003fd206 	br	10007210 <__alt_data_end+0xf8007210>
100072c8:	28c00f17 	ldw	r3,60(r5)
100072cc:	00ffb316 	blt	zero,r3,1000719c <__alt_data_end+0xf800719c>
100072d0:	003fd706 	br	10007230 <__alt_data_end+0xf8007230>
100072d4:	89400717 	ldw	r5,28(r17)
100072d8:	000d883a 	mov	r6,zero
100072dc:	01c00044 	movi	r7,1
100072e0:	9809883a 	mov	r4,r19
100072e4:	403ee83a 	callr	r8
100072e8:	100d883a 	mov	r6,r2
100072ec:	00bfffc4 	movi	r2,-1
100072f0:	30801426 	beq	r6,r2,10007344 <__sflush_r+0x1e4>
100072f4:	8880030b 	ldhu	r2,12(r17)
100072f8:	8a000a17 	ldw	r8,40(r17)
100072fc:	003fae06 	br	100071b8 <__alt_data_end+0xf80071b8>
10007300:	98c00017 	ldw	r3,0(r19)
10007304:	183fba26 	beq	r3,zero,100071f0 <__alt_data_end+0xf80071f0>
10007308:	01000744 	movi	r4,29
1000730c:	19000626 	beq	r3,r4,10007328 <__sflush_r+0x1c8>
10007310:	01000584 	movi	r4,22
10007314:	19000426 	beq	r3,r4,10007328 <__sflush_r+0x1c8>
10007318:	88c0030b 	ldhu	r3,12(r17)
1000731c:	18c01014 	ori	r3,r3,64
10007320:	88c0030d 	sth	r3,12(r17)
10007324:	003fc306 	br	10007234 <__alt_data_end+0xf8007234>
10007328:	8880030b 	ldhu	r2,12(r17)
1000732c:	88c00417 	ldw	r3,16(r17)
10007330:	88000115 	stw	zero,4(r17)
10007334:	10bdffcc 	andi	r2,r2,63487
10007338:	8880030d 	sth	r2,12(r17)
1000733c:	88c00015 	stw	r3,0(r17)
10007340:	003fb306 	br	10007210 <__alt_data_end+0xf8007210>
10007344:	98800017 	ldw	r2,0(r19)
10007348:	103fea26 	beq	r2,zero,100072f4 <__alt_data_end+0xf80072f4>
1000734c:	00c00744 	movi	r3,29
10007350:	10c00226 	beq	r2,r3,1000735c <__sflush_r+0x1fc>
10007354:	00c00584 	movi	r3,22
10007358:	10c0031e 	bne	r2,r3,10007368 <__sflush_r+0x208>
1000735c:	9c000015 	stw	r16,0(r19)
10007360:	0005883a 	mov	r2,zero
10007364:	003fb306 	br	10007234 <__alt_data_end+0xf8007234>
10007368:	88c0030b 	ldhu	r3,12(r17)
1000736c:	3005883a 	mov	r2,r6
10007370:	18c01014 	ori	r3,r3,64
10007374:	88c0030d 	sth	r3,12(r17)
10007378:	003fae06 	br	10007234 <__alt_data_end+0xf8007234>

1000737c <_fflush_r>:
1000737c:	defffd04 	addi	sp,sp,-12
10007380:	dc000115 	stw	r16,4(sp)
10007384:	dfc00215 	stw	ra,8(sp)
10007388:	2021883a 	mov	r16,r4
1000738c:	20000226 	beq	r4,zero,10007398 <_fflush_r+0x1c>
10007390:	20800e17 	ldw	r2,56(r4)
10007394:	10000c26 	beq	r2,zero,100073c8 <_fflush_r+0x4c>
10007398:	2880030f 	ldh	r2,12(r5)
1000739c:	1000051e 	bne	r2,zero,100073b4 <_fflush_r+0x38>
100073a0:	0005883a 	mov	r2,zero
100073a4:	dfc00217 	ldw	ra,8(sp)
100073a8:	dc000117 	ldw	r16,4(sp)
100073ac:	dec00304 	addi	sp,sp,12
100073b0:	f800283a 	ret
100073b4:	8009883a 	mov	r4,r16
100073b8:	dfc00217 	ldw	ra,8(sp)
100073bc:	dc000117 	ldw	r16,4(sp)
100073c0:	dec00304 	addi	sp,sp,12
100073c4:	00071601 	jmpi	10007160 <__sflush_r>
100073c8:	d9400015 	stw	r5,0(sp)
100073cc:	00077680 	call	10007768 <__sinit>
100073d0:	d9400017 	ldw	r5,0(sp)
100073d4:	003ff006 	br	10007398 <__alt_data_end+0xf8007398>

100073d8 <fflush>:
100073d8:	20000526 	beq	r4,zero,100073f0 <fflush+0x18>
100073dc:	00840074 	movhi	r2,4097
100073e0:	1093a504 	addi	r2,r2,20116
100073e4:	200b883a 	mov	r5,r4
100073e8:	11000017 	ldw	r4,0(r2)
100073ec:	000737c1 	jmpi	1000737c <_fflush_r>
100073f0:	00840074 	movhi	r2,4097
100073f4:	1093a404 	addi	r2,r2,20112
100073f8:	11000017 	ldw	r4,0(r2)
100073fc:	01440034 	movhi	r5,4096
10007400:	295cdf04 	addi	r5,r5,29564
10007404:	00081781 	jmpi	10008178 <_fwalk_reent>

10007408 <__fp_unlock>:
10007408:	0005883a 	mov	r2,zero
1000740c:	f800283a 	ret

10007410 <_cleanup_r>:
10007410:	01440074 	movhi	r5,4097
10007414:	2970c504 	addi	r5,r5,-15596
10007418:	00081781 	jmpi	10008178 <_fwalk_reent>

1000741c <__sinit.part.1>:
1000741c:	defff704 	addi	sp,sp,-36
10007420:	00c40034 	movhi	r3,4096
10007424:	dfc00815 	stw	ra,32(sp)
10007428:	ddc00715 	stw	r23,28(sp)
1000742c:	dd800615 	stw	r22,24(sp)
10007430:	dd400515 	stw	r21,20(sp)
10007434:	dd000415 	stw	r20,16(sp)
10007438:	dcc00315 	stw	r19,12(sp)
1000743c:	dc800215 	stw	r18,8(sp)
10007440:	dc400115 	stw	r17,4(sp)
10007444:	dc000015 	stw	r16,0(sp)
10007448:	18dd0404 	addi	r3,r3,29712
1000744c:	24000117 	ldw	r16,4(r4)
10007450:	20c00f15 	stw	r3,60(r4)
10007454:	2080bb04 	addi	r2,r4,748
10007458:	00c000c4 	movi	r3,3
1000745c:	20c0b915 	stw	r3,740(r4)
10007460:	2080ba15 	stw	r2,744(r4)
10007464:	2000b815 	stw	zero,736(r4)
10007468:	05c00204 	movi	r23,8
1000746c:	00800104 	movi	r2,4
10007470:	2025883a 	mov	r18,r4
10007474:	b80d883a 	mov	r6,r23
10007478:	81001704 	addi	r4,r16,92
1000747c:	000b883a 	mov	r5,zero
10007480:	80000015 	stw	zero,0(r16)
10007484:	80000115 	stw	zero,4(r16)
10007488:	80000215 	stw	zero,8(r16)
1000748c:	8080030d 	sth	r2,12(r16)
10007490:	80001915 	stw	zero,100(r16)
10007494:	8000038d 	sth	zero,14(r16)
10007498:	80000415 	stw	zero,16(r16)
1000749c:	80000515 	stw	zero,20(r16)
100074a0:	80000615 	stw	zero,24(r16)
100074a4:	00090680 	call	10009068 <memset>
100074a8:	05840074 	movhi	r22,4097
100074ac:	94400217 	ldw	r17,8(r18)
100074b0:	05440074 	movhi	r21,4097
100074b4:	05040074 	movhi	r20,4097
100074b8:	04c40074 	movhi	r19,4097
100074bc:	b5aa1d04 	addi	r22,r22,-22412
100074c0:	ad6a3404 	addi	r21,r21,-22320
100074c4:	a52a5304 	addi	r20,r20,-22196
100074c8:	9cea6a04 	addi	r19,r19,-22104
100074cc:	85800815 	stw	r22,32(r16)
100074d0:	85400915 	stw	r21,36(r16)
100074d4:	85000a15 	stw	r20,40(r16)
100074d8:	84c00b15 	stw	r19,44(r16)
100074dc:	84000715 	stw	r16,28(r16)
100074e0:	00800284 	movi	r2,10
100074e4:	8880030d 	sth	r2,12(r17)
100074e8:	00800044 	movi	r2,1
100074ec:	b80d883a 	mov	r6,r23
100074f0:	89001704 	addi	r4,r17,92
100074f4:	000b883a 	mov	r5,zero
100074f8:	88000015 	stw	zero,0(r17)
100074fc:	88000115 	stw	zero,4(r17)
10007500:	88000215 	stw	zero,8(r17)
10007504:	88001915 	stw	zero,100(r17)
10007508:	8880038d 	sth	r2,14(r17)
1000750c:	88000415 	stw	zero,16(r17)
10007510:	88000515 	stw	zero,20(r17)
10007514:	88000615 	stw	zero,24(r17)
10007518:	00090680 	call	10009068 <memset>
1000751c:	94000317 	ldw	r16,12(r18)
10007520:	00800484 	movi	r2,18
10007524:	8c400715 	stw	r17,28(r17)
10007528:	8d800815 	stw	r22,32(r17)
1000752c:	8d400915 	stw	r21,36(r17)
10007530:	8d000a15 	stw	r20,40(r17)
10007534:	8cc00b15 	stw	r19,44(r17)
10007538:	8080030d 	sth	r2,12(r16)
1000753c:	00800084 	movi	r2,2
10007540:	80000015 	stw	zero,0(r16)
10007544:	80000115 	stw	zero,4(r16)
10007548:	80000215 	stw	zero,8(r16)
1000754c:	80001915 	stw	zero,100(r16)
10007550:	8080038d 	sth	r2,14(r16)
10007554:	80000415 	stw	zero,16(r16)
10007558:	80000515 	stw	zero,20(r16)
1000755c:	80000615 	stw	zero,24(r16)
10007560:	b80d883a 	mov	r6,r23
10007564:	000b883a 	mov	r5,zero
10007568:	81001704 	addi	r4,r16,92
1000756c:	00090680 	call	10009068 <memset>
10007570:	00800044 	movi	r2,1
10007574:	84000715 	stw	r16,28(r16)
10007578:	85800815 	stw	r22,32(r16)
1000757c:	85400915 	stw	r21,36(r16)
10007580:	85000a15 	stw	r20,40(r16)
10007584:	84c00b15 	stw	r19,44(r16)
10007588:	90800e15 	stw	r2,56(r18)
1000758c:	dfc00817 	ldw	ra,32(sp)
10007590:	ddc00717 	ldw	r23,28(sp)
10007594:	dd800617 	ldw	r22,24(sp)
10007598:	dd400517 	ldw	r21,20(sp)
1000759c:	dd000417 	ldw	r20,16(sp)
100075a0:	dcc00317 	ldw	r19,12(sp)
100075a4:	dc800217 	ldw	r18,8(sp)
100075a8:	dc400117 	ldw	r17,4(sp)
100075ac:	dc000017 	ldw	r16,0(sp)
100075b0:	dec00904 	addi	sp,sp,36
100075b4:	f800283a 	ret

100075b8 <__fp_lock>:
100075b8:	0005883a 	mov	r2,zero
100075bc:	f800283a 	ret

100075c0 <__sfmoreglue>:
100075c0:	defffc04 	addi	sp,sp,-16
100075c4:	dc800215 	stw	r18,8(sp)
100075c8:	2825883a 	mov	r18,r5
100075cc:	dc000015 	stw	r16,0(sp)
100075d0:	01401a04 	movi	r5,104
100075d4:	2021883a 	mov	r16,r4
100075d8:	913fffc4 	addi	r4,r18,-1
100075dc:	dfc00315 	stw	ra,12(sp)
100075e0:	dc400115 	stw	r17,4(sp)
100075e4:	000d8440 	call	1000d844 <__mulsi3>
100075e8:	8009883a 	mov	r4,r16
100075ec:	11401d04 	addi	r5,r2,116
100075f0:	1023883a 	mov	r17,r2
100075f4:	00084d40 	call	100084d4 <_malloc_r>
100075f8:	1021883a 	mov	r16,r2
100075fc:	10000726 	beq	r2,zero,1000761c <__sfmoreglue+0x5c>
10007600:	11000304 	addi	r4,r2,12
10007604:	10000015 	stw	zero,0(r2)
10007608:	14800115 	stw	r18,4(r2)
1000760c:	11000215 	stw	r4,8(r2)
10007610:	89801a04 	addi	r6,r17,104
10007614:	000b883a 	mov	r5,zero
10007618:	00090680 	call	10009068 <memset>
1000761c:	8005883a 	mov	r2,r16
10007620:	dfc00317 	ldw	ra,12(sp)
10007624:	dc800217 	ldw	r18,8(sp)
10007628:	dc400117 	ldw	r17,4(sp)
1000762c:	dc000017 	ldw	r16,0(sp)
10007630:	dec00404 	addi	sp,sp,16
10007634:	f800283a 	ret

10007638 <__sfp>:
10007638:	defffb04 	addi	sp,sp,-20
1000763c:	dc000015 	stw	r16,0(sp)
10007640:	04040074 	movhi	r16,4097
10007644:	8413a404 	addi	r16,r16,20112
10007648:	dcc00315 	stw	r19,12(sp)
1000764c:	2027883a 	mov	r19,r4
10007650:	81000017 	ldw	r4,0(r16)
10007654:	dfc00415 	stw	ra,16(sp)
10007658:	dc800215 	stw	r18,8(sp)
1000765c:	20800e17 	ldw	r2,56(r4)
10007660:	dc400115 	stw	r17,4(sp)
10007664:	1000021e 	bne	r2,zero,10007670 <__sfp+0x38>
10007668:	000741c0 	call	1000741c <__sinit.part.1>
1000766c:	81000017 	ldw	r4,0(r16)
10007670:	2480b804 	addi	r18,r4,736
10007674:	047fffc4 	movi	r17,-1
10007678:	91000117 	ldw	r4,4(r18)
1000767c:	94000217 	ldw	r16,8(r18)
10007680:	213fffc4 	addi	r4,r4,-1
10007684:	20000a16 	blt	r4,zero,100076b0 <__sfp+0x78>
10007688:	8080030f 	ldh	r2,12(r16)
1000768c:	10000c26 	beq	r2,zero,100076c0 <__sfp+0x88>
10007690:	80c01d04 	addi	r3,r16,116
10007694:	00000206 	br	100076a0 <__sfp+0x68>
10007698:	18bfe60f 	ldh	r2,-104(r3)
1000769c:	10000826 	beq	r2,zero,100076c0 <__sfp+0x88>
100076a0:	213fffc4 	addi	r4,r4,-1
100076a4:	1c3ffd04 	addi	r16,r3,-12
100076a8:	18c01a04 	addi	r3,r3,104
100076ac:	247ffa1e 	bne	r4,r17,10007698 <__alt_data_end+0xf8007698>
100076b0:	90800017 	ldw	r2,0(r18)
100076b4:	10001d26 	beq	r2,zero,1000772c <__sfp+0xf4>
100076b8:	1025883a 	mov	r18,r2
100076bc:	003fee06 	br	10007678 <__alt_data_end+0xf8007678>
100076c0:	00bfffc4 	movi	r2,-1
100076c4:	8080038d 	sth	r2,14(r16)
100076c8:	00800044 	movi	r2,1
100076cc:	8080030d 	sth	r2,12(r16)
100076d0:	80001915 	stw	zero,100(r16)
100076d4:	80000015 	stw	zero,0(r16)
100076d8:	80000215 	stw	zero,8(r16)
100076dc:	80000115 	stw	zero,4(r16)
100076e0:	80000415 	stw	zero,16(r16)
100076e4:	80000515 	stw	zero,20(r16)
100076e8:	80000615 	stw	zero,24(r16)
100076ec:	01800204 	movi	r6,8
100076f0:	000b883a 	mov	r5,zero
100076f4:	81001704 	addi	r4,r16,92
100076f8:	00090680 	call	10009068 <memset>
100076fc:	8005883a 	mov	r2,r16
10007700:	80000c15 	stw	zero,48(r16)
10007704:	80000d15 	stw	zero,52(r16)
10007708:	80001115 	stw	zero,68(r16)
1000770c:	80001215 	stw	zero,72(r16)
10007710:	dfc00417 	ldw	ra,16(sp)
10007714:	dcc00317 	ldw	r19,12(sp)
10007718:	dc800217 	ldw	r18,8(sp)
1000771c:	dc400117 	ldw	r17,4(sp)
10007720:	dc000017 	ldw	r16,0(sp)
10007724:	dec00504 	addi	sp,sp,20
10007728:	f800283a 	ret
1000772c:	01400104 	movi	r5,4
10007730:	9809883a 	mov	r4,r19
10007734:	00075c00 	call	100075c0 <__sfmoreglue>
10007738:	90800015 	stw	r2,0(r18)
1000773c:	103fde1e 	bne	r2,zero,100076b8 <__alt_data_end+0xf80076b8>
10007740:	00800304 	movi	r2,12
10007744:	98800015 	stw	r2,0(r19)
10007748:	0005883a 	mov	r2,zero
1000774c:	003ff006 	br	10007710 <__alt_data_end+0xf8007710>

10007750 <_cleanup>:
10007750:	00840074 	movhi	r2,4097
10007754:	1093a404 	addi	r2,r2,20112
10007758:	11000017 	ldw	r4,0(r2)
1000775c:	01440074 	movhi	r5,4097
10007760:	2970c504 	addi	r5,r5,-15596
10007764:	00081781 	jmpi	10008178 <_fwalk_reent>

10007768 <__sinit>:
10007768:	20800e17 	ldw	r2,56(r4)
1000776c:	10000126 	beq	r2,zero,10007774 <__sinit+0xc>
10007770:	f800283a 	ret
10007774:	000741c1 	jmpi	1000741c <__sinit.part.1>

10007778 <__sfp_lock_acquire>:
10007778:	f800283a 	ret

1000777c <__sfp_lock_release>:
1000777c:	f800283a 	ret

10007780 <__sinit_lock_acquire>:
10007780:	f800283a 	ret

10007784 <__sinit_lock_release>:
10007784:	f800283a 	ret

10007788 <__fp_lock_all>:
10007788:	00840074 	movhi	r2,4097
1000778c:	1093a504 	addi	r2,r2,20116
10007790:	11000017 	ldw	r4,0(r2)
10007794:	01440034 	movhi	r5,4096
10007798:	295d6e04 	addi	r5,r5,30136
1000779c:	00080b41 	jmpi	100080b4 <_fwalk>

100077a0 <__fp_unlock_all>:
100077a0:	00840074 	movhi	r2,4097
100077a4:	1093a504 	addi	r2,r2,20116
100077a8:	11000017 	ldw	r4,0(r2)
100077ac:	01440034 	movhi	r5,4096
100077b0:	295d0204 	addi	r5,r5,29704
100077b4:	00080b41 	jmpi	100080b4 <_fwalk>

100077b8 <_malloc_trim_r>:
100077b8:	defffb04 	addi	sp,sp,-20
100077bc:	dcc00315 	stw	r19,12(sp)
100077c0:	04c40074 	movhi	r19,4097
100077c4:	dc800215 	stw	r18,8(sp)
100077c8:	dc400115 	stw	r17,4(sp)
100077cc:	dc000015 	stw	r16,0(sp)
100077d0:	dfc00415 	stw	ra,16(sp)
100077d4:	2821883a 	mov	r16,r5
100077d8:	9cce2004 	addi	r19,r19,14464
100077dc:	2025883a 	mov	r18,r4
100077e0:	00106ac0 	call	100106ac <__malloc_lock>
100077e4:	98800217 	ldw	r2,8(r19)
100077e8:	14400117 	ldw	r17,4(r2)
100077ec:	00bfff04 	movi	r2,-4
100077f0:	88a2703a 	and	r17,r17,r2
100077f4:	8c21c83a 	sub	r16,r17,r16
100077f8:	8403fbc4 	addi	r16,r16,4079
100077fc:	8020d33a 	srli	r16,r16,12
10007800:	0083ffc4 	movi	r2,4095
10007804:	843fffc4 	addi	r16,r16,-1
10007808:	8020933a 	slli	r16,r16,12
1000780c:	1400060e 	bge	r2,r16,10007828 <_malloc_trim_r+0x70>
10007810:	000b883a 	mov	r5,zero
10007814:	9009883a 	mov	r4,r18
10007818:	000a8200 	call	1000a820 <_sbrk_r>
1000781c:	98c00217 	ldw	r3,8(r19)
10007820:	1c47883a 	add	r3,r3,r17
10007824:	10c00a26 	beq	r2,r3,10007850 <_malloc_trim_r+0x98>
10007828:	9009883a 	mov	r4,r18
1000782c:	00106d00 	call	100106d0 <__malloc_unlock>
10007830:	0005883a 	mov	r2,zero
10007834:	dfc00417 	ldw	ra,16(sp)
10007838:	dcc00317 	ldw	r19,12(sp)
1000783c:	dc800217 	ldw	r18,8(sp)
10007840:	dc400117 	ldw	r17,4(sp)
10007844:	dc000017 	ldw	r16,0(sp)
10007848:	dec00504 	addi	sp,sp,20
1000784c:	f800283a 	ret
10007850:	040bc83a 	sub	r5,zero,r16
10007854:	9009883a 	mov	r4,r18
10007858:	000a8200 	call	1000a820 <_sbrk_r>
1000785c:	00ffffc4 	movi	r3,-1
10007860:	10c00d26 	beq	r2,r3,10007898 <_malloc_trim_r+0xe0>
10007864:	00c40074 	movhi	r3,4097
10007868:	18da7e04 	addi	r3,r3,27128
1000786c:	18800017 	ldw	r2,0(r3)
10007870:	99000217 	ldw	r4,8(r19)
10007874:	8c23c83a 	sub	r17,r17,r16
10007878:	8c400054 	ori	r17,r17,1
1000787c:	1421c83a 	sub	r16,r2,r16
10007880:	24400115 	stw	r17,4(r4)
10007884:	9009883a 	mov	r4,r18
10007888:	1c000015 	stw	r16,0(r3)
1000788c:	00106d00 	call	100106d0 <__malloc_unlock>
10007890:	00800044 	movi	r2,1
10007894:	003fe706 	br	10007834 <__alt_data_end+0xf8007834>
10007898:	000b883a 	mov	r5,zero
1000789c:	9009883a 	mov	r4,r18
100078a0:	000a8200 	call	1000a820 <_sbrk_r>
100078a4:	99000217 	ldw	r4,8(r19)
100078a8:	014003c4 	movi	r5,15
100078ac:	1107c83a 	sub	r3,r2,r4
100078b0:	28ffdd0e 	bge	r5,r3,10007828 <__alt_data_end+0xf8007828>
100078b4:	01440074 	movhi	r5,4097
100078b8:	2953a704 	addi	r5,r5,20124
100078bc:	29400017 	ldw	r5,0(r5)
100078c0:	18c00054 	ori	r3,r3,1
100078c4:	20c00115 	stw	r3,4(r4)
100078c8:	00c40074 	movhi	r3,4097
100078cc:	1145c83a 	sub	r2,r2,r5
100078d0:	18da7e04 	addi	r3,r3,27128
100078d4:	18800015 	stw	r2,0(r3)
100078d8:	003fd306 	br	10007828 <__alt_data_end+0xf8007828>

100078dc <_free_r>:
100078dc:	28004126 	beq	r5,zero,100079e4 <_free_r+0x108>
100078e0:	defffd04 	addi	sp,sp,-12
100078e4:	dc400115 	stw	r17,4(sp)
100078e8:	dc000015 	stw	r16,0(sp)
100078ec:	2023883a 	mov	r17,r4
100078f0:	2821883a 	mov	r16,r5
100078f4:	dfc00215 	stw	ra,8(sp)
100078f8:	00106ac0 	call	100106ac <__malloc_lock>
100078fc:	81ffff17 	ldw	r7,-4(r16)
10007900:	00bfff84 	movi	r2,-2
10007904:	01040074 	movhi	r4,4097
10007908:	81bffe04 	addi	r6,r16,-8
1000790c:	3884703a 	and	r2,r7,r2
10007910:	210e2004 	addi	r4,r4,14464
10007914:	308b883a 	add	r5,r6,r2
10007918:	2a400117 	ldw	r9,4(r5)
1000791c:	22000217 	ldw	r8,8(r4)
10007920:	00ffff04 	movi	r3,-4
10007924:	48c6703a 	and	r3,r9,r3
10007928:	2a005726 	beq	r5,r8,10007a88 <_free_r+0x1ac>
1000792c:	28c00115 	stw	r3,4(r5)
10007930:	39c0004c 	andi	r7,r7,1
10007934:	3800091e 	bne	r7,zero,1000795c <_free_r+0x80>
10007938:	823ffe17 	ldw	r8,-8(r16)
1000793c:	22400204 	addi	r9,r4,8
10007940:	320dc83a 	sub	r6,r6,r8
10007944:	31c00217 	ldw	r7,8(r6)
10007948:	1205883a 	add	r2,r2,r8
1000794c:	3a406526 	beq	r7,r9,10007ae4 <_free_r+0x208>
10007950:	32000317 	ldw	r8,12(r6)
10007954:	3a000315 	stw	r8,12(r7)
10007958:	41c00215 	stw	r7,8(r8)
1000795c:	28cf883a 	add	r7,r5,r3
10007960:	39c00117 	ldw	r7,4(r7)
10007964:	39c0004c 	andi	r7,r7,1
10007968:	38003a26 	beq	r7,zero,10007a54 <_free_r+0x178>
1000796c:	10c00054 	ori	r3,r2,1
10007970:	30c00115 	stw	r3,4(r6)
10007974:	3087883a 	add	r3,r6,r2
10007978:	18800015 	stw	r2,0(r3)
1000797c:	00c07fc4 	movi	r3,511
10007980:	18801936 	bltu	r3,r2,100079e8 <_free_r+0x10c>
10007984:	1004d0fa 	srli	r2,r2,3
10007988:	01c00044 	movi	r7,1
1000798c:	21400117 	ldw	r5,4(r4)
10007990:	10c00044 	addi	r3,r2,1
10007994:	18c7883a 	add	r3,r3,r3
10007998:	1005d0ba 	srai	r2,r2,2
1000799c:	18c7883a 	add	r3,r3,r3
100079a0:	18c7883a 	add	r3,r3,r3
100079a4:	1907883a 	add	r3,r3,r4
100079a8:	3884983a 	sll	r2,r7,r2
100079ac:	19c00017 	ldw	r7,0(r3)
100079b0:	1a3ffe04 	addi	r8,r3,-8
100079b4:	1144b03a 	or	r2,r2,r5
100079b8:	32000315 	stw	r8,12(r6)
100079bc:	31c00215 	stw	r7,8(r6)
100079c0:	20800115 	stw	r2,4(r4)
100079c4:	19800015 	stw	r6,0(r3)
100079c8:	39800315 	stw	r6,12(r7)
100079cc:	8809883a 	mov	r4,r17
100079d0:	dfc00217 	ldw	ra,8(sp)
100079d4:	dc400117 	ldw	r17,4(sp)
100079d8:	dc000017 	ldw	r16,0(sp)
100079dc:	dec00304 	addi	sp,sp,12
100079e0:	00106d01 	jmpi	100106d0 <__malloc_unlock>
100079e4:	f800283a 	ret
100079e8:	100ad27a 	srli	r5,r2,9
100079ec:	00c00104 	movi	r3,4
100079f0:	19404a36 	bltu	r3,r5,10007b1c <_free_r+0x240>
100079f4:	100ad1ba 	srli	r5,r2,6
100079f8:	28c00e44 	addi	r3,r5,57
100079fc:	18c7883a 	add	r3,r3,r3
10007a00:	29400e04 	addi	r5,r5,56
10007a04:	18c7883a 	add	r3,r3,r3
10007a08:	18c7883a 	add	r3,r3,r3
10007a0c:	1909883a 	add	r4,r3,r4
10007a10:	20c00017 	ldw	r3,0(r4)
10007a14:	01c40074 	movhi	r7,4097
10007a18:	213ffe04 	addi	r4,r4,-8
10007a1c:	39ce2004 	addi	r7,r7,14464
10007a20:	20c04426 	beq	r4,r3,10007b34 <_free_r+0x258>
10007a24:	01ffff04 	movi	r7,-4
10007a28:	19400117 	ldw	r5,4(r3)
10007a2c:	29ca703a 	and	r5,r5,r7
10007a30:	1140022e 	bgeu	r2,r5,10007a3c <_free_r+0x160>
10007a34:	18c00217 	ldw	r3,8(r3)
10007a38:	20fffb1e 	bne	r4,r3,10007a28 <__alt_data_end+0xf8007a28>
10007a3c:	19000317 	ldw	r4,12(r3)
10007a40:	31000315 	stw	r4,12(r6)
10007a44:	30c00215 	stw	r3,8(r6)
10007a48:	21800215 	stw	r6,8(r4)
10007a4c:	19800315 	stw	r6,12(r3)
10007a50:	003fde06 	br	100079cc <__alt_data_end+0xf80079cc>
10007a54:	29c00217 	ldw	r7,8(r5)
10007a58:	10c5883a 	add	r2,r2,r3
10007a5c:	00c40074 	movhi	r3,4097
10007a60:	18ce2204 	addi	r3,r3,14472
10007a64:	38c03b26 	beq	r7,r3,10007b54 <_free_r+0x278>
10007a68:	2a000317 	ldw	r8,12(r5)
10007a6c:	11400054 	ori	r5,r2,1
10007a70:	3087883a 	add	r3,r6,r2
10007a74:	3a000315 	stw	r8,12(r7)
10007a78:	41c00215 	stw	r7,8(r8)
10007a7c:	31400115 	stw	r5,4(r6)
10007a80:	18800015 	stw	r2,0(r3)
10007a84:	003fbd06 	br	1000797c <__alt_data_end+0xf800797c>
10007a88:	39c0004c 	andi	r7,r7,1
10007a8c:	10c5883a 	add	r2,r2,r3
10007a90:	3800071e 	bne	r7,zero,10007ab0 <_free_r+0x1d4>
10007a94:	81fffe17 	ldw	r7,-8(r16)
10007a98:	31cdc83a 	sub	r6,r6,r7
10007a9c:	30c00317 	ldw	r3,12(r6)
10007aa0:	31400217 	ldw	r5,8(r6)
10007aa4:	11c5883a 	add	r2,r2,r7
10007aa8:	28c00315 	stw	r3,12(r5)
10007aac:	19400215 	stw	r5,8(r3)
10007ab0:	10c00054 	ori	r3,r2,1
10007ab4:	30c00115 	stw	r3,4(r6)
10007ab8:	00c40074 	movhi	r3,4097
10007abc:	18d3a804 	addi	r3,r3,20128
10007ac0:	18c00017 	ldw	r3,0(r3)
10007ac4:	21800215 	stw	r6,8(r4)
10007ac8:	10ffc036 	bltu	r2,r3,100079cc <__alt_data_end+0xf80079cc>
10007acc:	00840074 	movhi	r2,4097
10007ad0:	109a7504 	addi	r2,r2,27092
10007ad4:	11400017 	ldw	r5,0(r2)
10007ad8:	8809883a 	mov	r4,r17
10007adc:	00077b80 	call	100077b8 <_malloc_trim_r>
10007ae0:	003fba06 	br	100079cc <__alt_data_end+0xf80079cc>
10007ae4:	28c9883a 	add	r4,r5,r3
10007ae8:	21000117 	ldw	r4,4(r4)
10007aec:	2100004c 	andi	r4,r4,1
10007af0:	2000391e 	bne	r4,zero,10007bd8 <_free_r+0x2fc>
10007af4:	29c00217 	ldw	r7,8(r5)
10007af8:	29000317 	ldw	r4,12(r5)
10007afc:	1885883a 	add	r2,r3,r2
10007b00:	10c00054 	ori	r3,r2,1
10007b04:	39000315 	stw	r4,12(r7)
10007b08:	21c00215 	stw	r7,8(r4)
10007b0c:	30c00115 	stw	r3,4(r6)
10007b10:	308d883a 	add	r6,r6,r2
10007b14:	30800015 	stw	r2,0(r6)
10007b18:	003fac06 	br	100079cc <__alt_data_end+0xf80079cc>
10007b1c:	00c00504 	movi	r3,20
10007b20:	19401536 	bltu	r3,r5,10007b78 <_free_r+0x29c>
10007b24:	28c01704 	addi	r3,r5,92
10007b28:	18c7883a 	add	r3,r3,r3
10007b2c:	294016c4 	addi	r5,r5,91
10007b30:	003fb406 	br	10007a04 <__alt_data_end+0xf8007a04>
10007b34:	280bd0ba 	srai	r5,r5,2
10007b38:	00c00044 	movi	r3,1
10007b3c:	38800117 	ldw	r2,4(r7)
10007b40:	194a983a 	sll	r5,r3,r5
10007b44:	2007883a 	mov	r3,r4
10007b48:	2884b03a 	or	r2,r5,r2
10007b4c:	38800115 	stw	r2,4(r7)
10007b50:	003fbb06 	br	10007a40 <__alt_data_end+0xf8007a40>
10007b54:	21800515 	stw	r6,20(r4)
10007b58:	21800415 	stw	r6,16(r4)
10007b5c:	10c00054 	ori	r3,r2,1
10007b60:	31c00315 	stw	r7,12(r6)
10007b64:	31c00215 	stw	r7,8(r6)
10007b68:	30c00115 	stw	r3,4(r6)
10007b6c:	308d883a 	add	r6,r6,r2
10007b70:	30800015 	stw	r2,0(r6)
10007b74:	003f9506 	br	100079cc <__alt_data_end+0xf80079cc>
10007b78:	00c01504 	movi	r3,84
10007b7c:	19400536 	bltu	r3,r5,10007b94 <_free_r+0x2b8>
10007b80:	100ad33a 	srli	r5,r2,12
10007b84:	28c01bc4 	addi	r3,r5,111
10007b88:	18c7883a 	add	r3,r3,r3
10007b8c:	29401b84 	addi	r5,r5,110
10007b90:	003f9c06 	br	10007a04 <__alt_data_end+0xf8007a04>
10007b94:	00c05504 	movi	r3,340
10007b98:	19400536 	bltu	r3,r5,10007bb0 <_free_r+0x2d4>
10007b9c:	100ad3fa 	srli	r5,r2,15
10007ba0:	28c01e04 	addi	r3,r5,120
10007ba4:	18c7883a 	add	r3,r3,r3
10007ba8:	29401dc4 	addi	r5,r5,119
10007bac:	003f9506 	br	10007a04 <__alt_data_end+0xf8007a04>
10007bb0:	00c15504 	movi	r3,1364
10007bb4:	19400536 	bltu	r3,r5,10007bcc <_free_r+0x2f0>
10007bb8:	100ad4ba 	srli	r5,r2,18
10007bbc:	28c01f44 	addi	r3,r5,125
10007bc0:	18c7883a 	add	r3,r3,r3
10007bc4:	29401f04 	addi	r5,r5,124
10007bc8:	003f8e06 	br	10007a04 <__alt_data_end+0xf8007a04>
10007bcc:	00c03f84 	movi	r3,254
10007bd0:	01401f84 	movi	r5,126
10007bd4:	003f8b06 	br	10007a04 <__alt_data_end+0xf8007a04>
10007bd8:	10c00054 	ori	r3,r2,1
10007bdc:	30c00115 	stw	r3,4(r6)
10007be0:	308d883a 	add	r6,r6,r2
10007be4:	30800015 	stw	r2,0(r6)
10007be8:	003f7806 	br	100079cc <__alt_data_end+0xf80079cc>

10007bec <__sfvwrite_r>:
10007bec:	30800217 	ldw	r2,8(r6)
10007bf0:	10006726 	beq	r2,zero,10007d90 <__sfvwrite_r+0x1a4>
10007bf4:	28c0030b 	ldhu	r3,12(r5)
10007bf8:	defff404 	addi	sp,sp,-48
10007bfc:	dd400715 	stw	r21,28(sp)
10007c00:	dd000615 	stw	r20,24(sp)
10007c04:	dc000215 	stw	r16,8(sp)
10007c08:	dfc00b15 	stw	ra,44(sp)
10007c0c:	df000a15 	stw	fp,40(sp)
10007c10:	ddc00915 	stw	r23,36(sp)
10007c14:	dd800815 	stw	r22,32(sp)
10007c18:	dcc00515 	stw	r19,20(sp)
10007c1c:	dc800415 	stw	r18,16(sp)
10007c20:	dc400315 	stw	r17,12(sp)
10007c24:	1880020c 	andi	r2,r3,8
10007c28:	2821883a 	mov	r16,r5
10007c2c:	202b883a 	mov	r21,r4
10007c30:	3029883a 	mov	r20,r6
10007c34:	10002726 	beq	r2,zero,10007cd4 <__sfvwrite_r+0xe8>
10007c38:	28800417 	ldw	r2,16(r5)
10007c3c:	10002526 	beq	r2,zero,10007cd4 <__sfvwrite_r+0xe8>
10007c40:	1880008c 	andi	r2,r3,2
10007c44:	a4400017 	ldw	r17,0(r20)
10007c48:	10002a26 	beq	r2,zero,10007cf4 <__sfvwrite_r+0x108>
10007c4c:	05a00034 	movhi	r22,32768
10007c50:	0027883a 	mov	r19,zero
10007c54:	0025883a 	mov	r18,zero
10007c58:	b5bf0004 	addi	r22,r22,-1024
10007c5c:	980d883a 	mov	r6,r19
10007c60:	a809883a 	mov	r4,r21
10007c64:	90004626 	beq	r18,zero,10007d80 <__sfvwrite_r+0x194>
10007c68:	900f883a 	mov	r7,r18
10007c6c:	b480022e 	bgeu	r22,r18,10007c78 <__sfvwrite_r+0x8c>
10007c70:	01e00034 	movhi	r7,32768
10007c74:	39ff0004 	addi	r7,r7,-1024
10007c78:	80800917 	ldw	r2,36(r16)
10007c7c:	81400717 	ldw	r5,28(r16)
10007c80:	103ee83a 	callr	r2
10007c84:	00805a0e 	bge	zero,r2,10007df0 <__sfvwrite_r+0x204>
10007c88:	a0c00217 	ldw	r3,8(r20)
10007c8c:	98a7883a 	add	r19,r19,r2
10007c90:	90a5c83a 	sub	r18,r18,r2
10007c94:	1885c83a 	sub	r2,r3,r2
10007c98:	a0800215 	stw	r2,8(r20)
10007c9c:	103fef1e 	bne	r2,zero,10007c5c <__alt_data_end+0xf8007c5c>
10007ca0:	0005883a 	mov	r2,zero
10007ca4:	dfc00b17 	ldw	ra,44(sp)
10007ca8:	df000a17 	ldw	fp,40(sp)
10007cac:	ddc00917 	ldw	r23,36(sp)
10007cb0:	dd800817 	ldw	r22,32(sp)
10007cb4:	dd400717 	ldw	r21,28(sp)
10007cb8:	dd000617 	ldw	r20,24(sp)
10007cbc:	dcc00517 	ldw	r19,20(sp)
10007cc0:	dc800417 	ldw	r18,16(sp)
10007cc4:	dc400317 	ldw	r17,12(sp)
10007cc8:	dc000217 	ldw	r16,8(sp)
10007ccc:	dec00c04 	addi	sp,sp,48
10007cd0:	f800283a 	ret
10007cd4:	800b883a 	mov	r5,r16
10007cd8:	a809883a 	mov	r4,r21
10007cdc:	000575c0 	call	1000575c <__swsetup_r>
10007ce0:	1000ee1e 	bne	r2,zero,1000809c <__sfvwrite_r+0x4b0>
10007ce4:	80c0030b 	ldhu	r3,12(r16)
10007ce8:	a4400017 	ldw	r17,0(r20)
10007cec:	1880008c 	andi	r2,r3,2
10007cf0:	103fd61e 	bne	r2,zero,10007c4c <__alt_data_end+0xf8007c4c>
10007cf4:	1880004c 	andi	r2,r3,1
10007cf8:	1000421e 	bne	r2,zero,10007e04 <__sfvwrite_r+0x218>
10007cfc:	0039883a 	mov	fp,zero
10007d00:	0025883a 	mov	r18,zero
10007d04:	90001a26 	beq	r18,zero,10007d70 <__sfvwrite_r+0x184>
10007d08:	1880800c 	andi	r2,r3,512
10007d0c:	84c00217 	ldw	r19,8(r16)
10007d10:	10002126 	beq	r2,zero,10007d98 <__sfvwrite_r+0x1ac>
10007d14:	982f883a 	mov	r23,r19
10007d18:	94c09636 	bltu	r18,r19,10007f74 <__sfvwrite_r+0x388>
10007d1c:	1881200c 	andi	r2,r3,1152
10007d20:	1000a11e 	bne	r2,zero,10007fa8 <__sfvwrite_r+0x3bc>
10007d24:	81000017 	ldw	r4,0(r16)
10007d28:	b80d883a 	mov	r6,r23
10007d2c:	e00b883a 	mov	r5,fp
10007d30:	0008f0c0 	call	10008f0c <memmove>
10007d34:	80c00217 	ldw	r3,8(r16)
10007d38:	81000017 	ldw	r4,0(r16)
10007d3c:	9005883a 	mov	r2,r18
10007d40:	1ce7c83a 	sub	r19,r3,r19
10007d44:	25cf883a 	add	r7,r4,r23
10007d48:	84c00215 	stw	r19,8(r16)
10007d4c:	81c00015 	stw	r7,0(r16)
10007d50:	a0c00217 	ldw	r3,8(r20)
10007d54:	e0b9883a 	add	fp,fp,r2
10007d58:	90a5c83a 	sub	r18,r18,r2
10007d5c:	18a7c83a 	sub	r19,r3,r2
10007d60:	a4c00215 	stw	r19,8(r20)
10007d64:	983fce26 	beq	r19,zero,10007ca0 <__alt_data_end+0xf8007ca0>
10007d68:	80c0030b 	ldhu	r3,12(r16)
10007d6c:	903fe61e 	bne	r18,zero,10007d08 <__alt_data_end+0xf8007d08>
10007d70:	8f000017 	ldw	fp,0(r17)
10007d74:	8c800117 	ldw	r18,4(r17)
10007d78:	8c400204 	addi	r17,r17,8
10007d7c:	003fe106 	br	10007d04 <__alt_data_end+0xf8007d04>
10007d80:	8cc00017 	ldw	r19,0(r17)
10007d84:	8c800117 	ldw	r18,4(r17)
10007d88:	8c400204 	addi	r17,r17,8
10007d8c:	003fb306 	br	10007c5c <__alt_data_end+0xf8007c5c>
10007d90:	0005883a 	mov	r2,zero
10007d94:	f800283a 	ret
10007d98:	81000017 	ldw	r4,0(r16)
10007d9c:	80800417 	ldw	r2,16(r16)
10007da0:	11005a36 	bltu	r2,r4,10007f0c <__sfvwrite_r+0x320>
10007da4:	85c00517 	ldw	r23,20(r16)
10007da8:	95c05836 	bltu	r18,r23,10007f0c <__sfvwrite_r+0x320>
10007dac:	00a00034 	movhi	r2,32768
10007db0:	10bfffc4 	addi	r2,r2,-1
10007db4:	9009883a 	mov	r4,r18
10007db8:	1480012e 	bgeu	r2,r18,10007dc0 <__sfvwrite_r+0x1d4>
10007dbc:	1009883a 	mov	r4,r2
10007dc0:	b80b883a 	mov	r5,r23
10007dc4:	000d6900 	call	1000d690 <__divsi3>
10007dc8:	b80b883a 	mov	r5,r23
10007dcc:	1009883a 	mov	r4,r2
10007dd0:	000d8440 	call	1000d844 <__mulsi3>
10007dd4:	81400717 	ldw	r5,28(r16)
10007dd8:	80c00917 	ldw	r3,36(r16)
10007ddc:	100f883a 	mov	r7,r2
10007de0:	e00d883a 	mov	r6,fp
10007de4:	a809883a 	mov	r4,r21
10007de8:	183ee83a 	callr	r3
10007dec:	00bfd816 	blt	zero,r2,10007d50 <__alt_data_end+0xf8007d50>
10007df0:	8080030b 	ldhu	r2,12(r16)
10007df4:	10801014 	ori	r2,r2,64
10007df8:	8080030d 	sth	r2,12(r16)
10007dfc:	00bfffc4 	movi	r2,-1
10007e00:	003fa806 	br	10007ca4 <__alt_data_end+0xf8007ca4>
10007e04:	0027883a 	mov	r19,zero
10007e08:	0011883a 	mov	r8,zero
10007e0c:	0039883a 	mov	fp,zero
10007e10:	0025883a 	mov	r18,zero
10007e14:	90001f26 	beq	r18,zero,10007e94 <__sfvwrite_r+0x2a8>
10007e18:	40005a26 	beq	r8,zero,10007f84 <__sfvwrite_r+0x398>
10007e1c:	982d883a 	mov	r22,r19
10007e20:	94c0012e 	bgeu	r18,r19,10007e28 <__sfvwrite_r+0x23c>
10007e24:	902d883a 	mov	r22,r18
10007e28:	81000017 	ldw	r4,0(r16)
10007e2c:	80800417 	ldw	r2,16(r16)
10007e30:	b02f883a 	mov	r23,r22
10007e34:	81c00517 	ldw	r7,20(r16)
10007e38:	1100032e 	bgeu	r2,r4,10007e48 <__sfvwrite_r+0x25c>
10007e3c:	80c00217 	ldw	r3,8(r16)
10007e40:	38c7883a 	add	r3,r7,r3
10007e44:	1d801816 	blt	r3,r22,10007ea8 <__sfvwrite_r+0x2bc>
10007e48:	b1c03e16 	blt	r22,r7,10007f44 <__sfvwrite_r+0x358>
10007e4c:	80800917 	ldw	r2,36(r16)
10007e50:	81400717 	ldw	r5,28(r16)
10007e54:	e00d883a 	mov	r6,fp
10007e58:	da000115 	stw	r8,4(sp)
10007e5c:	a809883a 	mov	r4,r21
10007e60:	103ee83a 	callr	r2
10007e64:	102f883a 	mov	r23,r2
10007e68:	da000117 	ldw	r8,4(sp)
10007e6c:	00bfe00e 	bge	zero,r2,10007df0 <__alt_data_end+0xf8007df0>
10007e70:	9de7c83a 	sub	r19,r19,r23
10007e74:	98001f26 	beq	r19,zero,10007ef4 <__sfvwrite_r+0x308>
10007e78:	a0800217 	ldw	r2,8(r20)
10007e7c:	e5f9883a 	add	fp,fp,r23
10007e80:	95e5c83a 	sub	r18,r18,r23
10007e84:	15efc83a 	sub	r23,r2,r23
10007e88:	a5c00215 	stw	r23,8(r20)
10007e8c:	b83f8426 	beq	r23,zero,10007ca0 <__alt_data_end+0xf8007ca0>
10007e90:	903fe11e 	bne	r18,zero,10007e18 <__alt_data_end+0xf8007e18>
10007e94:	8f000017 	ldw	fp,0(r17)
10007e98:	8c800117 	ldw	r18,4(r17)
10007e9c:	0011883a 	mov	r8,zero
10007ea0:	8c400204 	addi	r17,r17,8
10007ea4:	003fdb06 	br	10007e14 <__alt_data_end+0xf8007e14>
10007ea8:	180d883a 	mov	r6,r3
10007eac:	e00b883a 	mov	r5,fp
10007eb0:	da000115 	stw	r8,4(sp)
10007eb4:	d8c00015 	stw	r3,0(sp)
10007eb8:	0008f0c0 	call	10008f0c <memmove>
10007ebc:	d8c00017 	ldw	r3,0(sp)
10007ec0:	80800017 	ldw	r2,0(r16)
10007ec4:	800b883a 	mov	r5,r16
10007ec8:	a809883a 	mov	r4,r21
10007ecc:	10c5883a 	add	r2,r2,r3
10007ed0:	80800015 	stw	r2,0(r16)
10007ed4:	d8c00015 	stw	r3,0(sp)
10007ed8:	000737c0 	call	1000737c <_fflush_r>
10007edc:	d8c00017 	ldw	r3,0(sp)
10007ee0:	da000117 	ldw	r8,4(sp)
10007ee4:	103fc21e 	bne	r2,zero,10007df0 <__alt_data_end+0xf8007df0>
10007ee8:	182f883a 	mov	r23,r3
10007eec:	9de7c83a 	sub	r19,r19,r23
10007ef0:	983fe11e 	bne	r19,zero,10007e78 <__alt_data_end+0xf8007e78>
10007ef4:	800b883a 	mov	r5,r16
10007ef8:	a809883a 	mov	r4,r21
10007efc:	000737c0 	call	1000737c <_fflush_r>
10007f00:	103fbb1e 	bne	r2,zero,10007df0 <__alt_data_end+0xf8007df0>
10007f04:	0011883a 	mov	r8,zero
10007f08:	003fdb06 	br	10007e78 <__alt_data_end+0xf8007e78>
10007f0c:	94c0012e 	bgeu	r18,r19,10007f14 <__sfvwrite_r+0x328>
10007f10:	9027883a 	mov	r19,r18
10007f14:	980d883a 	mov	r6,r19
10007f18:	e00b883a 	mov	r5,fp
10007f1c:	0008f0c0 	call	10008f0c <memmove>
10007f20:	80800217 	ldw	r2,8(r16)
10007f24:	80c00017 	ldw	r3,0(r16)
10007f28:	14c5c83a 	sub	r2,r2,r19
10007f2c:	1cc7883a 	add	r3,r3,r19
10007f30:	80800215 	stw	r2,8(r16)
10007f34:	80c00015 	stw	r3,0(r16)
10007f38:	10004326 	beq	r2,zero,10008048 <__sfvwrite_r+0x45c>
10007f3c:	9805883a 	mov	r2,r19
10007f40:	003f8306 	br	10007d50 <__alt_data_end+0xf8007d50>
10007f44:	b00d883a 	mov	r6,r22
10007f48:	e00b883a 	mov	r5,fp
10007f4c:	da000115 	stw	r8,4(sp)
10007f50:	0008f0c0 	call	10008f0c <memmove>
10007f54:	80800217 	ldw	r2,8(r16)
10007f58:	80c00017 	ldw	r3,0(r16)
10007f5c:	da000117 	ldw	r8,4(sp)
10007f60:	1585c83a 	sub	r2,r2,r22
10007f64:	1dad883a 	add	r22,r3,r22
10007f68:	80800215 	stw	r2,8(r16)
10007f6c:	85800015 	stw	r22,0(r16)
10007f70:	003fbf06 	br	10007e70 <__alt_data_end+0xf8007e70>
10007f74:	81000017 	ldw	r4,0(r16)
10007f78:	9027883a 	mov	r19,r18
10007f7c:	902f883a 	mov	r23,r18
10007f80:	003f6906 	br	10007d28 <__alt_data_end+0xf8007d28>
10007f84:	900d883a 	mov	r6,r18
10007f88:	01400284 	movi	r5,10
10007f8c:	e009883a 	mov	r4,fp
10007f90:	0008ce00 	call	10008ce0 <memchr>
10007f94:	10003e26 	beq	r2,zero,10008090 <__sfvwrite_r+0x4a4>
10007f98:	10800044 	addi	r2,r2,1
10007f9c:	1727c83a 	sub	r19,r2,fp
10007fa0:	02000044 	movi	r8,1
10007fa4:	003f9d06 	br	10007e1c <__alt_data_end+0xf8007e1c>
10007fa8:	80800517 	ldw	r2,20(r16)
10007fac:	81400417 	ldw	r5,16(r16)
10007fb0:	81c00017 	ldw	r7,0(r16)
10007fb4:	10a7883a 	add	r19,r2,r2
10007fb8:	9885883a 	add	r2,r19,r2
10007fbc:	1026d7fa 	srli	r19,r2,31
10007fc0:	396dc83a 	sub	r22,r7,r5
10007fc4:	b1000044 	addi	r4,r22,1
10007fc8:	9885883a 	add	r2,r19,r2
10007fcc:	1027d07a 	srai	r19,r2,1
10007fd0:	2485883a 	add	r2,r4,r18
10007fd4:	980d883a 	mov	r6,r19
10007fd8:	9880022e 	bgeu	r19,r2,10007fe4 <__sfvwrite_r+0x3f8>
10007fdc:	1027883a 	mov	r19,r2
10007fe0:	100d883a 	mov	r6,r2
10007fe4:	18c1000c 	andi	r3,r3,1024
10007fe8:	18001c26 	beq	r3,zero,1000805c <__sfvwrite_r+0x470>
10007fec:	300b883a 	mov	r5,r6
10007ff0:	a809883a 	mov	r4,r21
10007ff4:	00084d40 	call	100084d4 <_malloc_r>
10007ff8:	102f883a 	mov	r23,r2
10007ffc:	10002926 	beq	r2,zero,100080a4 <__sfvwrite_r+0x4b8>
10008000:	81400417 	ldw	r5,16(r16)
10008004:	b00d883a 	mov	r6,r22
10008008:	1009883a 	mov	r4,r2
1000800c:	0008dc40 	call	10008dc4 <memcpy>
10008010:	8080030b 	ldhu	r2,12(r16)
10008014:	00fedfc4 	movi	r3,-1153
10008018:	10c4703a 	and	r2,r2,r3
1000801c:	10802014 	ori	r2,r2,128
10008020:	8080030d 	sth	r2,12(r16)
10008024:	bd89883a 	add	r4,r23,r22
10008028:	9d8fc83a 	sub	r7,r19,r22
1000802c:	85c00415 	stw	r23,16(r16)
10008030:	84c00515 	stw	r19,20(r16)
10008034:	81000015 	stw	r4,0(r16)
10008038:	9027883a 	mov	r19,r18
1000803c:	81c00215 	stw	r7,8(r16)
10008040:	902f883a 	mov	r23,r18
10008044:	003f3806 	br	10007d28 <__alt_data_end+0xf8007d28>
10008048:	800b883a 	mov	r5,r16
1000804c:	a809883a 	mov	r4,r21
10008050:	000737c0 	call	1000737c <_fflush_r>
10008054:	103fb926 	beq	r2,zero,10007f3c <__alt_data_end+0xf8007f3c>
10008058:	003f6506 	br	10007df0 <__alt_data_end+0xf8007df0>
1000805c:	a809883a 	mov	r4,r21
10008060:	000a2480 	call	1000a248 <_realloc_r>
10008064:	102f883a 	mov	r23,r2
10008068:	103fee1e 	bne	r2,zero,10008024 <__alt_data_end+0xf8008024>
1000806c:	81400417 	ldw	r5,16(r16)
10008070:	a809883a 	mov	r4,r21
10008074:	00078dc0 	call	100078dc <_free_r>
10008078:	8080030b 	ldhu	r2,12(r16)
1000807c:	00ffdfc4 	movi	r3,-129
10008080:	1884703a 	and	r2,r3,r2
10008084:	00c00304 	movi	r3,12
10008088:	a8c00015 	stw	r3,0(r21)
1000808c:	003f5906 	br	10007df4 <__alt_data_end+0xf8007df4>
10008090:	94c00044 	addi	r19,r18,1
10008094:	02000044 	movi	r8,1
10008098:	003f6006 	br	10007e1c <__alt_data_end+0xf8007e1c>
1000809c:	00bfffc4 	movi	r2,-1
100080a0:	003f0006 	br	10007ca4 <__alt_data_end+0xf8007ca4>
100080a4:	00800304 	movi	r2,12
100080a8:	a8800015 	stw	r2,0(r21)
100080ac:	8080030b 	ldhu	r2,12(r16)
100080b0:	003f5006 	br	10007df4 <__alt_data_end+0xf8007df4>

100080b4 <_fwalk>:
100080b4:	defff704 	addi	sp,sp,-36
100080b8:	dd000415 	stw	r20,16(sp)
100080bc:	dfc00815 	stw	ra,32(sp)
100080c0:	ddc00715 	stw	r23,28(sp)
100080c4:	dd800615 	stw	r22,24(sp)
100080c8:	dd400515 	stw	r21,20(sp)
100080cc:	dcc00315 	stw	r19,12(sp)
100080d0:	dc800215 	stw	r18,8(sp)
100080d4:	dc400115 	stw	r17,4(sp)
100080d8:	dc000015 	stw	r16,0(sp)
100080dc:	2500b804 	addi	r20,r4,736
100080e0:	a0002326 	beq	r20,zero,10008170 <_fwalk+0xbc>
100080e4:	282b883a 	mov	r21,r5
100080e8:	002f883a 	mov	r23,zero
100080ec:	05800044 	movi	r22,1
100080f0:	04ffffc4 	movi	r19,-1
100080f4:	a4400117 	ldw	r17,4(r20)
100080f8:	a4800217 	ldw	r18,8(r20)
100080fc:	8c7fffc4 	addi	r17,r17,-1
10008100:	88000d16 	blt	r17,zero,10008138 <_fwalk+0x84>
10008104:	94000304 	addi	r16,r18,12
10008108:	94800384 	addi	r18,r18,14
1000810c:	8080000b 	ldhu	r2,0(r16)
10008110:	8c7fffc4 	addi	r17,r17,-1
10008114:	813ffd04 	addi	r4,r16,-12
10008118:	b080042e 	bgeu	r22,r2,1000812c <_fwalk+0x78>
1000811c:	9080000f 	ldh	r2,0(r18)
10008120:	14c00226 	beq	r2,r19,1000812c <_fwalk+0x78>
10008124:	a83ee83a 	callr	r21
10008128:	b8aeb03a 	or	r23,r23,r2
1000812c:	84001a04 	addi	r16,r16,104
10008130:	94801a04 	addi	r18,r18,104
10008134:	8cfff51e 	bne	r17,r19,1000810c <__alt_data_end+0xf800810c>
10008138:	a5000017 	ldw	r20,0(r20)
1000813c:	a03fed1e 	bne	r20,zero,100080f4 <__alt_data_end+0xf80080f4>
10008140:	b805883a 	mov	r2,r23
10008144:	dfc00817 	ldw	ra,32(sp)
10008148:	ddc00717 	ldw	r23,28(sp)
1000814c:	dd800617 	ldw	r22,24(sp)
10008150:	dd400517 	ldw	r21,20(sp)
10008154:	dd000417 	ldw	r20,16(sp)
10008158:	dcc00317 	ldw	r19,12(sp)
1000815c:	dc800217 	ldw	r18,8(sp)
10008160:	dc400117 	ldw	r17,4(sp)
10008164:	dc000017 	ldw	r16,0(sp)
10008168:	dec00904 	addi	sp,sp,36
1000816c:	f800283a 	ret
10008170:	002f883a 	mov	r23,zero
10008174:	003ff206 	br	10008140 <__alt_data_end+0xf8008140>

10008178 <_fwalk_reent>:
10008178:	defff704 	addi	sp,sp,-36
1000817c:	dd000415 	stw	r20,16(sp)
10008180:	dfc00815 	stw	ra,32(sp)
10008184:	ddc00715 	stw	r23,28(sp)
10008188:	dd800615 	stw	r22,24(sp)
1000818c:	dd400515 	stw	r21,20(sp)
10008190:	dcc00315 	stw	r19,12(sp)
10008194:	dc800215 	stw	r18,8(sp)
10008198:	dc400115 	stw	r17,4(sp)
1000819c:	dc000015 	stw	r16,0(sp)
100081a0:	2500b804 	addi	r20,r4,736
100081a4:	a0002326 	beq	r20,zero,10008234 <_fwalk_reent+0xbc>
100081a8:	282b883a 	mov	r21,r5
100081ac:	2027883a 	mov	r19,r4
100081b0:	002f883a 	mov	r23,zero
100081b4:	05800044 	movi	r22,1
100081b8:	04bfffc4 	movi	r18,-1
100081bc:	a4400117 	ldw	r17,4(r20)
100081c0:	a4000217 	ldw	r16,8(r20)
100081c4:	8c7fffc4 	addi	r17,r17,-1
100081c8:	88000c16 	blt	r17,zero,100081fc <_fwalk_reent+0x84>
100081cc:	84000304 	addi	r16,r16,12
100081d0:	8080000b 	ldhu	r2,0(r16)
100081d4:	8c7fffc4 	addi	r17,r17,-1
100081d8:	817ffd04 	addi	r5,r16,-12
100081dc:	b080052e 	bgeu	r22,r2,100081f4 <_fwalk_reent+0x7c>
100081e0:	8080008f 	ldh	r2,2(r16)
100081e4:	9809883a 	mov	r4,r19
100081e8:	14800226 	beq	r2,r18,100081f4 <_fwalk_reent+0x7c>
100081ec:	a83ee83a 	callr	r21
100081f0:	b8aeb03a 	or	r23,r23,r2
100081f4:	84001a04 	addi	r16,r16,104
100081f8:	8cbff51e 	bne	r17,r18,100081d0 <__alt_data_end+0xf80081d0>
100081fc:	a5000017 	ldw	r20,0(r20)
10008200:	a03fee1e 	bne	r20,zero,100081bc <__alt_data_end+0xf80081bc>
10008204:	b805883a 	mov	r2,r23
10008208:	dfc00817 	ldw	ra,32(sp)
1000820c:	ddc00717 	ldw	r23,28(sp)
10008210:	dd800617 	ldw	r22,24(sp)
10008214:	dd400517 	ldw	r21,20(sp)
10008218:	dd000417 	ldw	r20,16(sp)
1000821c:	dcc00317 	ldw	r19,12(sp)
10008220:	dc800217 	ldw	r18,8(sp)
10008224:	dc400117 	ldw	r17,4(sp)
10008228:	dc000017 	ldw	r16,0(sp)
1000822c:	dec00904 	addi	sp,sp,36
10008230:	f800283a 	ret
10008234:	002f883a 	mov	r23,zero
10008238:	003ff206 	br	10008204 <__alt_data_end+0xf8008204>

1000823c <_setlocale_r>:
1000823c:	30001b26 	beq	r6,zero,100082ac <_setlocale_r+0x70>
10008240:	01440074 	movhi	r5,4097
10008244:	defffe04 	addi	sp,sp,-8
10008248:	294c5804 	addi	r5,r5,12640
1000824c:	3009883a 	mov	r4,r6
10008250:	dc000015 	stw	r16,0(sp)
10008254:	dfc00115 	stw	ra,4(sp)
10008258:	3021883a 	mov	r16,r6
1000825c:	000a9b00 	call	1000a9b0 <strcmp>
10008260:	1000061e 	bne	r2,zero,1000827c <_setlocale_r+0x40>
10008264:	00840074 	movhi	r2,4097
10008268:	108c5704 	addi	r2,r2,12636
1000826c:	dfc00117 	ldw	ra,4(sp)
10008270:	dc000017 	ldw	r16,0(sp)
10008274:	dec00204 	addi	sp,sp,8
10008278:	f800283a 	ret
1000827c:	01440074 	movhi	r5,4097
10008280:	294c5704 	addi	r5,r5,12636
10008284:	8009883a 	mov	r4,r16
10008288:	000a9b00 	call	1000a9b0 <strcmp>
1000828c:	103ff526 	beq	r2,zero,10008264 <__alt_data_end+0xf8008264>
10008290:	01440074 	movhi	r5,4097
10008294:	294c4204 	addi	r5,r5,12552
10008298:	8009883a 	mov	r4,r16
1000829c:	000a9b00 	call	1000a9b0 <strcmp>
100082a0:	103ff026 	beq	r2,zero,10008264 <__alt_data_end+0xf8008264>
100082a4:	0005883a 	mov	r2,zero
100082a8:	003ff006 	br	1000826c <__alt_data_end+0xf800826c>
100082ac:	00840074 	movhi	r2,4097
100082b0:	108c5704 	addi	r2,r2,12636
100082b4:	f800283a 	ret

100082b8 <__locale_charset>:
100082b8:	00840074 	movhi	r2,4097
100082bc:	108e0a04 	addi	r2,r2,14376
100082c0:	f800283a 	ret

100082c4 <__locale_mb_cur_max>:
100082c4:	00840074 	movhi	r2,4097
100082c8:	1093a604 	addi	r2,r2,20120
100082cc:	10800017 	ldw	r2,0(r2)
100082d0:	f800283a 	ret

100082d4 <__locale_msgcharset>:
100082d4:	00840074 	movhi	r2,4097
100082d8:	108e0204 	addi	r2,r2,14344
100082dc:	f800283a 	ret

100082e0 <__locale_cjk_lang>:
100082e0:	0005883a 	mov	r2,zero
100082e4:	f800283a 	ret

100082e8 <_localeconv_r>:
100082e8:	00840074 	movhi	r2,4097
100082ec:	108e1204 	addi	r2,r2,14408
100082f0:	f800283a 	ret

100082f4 <setlocale>:
100082f4:	00840074 	movhi	r2,4097
100082f8:	1093a504 	addi	r2,r2,20116
100082fc:	280d883a 	mov	r6,r5
10008300:	200b883a 	mov	r5,r4
10008304:	11000017 	ldw	r4,0(r2)
10008308:	000823c1 	jmpi	1000823c <_setlocale_r>

1000830c <localeconv>:
1000830c:	00840074 	movhi	r2,4097
10008310:	108e1204 	addi	r2,r2,14408
10008314:	f800283a 	ret

10008318 <__smakebuf_r>:
10008318:	2880030b 	ldhu	r2,12(r5)
1000831c:	10c0008c 	andi	r3,r2,2
10008320:	1800411e 	bne	r3,zero,10008428 <__smakebuf_r+0x110>
10008324:	deffec04 	addi	sp,sp,-80
10008328:	dc000f15 	stw	r16,60(sp)
1000832c:	2821883a 	mov	r16,r5
10008330:	2940038f 	ldh	r5,14(r5)
10008334:	dc401015 	stw	r17,64(sp)
10008338:	dfc01315 	stw	ra,76(sp)
1000833c:	dcc01215 	stw	r19,72(sp)
10008340:	dc801115 	stw	r18,68(sp)
10008344:	2023883a 	mov	r17,r4
10008348:	28001c16 	blt	r5,zero,100083bc <__smakebuf_r+0xa4>
1000834c:	d80d883a 	mov	r6,sp
10008350:	000c6200 	call	1000c620 <_fstat_r>
10008354:	10001816 	blt	r2,zero,100083b8 <__smakebuf_r+0xa0>
10008358:	d8800117 	ldw	r2,4(sp)
1000835c:	00e00014 	movui	r3,32768
10008360:	10bc000c 	andi	r2,r2,61440
10008364:	14c80020 	cmpeqi	r19,r2,8192
10008368:	10c03726 	beq	r2,r3,10008448 <__smakebuf_r+0x130>
1000836c:	80c0030b 	ldhu	r3,12(r16)
10008370:	18c20014 	ori	r3,r3,2048
10008374:	80c0030d 	sth	r3,12(r16)
10008378:	00c80004 	movi	r3,8192
1000837c:	10c0521e 	bne	r2,r3,100084c8 <__smakebuf_r+0x1b0>
10008380:	8140038f 	ldh	r5,14(r16)
10008384:	8809883a 	mov	r4,r17
10008388:	000c67c0 	call	1000c67c <_isatty_r>
1000838c:	10004c26 	beq	r2,zero,100084c0 <__smakebuf_r+0x1a8>
10008390:	8080030b 	ldhu	r2,12(r16)
10008394:	80c010c4 	addi	r3,r16,67
10008398:	80c00015 	stw	r3,0(r16)
1000839c:	10800054 	ori	r2,r2,1
100083a0:	8080030d 	sth	r2,12(r16)
100083a4:	00800044 	movi	r2,1
100083a8:	80c00415 	stw	r3,16(r16)
100083ac:	80800515 	stw	r2,20(r16)
100083b0:	04810004 	movi	r18,1024
100083b4:	00000706 	br	100083d4 <__smakebuf_r+0xbc>
100083b8:	8080030b 	ldhu	r2,12(r16)
100083bc:	10c0200c 	andi	r3,r2,128
100083c0:	18001f1e 	bne	r3,zero,10008440 <__smakebuf_r+0x128>
100083c4:	04810004 	movi	r18,1024
100083c8:	10820014 	ori	r2,r2,2048
100083cc:	8080030d 	sth	r2,12(r16)
100083d0:	0027883a 	mov	r19,zero
100083d4:	900b883a 	mov	r5,r18
100083d8:	8809883a 	mov	r4,r17
100083dc:	00084d40 	call	100084d4 <_malloc_r>
100083e0:	10002c26 	beq	r2,zero,10008494 <__smakebuf_r+0x17c>
100083e4:	80c0030b 	ldhu	r3,12(r16)
100083e8:	01040034 	movhi	r4,4096
100083ec:	211d0404 	addi	r4,r4,29712
100083f0:	89000f15 	stw	r4,60(r17)
100083f4:	18c02014 	ori	r3,r3,128
100083f8:	80c0030d 	sth	r3,12(r16)
100083fc:	80800015 	stw	r2,0(r16)
10008400:	80800415 	stw	r2,16(r16)
10008404:	84800515 	stw	r18,20(r16)
10008408:	98001a1e 	bne	r19,zero,10008474 <__smakebuf_r+0x15c>
1000840c:	dfc01317 	ldw	ra,76(sp)
10008410:	dcc01217 	ldw	r19,72(sp)
10008414:	dc801117 	ldw	r18,68(sp)
10008418:	dc401017 	ldw	r17,64(sp)
1000841c:	dc000f17 	ldw	r16,60(sp)
10008420:	dec01404 	addi	sp,sp,80
10008424:	f800283a 	ret
10008428:	288010c4 	addi	r2,r5,67
1000842c:	28800015 	stw	r2,0(r5)
10008430:	28800415 	stw	r2,16(r5)
10008434:	00800044 	movi	r2,1
10008438:	28800515 	stw	r2,20(r5)
1000843c:	f800283a 	ret
10008440:	04801004 	movi	r18,64
10008444:	003fe006 	br	100083c8 <__alt_data_end+0xf80083c8>
10008448:	81000a17 	ldw	r4,40(r16)
1000844c:	00c40074 	movhi	r3,4097
10008450:	18ea5304 	addi	r3,r3,-22196
10008454:	20ffc51e 	bne	r4,r3,1000836c <__alt_data_end+0xf800836c>
10008458:	8080030b 	ldhu	r2,12(r16)
1000845c:	04810004 	movi	r18,1024
10008460:	84801315 	stw	r18,76(r16)
10008464:	1484b03a 	or	r2,r2,r18
10008468:	8080030d 	sth	r2,12(r16)
1000846c:	0027883a 	mov	r19,zero
10008470:	003fd806 	br	100083d4 <__alt_data_end+0xf80083d4>
10008474:	8140038f 	ldh	r5,14(r16)
10008478:	8809883a 	mov	r4,r17
1000847c:	000c67c0 	call	1000c67c <_isatty_r>
10008480:	103fe226 	beq	r2,zero,1000840c <__alt_data_end+0xf800840c>
10008484:	8080030b 	ldhu	r2,12(r16)
10008488:	10800054 	ori	r2,r2,1
1000848c:	8080030d 	sth	r2,12(r16)
10008490:	003fde06 	br	1000840c <__alt_data_end+0xf800840c>
10008494:	8080030b 	ldhu	r2,12(r16)
10008498:	10c0800c 	andi	r3,r2,512
1000849c:	183fdb1e 	bne	r3,zero,1000840c <__alt_data_end+0xf800840c>
100084a0:	10800094 	ori	r2,r2,2
100084a4:	80c010c4 	addi	r3,r16,67
100084a8:	8080030d 	sth	r2,12(r16)
100084ac:	00800044 	movi	r2,1
100084b0:	80c00015 	stw	r3,0(r16)
100084b4:	80c00415 	stw	r3,16(r16)
100084b8:	80800515 	stw	r2,20(r16)
100084bc:	003fd306 	br	1000840c <__alt_data_end+0xf800840c>
100084c0:	04810004 	movi	r18,1024
100084c4:	003fc306 	br	100083d4 <__alt_data_end+0xf80083d4>
100084c8:	0027883a 	mov	r19,zero
100084cc:	04810004 	movi	r18,1024
100084d0:	003fc006 	br	100083d4 <__alt_data_end+0xf80083d4>

100084d4 <_malloc_r>:
100084d4:	defff504 	addi	sp,sp,-44
100084d8:	dc800315 	stw	r18,12(sp)
100084dc:	dfc00a15 	stw	ra,40(sp)
100084e0:	df000915 	stw	fp,36(sp)
100084e4:	ddc00815 	stw	r23,32(sp)
100084e8:	dd800715 	stw	r22,28(sp)
100084ec:	dd400615 	stw	r21,24(sp)
100084f0:	dd000515 	stw	r20,20(sp)
100084f4:	dcc00415 	stw	r19,16(sp)
100084f8:	dc400215 	stw	r17,8(sp)
100084fc:	dc000115 	stw	r16,4(sp)
10008500:	288002c4 	addi	r2,r5,11
10008504:	00c00584 	movi	r3,22
10008508:	2025883a 	mov	r18,r4
1000850c:	18807f2e 	bgeu	r3,r2,1000870c <_malloc_r+0x238>
10008510:	047ffe04 	movi	r17,-8
10008514:	1462703a 	and	r17,r2,r17
10008518:	8800a316 	blt	r17,zero,100087a8 <_malloc_r+0x2d4>
1000851c:	8940a236 	bltu	r17,r5,100087a8 <_malloc_r+0x2d4>
10008520:	00106ac0 	call	100106ac <__malloc_lock>
10008524:	00807dc4 	movi	r2,503
10008528:	1441e92e 	bgeu	r2,r17,10008cd0 <_malloc_r+0x7fc>
1000852c:	8804d27a 	srli	r2,r17,9
10008530:	1000a126 	beq	r2,zero,100087b8 <_malloc_r+0x2e4>
10008534:	00c00104 	movi	r3,4
10008538:	18811e36 	bltu	r3,r2,100089b4 <_malloc_r+0x4e0>
1000853c:	8804d1ba 	srli	r2,r17,6
10008540:	12000e44 	addi	r8,r2,57
10008544:	11c00e04 	addi	r7,r2,56
10008548:	4209883a 	add	r4,r8,r8
1000854c:	04c40074 	movhi	r19,4097
10008550:	2109883a 	add	r4,r4,r4
10008554:	9cce2004 	addi	r19,r19,14464
10008558:	2109883a 	add	r4,r4,r4
1000855c:	9909883a 	add	r4,r19,r4
10008560:	24000117 	ldw	r16,4(r4)
10008564:	213ffe04 	addi	r4,r4,-8
10008568:	24009726 	beq	r4,r16,100087c8 <_malloc_r+0x2f4>
1000856c:	80800117 	ldw	r2,4(r16)
10008570:	01bfff04 	movi	r6,-4
10008574:	014003c4 	movi	r5,15
10008578:	1184703a 	and	r2,r2,r6
1000857c:	1447c83a 	sub	r3,r2,r17
10008580:	28c00716 	blt	r5,r3,100085a0 <_malloc_r+0xcc>
10008584:	1800920e 	bge	r3,zero,100087d0 <_malloc_r+0x2fc>
10008588:	84000317 	ldw	r16,12(r16)
1000858c:	24008e26 	beq	r4,r16,100087c8 <_malloc_r+0x2f4>
10008590:	80800117 	ldw	r2,4(r16)
10008594:	1184703a 	and	r2,r2,r6
10008598:	1447c83a 	sub	r3,r2,r17
1000859c:	28fff90e 	bge	r5,r3,10008584 <__alt_data_end+0xf8008584>
100085a0:	3809883a 	mov	r4,r7
100085a4:	01840074 	movhi	r6,4097
100085a8:	9c000417 	ldw	r16,16(r19)
100085ac:	318e2004 	addi	r6,r6,14464
100085b0:	32000204 	addi	r8,r6,8
100085b4:	82013426 	beq	r16,r8,10008a88 <_malloc_r+0x5b4>
100085b8:	80c00117 	ldw	r3,4(r16)
100085bc:	00bfff04 	movi	r2,-4
100085c0:	188e703a 	and	r7,r3,r2
100085c4:	3c45c83a 	sub	r2,r7,r17
100085c8:	00c003c4 	movi	r3,15
100085cc:	18811f16 	blt	r3,r2,10008a4c <_malloc_r+0x578>
100085d0:	32000515 	stw	r8,20(r6)
100085d4:	32000415 	stw	r8,16(r6)
100085d8:	10007f0e 	bge	r2,zero,100087d8 <_malloc_r+0x304>
100085dc:	00807fc4 	movi	r2,511
100085e0:	11c0fd36 	bltu	r2,r7,100089d8 <_malloc_r+0x504>
100085e4:	3806d0fa 	srli	r3,r7,3
100085e8:	01c00044 	movi	r7,1
100085ec:	30800117 	ldw	r2,4(r6)
100085f0:	19400044 	addi	r5,r3,1
100085f4:	294b883a 	add	r5,r5,r5
100085f8:	1807d0ba 	srai	r3,r3,2
100085fc:	294b883a 	add	r5,r5,r5
10008600:	294b883a 	add	r5,r5,r5
10008604:	298b883a 	add	r5,r5,r6
10008608:	38c6983a 	sll	r3,r7,r3
1000860c:	29c00017 	ldw	r7,0(r5)
10008610:	2a7ffe04 	addi	r9,r5,-8
10008614:	1886b03a 	or	r3,r3,r2
10008618:	82400315 	stw	r9,12(r16)
1000861c:	81c00215 	stw	r7,8(r16)
10008620:	30c00115 	stw	r3,4(r6)
10008624:	2c000015 	stw	r16,0(r5)
10008628:	3c000315 	stw	r16,12(r7)
1000862c:	2005d0ba 	srai	r2,r4,2
10008630:	01400044 	movi	r5,1
10008634:	288a983a 	sll	r5,r5,r2
10008638:	19406f36 	bltu	r3,r5,100087f8 <_malloc_r+0x324>
1000863c:	28c4703a 	and	r2,r5,r3
10008640:	10000a1e 	bne	r2,zero,1000866c <_malloc_r+0x198>
10008644:	00bfff04 	movi	r2,-4
10008648:	294b883a 	add	r5,r5,r5
1000864c:	2088703a 	and	r4,r4,r2
10008650:	28c4703a 	and	r2,r5,r3
10008654:	21000104 	addi	r4,r4,4
10008658:	1000041e 	bne	r2,zero,1000866c <_malloc_r+0x198>
1000865c:	294b883a 	add	r5,r5,r5
10008660:	28c4703a 	and	r2,r5,r3
10008664:	21000104 	addi	r4,r4,4
10008668:	103ffc26 	beq	r2,zero,1000865c <__alt_data_end+0xf800865c>
1000866c:	02bfff04 	movi	r10,-4
10008670:	024003c4 	movi	r9,15
10008674:	21800044 	addi	r6,r4,1
10008678:	318d883a 	add	r6,r6,r6
1000867c:	318d883a 	add	r6,r6,r6
10008680:	318d883a 	add	r6,r6,r6
10008684:	998d883a 	add	r6,r19,r6
10008688:	333ffe04 	addi	r12,r6,-8
1000868c:	2017883a 	mov	r11,r4
10008690:	31800104 	addi	r6,r6,4
10008694:	34000017 	ldw	r16,0(r6)
10008698:	31fffd04 	addi	r7,r6,-12
1000869c:	81c0041e 	bne	r16,r7,100086b0 <_malloc_r+0x1dc>
100086a0:	0000fb06 	br	10008a90 <_malloc_r+0x5bc>
100086a4:	1801030e 	bge	r3,zero,10008ab4 <_malloc_r+0x5e0>
100086a8:	84000317 	ldw	r16,12(r16)
100086ac:	81c0f826 	beq	r16,r7,10008a90 <_malloc_r+0x5bc>
100086b0:	80800117 	ldw	r2,4(r16)
100086b4:	1284703a 	and	r2,r2,r10
100086b8:	1447c83a 	sub	r3,r2,r17
100086bc:	48fff90e 	bge	r9,r3,100086a4 <__alt_data_end+0xf80086a4>
100086c0:	80800317 	ldw	r2,12(r16)
100086c4:	81000217 	ldw	r4,8(r16)
100086c8:	89400054 	ori	r5,r17,1
100086cc:	81400115 	stw	r5,4(r16)
100086d0:	20800315 	stw	r2,12(r4)
100086d4:	11000215 	stw	r4,8(r2)
100086d8:	8463883a 	add	r17,r16,r17
100086dc:	9c400515 	stw	r17,20(r19)
100086e0:	9c400415 	stw	r17,16(r19)
100086e4:	18800054 	ori	r2,r3,1
100086e8:	88800115 	stw	r2,4(r17)
100086ec:	8a000315 	stw	r8,12(r17)
100086f0:	8a000215 	stw	r8,8(r17)
100086f4:	88e3883a 	add	r17,r17,r3
100086f8:	88c00015 	stw	r3,0(r17)
100086fc:	9009883a 	mov	r4,r18
10008700:	00106d00 	call	100106d0 <__malloc_unlock>
10008704:	80800204 	addi	r2,r16,8
10008708:	00001b06 	br	10008778 <_malloc_r+0x2a4>
1000870c:	04400404 	movi	r17,16
10008710:	89402536 	bltu	r17,r5,100087a8 <_malloc_r+0x2d4>
10008714:	00106ac0 	call	100106ac <__malloc_lock>
10008718:	00800184 	movi	r2,6
1000871c:	01000084 	movi	r4,2
10008720:	04c40074 	movhi	r19,4097
10008724:	1085883a 	add	r2,r2,r2
10008728:	9cce2004 	addi	r19,r19,14464
1000872c:	1085883a 	add	r2,r2,r2
10008730:	9885883a 	add	r2,r19,r2
10008734:	14000117 	ldw	r16,4(r2)
10008738:	10fffe04 	addi	r3,r2,-8
1000873c:	80c0d926 	beq	r16,r3,10008aa4 <_malloc_r+0x5d0>
10008740:	80c00117 	ldw	r3,4(r16)
10008744:	81000317 	ldw	r4,12(r16)
10008748:	00bfff04 	movi	r2,-4
1000874c:	1884703a 	and	r2,r3,r2
10008750:	81400217 	ldw	r5,8(r16)
10008754:	8085883a 	add	r2,r16,r2
10008758:	10c00117 	ldw	r3,4(r2)
1000875c:	29000315 	stw	r4,12(r5)
10008760:	21400215 	stw	r5,8(r4)
10008764:	18c00054 	ori	r3,r3,1
10008768:	10c00115 	stw	r3,4(r2)
1000876c:	9009883a 	mov	r4,r18
10008770:	00106d00 	call	100106d0 <__malloc_unlock>
10008774:	80800204 	addi	r2,r16,8
10008778:	dfc00a17 	ldw	ra,40(sp)
1000877c:	df000917 	ldw	fp,36(sp)
10008780:	ddc00817 	ldw	r23,32(sp)
10008784:	dd800717 	ldw	r22,28(sp)
10008788:	dd400617 	ldw	r21,24(sp)
1000878c:	dd000517 	ldw	r20,20(sp)
10008790:	dcc00417 	ldw	r19,16(sp)
10008794:	dc800317 	ldw	r18,12(sp)
10008798:	dc400217 	ldw	r17,8(sp)
1000879c:	dc000117 	ldw	r16,4(sp)
100087a0:	dec00b04 	addi	sp,sp,44
100087a4:	f800283a 	ret
100087a8:	00800304 	movi	r2,12
100087ac:	90800015 	stw	r2,0(r18)
100087b0:	0005883a 	mov	r2,zero
100087b4:	003ff006 	br	10008778 <__alt_data_end+0xf8008778>
100087b8:	01002004 	movi	r4,128
100087bc:	02001004 	movi	r8,64
100087c0:	01c00fc4 	movi	r7,63
100087c4:	003f6106 	br	1000854c <__alt_data_end+0xf800854c>
100087c8:	4009883a 	mov	r4,r8
100087cc:	003f7506 	br	100085a4 <__alt_data_end+0xf80085a4>
100087d0:	81000317 	ldw	r4,12(r16)
100087d4:	003fde06 	br	10008750 <__alt_data_end+0xf8008750>
100087d8:	81c5883a 	add	r2,r16,r7
100087dc:	11400117 	ldw	r5,4(r2)
100087e0:	9009883a 	mov	r4,r18
100087e4:	29400054 	ori	r5,r5,1
100087e8:	11400115 	stw	r5,4(r2)
100087ec:	00106d00 	call	100106d0 <__malloc_unlock>
100087f0:	80800204 	addi	r2,r16,8
100087f4:	003fe006 	br	10008778 <__alt_data_end+0xf8008778>
100087f8:	9c000217 	ldw	r16,8(r19)
100087fc:	00bfff04 	movi	r2,-4
10008800:	85800117 	ldw	r22,4(r16)
10008804:	b0ac703a 	and	r22,r22,r2
10008808:	b4400336 	bltu	r22,r17,10008818 <_malloc_r+0x344>
1000880c:	b445c83a 	sub	r2,r22,r17
10008810:	00c003c4 	movi	r3,15
10008814:	18805d16 	blt	r3,r2,1000898c <_malloc_r+0x4b8>
10008818:	05c40074 	movhi	r23,4097
1000881c:	00840074 	movhi	r2,4097
10008820:	109a7504 	addi	r2,r2,27092
10008824:	bdd3a704 	addi	r23,r23,20124
10008828:	15400017 	ldw	r21,0(r2)
1000882c:	b8c00017 	ldw	r3,0(r23)
10008830:	00bfffc4 	movi	r2,-1
10008834:	858d883a 	add	r6,r16,r22
10008838:	8d6b883a 	add	r21,r17,r21
1000883c:	1880ea26 	beq	r3,r2,10008be8 <_malloc_r+0x714>
10008840:	ad4403c4 	addi	r21,r21,4111
10008844:	00bc0004 	movi	r2,-4096
10008848:	a8aa703a 	and	r21,r21,r2
1000884c:	a80b883a 	mov	r5,r21
10008850:	9009883a 	mov	r4,r18
10008854:	d9800015 	stw	r6,0(sp)
10008858:	000a8200 	call	1000a820 <_sbrk_r>
1000885c:	1029883a 	mov	r20,r2
10008860:	00bfffc4 	movi	r2,-1
10008864:	d9800017 	ldw	r6,0(sp)
10008868:	a080e826 	beq	r20,r2,10008c0c <_malloc_r+0x738>
1000886c:	a180a636 	bltu	r20,r6,10008b08 <_malloc_r+0x634>
10008870:	07040074 	movhi	fp,4097
10008874:	e71a7e04 	addi	fp,fp,27128
10008878:	e0800017 	ldw	r2,0(fp)
1000887c:	a887883a 	add	r3,r21,r2
10008880:	e0c00015 	stw	r3,0(fp)
10008884:	3500e626 	beq	r6,r20,10008c20 <_malloc_r+0x74c>
10008888:	b9000017 	ldw	r4,0(r23)
1000888c:	00bfffc4 	movi	r2,-1
10008890:	2080ee26 	beq	r4,r2,10008c4c <_malloc_r+0x778>
10008894:	a185c83a 	sub	r2,r20,r6
10008898:	10c5883a 	add	r2,r2,r3
1000889c:	e0800015 	stw	r2,0(fp)
100088a0:	a0c001cc 	andi	r3,r20,7
100088a4:	1800bc26 	beq	r3,zero,10008b98 <_malloc_r+0x6c4>
100088a8:	a0e9c83a 	sub	r20,r20,r3
100088ac:	00840204 	movi	r2,4104
100088b0:	a5000204 	addi	r20,r20,8
100088b4:	10c7c83a 	sub	r3,r2,r3
100088b8:	a545883a 	add	r2,r20,r21
100088bc:	1083ffcc 	andi	r2,r2,4095
100088c0:	18abc83a 	sub	r21,r3,r2
100088c4:	a80b883a 	mov	r5,r21
100088c8:	9009883a 	mov	r4,r18
100088cc:	000a8200 	call	1000a820 <_sbrk_r>
100088d0:	00ffffc4 	movi	r3,-1
100088d4:	10c0e126 	beq	r2,r3,10008c5c <_malloc_r+0x788>
100088d8:	1505c83a 	sub	r2,r2,r20
100088dc:	1545883a 	add	r2,r2,r21
100088e0:	10800054 	ori	r2,r2,1
100088e4:	e0c00017 	ldw	r3,0(fp)
100088e8:	9d000215 	stw	r20,8(r19)
100088ec:	a0800115 	stw	r2,4(r20)
100088f0:	a8c7883a 	add	r3,r21,r3
100088f4:	e0c00015 	stw	r3,0(fp)
100088f8:	84c00e26 	beq	r16,r19,10008934 <_malloc_r+0x460>
100088fc:	018003c4 	movi	r6,15
10008900:	3580a72e 	bgeu	r6,r22,10008ba0 <_malloc_r+0x6cc>
10008904:	81400117 	ldw	r5,4(r16)
10008908:	013ffe04 	movi	r4,-8
1000890c:	b0bffd04 	addi	r2,r22,-12
10008910:	1104703a 	and	r2,r2,r4
10008914:	2900004c 	andi	r4,r5,1
10008918:	2088b03a 	or	r4,r4,r2
1000891c:	81000115 	stw	r4,4(r16)
10008920:	01400144 	movi	r5,5
10008924:	8089883a 	add	r4,r16,r2
10008928:	21400115 	stw	r5,4(r4)
1000892c:	21400215 	stw	r5,8(r4)
10008930:	3080cd36 	bltu	r6,r2,10008c68 <_malloc_r+0x794>
10008934:	00840074 	movhi	r2,4097
10008938:	109a7404 	addi	r2,r2,27088
1000893c:	11000017 	ldw	r4,0(r2)
10008940:	20c0012e 	bgeu	r4,r3,10008948 <_malloc_r+0x474>
10008944:	10c00015 	stw	r3,0(r2)
10008948:	00840074 	movhi	r2,4097
1000894c:	109a7304 	addi	r2,r2,27084
10008950:	11000017 	ldw	r4,0(r2)
10008954:	9c000217 	ldw	r16,8(r19)
10008958:	20c0012e 	bgeu	r4,r3,10008960 <_malloc_r+0x48c>
1000895c:	10c00015 	stw	r3,0(r2)
10008960:	80c00117 	ldw	r3,4(r16)
10008964:	00bfff04 	movi	r2,-4
10008968:	1886703a 	and	r3,r3,r2
1000896c:	1c45c83a 	sub	r2,r3,r17
10008970:	1c400236 	bltu	r3,r17,1000897c <_malloc_r+0x4a8>
10008974:	00c003c4 	movi	r3,15
10008978:	18800416 	blt	r3,r2,1000898c <_malloc_r+0x4b8>
1000897c:	9009883a 	mov	r4,r18
10008980:	00106d00 	call	100106d0 <__malloc_unlock>
10008984:	0005883a 	mov	r2,zero
10008988:	003f7b06 	br	10008778 <__alt_data_end+0xf8008778>
1000898c:	88c00054 	ori	r3,r17,1
10008990:	80c00115 	stw	r3,4(r16)
10008994:	8463883a 	add	r17,r16,r17
10008998:	10800054 	ori	r2,r2,1
1000899c:	9c400215 	stw	r17,8(r19)
100089a0:	88800115 	stw	r2,4(r17)
100089a4:	9009883a 	mov	r4,r18
100089a8:	00106d00 	call	100106d0 <__malloc_unlock>
100089ac:	80800204 	addi	r2,r16,8
100089b0:	003f7106 	br	10008778 <__alt_data_end+0xf8008778>
100089b4:	00c00504 	movi	r3,20
100089b8:	18804a2e 	bgeu	r3,r2,10008ae4 <_malloc_r+0x610>
100089bc:	00c01504 	movi	r3,84
100089c0:	18806e36 	bltu	r3,r2,10008b7c <_malloc_r+0x6a8>
100089c4:	8804d33a 	srli	r2,r17,12
100089c8:	12001bc4 	addi	r8,r2,111
100089cc:	11c01b84 	addi	r7,r2,110
100089d0:	4209883a 	add	r4,r8,r8
100089d4:	003edd06 	br	1000854c <__alt_data_end+0xf800854c>
100089d8:	3804d27a 	srli	r2,r7,9
100089dc:	00c00104 	movi	r3,4
100089e0:	1880442e 	bgeu	r3,r2,10008af4 <_malloc_r+0x620>
100089e4:	00c00504 	movi	r3,20
100089e8:	18808136 	bltu	r3,r2,10008bf0 <_malloc_r+0x71c>
100089ec:	11401704 	addi	r5,r2,92
100089f0:	10c016c4 	addi	r3,r2,91
100089f4:	294b883a 	add	r5,r5,r5
100089f8:	294b883a 	add	r5,r5,r5
100089fc:	294b883a 	add	r5,r5,r5
10008a00:	994b883a 	add	r5,r19,r5
10008a04:	28800017 	ldw	r2,0(r5)
10008a08:	01840074 	movhi	r6,4097
10008a0c:	297ffe04 	addi	r5,r5,-8
10008a10:	318e2004 	addi	r6,r6,14464
10008a14:	28806526 	beq	r5,r2,10008bac <_malloc_r+0x6d8>
10008a18:	01bfff04 	movi	r6,-4
10008a1c:	10c00117 	ldw	r3,4(r2)
10008a20:	1986703a 	and	r3,r3,r6
10008a24:	38c0022e 	bgeu	r7,r3,10008a30 <_malloc_r+0x55c>
10008a28:	10800217 	ldw	r2,8(r2)
10008a2c:	28bffb1e 	bne	r5,r2,10008a1c <__alt_data_end+0xf8008a1c>
10008a30:	11400317 	ldw	r5,12(r2)
10008a34:	98c00117 	ldw	r3,4(r19)
10008a38:	81400315 	stw	r5,12(r16)
10008a3c:	80800215 	stw	r2,8(r16)
10008a40:	2c000215 	stw	r16,8(r5)
10008a44:	14000315 	stw	r16,12(r2)
10008a48:	003ef806 	br	1000862c <__alt_data_end+0xf800862c>
10008a4c:	88c00054 	ori	r3,r17,1
10008a50:	80c00115 	stw	r3,4(r16)
10008a54:	8463883a 	add	r17,r16,r17
10008a58:	34400515 	stw	r17,20(r6)
10008a5c:	34400415 	stw	r17,16(r6)
10008a60:	10c00054 	ori	r3,r2,1
10008a64:	8a000315 	stw	r8,12(r17)
10008a68:	8a000215 	stw	r8,8(r17)
10008a6c:	88c00115 	stw	r3,4(r17)
10008a70:	88a3883a 	add	r17,r17,r2
10008a74:	88800015 	stw	r2,0(r17)
10008a78:	9009883a 	mov	r4,r18
10008a7c:	00106d00 	call	100106d0 <__malloc_unlock>
10008a80:	80800204 	addi	r2,r16,8
10008a84:	003f3c06 	br	10008778 <__alt_data_end+0xf8008778>
10008a88:	30c00117 	ldw	r3,4(r6)
10008a8c:	003ee706 	br	1000862c <__alt_data_end+0xf800862c>
10008a90:	5ac00044 	addi	r11,r11,1
10008a94:	588000cc 	andi	r2,r11,3
10008a98:	31800204 	addi	r6,r6,8
10008a9c:	103efd1e 	bne	r2,zero,10008694 <__alt_data_end+0xf8008694>
10008aa0:	00002406 	br	10008b34 <_malloc_r+0x660>
10008aa4:	14000317 	ldw	r16,12(r2)
10008aa8:	143f251e 	bne	r2,r16,10008740 <__alt_data_end+0xf8008740>
10008aac:	21000084 	addi	r4,r4,2
10008ab0:	003ebc06 	br	100085a4 <__alt_data_end+0xf80085a4>
10008ab4:	8085883a 	add	r2,r16,r2
10008ab8:	10c00117 	ldw	r3,4(r2)
10008abc:	81000317 	ldw	r4,12(r16)
10008ac0:	81400217 	ldw	r5,8(r16)
10008ac4:	18c00054 	ori	r3,r3,1
10008ac8:	10c00115 	stw	r3,4(r2)
10008acc:	29000315 	stw	r4,12(r5)
10008ad0:	21400215 	stw	r5,8(r4)
10008ad4:	9009883a 	mov	r4,r18
10008ad8:	00106d00 	call	100106d0 <__malloc_unlock>
10008adc:	80800204 	addi	r2,r16,8
10008ae0:	003f2506 	br	10008778 <__alt_data_end+0xf8008778>
10008ae4:	12001704 	addi	r8,r2,92
10008ae8:	11c016c4 	addi	r7,r2,91
10008aec:	4209883a 	add	r4,r8,r8
10008af0:	003e9606 	br	1000854c <__alt_data_end+0xf800854c>
10008af4:	3804d1ba 	srli	r2,r7,6
10008af8:	11400e44 	addi	r5,r2,57
10008afc:	10c00e04 	addi	r3,r2,56
10008b00:	294b883a 	add	r5,r5,r5
10008b04:	003fbc06 	br	100089f8 <__alt_data_end+0xf80089f8>
10008b08:	84ff5926 	beq	r16,r19,10008870 <__alt_data_end+0xf8008870>
10008b0c:	00840074 	movhi	r2,4097
10008b10:	108e2004 	addi	r2,r2,14464
10008b14:	14000217 	ldw	r16,8(r2)
10008b18:	00bfff04 	movi	r2,-4
10008b1c:	80c00117 	ldw	r3,4(r16)
10008b20:	1886703a 	and	r3,r3,r2
10008b24:	003f9106 	br	1000896c <__alt_data_end+0xf800896c>
10008b28:	60800217 	ldw	r2,8(r12)
10008b2c:	213fffc4 	addi	r4,r4,-1
10008b30:	1300651e 	bne	r2,r12,10008cc8 <_malloc_r+0x7f4>
10008b34:	208000cc 	andi	r2,r4,3
10008b38:	633ffe04 	addi	r12,r12,-8
10008b3c:	103ffa1e 	bne	r2,zero,10008b28 <__alt_data_end+0xf8008b28>
10008b40:	98800117 	ldw	r2,4(r19)
10008b44:	0146303a 	nor	r3,zero,r5
10008b48:	1884703a 	and	r2,r3,r2
10008b4c:	98800115 	stw	r2,4(r19)
10008b50:	294b883a 	add	r5,r5,r5
10008b54:	117f2836 	bltu	r2,r5,100087f8 <__alt_data_end+0xf80087f8>
10008b58:	283f2726 	beq	r5,zero,100087f8 <__alt_data_end+0xf80087f8>
10008b5c:	2886703a 	and	r3,r5,r2
10008b60:	5809883a 	mov	r4,r11
10008b64:	183ec31e 	bne	r3,zero,10008674 <__alt_data_end+0xf8008674>
10008b68:	294b883a 	add	r5,r5,r5
10008b6c:	2886703a 	and	r3,r5,r2
10008b70:	21000104 	addi	r4,r4,4
10008b74:	183ffc26 	beq	r3,zero,10008b68 <__alt_data_end+0xf8008b68>
10008b78:	003ebe06 	br	10008674 <__alt_data_end+0xf8008674>
10008b7c:	00c05504 	movi	r3,340
10008b80:	18801236 	bltu	r3,r2,10008bcc <_malloc_r+0x6f8>
10008b84:	8804d3fa 	srli	r2,r17,15
10008b88:	12001e04 	addi	r8,r2,120
10008b8c:	11c01dc4 	addi	r7,r2,119
10008b90:	4209883a 	add	r4,r8,r8
10008b94:	003e6d06 	br	1000854c <__alt_data_end+0xf800854c>
10008b98:	00c40004 	movi	r3,4096
10008b9c:	003f4606 	br	100088b8 <__alt_data_end+0xf80088b8>
10008ba0:	00800044 	movi	r2,1
10008ba4:	a0800115 	stw	r2,4(r20)
10008ba8:	003f7406 	br	1000897c <__alt_data_end+0xf800897c>
10008bac:	1805d0ba 	srai	r2,r3,2
10008bb0:	01c00044 	movi	r7,1
10008bb4:	30c00117 	ldw	r3,4(r6)
10008bb8:	388e983a 	sll	r7,r7,r2
10008bbc:	2805883a 	mov	r2,r5
10008bc0:	38c6b03a 	or	r3,r7,r3
10008bc4:	30c00115 	stw	r3,4(r6)
10008bc8:	003f9b06 	br	10008a38 <__alt_data_end+0xf8008a38>
10008bcc:	00c15504 	movi	r3,1364
10008bd0:	18801a36 	bltu	r3,r2,10008c3c <_malloc_r+0x768>
10008bd4:	8804d4ba 	srli	r2,r17,18
10008bd8:	12001f44 	addi	r8,r2,125
10008bdc:	11c01f04 	addi	r7,r2,124
10008be0:	4209883a 	add	r4,r8,r8
10008be4:	003e5906 	br	1000854c <__alt_data_end+0xf800854c>
10008be8:	ad400404 	addi	r21,r21,16
10008bec:	003f1706 	br	1000884c <__alt_data_end+0xf800884c>
10008bf0:	00c01504 	movi	r3,84
10008bf4:	18802336 	bltu	r3,r2,10008c84 <_malloc_r+0x7b0>
10008bf8:	3804d33a 	srli	r2,r7,12
10008bfc:	11401bc4 	addi	r5,r2,111
10008c00:	10c01b84 	addi	r3,r2,110
10008c04:	294b883a 	add	r5,r5,r5
10008c08:	003f7b06 	br	100089f8 <__alt_data_end+0xf80089f8>
10008c0c:	9c000217 	ldw	r16,8(r19)
10008c10:	00bfff04 	movi	r2,-4
10008c14:	80c00117 	ldw	r3,4(r16)
10008c18:	1886703a 	and	r3,r3,r2
10008c1c:	003f5306 	br	1000896c <__alt_data_end+0xf800896c>
10008c20:	3083ffcc 	andi	r2,r6,4095
10008c24:	103f181e 	bne	r2,zero,10008888 <__alt_data_end+0xf8008888>
10008c28:	99000217 	ldw	r4,8(r19)
10008c2c:	b545883a 	add	r2,r22,r21
10008c30:	10800054 	ori	r2,r2,1
10008c34:	20800115 	stw	r2,4(r4)
10008c38:	003f3e06 	br	10008934 <__alt_data_end+0xf8008934>
10008c3c:	01003f84 	movi	r4,254
10008c40:	02001fc4 	movi	r8,127
10008c44:	01c01f84 	movi	r7,126
10008c48:	003e4006 	br	1000854c <__alt_data_end+0xf800854c>
10008c4c:	00840074 	movhi	r2,4097
10008c50:	1093a704 	addi	r2,r2,20124
10008c54:	15000015 	stw	r20,0(r2)
10008c58:	003f1106 	br	100088a0 <__alt_data_end+0xf80088a0>
10008c5c:	00800044 	movi	r2,1
10008c60:	002b883a 	mov	r21,zero
10008c64:	003f1f06 	br	100088e4 <__alt_data_end+0xf80088e4>
10008c68:	81400204 	addi	r5,r16,8
10008c6c:	9009883a 	mov	r4,r18
10008c70:	00078dc0 	call	100078dc <_free_r>
10008c74:	00840074 	movhi	r2,4097
10008c78:	109a7e04 	addi	r2,r2,27128
10008c7c:	10c00017 	ldw	r3,0(r2)
10008c80:	003f2c06 	br	10008934 <__alt_data_end+0xf8008934>
10008c84:	00c05504 	movi	r3,340
10008c88:	18800536 	bltu	r3,r2,10008ca0 <_malloc_r+0x7cc>
10008c8c:	3804d3fa 	srli	r2,r7,15
10008c90:	11401e04 	addi	r5,r2,120
10008c94:	10c01dc4 	addi	r3,r2,119
10008c98:	294b883a 	add	r5,r5,r5
10008c9c:	003f5606 	br	100089f8 <__alt_data_end+0xf80089f8>
10008ca0:	00c15504 	movi	r3,1364
10008ca4:	18800536 	bltu	r3,r2,10008cbc <_malloc_r+0x7e8>
10008ca8:	3804d4ba 	srli	r2,r7,18
10008cac:	11401f44 	addi	r5,r2,125
10008cb0:	10c01f04 	addi	r3,r2,124
10008cb4:	294b883a 	add	r5,r5,r5
10008cb8:	003f4f06 	br	100089f8 <__alt_data_end+0xf80089f8>
10008cbc:	01403f84 	movi	r5,254
10008cc0:	00c01f84 	movi	r3,126
10008cc4:	003f4c06 	br	100089f8 <__alt_data_end+0xf80089f8>
10008cc8:	98800117 	ldw	r2,4(r19)
10008ccc:	003fa006 	br	10008b50 <__alt_data_end+0xf8008b50>
10008cd0:	8808d0fa 	srli	r4,r17,3
10008cd4:	20800044 	addi	r2,r4,1
10008cd8:	1085883a 	add	r2,r2,r2
10008cdc:	003e9006 	br	10008720 <__alt_data_end+0xf8008720>

10008ce0 <memchr>:
10008ce0:	208000cc 	andi	r2,r4,3
10008ce4:	280f883a 	mov	r7,r5
10008ce8:	10003426 	beq	r2,zero,10008dbc <memchr+0xdc>
10008cec:	30bfffc4 	addi	r2,r6,-1
10008cf0:	30001a26 	beq	r6,zero,10008d5c <memchr+0x7c>
10008cf4:	20c00003 	ldbu	r3,0(r4)
10008cf8:	29803fcc 	andi	r6,r5,255
10008cfc:	30c0051e 	bne	r6,r3,10008d14 <memchr+0x34>
10008d00:	00001806 	br	10008d64 <memchr+0x84>
10008d04:	10001526 	beq	r2,zero,10008d5c <memchr+0x7c>
10008d08:	20c00003 	ldbu	r3,0(r4)
10008d0c:	10bfffc4 	addi	r2,r2,-1
10008d10:	30c01426 	beq	r6,r3,10008d64 <memchr+0x84>
10008d14:	21000044 	addi	r4,r4,1
10008d18:	20c000cc 	andi	r3,r4,3
10008d1c:	183ff91e 	bne	r3,zero,10008d04 <__alt_data_end+0xf8008d04>
10008d20:	020000c4 	movi	r8,3
10008d24:	40801136 	bltu	r8,r2,10008d6c <memchr+0x8c>
10008d28:	10000c26 	beq	r2,zero,10008d5c <memchr+0x7c>
10008d2c:	20c00003 	ldbu	r3,0(r4)
10008d30:	29403fcc 	andi	r5,r5,255
10008d34:	28c00b26 	beq	r5,r3,10008d64 <memchr+0x84>
10008d38:	20c00044 	addi	r3,r4,1
10008d3c:	39803fcc 	andi	r6,r7,255
10008d40:	2089883a 	add	r4,r4,r2
10008d44:	00000306 	br	10008d54 <memchr+0x74>
10008d48:	18c00044 	addi	r3,r3,1
10008d4c:	197fffc3 	ldbu	r5,-1(r3)
10008d50:	31400526 	beq	r6,r5,10008d68 <memchr+0x88>
10008d54:	1805883a 	mov	r2,r3
10008d58:	20fffb1e 	bne	r4,r3,10008d48 <__alt_data_end+0xf8008d48>
10008d5c:	0005883a 	mov	r2,zero
10008d60:	f800283a 	ret
10008d64:	2005883a 	mov	r2,r4
10008d68:	f800283a 	ret
10008d6c:	28c03fcc 	andi	r3,r5,255
10008d70:	1812923a 	slli	r9,r3,8
10008d74:	02ffbff4 	movhi	r11,65279
10008d78:	02a02074 	movhi	r10,32897
10008d7c:	48d2b03a 	or	r9,r9,r3
10008d80:	4806943a 	slli	r3,r9,16
10008d84:	5affbfc4 	addi	r11,r11,-257
10008d88:	52a02004 	addi	r10,r10,-32640
10008d8c:	48d2b03a 	or	r9,r9,r3
10008d90:	20c00017 	ldw	r3,0(r4)
10008d94:	48c6f03a 	xor	r3,r9,r3
10008d98:	1acd883a 	add	r6,r3,r11
10008d9c:	00c6303a 	nor	r3,zero,r3
10008da0:	30c6703a 	and	r3,r6,r3
10008da4:	1a86703a 	and	r3,r3,r10
10008da8:	183fe01e 	bne	r3,zero,10008d2c <__alt_data_end+0xf8008d2c>
10008dac:	10bfff04 	addi	r2,r2,-4
10008db0:	21000104 	addi	r4,r4,4
10008db4:	40bff636 	bltu	r8,r2,10008d90 <__alt_data_end+0xf8008d90>
10008db8:	003fdb06 	br	10008d28 <__alt_data_end+0xf8008d28>
10008dbc:	3005883a 	mov	r2,r6
10008dc0:	003fd706 	br	10008d20 <__alt_data_end+0xf8008d20>

10008dc4 <memcpy>:
10008dc4:	defffd04 	addi	sp,sp,-12
10008dc8:	dfc00215 	stw	ra,8(sp)
10008dcc:	dc400115 	stw	r17,4(sp)
10008dd0:	dc000015 	stw	r16,0(sp)
10008dd4:	00c003c4 	movi	r3,15
10008dd8:	2005883a 	mov	r2,r4
10008ddc:	1980452e 	bgeu	r3,r6,10008ef4 <memcpy+0x130>
10008de0:	2906b03a 	or	r3,r5,r4
10008de4:	18c000cc 	andi	r3,r3,3
10008de8:	1800441e 	bne	r3,zero,10008efc <memcpy+0x138>
10008dec:	347ffc04 	addi	r17,r6,-16
10008df0:	8822d13a 	srli	r17,r17,4
10008df4:	28c00104 	addi	r3,r5,4
10008df8:	23400104 	addi	r13,r4,4
10008dfc:	8820913a 	slli	r16,r17,4
10008e00:	2b000204 	addi	r12,r5,8
10008e04:	22c00204 	addi	r11,r4,8
10008e08:	84000504 	addi	r16,r16,20
10008e0c:	2a800304 	addi	r10,r5,12
10008e10:	22400304 	addi	r9,r4,12
10008e14:	2c21883a 	add	r16,r5,r16
10008e18:	2811883a 	mov	r8,r5
10008e1c:	200f883a 	mov	r7,r4
10008e20:	41000017 	ldw	r4,0(r8)
10008e24:	1fc00017 	ldw	ra,0(r3)
10008e28:	63c00017 	ldw	r15,0(r12)
10008e2c:	39000015 	stw	r4,0(r7)
10008e30:	53800017 	ldw	r14,0(r10)
10008e34:	6fc00015 	stw	ra,0(r13)
10008e38:	5bc00015 	stw	r15,0(r11)
10008e3c:	4b800015 	stw	r14,0(r9)
10008e40:	18c00404 	addi	r3,r3,16
10008e44:	39c00404 	addi	r7,r7,16
10008e48:	42000404 	addi	r8,r8,16
10008e4c:	6b400404 	addi	r13,r13,16
10008e50:	63000404 	addi	r12,r12,16
10008e54:	5ac00404 	addi	r11,r11,16
10008e58:	52800404 	addi	r10,r10,16
10008e5c:	4a400404 	addi	r9,r9,16
10008e60:	1c3fef1e 	bne	r3,r16,10008e20 <__alt_data_end+0xf8008e20>
10008e64:	89c00044 	addi	r7,r17,1
10008e68:	380e913a 	slli	r7,r7,4
10008e6c:	310003cc 	andi	r4,r6,15
10008e70:	02c000c4 	movi	r11,3
10008e74:	11c7883a 	add	r3,r2,r7
10008e78:	29cb883a 	add	r5,r5,r7
10008e7c:	5900212e 	bgeu	r11,r4,10008f04 <memcpy+0x140>
10008e80:	1813883a 	mov	r9,r3
10008e84:	2811883a 	mov	r8,r5
10008e88:	200f883a 	mov	r7,r4
10008e8c:	42800017 	ldw	r10,0(r8)
10008e90:	4a400104 	addi	r9,r9,4
10008e94:	39ffff04 	addi	r7,r7,-4
10008e98:	4abfff15 	stw	r10,-4(r9)
10008e9c:	42000104 	addi	r8,r8,4
10008ea0:	59fffa36 	bltu	r11,r7,10008e8c <__alt_data_end+0xf8008e8c>
10008ea4:	213fff04 	addi	r4,r4,-4
10008ea8:	2008d0ba 	srli	r4,r4,2
10008eac:	318000cc 	andi	r6,r6,3
10008eb0:	21000044 	addi	r4,r4,1
10008eb4:	2109883a 	add	r4,r4,r4
10008eb8:	2109883a 	add	r4,r4,r4
10008ebc:	1907883a 	add	r3,r3,r4
10008ec0:	290b883a 	add	r5,r5,r4
10008ec4:	30000626 	beq	r6,zero,10008ee0 <memcpy+0x11c>
10008ec8:	198d883a 	add	r6,r3,r6
10008ecc:	29c00003 	ldbu	r7,0(r5)
10008ed0:	18c00044 	addi	r3,r3,1
10008ed4:	29400044 	addi	r5,r5,1
10008ed8:	19ffffc5 	stb	r7,-1(r3)
10008edc:	19bffb1e 	bne	r3,r6,10008ecc <__alt_data_end+0xf8008ecc>
10008ee0:	dfc00217 	ldw	ra,8(sp)
10008ee4:	dc400117 	ldw	r17,4(sp)
10008ee8:	dc000017 	ldw	r16,0(sp)
10008eec:	dec00304 	addi	sp,sp,12
10008ef0:	f800283a 	ret
10008ef4:	2007883a 	mov	r3,r4
10008ef8:	003ff206 	br	10008ec4 <__alt_data_end+0xf8008ec4>
10008efc:	2007883a 	mov	r3,r4
10008f00:	003ff106 	br	10008ec8 <__alt_data_end+0xf8008ec8>
10008f04:	200d883a 	mov	r6,r4
10008f08:	003fee06 	br	10008ec4 <__alt_data_end+0xf8008ec4>

10008f0c <memmove>:
10008f0c:	2005883a 	mov	r2,r4
10008f10:	29000b2e 	bgeu	r5,r4,10008f40 <memmove+0x34>
10008f14:	298f883a 	add	r7,r5,r6
10008f18:	21c0092e 	bgeu	r4,r7,10008f40 <memmove+0x34>
10008f1c:	2187883a 	add	r3,r4,r6
10008f20:	198bc83a 	sub	r5,r3,r6
10008f24:	30004826 	beq	r6,zero,10009048 <memmove+0x13c>
10008f28:	39ffffc4 	addi	r7,r7,-1
10008f2c:	39000003 	ldbu	r4,0(r7)
10008f30:	18ffffc4 	addi	r3,r3,-1
10008f34:	19000005 	stb	r4,0(r3)
10008f38:	28fffb1e 	bne	r5,r3,10008f28 <__alt_data_end+0xf8008f28>
10008f3c:	f800283a 	ret
10008f40:	00c003c4 	movi	r3,15
10008f44:	1980412e 	bgeu	r3,r6,1000904c <memmove+0x140>
10008f48:	2886b03a 	or	r3,r5,r2
10008f4c:	18c000cc 	andi	r3,r3,3
10008f50:	1800401e 	bne	r3,zero,10009054 <memmove+0x148>
10008f54:	33fffc04 	addi	r15,r6,-16
10008f58:	781ed13a 	srli	r15,r15,4
10008f5c:	28c00104 	addi	r3,r5,4
10008f60:	13400104 	addi	r13,r2,4
10008f64:	781c913a 	slli	r14,r15,4
10008f68:	2b000204 	addi	r12,r5,8
10008f6c:	12c00204 	addi	r11,r2,8
10008f70:	73800504 	addi	r14,r14,20
10008f74:	2a800304 	addi	r10,r5,12
10008f78:	12400304 	addi	r9,r2,12
10008f7c:	2b9d883a 	add	r14,r5,r14
10008f80:	2811883a 	mov	r8,r5
10008f84:	100f883a 	mov	r7,r2
10008f88:	41000017 	ldw	r4,0(r8)
10008f8c:	39c00404 	addi	r7,r7,16
10008f90:	18c00404 	addi	r3,r3,16
10008f94:	393ffc15 	stw	r4,-16(r7)
10008f98:	193ffc17 	ldw	r4,-16(r3)
10008f9c:	6b400404 	addi	r13,r13,16
10008fa0:	5ac00404 	addi	r11,r11,16
10008fa4:	693ffc15 	stw	r4,-16(r13)
10008fa8:	61000017 	ldw	r4,0(r12)
10008fac:	4a400404 	addi	r9,r9,16
10008fb0:	42000404 	addi	r8,r8,16
10008fb4:	593ffc15 	stw	r4,-16(r11)
10008fb8:	51000017 	ldw	r4,0(r10)
10008fbc:	63000404 	addi	r12,r12,16
10008fc0:	52800404 	addi	r10,r10,16
10008fc4:	493ffc15 	stw	r4,-16(r9)
10008fc8:	1bbfef1e 	bne	r3,r14,10008f88 <__alt_data_end+0xf8008f88>
10008fcc:	79000044 	addi	r4,r15,1
10008fd0:	2008913a 	slli	r4,r4,4
10008fd4:	328003cc 	andi	r10,r6,15
10008fd8:	02c000c4 	movi	r11,3
10008fdc:	1107883a 	add	r3,r2,r4
10008fe0:	290b883a 	add	r5,r5,r4
10008fe4:	5a801e2e 	bgeu	r11,r10,10009060 <memmove+0x154>
10008fe8:	1813883a 	mov	r9,r3
10008fec:	2811883a 	mov	r8,r5
10008ff0:	500f883a 	mov	r7,r10
10008ff4:	41000017 	ldw	r4,0(r8)
10008ff8:	4a400104 	addi	r9,r9,4
10008ffc:	39ffff04 	addi	r7,r7,-4
10009000:	493fff15 	stw	r4,-4(r9)
10009004:	42000104 	addi	r8,r8,4
10009008:	59fffa36 	bltu	r11,r7,10008ff4 <__alt_data_end+0xf8008ff4>
1000900c:	513fff04 	addi	r4,r10,-4
10009010:	2008d0ba 	srli	r4,r4,2
10009014:	318000cc 	andi	r6,r6,3
10009018:	21000044 	addi	r4,r4,1
1000901c:	2109883a 	add	r4,r4,r4
10009020:	2109883a 	add	r4,r4,r4
10009024:	1907883a 	add	r3,r3,r4
10009028:	290b883a 	add	r5,r5,r4
1000902c:	30000b26 	beq	r6,zero,1000905c <memmove+0x150>
10009030:	198d883a 	add	r6,r3,r6
10009034:	29c00003 	ldbu	r7,0(r5)
10009038:	18c00044 	addi	r3,r3,1
1000903c:	29400044 	addi	r5,r5,1
10009040:	19ffffc5 	stb	r7,-1(r3)
10009044:	19bffb1e 	bne	r3,r6,10009034 <__alt_data_end+0xf8009034>
10009048:	f800283a 	ret
1000904c:	1007883a 	mov	r3,r2
10009050:	003ff606 	br	1000902c <__alt_data_end+0xf800902c>
10009054:	1007883a 	mov	r3,r2
10009058:	003ff506 	br	10009030 <__alt_data_end+0xf8009030>
1000905c:	f800283a 	ret
10009060:	500d883a 	mov	r6,r10
10009064:	003ff106 	br	1000902c <__alt_data_end+0xf800902c>

10009068 <memset>:
10009068:	20c000cc 	andi	r3,r4,3
1000906c:	2005883a 	mov	r2,r4
10009070:	18004426 	beq	r3,zero,10009184 <memset+0x11c>
10009074:	31ffffc4 	addi	r7,r6,-1
10009078:	30004026 	beq	r6,zero,1000917c <memset+0x114>
1000907c:	2813883a 	mov	r9,r5
10009080:	200d883a 	mov	r6,r4
10009084:	2007883a 	mov	r3,r4
10009088:	00000406 	br	1000909c <memset+0x34>
1000908c:	3a3fffc4 	addi	r8,r7,-1
10009090:	31800044 	addi	r6,r6,1
10009094:	38003926 	beq	r7,zero,1000917c <memset+0x114>
10009098:	400f883a 	mov	r7,r8
1000909c:	18c00044 	addi	r3,r3,1
100090a0:	32400005 	stb	r9,0(r6)
100090a4:	1a0000cc 	andi	r8,r3,3
100090a8:	403ff81e 	bne	r8,zero,1000908c <__alt_data_end+0xf800908c>
100090ac:	010000c4 	movi	r4,3
100090b0:	21c02d2e 	bgeu	r4,r7,10009168 <memset+0x100>
100090b4:	29003fcc 	andi	r4,r5,255
100090b8:	200c923a 	slli	r6,r4,8
100090bc:	3108b03a 	or	r4,r6,r4
100090c0:	200c943a 	slli	r6,r4,16
100090c4:	218cb03a 	or	r6,r4,r6
100090c8:	010003c4 	movi	r4,15
100090cc:	21c0182e 	bgeu	r4,r7,10009130 <memset+0xc8>
100090d0:	3b3ffc04 	addi	r12,r7,-16
100090d4:	6018d13a 	srli	r12,r12,4
100090d8:	1a000104 	addi	r8,r3,4
100090dc:	1ac00204 	addi	r11,r3,8
100090e0:	6008913a 	slli	r4,r12,4
100090e4:	1a800304 	addi	r10,r3,12
100090e8:	1813883a 	mov	r9,r3
100090ec:	21000504 	addi	r4,r4,20
100090f0:	1909883a 	add	r4,r3,r4
100090f4:	49800015 	stw	r6,0(r9)
100090f8:	41800015 	stw	r6,0(r8)
100090fc:	59800015 	stw	r6,0(r11)
10009100:	51800015 	stw	r6,0(r10)
10009104:	42000404 	addi	r8,r8,16
10009108:	4a400404 	addi	r9,r9,16
1000910c:	5ac00404 	addi	r11,r11,16
10009110:	52800404 	addi	r10,r10,16
10009114:	413ff71e 	bne	r8,r4,100090f4 <__alt_data_end+0xf80090f4>
10009118:	63000044 	addi	r12,r12,1
1000911c:	6018913a 	slli	r12,r12,4
10009120:	39c003cc 	andi	r7,r7,15
10009124:	010000c4 	movi	r4,3
10009128:	1b07883a 	add	r3,r3,r12
1000912c:	21c00e2e 	bgeu	r4,r7,10009168 <memset+0x100>
10009130:	1813883a 	mov	r9,r3
10009134:	3811883a 	mov	r8,r7
10009138:	010000c4 	movi	r4,3
1000913c:	49800015 	stw	r6,0(r9)
10009140:	423fff04 	addi	r8,r8,-4
10009144:	4a400104 	addi	r9,r9,4
10009148:	223ffc36 	bltu	r4,r8,1000913c <__alt_data_end+0xf800913c>
1000914c:	393fff04 	addi	r4,r7,-4
10009150:	2008d0ba 	srli	r4,r4,2
10009154:	39c000cc 	andi	r7,r7,3
10009158:	21000044 	addi	r4,r4,1
1000915c:	2109883a 	add	r4,r4,r4
10009160:	2109883a 	add	r4,r4,r4
10009164:	1907883a 	add	r3,r3,r4
10009168:	38000526 	beq	r7,zero,10009180 <memset+0x118>
1000916c:	19cf883a 	add	r7,r3,r7
10009170:	19400005 	stb	r5,0(r3)
10009174:	18c00044 	addi	r3,r3,1
10009178:	38fffd1e 	bne	r7,r3,10009170 <__alt_data_end+0xf8009170>
1000917c:	f800283a 	ret
10009180:	f800283a 	ret
10009184:	2007883a 	mov	r3,r4
10009188:	300f883a 	mov	r7,r6
1000918c:	003fc706 	br	100090ac <__alt_data_end+0xf80090ac>

10009190 <_Balloc>:
10009190:	20801317 	ldw	r2,76(r4)
10009194:	defffc04 	addi	sp,sp,-16
10009198:	dc400115 	stw	r17,4(sp)
1000919c:	dc000015 	stw	r16,0(sp)
100091a0:	dfc00315 	stw	ra,12(sp)
100091a4:	dc800215 	stw	r18,8(sp)
100091a8:	2023883a 	mov	r17,r4
100091ac:	2821883a 	mov	r16,r5
100091b0:	10000f26 	beq	r2,zero,100091f0 <_Balloc+0x60>
100091b4:	8407883a 	add	r3,r16,r16
100091b8:	18c7883a 	add	r3,r3,r3
100091bc:	10c7883a 	add	r3,r2,r3
100091c0:	18800017 	ldw	r2,0(r3)
100091c4:	10001126 	beq	r2,zero,1000920c <_Balloc+0x7c>
100091c8:	11000017 	ldw	r4,0(r2)
100091cc:	19000015 	stw	r4,0(r3)
100091d0:	10000415 	stw	zero,16(r2)
100091d4:	10000315 	stw	zero,12(r2)
100091d8:	dfc00317 	ldw	ra,12(sp)
100091dc:	dc800217 	ldw	r18,8(sp)
100091e0:	dc400117 	ldw	r17,4(sp)
100091e4:	dc000017 	ldw	r16,0(sp)
100091e8:	dec00404 	addi	sp,sp,16
100091ec:	f800283a 	ret
100091f0:	01800844 	movi	r6,33
100091f4:	01400104 	movi	r5,4
100091f8:	000c2380 	call	1000c238 <_calloc_r>
100091fc:	88801315 	stw	r2,76(r17)
10009200:	103fec1e 	bne	r2,zero,100091b4 <__alt_data_end+0xf80091b4>
10009204:	0005883a 	mov	r2,zero
10009208:	003ff306 	br	100091d8 <__alt_data_end+0xf80091d8>
1000920c:	01400044 	movi	r5,1
10009210:	2c24983a 	sll	r18,r5,r16
10009214:	8809883a 	mov	r4,r17
10009218:	91800144 	addi	r6,r18,5
1000921c:	318d883a 	add	r6,r6,r6
10009220:	318d883a 	add	r6,r6,r6
10009224:	000c2380 	call	1000c238 <_calloc_r>
10009228:	103ff626 	beq	r2,zero,10009204 <__alt_data_end+0xf8009204>
1000922c:	14000115 	stw	r16,4(r2)
10009230:	14800215 	stw	r18,8(r2)
10009234:	003fe606 	br	100091d0 <__alt_data_end+0xf80091d0>

10009238 <_Bfree>:
10009238:	28000826 	beq	r5,zero,1000925c <_Bfree+0x24>
1000923c:	28c00117 	ldw	r3,4(r5)
10009240:	20801317 	ldw	r2,76(r4)
10009244:	18c7883a 	add	r3,r3,r3
10009248:	18c7883a 	add	r3,r3,r3
1000924c:	10c5883a 	add	r2,r2,r3
10009250:	10c00017 	ldw	r3,0(r2)
10009254:	28c00015 	stw	r3,0(r5)
10009258:	11400015 	stw	r5,0(r2)
1000925c:	f800283a 	ret

10009260 <__multadd>:
10009260:	defff704 	addi	sp,sp,-36
10009264:	dc800215 	stw	r18,8(sp)
10009268:	2c800417 	ldw	r18,16(r5)
1000926c:	dd800615 	stw	r22,24(sp)
10009270:	dd400515 	stw	r21,20(sp)
10009274:	dd000415 	stw	r20,16(sp)
10009278:	dcc00315 	stw	r19,12(sp)
1000927c:	dc400115 	stw	r17,4(sp)
10009280:	dc000015 	stw	r16,0(sp)
10009284:	dfc00815 	stw	ra,32(sp)
10009288:	ddc00715 	stw	r23,28(sp)
1000928c:	2827883a 	mov	r19,r5
10009290:	2029883a 	mov	r20,r4
10009294:	3023883a 	mov	r17,r6
10009298:	3821883a 	mov	r16,r7
1000929c:	2d400504 	addi	r21,r5,20
100092a0:	002d883a 	mov	r22,zero
100092a4:	adc00017 	ldw	r23,0(r21)
100092a8:	880b883a 	mov	r5,r17
100092ac:	ad400104 	addi	r21,r21,4
100092b0:	b93fffcc 	andi	r4,r23,65535
100092b4:	000d8440 	call	1000d844 <__mulsi3>
100092b8:	b808d43a 	srli	r4,r23,16
100092bc:	880b883a 	mov	r5,r17
100092c0:	1421883a 	add	r16,r2,r16
100092c4:	000d8440 	call	1000d844 <__mulsi3>
100092c8:	800ed43a 	srli	r7,r16,16
100092cc:	80ffffcc 	andi	r3,r16,65535
100092d0:	b5800044 	addi	r22,r22,1
100092d4:	11c5883a 	add	r2,r2,r7
100092d8:	100e943a 	slli	r7,r2,16
100092dc:	1020d43a 	srli	r16,r2,16
100092e0:	38c7883a 	add	r3,r7,r3
100092e4:	a8ffff15 	stw	r3,-4(r21)
100092e8:	b4bfee16 	blt	r22,r18,100092a4 <__alt_data_end+0xf80092a4>
100092ec:	80000926 	beq	r16,zero,10009314 <__multadd+0xb4>
100092f0:	98800217 	ldw	r2,8(r19)
100092f4:	9080130e 	bge	r18,r2,10009344 <__multadd+0xe4>
100092f8:	90800144 	addi	r2,r18,5
100092fc:	1085883a 	add	r2,r2,r2
10009300:	1085883a 	add	r2,r2,r2
10009304:	9885883a 	add	r2,r19,r2
10009308:	14000015 	stw	r16,0(r2)
1000930c:	94800044 	addi	r18,r18,1
10009310:	9c800415 	stw	r18,16(r19)
10009314:	9805883a 	mov	r2,r19
10009318:	dfc00817 	ldw	ra,32(sp)
1000931c:	ddc00717 	ldw	r23,28(sp)
10009320:	dd800617 	ldw	r22,24(sp)
10009324:	dd400517 	ldw	r21,20(sp)
10009328:	dd000417 	ldw	r20,16(sp)
1000932c:	dcc00317 	ldw	r19,12(sp)
10009330:	dc800217 	ldw	r18,8(sp)
10009334:	dc400117 	ldw	r17,4(sp)
10009338:	dc000017 	ldw	r16,0(sp)
1000933c:	dec00904 	addi	sp,sp,36
10009340:	f800283a 	ret
10009344:	99400117 	ldw	r5,4(r19)
10009348:	a009883a 	mov	r4,r20
1000934c:	29400044 	addi	r5,r5,1
10009350:	00091900 	call	10009190 <_Balloc>
10009354:	99800417 	ldw	r6,16(r19)
10009358:	99400304 	addi	r5,r19,12
1000935c:	11000304 	addi	r4,r2,12
10009360:	31800084 	addi	r6,r6,2
10009364:	318d883a 	add	r6,r6,r6
10009368:	318d883a 	add	r6,r6,r6
1000936c:	1023883a 	mov	r17,r2
10009370:	0008dc40 	call	10008dc4 <memcpy>
10009374:	98000a26 	beq	r19,zero,100093a0 <__multadd+0x140>
10009378:	98c00117 	ldw	r3,4(r19)
1000937c:	a0801317 	ldw	r2,76(r20)
10009380:	18c7883a 	add	r3,r3,r3
10009384:	18c7883a 	add	r3,r3,r3
10009388:	10c5883a 	add	r2,r2,r3
1000938c:	10c00017 	ldw	r3,0(r2)
10009390:	98c00015 	stw	r3,0(r19)
10009394:	14c00015 	stw	r19,0(r2)
10009398:	8827883a 	mov	r19,r17
1000939c:	003fd606 	br	100092f8 <__alt_data_end+0xf80092f8>
100093a0:	8827883a 	mov	r19,r17
100093a4:	003fd406 	br	100092f8 <__alt_data_end+0xf80092f8>

100093a8 <__s2b>:
100093a8:	defff904 	addi	sp,sp,-28
100093ac:	dc400115 	stw	r17,4(sp)
100093b0:	dc000015 	stw	r16,0(sp)
100093b4:	2023883a 	mov	r17,r4
100093b8:	2821883a 	mov	r16,r5
100093bc:	39000204 	addi	r4,r7,8
100093c0:	01400244 	movi	r5,9
100093c4:	dcc00315 	stw	r19,12(sp)
100093c8:	dc800215 	stw	r18,8(sp)
100093cc:	dfc00615 	stw	ra,24(sp)
100093d0:	dd400515 	stw	r21,20(sp)
100093d4:	dd000415 	stw	r20,16(sp)
100093d8:	3825883a 	mov	r18,r7
100093dc:	3027883a 	mov	r19,r6
100093e0:	000d6900 	call	1000d690 <__divsi3>
100093e4:	00c00044 	movi	r3,1
100093e8:	000b883a 	mov	r5,zero
100093ec:	1880030e 	bge	r3,r2,100093fc <__s2b+0x54>
100093f0:	18c7883a 	add	r3,r3,r3
100093f4:	29400044 	addi	r5,r5,1
100093f8:	18bffd16 	blt	r3,r2,100093f0 <__alt_data_end+0xf80093f0>
100093fc:	8809883a 	mov	r4,r17
10009400:	00091900 	call	10009190 <_Balloc>
10009404:	d8c00717 	ldw	r3,28(sp)
10009408:	10c00515 	stw	r3,20(r2)
1000940c:	00c00044 	movi	r3,1
10009410:	10c00415 	stw	r3,16(r2)
10009414:	00c00244 	movi	r3,9
10009418:	1cc0210e 	bge	r3,r19,100094a0 <__s2b+0xf8>
1000941c:	80eb883a 	add	r21,r16,r3
10009420:	a829883a 	mov	r20,r21
10009424:	84e1883a 	add	r16,r16,r19
10009428:	a1c00007 	ldb	r7,0(r20)
1000942c:	01800284 	movi	r6,10
10009430:	a5000044 	addi	r20,r20,1
10009434:	100b883a 	mov	r5,r2
10009438:	39fff404 	addi	r7,r7,-48
1000943c:	8809883a 	mov	r4,r17
10009440:	00092600 	call	10009260 <__multadd>
10009444:	a43ff81e 	bne	r20,r16,10009428 <__alt_data_end+0xf8009428>
10009448:	ace1883a 	add	r16,r21,r19
1000944c:	843ffe04 	addi	r16,r16,-8
10009450:	9c800a0e 	bge	r19,r18,1000947c <__s2b+0xd4>
10009454:	94e5c83a 	sub	r18,r18,r19
10009458:	84a5883a 	add	r18,r16,r18
1000945c:	81c00007 	ldb	r7,0(r16)
10009460:	01800284 	movi	r6,10
10009464:	84000044 	addi	r16,r16,1
10009468:	100b883a 	mov	r5,r2
1000946c:	39fff404 	addi	r7,r7,-48
10009470:	8809883a 	mov	r4,r17
10009474:	00092600 	call	10009260 <__multadd>
10009478:	84bff81e 	bne	r16,r18,1000945c <__alt_data_end+0xf800945c>
1000947c:	dfc00617 	ldw	ra,24(sp)
10009480:	dd400517 	ldw	r21,20(sp)
10009484:	dd000417 	ldw	r20,16(sp)
10009488:	dcc00317 	ldw	r19,12(sp)
1000948c:	dc800217 	ldw	r18,8(sp)
10009490:	dc400117 	ldw	r17,4(sp)
10009494:	dc000017 	ldw	r16,0(sp)
10009498:	dec00704 	addi	sp,sp,28
1000949c:	f800283a 	ret
100094a0:	84000284 	addi	r16,r16,10
100094a4:	1827883a 	mov	r19,r3
100094a8:	003fe906 	br	10009450 <__alt_data_end+0xf8009450>

100094ac <__hi0bits>:
100094ac:	20bfffec 	andhi	r2,r4,65535
100094b0:	1000141e 	bne	r2,zero,10009504 <__hi0bits+0x58>
100094b4:	2008943a 	slli	r4,r4,16
100094b8:	00800404 	movi	r2,16
100094bc:	20ffc02c 	andhi	r3,r4,65280
100094c0:	1800021e 	bne	r3,zero,100094cc <__hi0bits+0x20>
100094c4:	2008923a 	slli	r4,r4,8
100094c8:	10800204 	addi	r2,r2,8
100094cc:	20fc002c 	andhi	r3,r4,61440
100094d0:	1800021e 	bne	r3,zero,100094dc <__hi0bits+0x30>
100094d4:	2008913a 	slli	r4,r4,4
100094d8:	10800104 	addi	r2,r2,4
100094dc:	20f0002c 	andhi	r3,r4,49152
100094e0:	1800031e 	bne	r3,zero,100094f0 <__hi0bits+0x44>
100094e4:	2109883a 	add	r4,r4,r4
100094e8:	10800084 	addi	r2,r2,2
100094ec:	2109883a 	add	r4,r4,r4
100094f0:	20000316 	blt	r4,zero,10009500 <__hi0bits+0x54>
100094f4:	2110002c 	andhi	r4,r4,16384
100094f8:	2000041e 	bne	r4,zero,1000950c <__hi0bits+0x60>
100094fc:	00800804 	movi	r2,32
10009500:	f800283a 	ret
10009504:	0005883a 	mov	r2,zero
10009508:	003fec06 	br	100094bc <__alt_data_end+0xf80094bc>
1000950c:	10800044 	addi	r2,r2,1
10009510:	f800283a 	ret

10009514 <__lo0bits>:
10009514:	20c00017 	ldw	r3,0(r4)
10009518:	188001cc 	andi	r2,r3,7
1000951c:	10000826 	beq	r2,zero,10009540 <__lo0bits+0x2c>
10009520:	1880004c 	andi	r2,r3,1
10009524:	1000211e 	bne	r2,zero,100095ac <__lo0bits+0x98>
10009528:	1880008c 	andi	r2,r3,2
1000952c:	1000211e 	bne	r2,zero,100095b4 <__lo0bits+0xa0>
10009530:	1806d0ba 	srli	r3,r3,2
10009534:	00800084 	movi	r2,2
10009538:	20c00015 	stw	r3,0(r4)
1000953c:	f800283a 	ret
10009540:	18bfffcc 	andi	r2,r3,65535
10009544:	10001326 	beq	r2,zero,10009594 <__lo0bits+0x80>
10009548:	0005883a 	mov	r2,zero
1000954c:	19403fcc 	andi	r5,r3,255
10009550:	2800021e 	bne	r5,zero,1000955c <__lo0bits+0x48>
10009554:	1806d23a 	srli	r3,r3,8
10009558:	10800204 	addi	r2,r2,8
1000955c:	194003cc 	andi	r5,r3,15
10009560:	2800021e 	bne	r5,zero,1000956c <__lo0bits+0x58>
10009564:	1806d13a 	srli	r3,r3,4
10009568:	10800104 	addi	r2,r2,4
1000956c:	194000cc 	andi	r5,r3,3
10009570:	2800021e 	bne	r5,zero,1000957c <__lo0bits+0x68>
10009574:	1806d0ba 	srli	r3,r3,2
10009578:	10800084 	addi	r2,r2,2
1000957c:	1940004c 	andi	r5,r3,1
10009580:	2800081e 	bne	r5,zero,100095a4 <__lo0bits+0x90>
10009584:	1806d07a 	srli	r3,r3,1
10009588:	1800051e 	bne	r3,zero,100095a0 <__lo0bits+0x8c>
1000958c:	00800804 	movi	r2,32
10009590:	f800283a 	ret
10009594:	1806d43a 	srli	r3,r3,16
10009598:	00800404 	movi	r2,16
1000959c:	003feb06 	br	1000954c <__alt_data_end+0xf800954c>
100095a0:	10800044 	addi	r2,r2,1
100095a4:	20c00015 	stw	r3,0(r4)
100095a8:	f800283a 	ret
100095ac:	0005883a 	mov	r2,zero
100095b0:	f800283a 	ret
100095b4:	1806d07a 	srli	r3,r3,1
100095b8:	00800044 	movi	r2,1
100095bc:	20c00015 	stw	r3,0(r4)
100095c0:	f800283a 	ret

100095c4 <__i2b>:
100095c4:	defffd04 	addi	sp,sp,-12
100095c8:	dc000015 	stw	r16,0(sp)
100095cc:	04000044 	movi	r16,1
100095d0:	dc400115 	stw	r17,4(sp)
100095d4:	2823883a 	mov	r17,r5
100095d8:	800b883a 	mov	r5,r16
100095dc:	dfc00215 	stw	ra,8(sp)
100095e0:	00091900 	call	10009190 <_Balloc>
100095e4:	14400515 	stw	r17,20(r2)
100095e8:	14000415 	stw	r16,16(r2)
100095ec:	dfc00217 	ldw	ra,8(sp)
100095f0:	dc400117 	ldw	r17,4(sp)
100095f4:	dc000017 	ldw	r16,0(sp)
100095f8:	dec00304 	addi	sp,sp,12
100095fc:	f800283a 	ret

10009600 <__multiply>:
10009600:	deffef04 	addi	sp,sp,-68
10009604:	dc400815 	stw	r17,32(sp)
10009608:	dc000715 	stw	r16,28(sp)
1000960c:	34400417 	ldw	r17,16(r6)
10009610:	2c000417 	ldw	r16,16(r5)
10009614:	dd800d15 	stw	r22,52(sp)
10009618:	dc800915 	stw	r18,36(sp)
1000961c:	dfc01015 	stw	ra,64(sp)
10009620:	df000f15 	stw	fp,60(sp)
10009624:	ddc00e15 	stw	r23,56(sp)
10009628:	dd400c15 	stw	r21,48(sp)
1000962c:	dd000b15 	stw	r20,44(sp)
10009630:	dcc00a15 	stw	r19,40(sp)
10009634:	2825883a 	mov	r18,r5
10009638:	302d883a 	mov	r22,r6
1000963c:	8440050e 	bge	r16,r17,10009654 <__multiply+0x54>
10009640:	8007883a 	mov	r3,r16
10009644:	3025883a 	mov	r18,r6
10009648:	8821883a 	mov	r16,r17
1000964c:	282d883a 	mov	r22,r5
10009650:	1823883a 	mov	r17,r3
10009654:	90800217 	ldw	r2,8(r18)
10009658:	8447883a 	add	r3,r16,r17
1000965c:	d8c00215 	stw	r3,8(sp)
10009660:	91400117 	ldw	r5,4(r18)
10009664:	10c0010e 	bge	r2,r3,1000966c <__multiply+0x6c>
10009668:	29400044 	addi	r5,r5,1
1000966c:	00091900 	call	10009190 <_Balloc>
10009670:	d8c00217 	ldw	r3,8(sp)
10009674:	d8800615 	stw	r2,24(sp)
10009678:	18eb883a 	add	r21,r3,r3
1000967c:	ad6b883a 	add	r21,r21,r21
10009680:	10c00504 	addi	r3,r2,20
10009684:	1d6b883a 	add	r21,r3,r21
10009688:	d8c00115 	stw	r3,4(sp)
1000968c:	dd400315 	stw	r21,12(sp)
10009690:	1805883a 	mov	r2,r3
10009694:	1d40042e 	bgeu	r3,r21,100096a8 <__multiply+0xa8>
10009698:	d8c00317 	ldw	r3,12(sp)
1000969c:	10000015 	stw	zero,0(r2)
100096a0:	10800104 	addi	r2,r2,4
100096a4:	10fffc36 	bltu	r2,r3,10009698 <__alt_data_end+0xf8009698>
100096a8:	8c63883a 	add	r17,r17,r17
100096ac:	b5800504 	addi	r22,r22,20
100096b0:	8c63883a 	add	r17,r17,r17
100096b4:	94800504 	addi	r18,r18,20
100096b8:	8421883a 	add	r16,r16,r16
100096bc:	b463883a 	add	r17,r22,r17
100096c0:	8421883a 	add	r16,r16,r16
100096c4:	dd800015 	stw	r22,0(sp)
100096c8:	dc800415 	stw	r18,16(sp)
100096cc:	dc400515 	stw	r17,20(sp)
100096d0:	9429883a 	add	r20,r18,r16
100096d4:	b4404f2e 	bgeu	r22,r17,10009814 <__multiply+0x214>
100096d8:	d8c00017 	ldw	r3,0(sp)
100096dc:	1c800017 	ldw	r18,0(r3)
100096e0:	947fffcc 	andi	r17,r18,65535
100096e4:	88001e26 	beq	r17,zero,10009760 <__multiply+0x160>
100096e8:	dd800117 	ldw	r22,4(sp)
100096ec:	dd400417 	ldw	r21,16(sp)
100096f0:	0027883a 	mov	r19,zero
100096f4:	ac800017 	ldw	r18,0(r21)
100096f8:	b4000017 	ldw	r16,0(r22)
100096fc:	880b883a 	mov	r5,r17
10009700:	913fffcc 	andi	r4,r18,65535
10009704:	000d8440 	call	1000d844 <__mulsi3>
10009708:	9008d43a 	srli	r4,r18,16
1000970c:	84bfffcc 	andi	r18,r16,65535
10009710:	1485883a 	add	r2,r2,r18
10009714:	14e5883a 	add	r18,r2,r19
10009718:	8020d43a 	srli	r16,r16,16
1000971c:	9026d43a 	srli	r19,r18,16
10009720:	880b883a 	mov	r5,r17
10009724:	000d8440 	call	1000d844 <__mulsi3>
10009728:	1405883a 	add	r2,r2,r16
1000972c:	14e1883a 	add	r16,r2,r19
10009730:	90ffffcc 	andi	r3,r18,65535
10009734:	8024943a 	slli	r18,r16,16
10009738:	ad400104 	addi	r21,r21,4
1000973c:	b005883a 	mov	r2,r22
10009740:	90c6b03a 	or	r3,r18,r3
10009744:	b0c00015 	stw	r3,0(r22)
10009748:	8026d43a 	srli	r19,r16,16
1000974c:	b5800104 	addi	r22,r22,4
10009750:	ad3fe836 	bltu	r21,r20,100096f4 <__alt_data_end+0xf80096f4>
10009754:	d8c00017 	ldw	r3,0(sp)
10009758:	14c00115 	stw	r19,4(r2)
1000975c:	1c800017 	ldw	r18,0(r3)
10009760:	9024d43a 	srli	r18,r18,16
10009764:	90002226 	beq	r18,zero,100097f0 <__multiply+0x1f0>
10009768:	d8c00117 	ldw	r3,4(sp)
1000976c:	dd800417 	ldw	r22,16(sp)
10009770:	002f883a 	mov	r23,zero
10009774:	1f000017 	ldw	fp,0(r3)
10009778:	1823883a 	mov	r17,r3
1000977c:	182b883a 	mov	r21,r3
10009780:	e021883a 	mov	r16,fp
10009784:	00000106 	br	1000978c <__multiply+0x18c>
10009788:	982b883a 	mov	r21,r19
1000978c:	b100000b 	ldhu	r4,0(r22)
10009790:	8020d43a 	srli	r16,r16,16
10009794:	900b883a 	mov	r5,r18
10009798:	000d8440 	call	1000d844 <__mulsi3>
1000979c:	1405883a 	add	r2,r2,r16
100097a0:	15ef883a 	add	r23,r2,r23
100097a4:	b804943a 	slli	r2,r23,16
100097a8:	e0ffffcc 	andi	r3,fp,65535
100097ac:	8c400104 	addi	r17,r17,4
100097b0:	10c6b03a 	or	r3,r2,r3
100097b4:	88ffff15 	stw	r3,-4(r17)
100097b8:	b5800104 	addi	r22,r22,4
100097bc:	b13fff17 	ldw	r4,-4(r22)
100097c0:	acc00104 	addi	r19,r21,4
100097c4:	900b883a 	mov	r5,r18
100097c8:	2008d43a 	srli	r4,r4,16
100097cc:	9c000017 	ldw	r16,0(r19)
100097d0:	000d8440 	call	1000d844 <__mulsi3>
100097d4:	b806d43a 	srli	r3,r23,16
100097d8:	813fffcc 	andi	r4,r16,65535
100097dc:	1105883a 	add	r2,r2,r4
100097e0:	10f9883a 	add	fp,r2,r3
100097e4:	e02ed43a 	srli	r23,fp,16
100097e8:	b53fe736 	bltu	r22,r20,10009788 <__alt_data_end+0xf8009788>
100097ec:	af000115 	stw	fp,4(r21)
100097f0:	d8c00017 	ldw	r3,0(sp)
100097f4:	d9000517 	ldw	r4,20(sp)
100097f8:	18c00104 	addi	r3,r3,4
100097fc:	d8c00015 	stw	r3,0(sp)
10009800:	d8c00117 	ldw	r3,4(sp)
10009804:	18c00104 	addi	r3,r3,4
10009808:	d8c00115 	stw	r3,4(sp)
1000980c:	d8c00017 	ldw	r3,0(sp)
10009810:	193fb136 	bltu	r3,r4,100096d8 <__alt_data_end+0xf80096d8>
10009814:	d8c00217 	ldw	r3,8(sp)
10009818:	00c00c0e 	bge	zero,r3,1000984c <__multiply+0x24c>
1000981c:	d8c00317 	ldw	r3,12(sp)
10009820:	18bfff17 	ldw	r2,-4(r3)
10009824:	1d7fff04 	addi	r21,r3,-4
10009828:	10000326 	beq	r2,zero,10009838 <__multiply+0x238>
1000982c:	00000706 	br	1000984c <__multiply+0x24c>
10009830:	a8800017 	ldw	r2,0(r21)
10009834:	1000051e 	bne	r2,zero,1000984c <__multiply+0x24c>
10009838:	d8c00217 	ldw	r3,8(sp)
1000983c:	ad7fff04 	addi	r21,r21,-4
10009840:	18ffffc4 	addi	r3,r3,-1
10009844:	d8c00215 	stw	r3,8(sp)
10009848:	183ff91e 	bne	r3,zero,10009830 <__alt_data_end+0xf8009830>
1000984c:	d8c00617 	ldw	r3,24(sp)
10009850:	d9000217 	ldw	r4,8(sp)
10009854:	1805883a 	mov	r2,r3
10009858:	19000415 	stw	r4,16(r3)
1000985c:	dfc01017 	ldw	ra,64(sp)
10009860:	df000f17 	ldw	fp,60(sp)
10009864:	ddc00e17 	ldw	r23,56(sp)
10009868:	dd800d17 	ldw	r22,52(sp)
1000986c:	dd400c17 	ldw	r21,48(sp)
10009870:	dd000b17 	ldw	r20,44(sp)
10009874:	dcc00a17 	ldw	r19,40(sp)
10009878:	dc800917 	ldw	r18,36(sp)
1000987c:	dc400817 	ldw	r17,32(sp)
10009880:	dc000717 	ldw	r16,28(sp)
10009884:	dec01104 	addi	sp,sp,68
10009888:	f800283a 	ret

1000988c <__pow5mult>:
1000988c:	defffa04 	addi	sp,sp,-24
10009890:	dcc00315 	stw	r19,12(sp)
10009894:	dc000015 	stw	r16,0(sp)
10009898:	dfc00515 	stw	ra,20(sp)
1000989c:	dd000415 	stw	r20,16(sp)
100098a0:	dc800215 	stw	r18,8(sp)
100098a4:	dc400115 	stw	r17,4(sp)
100098a8:	308000cc 	andi	r2,r6,3
100098ac:	3021883a 	mov	r16,r6
100098b0:	2027883a 	mov	r19,r4
100098b4:	10002f1e 	bne	r2,zero,10009974 <__pow5mult+0xe8>
100098b8:	2825883a 	mov	r18,r5
100098bc:	8021d0ba 	srai	r16,r16,2
100098c0:	80001a26 	beq	r16,zero,1000992c <__pow5mult+0xa0>
100098c4:	9c401217 	ldw	r17,72(r19)
100098c8:	8800061e 	bne	r17,zero,100098e4 <__pow5mult+0x58>
100098cc:	00003406 	br	100099a0 <__pow5mult+0x114>
100098d0:	8021d07a 	srai	r16,r16,1
100098d4:	80001526 	beq	r16,zero,1000992c <__pow5mult+0xa0>
100098d8:	88800017 	ldw	r2,0(r17)
100098dc:	10001c26 	beq	r2,zero,10009950 <__pow5mult+0xc4>
100098e0:	1023883a 	mov	r17,r2
100098e4:	8080004c 	andi	r2,r16,1
100098e8:	103ff926 	beq	r2,zero,100098d0 <__alt_data_end+0xf80098d0>
100098ec:	880d883a 	mov	r6,r17
100098f0:	900b883a 	mov	r5,r18
100098f4:	9809883a 	mov	r4,r19
100098f8:	00096000 	call	10009600 <__multiply>
100098fc:	90001b26 	beq	r18,zero,1000996c <__pow5mult+0xe0>
10009900:	91000117 	ldw	r4,4(r18)
10009904:	98c01317 	ldw	r3,76(r19)
10009908:	8021d07a 	srai	r16,r16,1
1000990c:	2109883a 	add	r4,r4,r4
10009910:	2109883a 	add	r4,r4,r4
10009914:	1907883a 	add	r3,r3,r4
10009918:	19000017 	ldw	r4,0(r3)
1000991c:	91000015 	stw	r4,0(r18)
10009920:	1c800015 	stw	r18,0(r3)
10009924:	1025883a 	mov	r18,r2
10009928:	803feb1e 	bne	r16,zero,100098d8 <__alt_data_end+0xf80098d8>
1000992c:	9005883a 	mov	r2,r18
10009930:	dfc00517 	ldw	ra,20(sp)
10009934:	dd000417 	ldw	r20,16(sp)
10009938:	dcc00317 	ldw	r19,12(sp)
1000993c:	dc800217 	ldw	r18,8(sp)
10009940:	dc400117 	ldw	r17,4(sp)
10009944:	dc000017 	ldw	r16,0(sp)
10009948:	dec00604 	addi	sp,sp,24
1000994c:	f800283a 	ret
10009950:	880d883a 	mov	r6,r17
10009954:	880b883a 	mov	r5,r17
10009958:	9809883a 	mov	r4,r19
1000995c:	00096000 	call	10009600 <__multiply>
10009960:	88800015 	stw	r2,0(r17)
10009964:	10000015 	stw	zero,0(r2)
10009968:	003fdd06 	br	100098e0 <__alt_data_end+0xf80098e0>
1000996c:	1025883a 	mov	r18,r2
10009970:	003fd706 	br	100098d0 <__alt_data_end+0xf80098d0>
10009974:	10bfffc4 	addi	r2,r2,-1
10009978:	1085883a 	add	r2,r2,r2
1000997c:	00c40074 	movhi	r3,4097
10009980:	18cc5b04 	addi	r3,r3,12652
10009984:	1085883a 	add	r2,r2,r2
10009988:	1885883a 	add	r2,r3,r2
1000998c:	11800017 	ldw	r6,0(r2)
10009990:	000f883a 	mov	r7,zero
10009994:	00092600 	call	10009260 <__multadd>
10009998:	1025883a 	mov	r18,r2
1000999c:	003fc706 	br	100098bc <__alt_data_end+0xf80098bc>
100099a0:	05000044 	movi	r20,1
100099a4:	a00b883a 	mov	r5,r20
100099a8:	9809883a 	mov	r4,r19
100099ac:	00091900 	call	10009190 <_Balloc>
100099b0:	1023883a 	mov	r17,r2
100099b4:	00809c44 	movi	r2,625
100099b8:	88800515 	stw	r2,20(r17)
100099bc:	8d000415 	stw	r20,16(r17)
100099c0:	9c401215 	stw	r17,72(r19)
100099c4:	88000015 	stw	zero,0(r17)
100099c8:	003fc606 	br	100098e4 <__alt_data_end+0xf80098e4>

100099cc <__lshift>:
100099cc:	defff904 	addi	sp,sp,-28
100099d0:	dd400515 	stw	r21,20(sp)
100099d4:	dcc00315 	stw	r19,12(sp)
100099d8:	302bd17a 	srai	r21,r6,5
100099dc:	2cc00417 	ldw	r19,16(r5)
100099e0:	28800217 	ldw	r2,8(r5)
100099e4:	dd000415 	stw	r20,16(sp)
100099e8:	ace7883a 	add	r19,r21,r19
100099ec:	dc800215 	stw	r18,8(sp)
100099f0:	dc400115 	stw	r17,4(sp)
100099f4:	dc000015 	stw	r16,0(sp)
100099f8:	dfc00615 	stw	ra,24(sp)
100099fc:	9c000044 	addi	r16,r19,1
10009a00:	2823883a 	mov	r17,r5
10009a04:	3029883a 	mov	r20,r6
10009a08:	2025883a 	mov	r18,r4
10009a0c:	29400117 	ldw	r5,4(r5)
10009a10:	1400030e 	bge	r2,r16,10009a20 <__lshift+0x54>
10009a14:	1085883a 	add	r2,r2,r2
10009a18:	29400044 	addi	r5,r5,1
10009a1c:	143ffd16 	blt	r2,r16,10009a14 <__alt_data_end+0xf8009a14>
10009a20:	9009883a 	mov	r4,r18
10009a24:	00091900 	call	10009190 <_Balloc>
10009a28:	10c00504 	addi	r3,r2,20
10009a2c:	0540070e 	bge	zero,r21,10009a4c <__lshift+0x80>
10009a30:	ad6b883a 	add	r21,r21,r21
10009a34:	ad6b883a 	add	r21,r21,r21
10009a38:	1809883a 	mov	r4,r3
10009a3c:	1d47883a 	add	r3,r3,r21
10009a40:	20000015 	stw	zero,0(r4)
10009a44:	21000104 	addi	r4,r4,4
10009a48:	193ffd1e 	bne	r3,r4,10009a40 <__alt_data_end+0xf8009a40>
10009a4c:	8a000417 	ldw	r8,16(r17)
10009a50:	89000504 	addi	r4,r17,20
10009a54:	a18007cc 	andi	r6,r20,31
10009a58:	4211883a 	add	r8,r8,r8
10009a5c:	4211883a 	add	r8,r8,r8
10009a60:	2211883a 	add	r8,r4,r8
10009a64:	30002326 	beq	r6,zero,10009af4 <__lshift+0x128>
10009a68:	02400804 	movi	r9,32
10009a6c:	4993c83a 	sub	r9,r9,r6
10009a70:	000b883a 	mov	r5,zero
10009a74:	21c00017 	ldw	r7,0(r4)
10009a78:	1815883a 	mov	r10,r3
10009a7c:	18c00104 	addi	r3,r3,4
10009a80:	398e983a 	sll	r7,r7,r6
10009a84:	21000104 	addi	r4,r4,4
10009a88:	394ab03a 	or	r5,r7,r5
10009a8c:	197fff15 	stw	r5,-4(r3)
10009a90:	217fff17 	ldw	r5,-4(r4)
10009a94:	2a4ad83a 	srl	r5,r5,r9
10009a98:	223ff636 	bltu	r4,r8,10009a74 <__alt_data_end+0xf8009a74>
10009a9c:	51400115 	stw	r5,4(r10)
10009aa0:	28001a1e 	bne	r5,zero,10009b0c <__lshift+0x140>
10009aa4:	843fffc4 	addi	r16,r16,-1
10009aa8:	14000415 	stw	r16,16(r2)
10009aac:	88000826 	beq	r17,zero,10009ad0 <__lshift+0x104>
10009ab0:	89000117 	ldw	r4,4(r17)
10009ab4:	90c01317 	ldw	r3,76(r18)
10009ab8:	2109883a 	add	r4,r4,r4
10009abc:	2109883a 	add	r4,r4,r4
10009ac0:	1907883a 	add	r3,r3,r4
10009ac4:	19000017 	ldw	r4,0(r3)
10009ac8:	89000015 	stw	r4,0(r17)
10009acc:	1c400015 	stw	r17,0(r3)
10009ad0:	dfc00617 	ldw	ra,24(sp)
10009ad4:	dd400517 	ldw	r21,20(sp)
10009ad8:	dd000417 	ldw	r20,16(sp)
10009adc:	dcc00317 	ldw	r19,12(sp)
10009ae0:	dc800217 	ldw	r18,8(sp)
10009ae4:	dc400117 	ldw	r17,4(sp)
10009ae8:	dc000017 	ldw	r16,0(sp)
10009aec:	dec00704 	addi	sp,sp,28
10009af0:	f800283a 	ret
10009af4:	21400017 	ldw	r5,0(r4)
10009af8:	18c00104 	addi	r3,r3,4
10009afc:	21000104 	addi	r4,r4,4
10009b00:	197fff15 	stw	r5,-4(r3)
10009b04:	223ffb36 	bltu	r4,r8,10009af4 <__alt_data_end+0xf8009af4>
10009b08:	003fe606 	br	10009aa4 <__alt_data_end+0xf8009aa4>
10009b0c:	9c000084 	addi	r16,r19,2
10009b10:	003fe406 	br	10009aa4 <__alt_data_end+0xf8009aa4>

10009b14 <__mcmp>:
10009b14:	20800417 	ldw	r2,16(r4)
10009b18:	28c00417 	ldw	r3,16(r5)
10009b1c:	10c5c83a 	sub	r2,r2,r3
10009b20:	1000111e 	bne	r2,zero,10009b68 <__mcmp+0x54>
10009b24:	18c7883a 	add	r3,r3,r3
10009b28:	18c7883a 	add	r3,r3,r3
10009b2c:	21000504 	addi	r4,r4,20
10009b30:	29400504 	addi	r5,r5,20
10009b34:	20c5883a 	add	r2,r4,r3
10009b38:	28cb883a 	add	r5,r5,r3
10009b3c:	00000106 	br	10009b44 <__mcmp+0x30>
10009b40:	20800a2e 	bgeu	r4,r2,10009b6c <__mcmp+0x58>
10009b44:	10bfff04 	addi	r2,r2,-4
10009b48:	297fff04 	addi	r5,r5,-4
10009b4c:	11800017 	ldw	r6,0(r2)
10009b50:	28c00017 	ldw	r3,0(r5)
10009b54:	30fffa26 	beq	r6,r3,10009b40 <__alt_data_end+0xf8009b40>
10009b58:	30c00236 	bltu	r6,r3,10009b64 <__mcmp+0x50>
10009b5c:	00800044 	movi	r2,1
10009b60:	f800283a 	ret
10009b64:	00bfffc4 	movi	r2,-1
10009b68:	f800283a 	ret
10009b6c:	0005883a 	mov	r2,zero
10009b70:	f800283a 	ret

10009b74 <__mdiff>:
10009b74:	28c00417 	ldw	r3,16(r5)
10009b78:	30800417 	ldw	r2,16(r6)
10009b7c:	defffa04 	addi	sp,sp,-24
10009b80:	dcc00315 	stw	r19,12(sp)
10009b84:	dc800215 	stw	r18,8(sp)
10009b88:	dfc00515 	stw	ra,20(sp)
10009b8c:	dd000415 	stw	r20,16(sp)
10009b90:	dc400115 	stw	r17,4(sp)
10009b94:	dc000015 	stw	r16,0(sp)
10009b98:	1887c83a 	sub	r3,r3,r2
10009b9c:	2825883a 	mov	r18,r5
10009ba0:	3027883a 	mov	r19,r6
10009ba4:	1800141e 	bne	r3,zero,10009bf8 <__mdiff+0x84>
10009ba8:	1085883a 	add	r2,r2,r2
10009bac:	1085883a 	add	r2,r2,r2
10009bb0:	2a000504 	addi	r8,r5,20
10009bb4:	34000504 	addi	r16,r6,20
10009bb8:	4087883a 	add	r3,r8,r2
10009bbc:	8085883a 	add	r2,r16,r2
10009bc0:	00000106 	br	10009bc8 <__mdiff+0x54>
10009bc4:	40c0592e 	bgeu	r8,r3,10009d2c <__mdiff+0x1b8>
10009bc8:	18ffff04 	addi	r3,r3,-4
10009bcc:	10bfff04 	addi	r2,r2,-4
10009bd0:	19c00017 	ldw	r7,0(r3)
10009bd4:	11400017 	ldw	r5,0(r2)
10009bd8:	397ffa26 	beq	r7,r5,10009bc4 <__alt_data_end+0xf8009bc4>
10009bdc:	3940592e 	bgeu	r7,r5,10009d44 <__mdiff+0x1d0>
10009be0:	9005883a 	mov	r2,r18
10009be4:	4023883a 	mov	r17,r8
10009be8:	9825883a 	mov	r18,r19
10009bec:	05000044 	movi	r20,1
10009bf0:	1027883a 	mov	r19,r2
10009bf4:	00000406 	br	10009c08 <__mdiff+0x94>
10009bf8:	18005616 	blt	r3,zero,10009d54 <__mdiff+0x1e0>
10009bfc:	34400504 	addi	r17,r6,20
10009c00:	2c000504 	addi	r16,r5,20
10009c04:	0029883a 	mov	r20,zero
10009c08:	91400117 	ldw	r5,4(r18)
10009c0c:	00091900 	call	10009190 <_Balloc>
10009c10:	92400417 	ldw	r9,16(r18)
10009c14:	9b000417 	ldw	r12,16(r19)
10009c18:	12c00504 	addi	r11,r2,20
10009c1c:	4a51883a 	add	r8,r9,r9
10009c20:	6319883a 	add	r12,r12,r12
10009c24:	4211883a 	add	r8,r8,r8
10009c28:	6319883a 	add	r12,r12,r12
10009c2c:	15000315 	stw	r20,12(r2)
10009c30:	8211883a 	add	r8,r16,r8
10009c34:	8b19883a 	add	r12,r17,r12
10009c38:	0007883a 	mov	r3,zero
10009c3c:	81400017 	ldw	r5,0(r16)
10009c40:	89c00017 	ldw	r7,0(r17)
10009c44:	59800104 	addi	r6,r11,4
10009c48:	293fffcc 	andi	r4,r5,65535
10009c4c:	20c7883a 	add	r3,r4,r3
10009c50:	393fffcc 	andi	r4,r7,65535
10009c54:	1909c83a 	sub	r4,r3,r4
10009c58:	280ad43a 	srli	r5,r5,16
10009c5c:	380ed43a 	srli	r7,r7,16
10009c60:	2007d43a 	srai	r3,r4,16
10009c64:	213fffcc 	andi	r4,r4,65535
10009c68:	29cbc83a 	sub	r5,r5,r7
10009c6c:	28c7883a 	add	r3,r5,r3
10009c70:	180a943a 	slli	r5,r3,16
10009c74:	8c400104 	addi	r17,r17,4
10009c78:	84000104 	addi	r16,r16,4
10009c7c:	2908b03a 	or	r4,r5,r4
10009c80:	59000015 	stw	r4,0(r11)
10009c84:	1807d43a 	srai	r3,r3,16
10009c88:	3015883a 	mov	r10,r6
10009c8c:	3017883a 	mov	r11,r6
10009c90:	8b3fea36 	bltu	r17,r12,10009c3c <__alt_data_end+0xf8009c3c>
10009c94:	8200162e 	bgeu	r16,r8,10009cf0 <__mdiff+0x17c>
10009c98:	8017883a 	mov	r11,r16
10009c9c:	59400017 	ldw	r5,0(r11)
10009ca0:	31800104 	addi	r6,r6,4
10009ca4:	5ac00104 	addi	r11,r11,4
10009ca8:	293fffcc 	andi	r4,r5,65535
10009cac:	20c7883a 	add	r3,r4,r3
10009cb0:	280ed43a 	srli	r7,r5,16
10009cb4:	180bd43a 	srai	r5,r3,16
10009cb8:	193fffcc 	andi	r4,r3,65535
10009cbc:	3947883a 	add	r3,r7,r5
10009cc0:	180a943a 	slli	r5,r3,16
10009cc4:	1807d43a 	srai	r3,r3,16
10009cc8:	2908b03a 	or	r4,r5,r4
10009ccc:	313fff15 	stw	r4,-4(r6)
10009cd0:	5a3ff236 	bltu	r11,r8,10009c9c <__alt_data_end+0xf8009c9c>
10009cd4:	0406303a 	nor	r3,zero,r16
10009cd8:	1a07883a 	add	r3,r3,r8
10009cdc:	1806d0ba 	srli	r3,r3,2
10009ce0:	18c00044 	addi	r3,r3,1
10009ce4:	18c7883a 	add	r3,r3,r3
10009ce8:	18c7883a 	add	r3,r3,r3
10009cec:	50d5883a 	add	r10,r10,r3
10009cf0:	50ffff04 	addi	r3,r10,-4
10009cf4:	2000041e 	bne	r4,zero,10009d08 <__mdiff+0x194>
10009cf8:	18ffff04 	addi	r3,r3,-4
10009cfc:	19000017 	ldw	r4,0(r3)
10009d00:	4a7fffc4 	addi	r9,r9,-1
10009d04:	203ffc26 	beq	r4,zero,10009cf8 <__alt_data_end+0xf8009cf8>
10009d08:	12400415 	stw	r9,16(r2)
10009d0c:	dfc00517 	ldw	ra,20(sp)
10009d10:	dd000417 	ldw	r20,16(sp)
10009d14:	dcc00317 	ldw	r19,12(sp)
10009d18:	dc800217 	ldw	r18,8(sp)
10009d1c:	dc400117 	ldw	r17,4(sp)
10009d20:	dc000017 	ldw	r16,0(sp)
10009d24:	dec00604 	addi	sp,sp,24
10009d28:	f800283a 	ret
10009d2c:	000b883a 	mov	r5,zero
10009d30:	00091900 	call	10009190 <_Balloc>
10009d34:	00c00044 	movi	r3,1
10009d38:	10c00415 	stw	r3,16(r2)
10009d3c:	10000515 	stw	zero,20(r2)
10009d40:	003ff206 	br	10009d0c <__alt_data_end+0xf8009d0c>
10009d44:	8023883a 	mov	r17,r16
10009d48:	0029883a 	mov	r20,zero
10009d4c:	4021883a 	mov	r16,r8
10009d50:	003fad06 	br	10009c08 <__alt_data_end+0xf8009c08>
10009d54:	9005883a 	mov	r2,r18
10009d58:	94400504 	addi	r17,r18,20
10009d5c:	9c000504 	addi	r16,r19,20
10009d60:	9825883a 	mov	r18,r19
10009d64:	05000044 	movi	r20,1
10009d68:	1027883a 	mov	r19,r2
10009d6c:	003fa606 	br	10009c08 <__alt_data_end+0xf8009c08>

10009d70 <__ulp>:
10009d70:	295ffc2c 	andhi	r5,r5,32752
10009d74:	00bf3034 	movhi	r2,64704
10009d78:	2887883a 	add	r3,r5,r2
10009d7c:	00c0020e 	bge	zero,r3,10009d88 <__ulp+0x18>
10009d80:	0005883a 	mov	r2,zero
10009d84:	f800283a 	ret
10009d88:	00c7c83a 	sub	r3,zero,r3
10009d8c:	1807d53a 	srai	r3,r3,20
10009d90:	008004c4 	movi	r2,19
10009d94:	10c00b0e 	bge	r2,r3,10009dc4 <__ulp+0x54>
10009d98:	18bffb04 	addi	r2,r3,-20
10009d9c:	01000784 	movi	r4,30
10009da0:	0007883a 	mov	r3,zero
10009da4:	20800516 	blt	r4,r2,10009dbc <__ulp+0x4c>
10009da8:	010007c4 	movi	r4,31
10009dac:	2089c83a 	sub	r4,r4,r2
10009db0:	00800044 	movi	r2,1
10009db4:	1104983a 	sll	r2,r2,r4
10009db8:	f800283a 	ret
10009dbc:	00800044 	movi	r2,1
10009dc0:	f800283a 	ret
10009dc4:	01400234 	movhi	r5,8
10009dc8:	28c7d83a 	sra	r3,r5,r3
10009dcc:	0005883a 	mov	r2,zero
10009dd0:	f800283a 	ret

10009dd4 <__b2d>:
10009dd4:	defffa04 	addi	sp,sp,-24
10009dd8:	dc000015 	stw	r16,0(sp)
10009ddc:	24000417 	ldw	r16,16(r4)
10009de0:	dc400115 	stw	r17,4(sp)
10009de4:	24400504 	addi	r17,r4,20
10009de8:	8421883a 	add	r16,r16,r16
10009dec:	8421883a 	add	r16,r16,r16
10009df0:	8c21883a 	add	r16,r17,r16
10009df4:	dc800215 	stw	r18,8(sp)
10009df8:	84bfff17 	ldw	r18,-4(r16)
10009dfc:	dd000415 	stw	r20,16(sp)
10009e00:	dcc00315 	stw	r19,12(sp)
10009e04:	9009883a 	mov	r4,r18
10009e08:	2829883a 	mov	r20,r5
10009e0c:	dfc00515 	stw	ra,20(sp)
10009e10:	00094ac0 	call	100094ac <__hi0bits>
10009e14:	00c00804 	movi	r3,32
10009e18:	1889c83a 	sub	r4,r3,r2
10009e1c:	a1000015 	stw	r4,0(r20)
10009e20:	01000284 	movi	r4,10
10009e24:	84ffff04 	addi	r19,r16,-4
10009e28:	20801216 	blt	r4,r2,10009e74 <__b2d+0xa0>
10009e2c:	018002c4 	movi	r6,11
10009e30:	308dc83a 	sub	r6,r6,r2
10009e34:	9186d83a 	srl	r3,r18,r6
10009e38:	18cffc34 	orhi	r3,r3,16368
10009e3c:	8cc0212e 	bgeu	r17,r19,10009ec4 <__b2d+0xf0>
10009e40:	813ffe17 	ldw	r4,-8(r16)
10009e44:	218cd83a 	srl	r6,r4,r6
10009e48:	10800544 	addi	r2,r2,21
10009e4c:	9084983a 	sll	r2,r18,r2
10009e50:	1184b03a 	or	r2,r2,r6
10009e54:	dfc00517 	ldw	ra,20(sp)
10009e58:	dd000417 	ldw	r20,16(sp)
10009e5c:	dcc00317 	ldw	r19,12(sp)
10009e60:	dc800217 	ldw	r18,8(sp)
10009e64:	dc400117 	ldw	r17,4(sp)
10009e68:	dc000017 	ldw	r16,0(sp)
10009e6c:	dec00604 	addi	sp,sp,24
10009e70:	f800283a 	ret
10009e74:	8cc00f2e 	bgeu	r17,r19,10009eb4 <__b2d+0xe0>
10009e78:	117ffd44 	addi	r5,r2,-11
10009e7c:	80bffe17 	ldw	r2,-8(r16)
10009e80:	28000e26 	beq	r5,zero,10009ebc <__b2d+0xe8>
10009e84:	1949c83a 	sub	r4,r3,r5
10009e88:	9164983a 	sll	r18,r18,r5
10009e8c:	1106d83a 	srl	r3,r2,r4
10009e90:	81bffe04 	addi	r6,r16,-8
10009e94:	948ffc34 	orhi	r18,r18,16368
10009e98:	90c6b03a 	or	r3,r18,r3
10009e9c:	89800e2e 	bgeu	r17,r6,10009ed8 <__b2d+0x104>
10009ea0:	81bffd17 	ldw	r6,-12(r16)
10009ea4:	1144983a 	sll	r2,r2,r5
10009ea8:	310ad83a 	srl	r5,r6,r4
10009eac:	2884b03a 	or	r2,r5,r2
10009eb0:	003fe806 	br	10009e54 <__alt_data_end+0xf8009e54>
10009eb4:	10bffd44 	addi	r2,r2,-11
10009eb8:	1000041e 	bne	r2,zero,10009ecc <__b2d+0xf8>
10009ebc:	90cffc34 	orhi	r3,r18,16368
10009ec0:	003fe406 	br	10009e54 <__alt_data_end+0xf8009e54>
10009ec4:	000d883a 	mov	r6,zero
10009ec8:	003fdf06 	br	10009e48 <__alt_data_end+0xf8009e48>
10009ecc:	90a4983a 	sll	r18,r18,r2
10009ed0:	0005883a 	mov	r2,zero
10009ed4:	003ff906 	br	10009ebc <__alt_data_end+0xf8009ebc>
10009ed8:	1144983a 	sll	r2,r2,r5
10009edc:	003fdd06 	br	10009e54 <__alt_data_end+0xf8009e54>

10009ee0 <__d2b>:
10009ee0:	defff804 	addi	sp,sp,-32
10009ee4:	dc000215 	stw	r16,8(sp)
10009ee8:	3021883a 	mov	r16,r6
10009eec:	dc400315 	stw	r17,12(sp)
10009ef0:	8022907a 	slli	r17,r16,1
10009ef4:	dd000615 	stw	r20,24(sp)
10009ef8:	2829883a 	mov	r20,r5
10009efc:	01400044 	movi	r5,1
10009f00:	dcc00515 	stw	r19,20(sp)
10009f04:	dc800415 	stw	r18,16(sp)
10009f08:	dfc00715 	stw	ra,28(sp)
10009f0c:	3825883a 	mov	r18,r7
10009f10:	8822d57a 	srli	r17,r17,21
10009f14:	00091900 	call	10009190 <_Balloc>
10009f18:	1027883a 	mov	r19,r2
10009f1c:	00800434 	movhi	r2,16
10009f20:	10bfffc4 	addi	r2,r2,-1
10009f24:	808c703a 	and	r6,r16,r2
10009f28:	88000126 	beq	r17,zero,10009f30 <__d2b+0x50>
10009f2c:	31800434 	orhi	r6,r6,16
10009f30:	d9800015 	stw	r6,0(sp)
10009f34:	a0002426 	beq	r20,zero,10009fc8 <__d2b+0xe8>
10009f38:	d9000104 	addi	r4,sp,4
10009f3c:	dd000115 	stw	r20,4(sp)
10009f40:	00095140 	call	10009514 <__lo0bits>
10009f44:	d8c00017 	ldw	r3,0(sp)
10009f48:	10002f1e 	bne	r2,zero,1000a008 <__d2b+0x128>
10009f4c:	d9000117 	ldw	r4,4(sp)
10009f50:	99000515 	stw	r4,20(r19)
10009f54:	1821003a 	cmpeq	r16,r3,zero
10009f58:	01000084 	movi	r4,2
10009f5c:	2421c83a 	sub	r16,r4,r16
10009f60:	98c00615 	stw	r3,24(r19)
10009f64:	9c000415 	stw	r16,16(r19)
10009f68:	88001f1e 	bne	r17,zero,10009fe8 <__d2b+0x108>
10009f6c:	10bef384 	addi	r2,r2,-1074
10009f70:	90800015 	stw	r2,0(r18)
10009f74:	00900034 	movhi	r2,16384
10009f78:	10bfffc4 	addi	r2,r2,-1
10009f7c:	8085883a 	add	r2,r16,r2
10009f80:	1085883a 	add	r2,r2,r2
10009f84:	1085883a 	add	r2,r2,r2
10009f88:	9885883a 	add	r2,r19,r2
10009f8c:	11000517 	ldw	r4,20(r2)
10009f90:	8020917a 	slli	r16,r16,5
10009f94:	00094ac0 	call	100094ac <__hi0bits>
10009f98:	d8c00817 	ldw	r3,32(sp)
10009f9c:	8085c83a 	sub	r2,r16,r2
10009fa0:	18800015 	stw	r2,0(r3)
10009fa4:	9805883a 	mov	r2,r19
10009fa8:	dfc00717 	ldw	ra,28(sp)
10009fac:	dd000617 	ldw	r20,24(sp)
10009fb0:	dcc00517 	ldw	r19,20(sp)
10009fb4:	dc800417 	ldw	r18,16(sp)
10009fb8:	dc400317 	ldw	r17,12(sp)
10009fbc:	dc000217 	ldw	r16,8(sp)
10009fc0:	dec00804 	addi	sp,sp,32
10009fc4:	f800283a 	ret
10009fc8:	d809883a 	mov	r4,sp
10009fcc:	00095140 	call	10009514 <__lo0bits>
10009fd0:	d8c00017 	ldw	r3,0(sp)
10009fd4:	04000044 	movi	r16,1
10009fd8:	9c000415 	stw	r16,16(r19)
10009fdc:	98c00515 	stw	r3,20(r19)
10009fe0:	10800804 	addi	r2,r2,32
10009fe4:	883fe126 	beq	r17,zero,10009f6c <__alt_data_end+0xf8009f6c>
10009fe8:	00c00d44 	movi	r3,53
10009fec:	8c7ef344 	addi	r17,r17,-1075
10009ff0:	88a3883a 	add	r17,r17,r2
10009ff4:	1885c83a 	sub	r2,r3,r2
10009ff8:	d8c00817 	ldw	r3,32(sp)
10009ffc:	94400015 	stw	r17,0(r18)
1000a000:	18800015 	stw	r2,0(r3)
1000a004:	003fe706 	br	10009fa4 <__alt_data_end+0xf8009fa4>
1000a008:	01000804 	movi	r4,32
1000a00c:	2089c83a 	sub	r4,r4,r2
1000a010:	1908983a 	sll	r4,r3,r4
1000a014:	d9400117 	ldw	r5,4(sp)
1000a018:	1886d83a 	srl	r3,r3,r2
1000a01c:	2148b03a 	or	r4,r4,r5
1000a020:	99000515 	stw	r4,20(r19)
1000a024:	d8c00015 	stw	r3,0(sp)
1000a028:	003fca06 	br	10009f54 <__alt_data_end+0xf8009f54>

1000a02c <__ratio>:
1000a02c:	defff904 	addi	sp,sp,-28
1000a030:	dc400315 	stw	r17,12(sp)
1000a034:	2823883a 	mov	r17,r5
1000a038:	d9400104 	addi	r5,sp,4
1000a03c:	dfc00615 	stw	ra,24(sp)
1000a040:	dcc00515 	stw	r19,20(sp)
1000a044:	dc800415 	stw	r18,16(sp)
1000a048:	2027883a 	mov	r19,r4
1000a04c:	dc000215 	stw	r16,8(sp)
1000a050:	0009dd40 	call	10009dd4 <__b2d>
1000a054:	d80b883a 	mov	r5,sp
1000a058:	8809883a 	mov	r4,r17
1000a05c:	1025883a 	mov	r18,r2
1000a060:	1821883a 	mov	r16,r3
1000a064:	0009dd40 	call	10009dd4 <__b2d>
1000a068:	8a000417 	ldw	r8,16(r17)
1000a06c:	99000417 	ldw	r4,16(r19)
1000a070:	d9400117 	ldw	r5,4(sp)
1000a074:	2209c83a 	sub	r4,r4,r8
1000a078:	2010917a 	slli	r8,r4,5
1000a07c:	d9000017 	ldw	r4,0(sp)
1000a080:	2909c83a 	sub	r4,r5,r4
1000a084:	4109883a 	add	r4,r8,r4
1000a088:	01000e0e 	bge	zero,r4,1000a0c4 <__ratio+0x98>
1000a08c:	2008953a 	slli	r4,r4,20
1000a090:	2421883a 	add	r16,r4,r16
1000a094:	100d883a 	mov	r6,r2
1000a098:	180f883a 	mov	r7,r3
1000a09c:	9009883a 	mov	r4,r18
1000a0a0:	800b883a 	mov	r5,r16
1000a0a4:	000e1180 	call	1000e118 <__divdf3>
1000a0a8:	dfc00617 	ldw	ra,24(sp)
1000a0ac:	dcc00517 	ldw	r19,20(sp)
1000a0b0:	dc800417 	ldw	r18,16(sp)
1000a0b4:	dc400317 	ldw	r17,12(sp)
1000a0b8:	dc000217 	ldw	r16,8(sp)
1000a0bc:	dec00704 	addi	sp,sp,28
1000a0c0:	f800283a 	ret
1000a0c4:	2008953a 	slli	r4,r4,20
1000a0c8:	1907c83a 	sub	r3,r3,r4
1000a0cc:	003ff106 	br	1000a094 <__alt_data_end+0xf800a094>

1000a0d0 <_mprec_log10>:
1000a0d0:	defffe04 	addi	sp,sp,-8
1000a0d4:	dc000015 	stw	r16,0(sp)
1000a0d8:	dfc00115 	stw	ra,4(sp)
1000a0dc:	008005c4 	movi	r2,23
1000a0e0:	2021883a 	mov	r16,r4
1000a0e4:	11000d0e 	bge	r2,r4,1000a11c <_mprec_log10+0x4c>
1000a0e8:	0005883a 	mov	r2,zero
1000a0ec:	00cffc34 	movhi	r3,16368
1000a0f0:	843fffc4 	addi	r16,r16,-1
1000a0f4:	000d883a 	mov	r6,zero
1000a0f8:	01d00934 	movhi	r7,16420
1000a0fc:	1009883a 	mov	r4,r2
1000a100:	180b883a 	mov	r5,r3
1000a104:	000ed400 	call	1000ed40 <__muldf3>
1000a108:	803ff91e 	bne	r16,zero,1000a0f0 <__alt_data_end+0xf800a0f0>
1000a10c:	dfc00117 	ldw	ra,4(sp)
1000a110:	dc000017 	ldw	r16,0(sp)
1000a114:	dec00204 	addi	sp,sp,8
1000a118:	f800283a 	ret
1000a11c:	202090fa 	slli	r16,r4,3
1000a120:	00840074 	movhi	r2,4097
1000a124:	108c7204 	addi	r2,r2,12744
1000a128:	1421883a 	add	r16,r2,r16
1000a12c:	80800017 	ldw	r2,0(r16)
1000a130:	80c00117 	ldw	r3,4(r16)
1000a134:	dfc00117 	ldw	ra,4(sp)
1000a138:	dc000017 	ldw	r16,0(sp)
1000a13c:	dec00204 	addi	sp,sp,8
1000a140:	f800283a 	ret

1000a144 <__copybits>:
1000a144:	297fffc4 	addi	r5,r5,-1
1000a148:	280fd17a 	srai	r7,r5,5
1000a14c:	30c00417 	ldw	r3,16(r6)
1000a150:	30800504 	addi	r2,r6,20
1000a154:	39c00044 	addi	r7,r7,1
1000a158:	18c7883a 	add	r3,r3,r3
1000a15c:	39cf883a 	add	r7,r7,r7
1000a160:	18c7883a 	add	r3,r3,r3
1000a164:	39cf883a 	add	r7,r7,r7
1000a168:	10c7883a 	add	r3,r2,r3
1000a16c:	21cf883a 	add	r7,r4,r7
1000a170:	10c00d2e 	bgeu	r2,r3,1000a1a8 <__copybits+0x64>
1000a174:	200b883a 	mov	r5,r4
1000a178:	12000017 	ldw	r8,0(r2)
1000a17c:	29400104 	addi	r5,r5,4
1000a180:	10800104 	addi	r2,r2,4
1000a184:	2a3fff15 	stw	r8,-4(r5)
1000a188:	10fffb36 	bltu	r2,r3,1000a178 <__alt_data_end+0xf800a178>
1000a18c:	1985c83a 	sub	r2,r3,r6
1000a190:	10bffac4 	addi	r2,r2,-21
1000a194:	1004d0ba 	srli	r2,r2,2
1000a198:	10800044 	addi	r2,r2,1
1000a19c:	1085883a 	add	r2,r2,r2
1000a1a0:	1085883a 	add	r2,r2,r2
1000a1a4:	2089883a 	add	r4,r4,r2
1000a1a8:	21c0032e 	bgeu	r4,r7,1000a1b8 <__copybits+0x74>
1000a1ac:	20000015 	stw	zero,0(r4)
1000a1b0:	21000104 	addi	r4,r4,4
1000a1b4:	21fffd36 	bltu	r4,r7,1000a1ac <__alt_data_end+0xf800a1ac>
1000a1b8:	f800283a 	ret

1000a1bc <__any_on>:
1000a1bc:	20c00417 	ldw	r3,16(r4)
1000a1c0:	2805d17a 	srai	r2,r5,5
1000a1c4:	21000504 	addi	r4,r4,20
1000a1c8:	18800d0e 	bge	r3,r2,1000a200 <__any_on+0x44>
1000a1cc:	18c7883a 	add	r3,r3,r3
1000a1d0:	18c7883a 	add	r3,r3,r3
1000a1d4:	20c7883a 	add	r3,r4,r3
1000a1d8:	20c0192e 	bgeu	r4,r3,1000a240 <__any_on+0x84>
1000a1dc:	18bfff17 	ldw	r2,-4(r3)
1000a1e0:	18ffff04 	addi	r3,r3,-4
1000a1e4:	1000041e 	bne	r2,zero,1000a1f8 <__any_on+0x3c>
1000a1e8:	20c0142e 	bgeu	r4,r3,1000a23c <__any_on+0x80>
1000a1ec:	18ffff04 	addi	r3,r3,-4
1000a1f0:	19400017 	ldw	r5,0(r3)
1000a1f4:	283ffc26 	beq	r5,zero,1000a1e8 <__alt_data_end+0xf800a1e8>
1000a1f8:	00800044 	movi	r2,1
1000a1fc:	f800283a 	ret
1000a200:	10c00a0e 	bge	r2,r3,1000a22c <__any_on+0x70>
1000a204:	1085883a 	add	r2,r2,r2
1000a208:	1085883a 	add	r2,r2,r2
1000a20c:	294007cc 	andi	r5,r5,31
1000a210:	2087883a 	add	r3,r4,r2
1000a214:	283ff026 	beq	r5,zero,1000a1d8 <__alt_data_end+0xf800a1d8>
1000a218:	19800017 	ldw	r6,0(r3)
1000a21c:	3144d83a 	srl	r2,r6,r5
1000a220:	114a983a 	sll	r5,r2,r5
1000a224:	317ff41e 	bne	r6,r5,1000a1f8 <__alt_data_end+0xf800a1f8>
1000a228:	003feb06 	br	1000a1d8 <__alt_data_end+0xf800a1d8>
1000a22c:	1085883a 	add	r2,r2,r2
1000a230:	1085883a 	add	r2,r2,r2
1000a234:	2087883a 	add	r3,r4,r2
1000a238:	003fe706 	br	1000a1d8 <__alt_data_end+0xf800a1d8>
1000a23c:	f800283a 	ret
1000a240:	0005883a 	mov	r2,zero
1000a244:	f800283a 	ret

1000a248 <_realloc_r>:
1000a248:	defff604 	addi	sp,sp,-40
1000a24c:	dc800215 	stw	r18,8(sp)
1000a250:	dfc00915 	stw	ra,36(sp)
1000a254:	df000815 	stw	fp,32(sp)
1000a258:	ddc00715 	stw	r23,28(sp)
1000a25c:	dd800615 	stw	r22,24(sp)
1000a260:	dd400515 	stw	r21,20(sp)
1000a264:	dd000415 	stw	r20,16(sp)
1000a268:	dcc00315 	stw	r19,12(sp)
1000a26c:	dc400115 	stw	r17,4(sp)
1000a270:	dc000015 	stw	r16,0(sp)
1000a274:	3025883a 	mov	r18,r6
1000a278:	2800b726 	beq	r5,zero,1000a558 <_realloc_r+0x310>
1000a27c:	282b883a 	mov	r21,r5
1000a280:	2029883a 	mov	r20,r4
1000a284:	00106ac0 	call	100106ac <__malloc_lock>
1000a288:	a8bfff17 	ldw	r2,-4(r21)
1000a28c:	043fff04 	movi	r16,-4
1000a290:	90c002c4 	addi	r3,r18,11
1000a294:	01000584 	movi	r4,22
1000a298:	acfffe04 	addi	r19,r21,-8
1000a29c:	1420703a 	and	r16,r2,r16
1000a2a0:	20c0332e 	bgeu	r4,r3,1000a370 <_realloc_r+0x128>
1000a2a4:	047ffe04 	movi	r17,-8
1000a2a8:	1c62703a 	and	r17,r3,r17
1000a2ac:	8807883a 	mov	r3,r17
1000a2b0:	88005816 	blt	r17,zero,1000a414 <_realloc_r+0x1cc>
1000a2b4:	8c805736 	bltu	r17,r18,1000a414 <_realloc_r+0x1cc>
1000a2b8:	80c0300e 	bge	r16,r3,1000a37c <_realloc_r+0x134>
1000a2bc:	07040074 	movhi	fp,4097
1000a2c0:	e70e2004 	addi	fp,fp,14464
1000a2c4:	e1c00217 	ldw	r7,8(fp)
1000a2c8:	9c09883a 	add	r4,r19,r16
1000a2cc:	22000117 	ldw	r8,4(r4)
1000a2d0:	21c06326 	beq	r4,r7,1000a460 <_realloc_r+0x218>
1000a2d4:	017fff84 	movi	r5,-2
1000a2d8:	414a703a 	and	r5,r8,r5
1000a2dc:	214b883a 	add	r5,r4,r5
1000a2e0:	29800117 	ldw	r6,4(r5)
1000a2e4:	3180004c 	andi	r6,r6,1
1000a2e8:	30003f26 	beq	r6,zero,1000a3e8 <_realloc_r+0x1a0>
1000a2ec:	1080004c 	andi	r2,r2,1
1000a2f0:	10008326 	beq	r2,zero,1000a500 <_realloc_r+0x2b8>
1000a2f4:	900b883a 	mov	r5,r18
1000a2f8:	a009883a 	mov	r4,r20
1000a2fc:	00084d40 	call	100084d4 <_malloc_r>
1000a300:	1025883a 	mov	r18,r2
1000a304:	10011e26 	beq	r2,zero,1000a780 <_realloc_r+0x538>
1000a308:	a93fff17 	ldw	r4,-4(r21)
1000a30c:	10fffe04 	addi	r3,r2,-8
1000a310:	00bfff84 	movi	r2,-2
1000a314:	2084703a 	and	r2,r4,r2
1000a318:	9885883a 	add	r2,r19,r2
1000a31c:	1880ee26 	beq	r3,r2,1000a6d8 <_realloc_r+0x490>
1000a320:	81bfff04 	addi	r6,r16,-4
1000a324:	00800904 	movi	r2,36
1000a328:	1180b836 	bltu	r2,r6,1000a60c <_realloc_r+0x3c4>
1000a32c:	00c004c4 	movi	r3,19
1000a330:	19809636 	bltu	r3,r6,1000a58c <_realloc_r+0x344>
1000a334:	9005883a 	mov	r2,r18
1000a338:	a807883a 	mov	r3,r21
1000a33c:	19000017 	ldw	r4,0(r3)
1000a340:	11000015 	stw	r4,0(r2)
1000a344:	19000117 	ldw	r4,4(r3)
1000a348:	11000115 	stw	r4,4(r2)
1000a34c:	18c00217 	ldw	r3,8(r3)
1000a350:	10c00215 	stw	r3,8(r2)
1000a354:	a80b883a 	mov	r5,r21
1000a358:	a009883a 	mov	r4,r20
1000a35c:	00078dc0 	call	100078dc <_free_r>
1000a360:	a009883a 	mov	r4,r20
1000a364:	00106d00 	call	100106d0 <__malloc_unlock>
1000a368:	9005883a 	mov	r2,r18
1000a36c:	00001206 	br	1000a3b8 <_realloc_r+0x170>
1000a370:	00c00404 	movi	r3,16
1000a374:	1823883a 	mov	r17,r3
1000a378:	003fce06 	br	1000a2b4 <__alt_data_end+0xf800a2b4>
1000a37c:	a825883a 	mov	r18,r21
1000a380:	8445c83a 	sub	r2,r16,r17
1000a384:	00c003c4 	movi	r3,15
1000a388:	18802636 	bltu	r3,r2,1000a424 <_realloc_r+0x1dc>
1000a38c:	99800117 	ldw	r6,4(r19)
1000a390:	9c07883a 	add	r3,r19,r16
1000a394:	3180004c 	andi	r6,r6,1
1000a398:	3420b03a 	or	r16,r6,r16
1000a39c:	9c000115 	stw	r16,4(r19)
1000a3a0:	18800117 	ldw	r2,4(r3)
1000a3a4:	10800054 	ori	r2,r2,1
1000a3a8:	18800115 	stw	r2,4(r3)
1000a3ac:	a009883a 	mov	r4,r20
1000a3b0:	00106d00 	call	100106d0 <__malloc_unlock>
1000a3b4:	9005883a 	mov	r2,r18
1000a3b8:	dfc00917 	ldw	ra,36(sp)
1000a3bc:	df000817 	ldw	fp,32(sp)
1000a3c0:	ddc00717 	ldw	r23,28(sp)
1000a3c4:	dd800617 	ldw	r22,24(sp)
1000a3c8:	dd400517 	ldw	r21,20(sp)
1000a3cc:	dd000417 	ldw	r20,16(sp)
1000a3d0:	dcc00317 	ldw	r19,12(sp)
1000a3d4:	dc800217 	ldw	r18,8(sp)
1000a3d8:	dc400117 	ldw	r17,4(sp)
1000a3dc:	dc000017 	ldw	r16,0(sp)
1000a3e0:	dec00a04 	addi	sp,sp,40
1000a3e4:	f800283a 	ret
1000a3e8:	017fff04 	movi	r5,-4
1000a3ec:	414a703a 	and	r5,r8,r5
1000a3f0:	814d883a 	add	r6,r16,r5
1000a3f4:	30c01f16 	blt	r6,r3,1000a474 <_realloc_r+0x22c>
1000a3f8:	20800317 	ldw	r2,12(r4)
1000a3fc:	20c00217 	ldw	r3,8(r4)
1000a400:	a825883a 	mov	r18,r21
1000a404:	3021883a 	mov	r16,r6
1000a408:	18800315 	stw	r2,12(r3)
1000a40c:	10c00215 	stw	r3,8(r2)
1000a410:	003fdb06 	br	1000a380 <__alt_data_end+0xf800a380>
1000a414:	00800304 	movi	r2,12
1000a418:	a0800015 	stw	r2,0(r20)
1000a41c:	0005883a 	mov	r2,zero
1000a420:	003fe506 	br	1000a3b8 <__alt_data_end+0xf800a3b8>
1000a424:	98c00117 	ldw	r3,4(r19)
1000a428:	9c4b883a 	add	r5,r19,r17
1000a42c:	11000054 	ori	r4,r2,1
1000a430:	18c0004c 	andi	r3,r3,1
1000a434:	1c62b03a 	or	r17,r3,r17
1000a438:	9c400115 	stw	r17,4(r19)
1000a43c:	29000115 	stw	r4,4(r5)
1000a440:	2885883a 	add	r2,r5,r2
1000a444:	10c00117 	ldw	r3,4(r2)
1000a448:	29400204 	addi	r5,r5,8
1000a44c:	a009883a 	mov	r4,r20
1000a450:	18c00054 	ori	r3,r3,1
1000a454:	10c00115 	stw	r3,4(r2)
1000a458:	00078dc0 	call	100078dc <_free_r>
1000a45c:	003fd306 	br	1000a3ac <__alt_data_end+0xf800a3ac>
1000a460:	017fff04 	movi	r5,-4
1000a464:	414a703a 	and	r5,r8,r5
1000a468:	89800404 	addi	r6,r17,16
1000a46c:	8151883a 	add	r8,r16,r5
1000a470:	4180590e 	bge	r8,r6,1000a5d8 <_realloc_r+0x390>
1000a474:	1080004c 	andi	r2,r2,1
1000a478:	103f9e1e 	bne	r2,zero,1000a2f4 <__alt_data_end+0xf800a2f4>
1000a47c:	adbffe17 	ldw	r22,-8(r21)
1000a480:	00bfff04 	movi	r2,-4
1000a484:	9dadc83a 	sub	r22,r19,r22
1000a488:	b1800117 	ldw	r6,4(r22)
1000a48c:	3084703a 	and	r2,r6,r2
1000a490:	20002026 	beq	r4,zero,1000a514 <_realloc_r+0x2cc>
1000a494:	80af883a 	add	r23,r16,r2
1000a498:	b96f883a 	add	r23,r23,r5
1000a49c:	21c05f26 	beq	r4,r7,1000a61c <_realloc_r+0x3d4>
1000a4a0:	b8c01c16 	blt	r23,r3,1000a514 <_realloc_r+0x2cc>
1000a4a4:	20800317 	ldw	r2,12(r4)
1000a4a8:	20c00217 	ldw	r3,8(r4)
1000a4ac:	81bfff04 	addi	r6,r16,-4
1000a4b0:	01000904 	movi	r4,36
1000a4b4:	18800315 	stw	r2,12(r3)
1000a4b8:	10c00215 	stw	r3,8(r2)
1000a4bc:	b0c00217 	ldw	r3,8(r22)
1000a4c0:	b0800317 	ldw	r2,12(r22)
1000a4c4:	b4800204 	addi	r18,r22,8
1000a4c8:	18800315 	stw	r2,12(r3)
1000a4cc:	10c00215 	stw	r3,8(r2)
1000a4d0:	21801b36 	bltu	r4,r6,1000a540 <_realloc_r+0x2f8>
1000a4d4:	008004c4 	movi	r2,19
1000a4d8:	1180352e 	bgeu	r2,r6,1000a5b0 <_realloc_r+0x368>
1000a4dc:	a8800017 	ldw	r2,0(r21)
1000a4e0:	b0800215 	stw	r2,8(r22)
1000a4e4:	a8800117 	ldw	r2,4(r21)
1000a4e8:	b0800315 	stw	r2,12(r22)
1000a4ec:	008006c4 	movi	r2,27
1000a4f0:	11807f36 	bltu	r2,r6,1000a6f0 <_realloc_r+0x4a8>
1000a4f4:	b0800404 	addi	r2,r22,16
1000a4f8:	ad400204 	addi	r21,r21,8
1000a4fc:	00002d06 	br	1000a5b4 <_realloc_r+0x36c>
1000a500:	adbffe17 	ldw	r22,-8(r21)
1000a504:	00bfff04 	movi	r2,-4
1000a508:	9dadc83a 	sub	r22,r19,r22
1000a50c:	b1000117 	ldw	r4,4(r22)
1000a510:	2084703a 	and	r2,r4,r2
1000a514:	b03f7726 	beq	r22,zero,1000a2f4 <__alt_data_end+0xf800a2f4>
1000a518:	80af883a 	add	r23,r16,r2
1000a51c:	b8ff7516 	blt	r23,r3,1000a2f4 <__alt_data_end+0xf800a2f4>
1000a520:	b0800317 	ldw	r2,12(r22)
1000a524:	b0c00217 	ldw	r3,8(r22)
1000a528:	81bfff04 	addi	r6,r16,-4
1000a52c:	01000904 	movi	r4,36
1000a530:	18800315 	stw	r2,12(r3)
1000a534:	10c00215 	stw	r3,8(r2)
1000a538:	b4800204 	addi	r18,r22,8
1000a53c:	21bfe52e 	bgeu	r4,r6,1000a4d4 <__alt_data_end+0xf800a4d4>
1000a540:	a80b883a 	mov	r5,r21
1000a544:	9009883a 	mov	r4,r18
1000a548:	0008f0c0 	call	10008f0c <memmove>
1000a54c:	b821883a 	mov	r16,r23
1000a550:	b027883a 	mov	r19,r22
1000a554:	003f8a06 	br	1000a380 <__alt_data_end+0xf800a380>
1000a558:	300b883a 	mov	r5,r6
1000a55c:	dfc00917 	ldw	ra,36(sp)
1000a560:	df000817 	ldw	fp,32(sp)
1000a564:	ddc00717 	ldw	r23,28(sp)
1000a568:	dd800617 	ldw	r22,24(sp)
1000a56c:	dd400517 	ldw	r21,20(sp)
1000a570:	dd000417 	ldw	r20,16(sp)
1000a574:	dcc00317 	ldw	r19,12(sp)
1000a578:	dc800217 	ldw	r18,8(sp)
1000a57c:	dc400117 	ldw	r17,4(sp)
1000a580:	dc000017 	ldw	r16,0(sp)
1000a584:	dec00a04 	addi	sp,sp,40
1000a588:	00084d41 	jmpi	100084d4 <_malloc_r>
1000a58c:	a8c00017 	ldw	r3,0(r21)
1000a590:	90c00015 	stw	r3,0(r18)
1000a594:	a8c00117 	ldw	r3,4(r21)
1000a598:	90c00115 	stw	r3,4(r18)
1000a59c:	00c006c4 	movi	r3,27
1000a5a0:	19804536 	bltu	r3,r6,1000a6b8 <_realloc_r+0x470>
1000a5a4:	90800204 	addi	r2,r18,8
1000a5a8:	a8c00204 	addi	r3,r21,8
1000a5ac:	003f6306 	br	1000a33c <__alt_data_end+0xf800a33c>
1000a5b0:	9005883a 	mov	r2,r18
1000a5b4:	a8c00017 	ldw	r3,0(r21)
1000a5b8:	b821883a 	mov	r16,r23
1000a5bc:	b027883a 	mov	r19,r22
1000a5c0:	10c00015 	stw	r3,0(r2)
1000a5c4:	a8c00117 	ldw	r3,4(r21)
1000a5c8:	10c00115 	stw	r3,4(r2)
1000a5cc:	a8c00217 	ldw	r3,8(r21)
1000a5d0:	10c00215 	stw	r3,8(r2)
1000a5d4:	003f6a06 	br	1000a380 <__alt_data_end+0xf800a380>
1000a5d8:	9c67883a 	add	r19,r19,r17
1000a5dc:	4445c83a 	sub	r2,r8,r17
1000a5e0:	e4c00215 	stw	r19,8(fp)
1000a5e4:	10800054 	ori	r2,r2,1
1000a5e8:	98800115 	stw	r2,4(r19)
1000a5ec:	a8bfff17 	ldw	r2,-4(r21)
1000a5f0:	a009883a 	mov	r4,r20
1000a5f4:	1080004c 	andi	r2,r2,1
1000a5f8:	1462b03a 	or	r17,r2,r17
1000a5fc:	ac7fff15 	stw	r17,-4(r21)
1000a600:	00106d00 	call	100106d0 <__malloc_unlock>
1000a604:	a805883a 	mov	r2,r21
1000a608:	003f6b06 	br	1000a3b8 <__alt_data_end+0xf800a3b8>
1000a60c:	a80b883a 	mov	r5,r21
1000a610:	9009883a 	mov	r4,r18
1000a614:	0008f0c0 	call	10008f0c <memmove>
1000a618:	003f4e06 	br	1000a354 <__alt_data_end+0xf800a354>
1000a61c:	89000404 	addi	r4,r17,16
1000a620:	b93fbc16 	blt	r23,r4,1000a514 <__alt_data_end+0xf800a514>
1000a624:	b0800317 	ldw	r2,12(r22)
1000a628:	b0c00217 	ldw	r3,8(r22)
1000a62c:	81bfff04 	addi	r6,r16,-4
1000a630:	01000904 	movi	r4,36
1000a634:	18800315 	stw	r2,12(r3)
1000a638:	10c00215 	stw	r3,8(r2)
1000a63c:	b4800204 	addi	r18,r22,8
1000a640:	21804336 	bltu	r4,r6,1000a750 <_realloc_r+0x508>
1000a644:	008004c4 	movi	r2,19
1000a648:	11803f2e 	bgeu	r2,r6,1000a748 <_realloc_r+0x500>
1000a64c:	a8800017 	ldw	r2,0(r21)
1000a650:	b0800215 	stw	r2,8(r22)
1000a654:	a8800117 	ldw	r2,4(r21)
1000a658:	b0800315 	stw	r2,12(r22)
1000a65c:	008006c4 	movi	r2,27
1000a660:	11803f36 	bltu	r2,r6,1000a760 <_realloc_r+0x518>
1000a664:	b0800404 	addi	r2,r22,16
1000a668:	ad400204 	addi	r21,r21,8
1000a66c:	a8c00017 	ldw	r3,0(r21)
1000a670:	10c00015 	stw	r3,0(r2)
1000a674:	a8c00117 	ldw	r3,4(r21)
1000a678:	10c00115 	stw	r3,4(r2)
1000a67c:	a8c00217 	ldw	r3,8(r21)
1000a680:	10c00215 	stw	r3,8(r2)
1000a684:	b447883a 	add	r3,r22,r17
1000a688:	bc45c83a 	sub	r2,r23,r17
1000a68c:	e0c00215 	stw	r3,8(fp)
1000a690:	10800054 	ori	r2,r2,1
1000a694:	18800115 	stw	r2,4(r3)
1000a698:	b0800117 	ldw	r2,4(r22)
1000a69c:	a009883a 	mov	r4,r20
1000a6a0:	1080004c 	andi	r2,r2,1
1000a6a4:	1462b03a 	or	r17,r2,r17
1000a6a8:	b4400115 	stw	r17,4(r22)
1000a6ac:	00106d00 	call	100106d0 <__malloc_unlock>
1000a6b0:	9005883a 	mov	r2,r18
1000a6b4:	003f4006 	br	1000a3b8 <__alt_data_end+0xf800a3b8>
1000a6b8:	a8c00217 	ldw	r3,8(r21)
1000a6bc:	90c00215 	stw	r3,8(r18)
1000a6c0:	a8c00317 	ldw	r3,12(r21)
1000a6c4:	90c00315 	stw	r3,12(r18)
1000a6c8:	30801126 	beq	r6,r2,1000a710 <_realloc_r+0x4c8>
1000a6cc:	90800404 	addi	r2,r18,16
1000a6d0:	a8c00404 	addi	r3,r21,16
1000a6d4:	003f1906 	br	1000a33c <__alt_data_end+0xf800a33c>
1000a6d8:	90ffff17 	ldw	r3,-4(r18)
1000a6dc:	00bfff04 	movi	r2,-4
1000a6e0:	a825883a 	mov	r18,r21
1000a6e4:	1884703a 	and	r2,r3,r2
1000a6e8:	80a1883a 	add	r16,r16,r2
1000a6ec:	003f2406 	br	1000a380 <__alt_data_end+0xf800a380>
1000a6f0:	a8800217 	ldw	r2,8(r21)
1000a6f4:	b0800415 	stw	r2,16(r22)
1000a6f8:	a8800317 	ldw	r2,12(r21)
1000a6fc:	b0800515 	stw	r2,20(r22)
1000a700:	31000a26 	beq	r6,r4,1000a72c <_realloc_r+0x4e4>
1000a704:	b0800604 	addi	r2,r22,24
1000a708:	ad400404 	addi	r21,r21,16
1000a70c:	003fa906 	br	1000a5b4 <__alt_data_end+0xf800a5b4>
1000a710:	a9000417 	ldw	r4,16(r21)
1000a714:	90800604 	addi	r2,r18,24
1000a718:	a8c00604 	addi	r3,r21,24
1000a71c:	91000415 	stw	r4,16(r18)
1000a720:	a9000517 	ldw	r4,20(r21)
1000a724:	91000515 	stw	r4,20(r18)
1000a728:	003f0406 	br	1000a33c <__alt_data_end+0xf800a33c>
1000a72c:	a8c00417 	ldw	r3,16(r21)
1000a730:	ad400604 	addi	r21,r21,24
1000a734:	b0800804 	addi	r2,r22,32
1000a738:	b0c00615 	stw	r3,24(r22)
1000a73c:	a8ffff17 	ldw	r3,-4(r21)
1000a740:	b0c00715 	stw	r3,28(r22)
1000a744:	003f9b06 	br	1000a5b4 <__alt_data_end+0xf800a5b4>
1000a748:	9005883a 	mov	r2,r18
1000a74c:	003fc706 	br	1000a66c <__alt_data_end+0xf800a66c>
1000a750:	a80b883a 	mov	r5,r21
1000a754:	9009883a 	mov	r4,r18
1000a758:	0008f0c0 	call	10008f0c <memmove>
1000a75c:	003fc906 	br	1000a684 <__alt_data_end+0xf800a684>
1000a760:	a8800217 	ldw	r2,8(r21)
1000a764:	b0800415 	stw	r2,16(r22)
1000a768:	a8800317 	ldw	r2,12(r21)
1000a76c:	b0800515 	stw	r2,20(r22)
1000a770:	31000726 	beq	r6,r4,1000a790 <_realloc_r+0x548>
1000a774:	b0800604 	addi	r2,r22,24
1000a778:	ad400404 	addi	r21,r21,16
1000a77c:	003fbb06 	br	1000a66c <__alt_data_end+0xf800a66c>
1000a780:	a009883a 	mov	r4,r20
1000a784:	00106d00 	call	100106d0 <__malloc_unlock>
1000a788:	0005883a 	mov	r2,zero
1000a78c:	003f0a06 	br	1000a3b8 <__alt_data_end+0xf800a3b8>
1000a790:	a8c00417 	ldw	r3,16(r21)
1000a794:	ad400604 	addi	r21,r21,24
1000a798:	b0800804 	addi	r2,r22,32
1000a79c:	b0c00615 	stw	r3,24(r22)
1000a7a0:	a8ffff17 	ldw	r3,-4(r21)
1000a7a4:	b0c00715 	stw	r3,28(r22)
1000a7a8:	003fb006 	br	1000a66c <__alt_data_end+0xf800a66c>

1000a7ac <__fpclassifyd>:
1000a7ac:	00a00034 	movhi	r2,32768
1000a7b0:	10bfffc4 	addi	r2,r2,-1
1000a7b4:	2884703a 	and	r2,r5,r2
1000a7b8:	10000726 	beq	r2,zero,1000a7d8 <__fpclassifyd+0x2c>
1000a7bc:	00fffc34 	movhi	r3,65520
1000a7c0:	019ff834 	movhi	r6,32736
1000a7c4:	28c7883a 	add	r3,r5,r3
1000a7c8:	31bfffc4 	addi	r6,r6,-1
1000a7cc:	30c00536 	bltu	r6,r3,1000a7e4 <__fpclassifyd+0x38>
1000a7d0:	00800104 	movi	r2,4
1000a7d4:	f800283a 	ret
1000a7d8:	2000021e 	bne	r4,zero,1000a7e4 <__fpclassifyd+0x38>
1000a7dc:	00800084 	movi	r2,2
1000a7e0:	f800283a 	ret
1000a7e4:	00dffc34 	movhi	r3,32752
1000a7e8:	019ff834 	movhi	r6,32736
1000a7ec:	28cb883a 	add	r5,r5,r3
1000a7f0:	31bfffc4 	addi	r6,r6,-1
1000a7f4:	317ff62e 	bgeu	r6,r5,1000a7d0 <__alt_data_end+0xf800a7d0>
1000a7f8:	01400434 	movhi	r5,16
1000a7fc:	297fffc4 	addi	r5,r5,-1
1000a800:	28800236 	bltu	r5,r2,1000a80c <__fpclassifyd+0x60>
1000a804:	008000c4 	movi	r2,3
1000a808:	f800283a 	ret
1000a80c:	10c00226 	beq	r2,r3,1000a818 <__fpclassifyd+0x6c>
1000a810:	0005883a 	mov	r2,zero
1000a814:	f800283a 	ret
1000a818:	2005003a 	cmpeq	r2,r4,zero
1000a81c:	f800283a 	ret

1000a820 <_sbrk_r>:
1000a820:	defffd04 	addi	sp,sp,-12
1000a824:	dc000015 	stw	r16,0(sp)
1000a828:	04040074 	movhi	r16,4097
1000a82c:	dc400115 	stw	r17,4(sp)
1000a830:	841a7604 	addi	r16,r16,27096
1000a834:	2023883a 	mov	r17,r4
1000a838:	2809883a 	mov	r4,r5
1000a83c:	dfc00215 	stw	ra,8(sp)
1000a840:	80000015 	stw	zero,0(r16)
1000a844:	00108b80 	call	100108b8 <sbrk>
1000a848:	00ffffc4 	movi	r3,-1
1000a84c:	10c00526 	beq	r2,r3,1000a864 <_sbrk_r+0x44>
1000a850:	dfc00217 	ldw	ra,8(sp)
1000a854:	dc400117 	ldw	r17,4(sp)
1000a858:	dc000017 	ldw	r16,0(sp)
1000a85c:	dec00304 	addi	sp,sp,12
1000a860:	f800283a 	ret
1000a864:	80c00017 	ldw	r3,0(r16)
1000a868:	183ff926 	beq	r3,zero,1000a850 <__alt_data_end+0xf800a850>
1000a86c:	88c00015 	stw	r3,0(r17)
1000a870:	003ff706 	br	1000a850 <__alt_data_end+0xf800a850>

1000a874 <__sread>:
1000a874:	defffe04 	addi	sp,sp,-8
1000a878:	dc000015 	stw	r16,0(sp)
1000a87c:	2821883a 	mov	r16,r5
1000a880:	2940038f 	ldh	r5,14(r5)
1000a884:	dfc00115 	stw	ra,4(sp)
1000a888:	000c7300 	call	1000c730 <_read_r>
1000a88c:	10000716 	blt	r2,zero,1000a8ac <__sread+0x38>
1000a890:	80c01417 	ldw	r3,80(r16)
1000a894:	1887883a 	add	r3,r3,r2
1000a898:	80c01415 	stw	r3,80(r16)
1000a89c:	dfc00117 	ldw	ra,4(sp)
1000a8a0:	dc000017 	ldw	r16,0(sp)
1000a8a4:	dec00204 	addi	sp,sp,8
1000a8a8:	f800283a 	ret
1000a8ac:	80c0030b 	ldhu	r3,12(r16)
1000a8b0:	18fbffcc 	andi	r3,r3,61439
1000a8b4:	80c0030d 	sth	r3,12(r16)
1000a8b8:	dfc00117 	ldw	ra,4(sp)
1000a8bc:	dc000017 	ldw	r16,0(sp)
1000a8c0:	dec00204 	addi	sp,sp,8
1000a8c4:	f800283a 	ret

1000a8c8 <__seofread>:
1000a8c8:	0005883a 	mov	r2,zero
1000a8cc:	f800283a 	ret

1000a8d0 <__swrite>:
1000a8d0:	2880030b 	ldhu	r2,12(r5)
1000a8d4:	defffb04 	addi	sp,sp,-20
1000a8d8:	dcc00315 	stw	r19,12(sp)
1000a8dc:	dc800215 	stw	r18,8(sp)
1000a8e0:	dc400115 	stw	r17,4(sp)
1000a8e4:	dc000015 	stw	r16,0(sp)
1000a8e8:	dfc00415 	stw	ra,16(sp)
1000a8ec:	10c0400c 	andi	r3,r2,256
1000a8f0:	2821883a 	mov	r16,r5
1000a8f4:	2023883a 	mov	r17,r4
1000a8f8:	3025883a 	mov	r18,r6
1000a8fc:	3827883a 	mov	r19,r7
1000a900:	18000526 	beq	r3,zero,1000a918 <__swrite+0x48>
1000a904:	2940038f 	ldh	r5,14(r5)
1000a908:	01c00084 	movi	r7,2
1000a90c:	000d883a 	mov	r6,zero
1000a910:	000c6d00 	call	1000c6d0 <_lseek_r>
1000a914:	8080030b 	ldhu	r2,12(r16)
1000a918:	8140038f 	ldh	r5,14(r16)
1000a91c:	10bbffcc 	andi	r2,r2,61439
1000a920:	980f883a 	mov	r7,r19
1000a924:	900d883a 	mov	r6,r18
1000a928:	8809883a 	mov	r4,r17
1000a92c:	8080030d 	sth	r2,12(r16)
1000a930:	dfc00417 	ldw	ra,16(sp)
1000a934:	dcc00317 	ldw	r19,12(sp)
1000a938:	dc800217 	ldw	r18,8(sp)
1000a93c:	dc400117 	ldw	r17,4(sp)
1000a940:	dc000017 	ldw	r16,0(sp)
1000a944:	dec00504 	addi	sp,sp,20
1000a948:	000c1841 	jmpi	1000c184 <_write_r>

1000a94c <__sseek>:
1000a94c:	defffe04 	addi	sp,sp,-8
1000a950:	dc000015 	stw	r16,0(sp)
1000a954:	2821883a 	mov	r16,r5
1000a958:	2940038f 	ldh	r5,14(r5)
1000a95c:	dfc00115 	stw	ra,4(sp)
1000a960:	000c6d00 	call	1000c6d0 <_lseek_r>
1000a964:	00ffffc4 	movi	r3,-1
1000a968:	10c00826 	beq	r2,r3,1000a98c <__sseek+0x40>
1000a96c:	80c0030b 	ldhu	r3,12(r16)
1000a970:	80801415 	stw	r2,80(r16)
1000a974:	18c40014 	ori	r3,r3,4096
1000a978:	80c0030d 	sth	r3,12(r16)
1000a97c:	dfc00117 	ldw	ra,4(sp)
1000a980:	dc000017 	ldw	r16,0(sp)
1000a984:	dec00204 	addi	sp,sp,8
1000a988:	f800283a 	ret
1000a98c:	80c0030b 	ldhu	r3,12(r16)
1000a990:	18fbffcc 	andi	r3,r3,61439
1000a994:	80c0030d 	sth	r3,12(r16)
1000a998:	dfc00117 	ldw	ra,4(sp)
1000a99c:	dc000017 	ldw	r16,0(sp)
1000a9a0:	dec00204 	addi	sp,sp,8
1000a9a4:	f800283a 	ret

1000a9a8 <__sclose>:
1000a9a8:	2940038f 	ldh	r5,14(r5)
1000a9ac:	000c1e41 	jmpi	1000c1e4 <_close_r>

1000a9b0 <strcmp>:
1000a9b0:	2144b03a 	or	r2,r4,r5
1000a9b4:	108000cc 	andi	r2,r2,3
1000a9b8:	1000171e 	bne	r2,zero,1000aa18 <strcmp+0x68>
1000a9bc:	20800017 	ldw	r2,0(r4)
1000a9c0:	28c00017 	ldw	r3,0(r5)
1000a9c4:	10c0141e 	bne	r2,r3,1000aa18 <strcmp+0x68>
1000a9c8:	027fbff4 	movhi	r9,65279
1000a9cc:	4a7fbfc4 	addi	r9,r9,-257
1000a9d0:	0086303a 	nor	r3,zero,r2
1000a9d4:	02202074 	movhi	r8,32897
1000a9d8:	1245883a 	add	r2,r2,r9
1000a9dc:	42202004 	addi	r8,r8,-32640
1000a9e0:	10c4703a 	and	r2,r2,r3
1000a9e4:	1204703a 	and	r2,r2,r8
1000a9e8:	10000226 	beq	r2,zero,1000a9f4 <strcmp+0x44>
1000a9ec:	00002306 	br	1000aa7c <strcmp+0xcc>
1000a9f0:	1000221e 	bne	r2,zero,1000aa7c <strcmp+0xcc>
1000a9f4:	21000104 	addi	r4,r4,4
1000a9f8:	20c00017 	ldw	r3,0(r4)
1000a9fc:	29400104 	addi	r5,r5,4
1000aa00:	29800017 	ldw	r6,0(r5)
1000aa04:	1a4f883a 	add	r7,r3,r9
1000aa08:	00c4303a 	nor	r2,zero,r3
1000aa0c:	3884703a 	and	r2,r7,r2
1000aa10:	1204703a 	and	r2,r2,r8
1000aa14:	19bff626 	beq	r3,r6,1000a9f0 <__alt_data_end+0xf800a9f0>
1000aa18:	20800003 	ldbu	r2,0(r4)
1000aa1c:	10c03fcc 	andi	r3,r2,255
1000aa20:	18c0201c 	xori	r3,r3,128
1000aa24:	18ffe004 	addi	r3,r3,-128
1000aa28:	18000c26 	beq	r3,zero,1000aa5c <strcmp+0xac>
1000aa2c:	29800007 	ldb	r6,0(r5)
1000aa30:	19800326 	beq	r3,r6,1000aa40 <strcmp+0x90>
1000aa34:	00001306 	br	1000aa84 <strcmp+0xd4>
1000aa38:	29800007 	ldb	r6,0(r5)
1000aa3c:	11800b1e 	bne	r2,r6,1000aa6c <strcmp+0xbc>
1000aa40:	21000044 	addi	r4,r4,1
1000aa44:	20c00003 	ldbu	r3,0(r4)
1000aa48:	29400044 	addi	r5,r5,1
1000aa4c:	18803fcc 	andi	r2,r3,255
1000aa50:	1080201c 	xori	r2,r2,128
1000aa54:	10bfe004 	addi	r2,r2,-128
1000aa58:	103ff71e 	bne	r2,zero,1000aa38 <__alt_data_end+0xf800aa38>
1000aa5c:	0007883a 	mov	r3,zero
1000aa60:	28800003 	ldbu	r2,0(r5)
1000aa64:	1885c83a 	sub	r2,r3,r2
1000aa68:	f800283a 	ret
1000aa6c:	28800003 	ldbu	r2,0(r5)
1000aa70:	18c03fcc 	andi	r3,r3,255
1000aa74:	1885c83a 	sub	r2,r3,r2
1000aa78:	f800283a 	ret
1000aa7c:	0005883a 	mov	r2,zero
1000aa80:	f800283a 	ret
1000aa84:	10c03fcc 	andi	r3,r2,255
1000aa88:	003ff506 	br	1000aa60 <__alt_data_end+0xf800aa60>

1000aa8c <__sprint_r.part.0>:
1000aa8c:	28801917 	ldw	r2,100(r5)
1000aa90:	defff604 	addi	sp,sp,-40
1000aa94:	dd400515 	stw	r21,20(sp)
1000aa98:	dfc00915 	stw	ra,36(sp)
1000aa9c:	df000815 	stw	fp,32(sp)
1000aaa0:	ddc00715 	stw	r23,28(sp)
1000aaa4:	dd800615 	stw	r22,24(sp)
1000aaa8:	dd000415 	stw	r20,16(sp)
1000aaac:	dcc00315 	stw	r19,12(sp)
1000aab0:	dc800215 	stw	r18,8(sp)
1000aab4:	dc400115 	stw	r17,4(sp)
1000aab8:	dc000015 	stw	r16,0(sp)
1000aabc:	1088000c 	andi	r2,r2,8192
1000aac0:	302b883a 	mov	r21,r6
1000aac4:	10002e26 	beq	r2,zero,1000ab80 <__sprint_r.part.0+0xf4>
1000aac8:	30800217 	ldw	r2,8(r6)
1000aacc:	35800017 	ldw	r22,0(r6)
1000aad0:	10002926 	beq	r2,zero,1000ab78 <__sprint_r.part.0+0xec>
1000aad4:	2827883a 	mov	r19,r5
1000aad8:	2029883a 	mov	r20,r4
1000aadc:	b5c00104 	addi	r23,r22,4
1000aae0:	04bfffc4 	movi	r18,-1
1000aae4:	bc400017 	ldw	r17,0(r23)
1000aae8:	b4000017 	ldw	r16,0(r22)
1000aaec:	0039883a 	mov	fp,zero
1000aaf0:	8822d0ba 	srli	r17,r17,2
1000aaf4:	8800031e 	bne	r17,zero,1000ab04 <__sprint_r.part.0+0x78>
1000aaf8:	00001806 	br	1000ab5c <__sprint_r.part.0+0xd0>
1000aafc:	84000104 	addi	r16,r16,4
1000ab00:	8f001526 	beq	r17,fp,1000ab58 <__sprint_r.part.0+0xcc>
1000ab04:	81400017 	ldw	r5,0(r16)
1000ab08:	980d883a 	mov	r6,r19
1000ab0c:	a009883a 	mov	r4,r20
1000ab10:	000c57c0 	call	1000c57c <_fputwc_r>
1000ab14:	e7000044 	addi	fp,fp,1
1000ab18:	14bff81e 	bne	r2,r18,1000aafc <__alt_data_end+0xf800aafc>
1000ab1c:	9005883a 	mov	r2,r18
1000ab20:	a8000215 	stw	zero,8(r21)
1000ab24:	a8000115 	stw	zero,4(r21)
1000ab28:	dfc00917 	ldw	ra,36(sp)
1000ab2c:	df000817 	ldw	fp,32(sp)
1000ab30:	ddc00717 	ldw	r23,28(sp)
1000ab34:	dd800617 	ldw	r22,24(sp)
1000ab38:	dd400517 	ldw	r21,20(sp)
1000ab3c:	dd000417 	ldw	r20,16(sp)
1000ab40:	dcc00317 	ldw	r19,12(sp)
1000ab44:	dc800217 	ldw	r18,8(sp)
1000ab48:	dc400117 	ldw	r17,4(sp)
1000ab4c:	dc000017 	ldw	r16,0(sp)
1000ab50:	dec00a04 	addi	sp,sp,40
1000ab54:	f800283a 	ret
1000ab58:	a8800217 	ldw	r2,8(r21)
1000ab5c:	8c63883a 	add	r17,r17,r17
1000ab60:	8c63883a 	add	r17,r17,r17
1000ab64:	1445c83a 	sub	r2,r2,r17
1000ab68:	a8800215 	stw	r2,8(r21)
1000ab6c:	b5800204 	addi	r22,r22,8
1000ab70:	bdc00204 	addi	r23,r23,8
1000ab74:	103fdb1e 	bne	r2,zero,1000aae4 <__alt_data_end+0xf800aae4>
1000ab78:	0005883a 	mov	r2,zero
1000ab7c:	003fe806 	br	1000ab20 <__alt_data_end+0xf800ab20>
1000ab80:	0007bec0 	call	10007bec <__sfvwrite_r>
1000ab84:	003fe606 	br	1000ab20 <__alt_data_end+0xf800ab20>

1000ab88 <__sprint_r>:
1000ab88:	30c00217 	ldw	r3,8(r6)
1000ab8c:	18000126 	beq	r3,zero,1000ab94 <__sprint_r+0xc>
1000ab90:	000aa8c1 	jmpi	1000aa8c <__sprint_r.part.0>
1000ab94:	30000115 	stw	zero,4(r6)
1000ab98:	0005883a 	mov	r2,zero
1000ab9c:	f800283a 	ret

1000aba0 <___vfiprintf_internal_r>:
1000aba0:	deffca04 	addi	sp,sp,-216
1000aba4:	dd403115 	stw	r21,196(sp)
1000aba8:	dfc03515 	stw	ra,212(sp)
1000abac:	df003415 	stw	fp,208(sp)
1000abb0:	ddc03315 	stw	r23,204(sp)
1000abb4:	dd803215 	stw	r22,200(sp)
1000abb8:	dd003015 	stw	r20,192(sp)
1000abbc:	dcc02f15 	stw	r19,188(sp)
1000abc0:	dc802e15 	stw	r18,184(sp)
1000abc4:	dc402d15 	stw	r17,180(sp)
1000abc8:	dc002c15 	stw	r16,176(sp)
1000abcc:	d9002115 	stw	r4,132(sp)
1000abd0:	d9402015 	stw	r5,128(sp)
1000abd4:	d9c02215 	stw	r7,136(sp)
1000abd8:	302b883a 	mov	r21,r6
1000abdc:	20000226 	beq	r4,zero,1000abe8 <___vfiprintf_internal_r+0x48>
1000abe0:	20800e17 	ldw	r2,56(r4)
1000abe4:	1000cf26 	beq	r2,zero,1000af24 <___vfiprintf_internal_r+0x384>
1000abe8:	d8c02017 	ldw	r3,128(sp)
1000abec:	1880030b 	ldhu	r2,12(r3)
1000abf0:	10c8000c 	andi	r3,r2,8192
1000abf4:	1800071e 	bne	r3,zero,1000ac14 <___vfiprintf_internal_r+0x74>
1000abf8:	d9402017 	ldw	r5,128(sp)
1000abfc:	00f7ffc4 	movi	r3,-8193
1000ac00:	10880014 	ori	r2,r2,8192
1000ac04:	29001917 	ldw	r4,100(r5)
1000ac08:	2880030d 	sth	r2,12(r5)
1000ac0c:	20c6703a 	and	r3,r4,r3
1000ac10:	28c01915 	stw	r3,100(r5)
1000ac14:	10c0020c 	andi	r3,r2,8
1000ac18:	1800a526 	beq	r3,zero,1000aeb0 <___vfiprintf_internal_r+0x310>
1000ac1c:	d9002017 	ldw	r4,128(sp)
1000ac20:	20c00417 	ldw	r3,16(r4)
1000ac24:	1800a226 	beq	r3,zero,1000aeb0 <___vfiprintf_internal_r+0x310>
1000ac28:	1080068c 	andi	r2,r2,26
1000ac2c:	00c00284 	movi	r3,10
1000ac30:	10c0a826 	beq	r2,r3,1000aed4 <___vfiprintf_internal_r+0x334>
1000ac34:	d9001a04 	addi	r4,sp,104
1000ac38:	d94019c4 	addi	r5,sp,103
1000ac3c:	04840074 	movhi	r18,4097
1000ac40:	2145c83a 	sub	r2,r4,r5
1000ac44:	948ca404 	addi	r18,r18,12944
1000ac48:	d9001e15 	stw	r4,120(sp)
1000ac4c:	d9401f15 	stw	r5,124(sp)
1000ac50:	dec01a15 	stw	sp,104(sp)
1000ac54:	d8001c15 	stw	zero,112(sp)
1000ac58:	d8001b15 	stw	zero,108(sp)
1000ac5c:	d811883a 	mov	r8,sp
1000ac60:	d8002615 	stw	zero,152(sp)
1000ac64:	d8002415 	stw	zero,144(sp)
1000ac68:	d8802815 	stw	r2,160(sp)
1000ac6c:	a82d883a 	mov	r22,r21
1000ac70:	b0800007 	ldb	r2,0(r22)
1000ac74:	10040d26 	beq	r2,zero,1000bcac <___vfiprintf_internal_r+0x110c>
1000ac78:	00c00944 	movi	r3,37
1000ac7c:	b029883a 	mov	r20,r22
1000ac80:	10c0021e 	bne	r2,r3,1000ac8c <___vfiprintf_internal_r+0xec>
1000ac84:	00001606 	br	1000ace0 <___vfiprintf_internal_r+0x140>
1000ac88:	10c00326 	beq	r2,r3,1000ac98 <___vfiprintf_internal_r+0xf8>
1000ac8c:	a5000044 	addi	r20,r20,1
1000ac90:	a0800007 	ldb	r2,0(r20)
1000ac94:	103ffc1e 	bne	r2,zero,1000ac88 <__alt_data_end+0xf800ac88>
1000ac98:	a5a1c83a 	sub	r16,r20,r22
1000ac9c:	80001026 	beq	r16,zero,1000ace0 <___vfiprintf_internal_r+0x140>
1000aca0:	d8c01c17 	ldw	r3,112(sp)
1000aca4:	d8801b17 	ldw	r2,108(sp)
1000aca8:	45800015 	stw	r22,0(r8)
1000acac:	80c7883a 	add	r3,r16,r3
1000acb0:	10800044 	addi	r2,r2,1
1000acb4:	44000115 	stw	r16,4(r8)
1000acb8:	d8c01c15 	stw	r3,112(sp)
1000acbc:	d8801b15 	stw	r2,108(sp)
1000acc0:	010001c4 	movi	r4,7
1000acc4:	2080750e 	bge	r4,r2,1000ae9c <___vfiprintf_internal_r+0x2fc>
1000acc8:	1803951e 	bne	r3,zero,1000bb20 <___vfiprintf_internal_r+0xf80>
1000accc:	d8c02417 	ldw	r3,144(sp)
1000acd0:	d8001b15 	stw	zero,108(sp)
1000acd4:	d811883a 	mov	r8,sp
1000acd8:	1c07883a 	add	r3,r3,r16
1000acdc:	d8c02415 	stw	r3,144(sp)
1000ace0:	a0800007 	ldb	r2,0(r20)
1000ace4:	1002e026 	beq	r2,zero,1000b868 <___vfiprintf_internal_r+0xcc8>
1000ace8:	a5800044 	addi	r22,r20,1
1000acec:	a0c00047 	ldb	r3,1(r20)
1000acf0:	d8001d85 	stb	zero,118(sp)
1000acf4:	0027883a 	mov	r19,zero
1000acf8:	d8002305 	stb	zero,140(sp)
1000acfc:	043fffc4 	movi	r16,-1
1000ad00:	d8002515 	stw	zero,148(sp)
1000ad04:	0023883a 	mov	r17,zero
1000ad08:	05001604 	movi	r20,88
1000ad0c:	05400244 	movi	r21,9
1000ad10:	402f883a 	mov	r23,r8
1000ad14:	b5800044 	addi	r22,r22,1
1000ad18:	18bff804 	addi	r2,r3,-32
1000ad1c:	a0827736 	bltu	r20,r2,1000b6fc <___vfiprintf_internal_r+0xb5c>
1000ad20:	100490ba 	slli	r2,r2,2
1000ad24:	01040074 	movhi	r4,4097
1000ad28:	212b4e04 	addi	r4,r4,-21192
1000ad2c:	1105883a 	add	r2,r2,r4
1000ad30:	10800017 	ldw	r2,0(r2)
1000ad34:	1000683a 	jmp	r2
1000ad38:	1000b3fc 	xorhi	zero,r2,719
1000ad3c:	1000b6fc 	xorhi	zero,r2,731
1000ad40:	1000b6fc 	xorhi	zero,r2,731
1000ad44:	1000b418 	cmpnei	zero,r2,720
1000ad48:	1000b6fc 	xorhi	zero,r2,731
1000ad4c:	1000b6fc 	xorhi	zero,r2,731
1000ad50:	1000b6fc 	xorhi	zero,r2,731
1000ad54:	1000b6fc 	xorhi	zero,r2,731
1000ad58:	1000b6fc 	xorhi	zero,r2,731
1000ad5c:	1000b6fc 	xorhi	zero,r2,731
1000ad60:	1000b620 	cmpeqi	zero,r2,728
1000ad64:	1000b644 	addi	zero,r2,729
1000ad68:	1000b6fc 	xorhi	zero,r2,731
1000ad6c:	1000af3c 	xorhi	zero,r2,700
1000ad70:	1000b658 	cmpnei	zero,r2,729
1000ad74:	1000b6fc 	xorhi	zero,r2,731
1000ad78:	1000b424 	muli	zero,r2,720
1000ad7c:	1000b430 	cmpltui	zero,r2,720
1000ad80:	1000b430 	cmpltui	zero,r2,720
1000ad84:	1000b430 	cmpltui	zero,r2,720
1000ad88:	1000b430 	cmpltui	zero,r2,720
1000ad8c:	1000b430 	cmpltui	zero,r2,720
1000ad90:	1000b430 	cmpltui	zero,r2,720
1000ad94:	1000b430 	cmpltui	zero,r2,720
1000ad98:	1000b430 	cmpltui	zero,r2,720
1000ad9c:	1000b430 	cmpltui	zero,r2,720
1000ada0:	1000b6fc 	xorhi	zero,r2,731
1000ada4:	1000b6fc 	xorhi	zero,r2,731
1000ada8:	1000b6fc 	xorhi	zero,r2,731
1000adac:	1000b6fc 	xorhi	zero,r2,731
1000adb0:	1000b6fc 	xorhi	zero,r2,731
1000adb4:	1000b6fc 	xorhi	zero,r2,731
1000adb8:	1000b6fc 	xorhi	zero,r2,731
1000adbc:	1000b6fc 	xorhi	zero,r2,731
1000adc0:	1000b6fc 	xorhi	zero,r2,731
1000adc4:	1000b6fc 	xorhi	zero,r2,731
1000adc8:	1000b470 	cmpltui	zero,r2,721
1000adcc:	1000b6fc 	xorhi	zero,r2,731
1000add0:	1000b6fc 	xorhi	zero,r2,731
1000add4:	1000b6fc 	xorhi	zero,r2,731
1000add8:	1000b6fc 	xorhi	zero,r2,731
1000addc:	1000b6fc 	xorhi	zero,r2,731
1000ade0:	1000b6fc 	xorhi	zero,r2,731
1000ade4:	1000b6fc 	xorhi	zero,r2,731
1000ade8:	1000b6fc 	xorhi	zero,r2,731
1000adec:	1000b6fc 	xorhi	zero,r2,731
1000adf0:	1000b6fc 	xorhi	zero,r2,731
1000adf4:	1000b4ac 	andhi	zero,r2,722
1000adf8:	1000b6fc 	xorhi	zero,r2,731
1000adfc:	1000b6fc 	xorhi	zero,r2,731
1000ae00:	1000b6fc 	xorhi	zero,r2,731
1000ae04:	1000b6fc 	xorhi	zero,r2,731
1000ae08:	1000b6fc 	xorhi	zero,r2,731
1000ae0c:	1000b508 	cmpgei	zero,r2,724
1000ae10:	1000b6fc 	xorhi	zero,r2,731
1000ae14:	1000b6fc 	xorhi	zero,r2,731
1000ae18:	1000b57c 	xorhi	zero,r2,725
1000ae1c:	1000b6fc 	xorhi	zero,r2,731
1000ae20:	1000b6fc 	xorhi	zero,r2,731
1000ae24:	1000b6fc 	xorhi	zero,r2,731
1000ae28:	1000b6fc 	xorhi	zero,r2,731
1000ae2c:	1000b6fc 	xorhi	zero,r2,731
1000ae30:	1000b6fc 	xorhi	zero,r2,731
1000ae34:	1000b6fc 	xorhi	zero,r2,731
1000ae38:	1000b6fc 	xorhi	zero,r2,731
1000ae3c:	1000b6fc 	xorhi	zero,r2,731
1000ae40:	1000b6fc 	xorhi	zero,r2,731
1000ae44:	1000b324 	muli	zero,r2,716
1000ae48:	1000b354 	ori	zero,r2,717
1000ae4c:	1000b6fc 	xorhi	zero,r2,731
1000ae50:	1000b6fc 	xorhi	zero,r2,731
1000ae54:	1000b6fc 	xorhi	zero,r2,731
1000ae58:	1000b6a4 	muli	zero,r2,730
1000ae5c:	1000b354 	ori	zero,r2,717
1000ae60:	1000b6fc 	xorhi	zero,r2,731
1000ae64:	1000b6fc 	xorhi	zero,r2,731
1000ae68:	1000b1fc 	xorhi	zero,r2,711
1000ae6c:	1000b6fc 	xorhi	zero,r2,731
1000ae70:	1000b210 	cmplti	zero,r2,712
1000ae74:	1000b248 	cmpgei	zero,r2,713
1000ae78:	1000af48 	cmpgei	zero,r2,701
1000ae7c:	1000b1f0 	cmpltui	zero,r2,711
1000ae80:	1000b6fc 	xorhi	zero,r2,731
1000ae84:	1000b5bc 	xorhi	zero,r2,726
1000ae88:	1000b6fc 	xorhi	zero,r2,731
1000ae8c:	1000b608 	cmpgei	zero,r2,728
1000ae90:	1000b6fc 	xorhi	zero,r2,731
1000ae94:	1000b6fc 	xorhi	zero,r2,731
1000ae98:	1000b2cc 	andi	zero,r2,715
1000ae9c:	42000204 	addi	r8,r8,8
1000aea0:	d8c02417 	ldw	r3,144(sp)
1000aea4:	1c07883a 	add	r3,r3,r16
1000aea8:	d8c02415 	stw	r3,144(sp)
1000aeac:	003f8c06 	br	1000ace0 <__alt_data_end+0xf800ace0>
1000aeb0:	d9402017 	ldw	r5,128(sp)
1000aeb4:	d9002117 	ldw	r4,132(sp)
1000aeb8:	000575c0 	call	1000575c <__swsetup_r>
1000aebc:	1003c11e 	bne	r2,zero,1000bdc4 <___vfiprintf_internal_r+0x1224>
1000aec0:	d9402017 	ldw	r5,128(sp)
1000aec4:	00c00284 	movi	r3,10
1000aec8:	2880030b 	ldhu	r2,12(r5)
1000aecc:	1080068c 	andi	r2,r2,26
1000aed0:	10ff581e 	bne	r2,r3,1000ac34 <__alt_data_end+0xf800ac34>
1000aed4:	d8c02017 	ldw	r3,128(sp)
1000aed8:	1880038f 	ldh	r2,14(r3)
1000aedc:	103f5516 	blt	r2,zero,1000ac34 <__alt_data_end+0xf800ac34>
1000aee0:	d9c02217 	ldw	r7,136(sp)
1000aee4:	d9002117 	ldw	r4,132(sp)
1000aee8:	a80d883a 	mov	r6,r21
1000aeec:	180b883a 	mov	r5,r3
1000aef0:	000c0c80 	call	1000c0c8 <__sbprintf>
1000aef4:	dfc03517 	ldw	ra,212(sp)
1000aef8:	df003417 	ldw	fp,208(sp)
1000aefc:	ddc03317 	ldw	r23,204(sp)
1000af00:	dd803217 	ldw	r22,200(sp)
1000af04:	dd403117 	ldw	r21,196(sp)
1000af08:	dd003017 	ldw	r20,192(sp)
1000af0c:	dcc02f17 	ldw	r19,188(sp)
1000af10:	dc802e17 	ldw	r18,184(sp)
1000af14:	dc402d17 	ldw	r17,180(sp)
1000af18:	dc002c17 	ldw	r16,176(sp)
1000af1c:	dec03604 	addi	sp,sp,216
1000af20:	f800283a 	ret
1000af24:	00077680 	call	10007768 <__sinit>
1000af28:	003f2f06 	br	1000abe8 <__alt_data_end+0xf800abe8>
1000af2c:	d8c02517 	ldw	r3,148(sp)
1000af30:	d8802215 	stw	r2,136(sp)
1000af34:	00c7c83a 	sub	r3,zero,r3
1000af38:	d8c02515 	stw	r3,148(sp)
1000af3c:	8c400114 	ori	r17,r17,4
1000af40:	b0c00007 	ldb	r3,0(r22)
1000af44:	003f7306 	br	1000ad14 <__alt_data_end+0xf800ad14>
1000af48:	00800c04 	movi	r2,48
1000af4c:	d9402217 	ldw	r5,136(sp)
1000af50:	d8801d05 	stb	r2,116(sp)
1000af54:	00801e04 	movi	r2,120
1000af58:	d8801d45 	stb	r2,117(sp)
1000af5c:	d8001d85 	stb	zero,118(sp)
1000af60:	b811883a 	mov	r8,r23
1000af64:	28c00104 	addi	r3,r5,4
1000af68:	2cc00017 	ldw	r19,0(r5)
1000af6c:	0029883a 	mov	r20,zero
1000af70:	88800094 	ori	r2,r17,2
1000af74:	80032516 	blt	r16,zero,1000bc0c <___vfiprintf_internal_r+0x106c>
1000af78:	00bfdfc4 	movi	r2,-129
1000af7c:	88a2703a 	and	r17,r17,r2
1000af80:	d8c02215 	stw	r3,136(sp)
1000af84:	8c400094 	ori	r17,r17,2
1000af88:	98032a1e 	bne	r19,zero,1000bc34 <___vfiprintf_internal_r+0x1094>
1000af8c:	00840074 	movhi	r2,4097
1000af90:	108c4304 	addi	r2,r2,12556
1000af94:	d8802615 	stw	r2,152(sp)
1000af98:	002b883a 	mov	r21,zero
1000af9c:	8001741e 	bne	r16,zero,1000b570 <___vfiprintf_internal_r+0x9d0>
1000afa0:	0021883a 	mov	r16,zero
1000afa4:	0029883a 	mov	r20,zero
1000afa8:	ddc01a04 	addi	r23,sp,104
1000afac:	8027883a 	mov	r19,r16
1000afb0:	8500010e 	bge	r16,r20,1000afb8 <___vfiprintf_internal_r+0x418>
1000afb4:	a027883a 	mov	r19,r20
1000afb8:	ad403fcc 	andi	r21,r21,255
1000afbc:	ad40201c 	xori	r21,r21,128
1000afc0:	ad7fe004 	addi	r21,r21,-128
1000afc4:	a8000126 	beq	r21,zero,1000afcc <___vfiprintf_internal_r+0x42c>
1000afc8:	9cc00044 	addi	r19,r19,1
1000afcc:	89c0008c 	andi	r7,r17,2
1000afd0:	38000126 	beq	r7,zero,1000afd8 <___vfiprintf_internal_r+0x438>
1000afd4:	9cc00084 	addi	r19,r19,2
1000afd8:	88c0210c 	andi	r3,r17,132
1000afdc:	1801dd1e 	bne	r3,zero,1000b754 <___vfiprintf_internal_r+0xbb4>
1000afe0:	d9402517 	ldw	r5,148(sp)
1000afe4:	2cebc83a 	sub	r21,r5,r19
1000afe8:	0541da0e 	bge	zero,r21,1000b754 <___vfiprintf_internal_r+0xbb4>
1000afec:	07000404 	movi	fp,16
1000aff0:	d8801c17 	ldw	r2,112(sp)
1000aff4:	e543be0e 	bge	fp,r21,1000bef0 <___vfiprintf_internal_r+0x1350>
1000aff8:	01440074 	movhi	r5,4097
1000affc:	294ca804 	addi	r5,r5,12960
1000b000:	dc002715 	stw	r16,156(sp)
1000b004:	d9801b17 	ldw	r6,108(sp)
1000b008:	a821883a 	mov	r16,r21
1000b00c:	d9402315 	stw	r5,140(sp)
1000b010:	028001c4 	movi	r10,7
1000b014:	d9c02915 	stw	r7,164(sp)
1000b018:	182b883a 	mov	r21,r3
1000b01c:	00000506 	br	1000b034 <___vfiprintf_internal_r+0x494>
1000b020:	31000084 	addi	r4,r6,2
1000b024:	42000204 	addi	r8,r8,8
1000b028:	180d883a 	mov	r6,r3
1000b02c:	843ffc04 	addi	r16,r16,-16
1000b030:	e4000f0e 	bge	fp,r16,1000b070 <___vfiprintf_internal_r+0x4d0>
1000b034:	01040074 	movhi	r4,4097
1000b038:	10800404 	addi	r2,r2,16
1000b03c:	30c00044 	addi	r3,r6,1
1000b040:	210ca804 	addi	r4,r4,12960
1000b044:	41000015 	stw	r4,0(r8)
1000b048:	47000115 	stw	fp,4(r8)
1000b04c:	d8801c15 	stw	r2,112(sp)
1000b050:	d8c01b15 	stw	r3,108(sp)
1000b054:	50fff20e 	bge	r10,r3,1000b020 <__alt_data_end+0xf800b020>
1000b058:	1001b21e 	bne	r2,zero,1000b724 <___vfiprintf_internal_r+0xb84>
1000b05c:	843ffc04 	addi	r16,r16,-16
1000b060:	000d883a 	mov	r6,zero
1000b064:	01000044 	movi	r4,1
1000b068:	d811883a 	mov	r8,sp
1000b06c:	e43ff116 	blt	fp,r16,1000b034 <__alt_data_end+0xf800b034>
1000b070:	a807883a 	mov	r3,r21
1000b074:	d9c02917 	ldw	r7,164(sp)
1000b078:	802b883a 	mov	r21,r16
1000b07c:	dc002717 	ldw	r16,156(sp)
1000b080:	d9402317 	ldw	r5,140(sp)
1000b084:	a885883a 	add	r2,r21,r2
1000b088:	45400115 	stw	r21,4(r8)
1000b08c:	41400015 	stw	r5,0(r8)
1000b090:	d8801c15 	stw	r2,112(sp)
1000b094:	d9001b15 	stw	r4,108(sp)
1000b098:	014001c4 	movi	r5,7
1000b09c:	29026216 	blt	r5,r4,1000ba28 <___vfiprintf_internal_r+0xe88>
1000b0a0:	d9801d87 	ldb	r6,118(sp)
1000b0a4:	42000204 	addi	r8,r8,8
1000b0a8:	21400044 	addi	r5,r4,1
1000b0ac:	3001ae1e 	bne	r6,zero,1000b768 <___vfiprintf_internal_r+0xbc8>
1000b0b0:	3801bb26 	beq	r7,zero,1000b7a0 <___vfiprintf_internal_r+0xc00>
1000b0b4:	d9001d04 	addi	r4,sp,116
1000b0b8:	10800084 	addi	r2,r2,2
1000b0bc:	41000015 	stw	r4,0(r8)
1000b0c0:	01000084 	movi	r4,2
1000b0c4:	41000115 	stw	r4,4(r8)
1000b0c8:	d8801c15 	stw	r2,112(sp)
1000b0cc:	d9401b15 	stw	r5,108(sp)
1000b0d0:	010001c4 	movi	r4,7
1000b0d4:	2142680e 	bge	r4,r5,1000ba78 <___vfiprintf_internal_r+0xed8>
1000b0d8:	1002b11e 	bne	r2,zero,1000bba0 <___vfiprintf_internal_r+0x1000>
1000b0dc:	01802004 	movi	r6,128
1000b0e0:	01400044 	movi	r5,1
1000b0e4:	0009883a 	mov	r4,zero
1000b0e8:	d811883a 	mov	r8,sp
1000b0ec:	1981ae1e 	bne	r3,r6,1000b7a8 <___vfiprintf_internal_r+0xc08>
1000b0f0:	d8c02517 	ldw	r3,148(sp)
1000b0f4:	1cf9c83a 	sub	fp,r3,r19
1000b0f8:	0701ab0e 	bge	zero,fp,1000b7a8 <___vfiprintf_internal_r+0xc08>
1000b0fc:	05400404 	movi	r21,16
1000b100:	af03a90e 	bge	r21,fp,1000bfa8 <___vfiprintf_internal_r+0x1408>
1000b104:	01440074 	movhi	r5,4097
1000b108:	294ca404 	addi	r5,r5,12944
1000b10c:	d9402315 	stw	r5,140(sp)
1000b110:	01c001c4 	movi	r7,7
1000b114:	00000506 	br	1000b12c <___vfiprintf_internal_r+0x58c>
1000b118:	21800084 	addi	r6,r4,2
1000b11c:	42000204 	addi	r8,r8,8
1000b120:	1809883a 	mov	r4,r3
1000b124:	e73ffc04 	addi	fp,fp,-16
1000b128:	af000d0e 	bge	r21,fp,1000b160 <___vfiprintf_internal_r+0x5c0>
1000b12c:	10800404 	addi	r2,r2,16
1000b130:	20c00044 	addi	r3,r4,1
1000b134:	44800015 	stw	r18,0(r8)
1000b138:	45400115 	stw	r21,4(r8)
1000b13c:	d8801c15 	stw	r2,112(sp)
1000b140:	d8c01b15 	stw	r3,108(sp)
1000b144:	38fff40e 	bge	r7,r3,1000b118 <__alt_data_end+0xf800b118>
1000b148:	10022b1e 	bne	r2,zero,1000b9f8 <___vfiprintf_internal_r+0xe58>
1000b14c:	e73ffc04 	addi	fp,fp,-16
1000b150:	01800044 	movi	r6,1
1000b154:	0009883a 	mov	r4,zero
1000b158:	d811883a 	mov	r8,sp
1000b15c:	af3ff316 	blt	r21,fp,1000b12c <__alt_data_end+0xf800b12c>
1000b160:	d8c02317 	ldw	r3,140(sp)
1000b164:	1705883a 	add	r2,r2,fp
1000b168:	47000115 	stw	fp,4(r8)
1000b16c:	40c00015 	stw	r3,0(r8)
1000b170:	d8801c15 	stw	r2,112(sp)
1000b174:	d9801b15 	stw	r6,108(sp)
1000b178:	00c001c4 	movi	r3,7
1000b17c:	19829416 	blt	r3,r6,1000bbd0 <___vfiprintf_internal_r+0x1030>
1000b180:	8521c83a 	sub	r16,r16,r20
1000b184:	42000204 	addi	r8,r8,8
1000b188:	31400044 	addi	r5,r6,1
1000b18c:	3009883a 	mov	r4,r6
1000b190:	04018716 	blt	zero,r16,1000b7b0 <___vfiprintf_internal_r+0xc10>
1000b194:	a085883a 	add	r2,r20,r2
1000b198:	45c00015 	stw	r23,0(r8)
1000b19c:	45000115 	stw	r20,4(r8)
1000b1a0:	d8801c15 	stw	r2,112(sp)
1000b1a4:	d9401b15 	stw	r5,108(sp)
1000b1a8:	00c001c4 	movi	r3,7
1000b1ac:	1941c20e 	bge	r3,r5,1000b8b8 <___vfiprintf_internal_r+0xd18>
1000b1b0:	1002531e 	bne	r2,zero,1000bb00 <___vfiprintf_internal_r+0xf60>
1000b1b4:	d8001b15 	stw	zero,108(sp)
1000b1b8:	8c40010c 	andi	r17,r17,4
1000b1bc:	88023226 	beq	r17,zero,1000ba88 <___vfiprintf_internal_r+0xee8>
1000b1c0:	d9002517 	ldw	r4,148(sp)
1000b1c4:	24e3c83a 	sub	r17,r4,r19
1000b1c8:	04432916 	blt	zero,r17,1000be70 <___vfiprintf_internal_r+0x12d0>
1000b1cc:	d8802517 	ldw	r2,148(sp)
1000b1d0:	14c0010e 	bge	r2,r19,1000b1d8 <___vfiprintf_internal_r+0x638>
1000b1d4:	9805883a 	mov	r2,r19
1000b1d8:	d8c02417 	ldw	r3,144(sp)
1000b1dc:	1887883a 	add	r3,r3,r2
1000b1e0:	d8c02415 	stw	r3,144(sp)
1000b1e4:	d8001b15 	stw	zero,108(sp)
1000b1e8:	d811883a 	mov	r8,sp
1000b1ec:	003ea006 	br	1000ac70 <__alt_data_end+0xf800ac70>
1000b1f0:	8c400814 	ori	r17,r17,32
1000b1f4:	b0c00007 	ldb	r3,0(r22)
1000b1f8:	003ec606 	br	1000ad14 <__alt_data_end+0xf800ad14>
1000b1fc:	b0c00007 	ldb	r3,0(r22)
1000b200:	00801b04 	movi	r2,108
1000b204:	18832026 	beq	r3,r2,1000be88 <___vfiprintf_internal_r+0x12e8>
1000b208:	8c400414 	ori	r17,r17,16
1000b20c:	003ec106 	br	1000ad14 <__alt_data_end+0xf800ad14>
1000b210:	9cc03fcc 	andi	r19,r19,255
1000b214:	b811883a 	mov	r8,r23
1000b218:	9803981e 	bne	r19,zero,1000c07c <___vfiprintf_internal_r+0x14dc>
1000b21c:	8880080c 	andi	r2,r17,32
1000b220:	1002be26 	beq	r2,zero,1000bd1c <___vfiprintf_internal_r+0x117c>
1000b224:	d9002217 	ldw	r4,136(sp)
1000b228:	d9402417 	ldw	r5,144(sp)
1000b22c:	20800017 	ldw	r2,0(r4)
1000b230:	2807d7fa 	srai	r3,r5,31
1000b234:	21000104 	addi	r4,r4,4
1000b238:	d9002215 	stw	r4,136(sp)
1000b23c:	11400015 	stw	r5,0(r2)
1000b240:	10c00115 	stw	r3,4(r2)
1000b244:	003e8a06 	br	1000ac70 <__alt_data_end+0xf800ac70>
1000b248:	9cc03fcc 	andi	r19,r19,255
1000b24c:	b811883a 	mov	r8,r23
1000b250:	9803871e 	bne	r19,zero,1000c070 <___vfiprintf_internal_r+0x14d0>
1000b254:	8880080c 	andi	r2,r17,32
1000b258:	10009a26 	beq	r2,zero,1000b4c4 <___vfiprintf_internal_r+0x924>
1000b25c:	d9002217 	ldw	r4,136(sp)
1000b260:	d8001d85 	stb	zero,118(sp)
1000b264:	20800204 	addi	r2,r4,8
1000b268:	24c00017 	ldw	r19,0(r4)
1000b26c:	25000117 	ldw	r20,4(r4)
1000b270:	8002a416 	blt	r16,zero,1000bd04 <___vfiprintf_internal_r+0x1164>
1000b274:	013fdfc4 	movi	r4,-129
1000b278:	9d06b03a 	or	r3,r19,r20
1000b27c:	d8802215 	stw	r2,136(sp)
1000b280:	8922703a 	and	r17,r17,r4
1000b284:	18009b26 	beq	r3,zero,1000b4f4 <___vfiprintf_internal_r+0x954>
1000b288:	002b883a 	mov	r21,zero
1000b28c:	ddc01a04 	addi	r23,sp,104
1000b290:	9806d0fa 	srli	r3,r19,3
1000b294:	a008977a 	slli	r4,r20,29
1000b298:	a028d0fa 	srli	r20,r20,3
1000b29c:	9cc001cc 	andi	r19,r19,7
1000b2a0:	98800c04 	addi	r2,r19,48
1000b2a4:	bdffffc4 	addi	r23,r23,-1
1000b2a8:	20e6b03a 	or	r19,r4,r3
1000b2ac:	b8800005 	stb	r2,0(r23)
1000b2b0:	9d06b03a 	or	r3,r19,r20
1000b2b4:	183ff61e 	bne	r3,zero,1000b290 <__alt_data_end+0xf800b290>
1000b2b8:	88c0004c 	andi	r3,r17,1
1000b2bc:	18021f1e 	bne	r3,zero,1000bb3c <___vfiprintf_internal_r+0xf9c>
1000b2c0:	d9401e17 	ldw	r5,120(sp)
1000b2c4:	2de9c83a 	sub	r20,r5,r23
1000b2c8:	003f3806 	br	1000afac <__alt_data_end+0xf800afac>
1000b2cc:	9cc03fcc 	andi	r19,r19,255
1000b2d0:	b811883a 	mov	r8,r23
1000b2d4:	98034f1e 	bne	r19,zero,1000c014 <___vfiprintf_internal_r+0x1474>
1000b2d8:	00840074 	movhi	r2,4097
1000b2dc:	108c4304 	addi	r2,r2,12556
1000b2e0:	d8802615 	stw	r2,152(sp)
1000b2e4:	8880080c 	andi	r2,r17,32
1000b2e8:	1000ac26 	beq	r2,zero,1000b59c <___vfiprintf_internal_r+0x9fc>
1000b2ec:	d9002217 	ldw	r4,136(sp)
1000b2f0:	24c00017 	ldw	r19,0(r4)
1000b2f4:	25000117 	ldw	r20,4(r4)
1000b2f8:	21000204 	addi	r4,r4,8
1000b2fc:	d9002215 	stw	r4,136(sp)
1000b300:	8880004c 	andi	r2,r17,1
1000b304:	1001e726 	beq	r2,zero,1000baa4 <___vfiprintf_internal_r+0xf04>
1000b308:	9d04b03a 	or	r2,r19,r20
1000b30c:	10025c1e 	bne	r2,zero,1000bc80 <___vfiprintf_internal_r+0x10e0>
1000b310:	d8001d85 	stb	zero,118(sp)
1000b314:	80024416 	blt	r16,zero,1000bc28 <___vfiprintf_internal_r+0x1088>
1000b318:	00bfdfc4 	movi	r2,-129
1000b31c:	88a2703a 	and	r17,r17,r2
1000b320:	003f1d06 	br	1000af98 <__alt_data_end+0xf800af98>
1000b324:	d8c02217 	ldw	r3,136(sp)
1000b328:	04c00044 	movi	r19,1
1000b32c:	b811883a 	mov	r8,r23
1000b330:	18800017 	ldw	r2,0(r3)
1000b334:	18c00104 	addi	r3,r3,4
1000b338:	d8001d85 	stb	zero,118(sp)
1000b33c:	d8801005 	stb	r2,64(sp)
1000b340:	d8c02215 	stw	r3,136(sp)
1000b344:	9829883a 	mov	r20,r19
1000b348:	ddc01004 	addi	r23,sp,64
1000b34c:	0021883a 	mov	r16,zero
1000b350:	003f1e06 	br	1000afcc <__alt_data_end+0xf800afcc>
1000b354:	9cc03fcc 	andi	r19,r19,255
1000b358:	b811883a 	mov	r8,r23
1000b35c:	9803331e 	bne	r19,zero,1000c02c <___vfiprintf_internal_r+0x148c>
1000b360:	8880080c 	andi	r2,r17,32
1000b364:	10004826 	beq	r2,zero,1000b488 <___vfiprintf_internal_r+0x8e8>
1000b368:	d9002217 	ldw	r4,136(sp)
1000b36c:	20800117 	ldw	r2,4(r4)
1000b370:	24c00017 	ldw	r19,0(r4)
1000b374:	21000204 	addi	r4,r4,8
1000b378:	d9002215 	stw	r4,136(sp)
1000b37c:	1029883a 	mov	r20,r2
1000b380:	10024c16 	blt	r2,zero,1000bcb4 <___vfiprintf_internal_r+0x1114>
1000b384:	dd401d83 	ldbu	r21,118(sp)
1000b388:	80007116 	blt	r16,zero,1000b550 <___vfiprintf_internal_r+0x9b0>
1000b38c:	00ffdfc4 	movi	r3,-129
1000b390:	9d04b03a 	or	r2,r19,r20
1000b394:	88e2703a 	and	r17,r17,r3
1000b398:	1000d126 	beq	r2,zero,1000b6e0 <___vfiprintf_internal_r+0xb40>
1000b39c:	a0023526 	beq	r20,zero,1000bc74 <___vfiprintf_internal_r+0x10d4>
1000b3a0:	ddc01a04 	addi	r23,sp,104
1000b3a4:	4039883a 	mov	fp,r8
1000b3a8:	9809883a 	mov	r4,r19
1000b3ac:	a00b883a 	mov	r5,r20
1000b3b0:	01800284 	movi	r6,10
1000b3b4:	000f883a 	mov	r7,zero
1000b3b8:	000d0cc0 	call	1000d0cc <__umoddi3>
1000b3bc:	10800c04 	addi	r2,r2,48
1000b3c0:	bdffffc4 	addi	r23,r23,-1
1000b3c4:	9809883a 	mov	r4,r19
1000b3c8:	a00b883a 	mov	r5,r20
1000b3cc:	b8800005 	stb	r2,0(r23)
1000b3d0:	01800284 	movi	r6,10
1000b3d4:	000f883a 	mov	r7,zero
1000b3d8:	000cad00 	call	1000cad0 <__udivdi3>
1000b3dc:	1027883a 	mov	r19,r2
1000b3e0:	10c4b03a 	or	r2,r2,r3
1000b3e4:	1829883a 	mov	r20,r3
1000b3e8:	103fef1e 	bne	r2,zero,1000b3a8 <__alt_data_end+0xf800b3a8>
1000b3ec:	d9001e17 	ldw	r4,120(sp)
1000b3f0:	e011883a 	mov	r8,fp
1000b3f4:	25e9c83a 	sub	r20,r4,r23
1000b3f8:	003eec06 	br	1000afac <__alt_data_end+0xf800afac>
1000b3fc:	d8802307 	ldb	r2,140(sp)
1000b400:	1002361e 	bne	r2,zero,1000bcdc <___vfiprintf_internal_r+0x113c>
1000b404:	00c00804 	movi	r3,32
1000b408:	d8c02305 	stb	r3,140(sp)
1000b40c:	04c00044 	movi	r19,1
1000b410:	b0c00007 	ldb	r3,0(r22)
1000b414:	003e3f06 	br	1000ad14 <__alt_data_end+0xf800ad14>
1000b418:	8c400054 	ori	r17,r17,1
1000b41c:	b0c00007 	ldb	r3,0(r22)
1000b420:	003e3c06 	br	1000ad14 <__alt_data_end+0xf800ad14>
1000b424:	8c402014 	ori	r17,r17,128
1000b428:	b0c00007 	ldb	r3,0(r22)
1000b42c:	003e3906 	br	1000ad14 <__alt_data_end+0xf800ad14>
1000b430:	dc002715 	stw	r16,156(sp)
1000b434:	d8002515 	stw	zero,148(sp)
1000b438:	1f3ff404 	addi	fp,r3,-48
1000b43c:	0009883a 	mov	r4,zero
1000b440:	b021883a 	mov	r16,r22
1000b444:	01400284 	movi	r5,10
1000b448:	000d8440 	call	1000d844 <__mulsi3>
1000b44c:	80c00007 	ldb	r3,0(r16)
1000b450:	e089883a 	add	r4,fp,r2
1000b454:	b5800044 	addi	r22,r22,1
1000b458:	1f3ff404 	addi	fp,r3,-48
1000b45c:	b021883a 	mov	r16,r22
1000b460:	af3ff82e 	bgeu	r21,fp,1000b444 <__alt_data_end+0xf800b444>
1000b464:	d9002515 	stw	r4,148(sp)
1000b468:	dc002717 	ldw	r16,156(sp)
1000b46c:	003e2a06 	br	1000ad18 <__alt_data_end+0xf800ad18>
1000b470:	9cc03fcc 	andi	r19,r19,255
1000b474:	b811883a 	mov	r8,r23
1000b478:	9802e91e 	bne	r19,zero,1000c020 <___vfiprintf_internal_r+0x1480>
1000b47c:	8c400414 	ori	r17,r17,16
1000b480:	8880080c 	andi	r2,r17,32
1000b484:	103fb81e 	bne	r2,zero,1000b368 <__alt_data_end+0xf800b368>
1000b488:	8880040c 	andi	r2,r17,16
1000b48c:	10022e26 	beq	r2,zero,1000bd48 <___vfiprintf_internal_r+0x11a8>
1000b490:	d9402217 	ldw	r5,136(sp)
1000b494:	2cc00017 	ldw	r19,0(r5)
1000b498:	29400104 	addi	r5,r5,4
1000b49c:	d9402215 	stw	r5,136(sp)
1000b4a0:	9829d7fa 	srai	r20,r19,31
1000b4a4:	a005883a 	mov	r2,r20
1000b4a8:	003fb506 	br	1000b380 <__alt_data_end+0xf800b380>
1000b4ac:	9cc03fcc 	andi	r19,r19,255
1000b4b0:	b811883a 	mov	r8,r23
1000b4b4:	9802fa1e 	bne	r19,zero,1000c0a0 <___vfiprintf_internal_r+0x1500>
1000b4b8:	8c400414 	ori	r17,r17,16
1000b4bc:	8880080c 	andi	r2,r17,32
1000b4c0:	103f661e 	bne	r2,zero,1000b25c <__alt_data_end+0xf800b25c>
1000b4c4:	8880040c 	andi	r2,r17,16
1000b4c8:	10020626 	beq	r2,zero,1000bce4 <___vfiprintf_internal_r+0x1144>
1000b4cc:	d9402217 	ldw	r5,136(sp)
1000b4d0:	d8001d85 	stb	zero,118(sp)
1000b4d4:	0029883a 	mov	r20,zero
1000b4d8:	28800104 	addi	r2,r5,4
1000b4dc:	2cc00017 	ldw	r19,0(r5)
1000b4e0:	80020816 	blt	r16,zero,1000bd04 <___vfiprintf_internal_r+0x1164>
1000b4e4:	00ffdfc4 	movi	r3,-129
1000b4e8:	d8802215 	stw	r2,136(sp)
1000b4ec:	88e2703a 	and	r17,r17,r3
1000b4f0:	983f651e 	bne	r19,zero,1000b288 <__alt_data_end+0xf800b288>
1000b4f4:	002b883a 	mov	r21,zero
1000b4f8:	8002cf26 	beq	r16,zero,1000c038 <___vfiprintf_internal_r+0x1498>
1000b4fc:	0027883a 	mov	r19,zero
1000b500:	0029883a 	mov	r20,zero
1000b504:	003f6106 	br	1000b28c <__alt_data_end+0xf800b28c>
1000b508:	9cc03fcc 	andi	r19,r19,255
1000b50c:	b811883a 	mov	r8,r23
1000b510:	9802e01e 	bne	r19,zero,1000c094 <___vfiprintf_internal_r+0x14f4>
1000b514:	8c400414 	ori	r17,r17,16
1000b518:	8880080c 	andi	r2,r17,32
1000b51c:	1000641e 	bne	r2,zero,1000b6b0 <___vfiprintf_internal_r+0xb10>
1000b520:	8880040c 	andi	r2,r17,16
1000b524:	1001c81e 	bne	r2,zero,1000bc48 <___vfiprintf_internal_r+0x10a8>
1000b528:	8880100c 	andi	r2,r17,64
1000b52c:	d8001d85 	stb	zero,118(sp)
1000b530:	1002281e 	bne	r2,zero,1000bdd4 <___vfiprintf_internal_r+0x1234>
1000b534:	d9002217 	ldw	r4,136(sp)
1000b538:	0029883a 	mov	r20,zero
1000b53c:	20800104 	addi	r2,r4,4
1000b540:	24c00017 	ldw	r19,0(r4)
1000b544:	8001c60e 	bge	r16,zero,1000bc60 <___vfiprintf_internal_r+0x10c0>
1000b548:	d8802215 	stw	r2,136(sp)
1000b54c:	002b883a 	mov	r21,zero
1000b550:	9d04b03a 	or	r2,r19,r20
1000b554:	103f911e 	bne	r2,zero,1000b39c <__alt_data_end+0xf800b39c>
1000b558:	00800044 	movi	r2,1
1000b55c:	10803fcc 	andi	r2,r2,255
1000b560:	00c00044 	movi	r3,1
1000b564:	10c05f26 	beq	r2,r3,1000b6e4 <___vfiprintf_internal_r+0xb44>
1000b568:	00c00084 	movi	r3,2
1000b56c:	10ffe31e 	bne	r2,r3,1000b4fc <__alt_data_end+0xf800b4fc>
1000b570:	0027883a 	mov	r19,zero
1000b574:	0029883a 	mov	r20,zero
1000b578:	00015106 	br	1000bac0 <___vfiprintf_internal_r+0xf20>
1000b57c:	9cc03fcc 	andi	r19,r19,255
1000b580:	b811883a 	mov	r8,r23
1000b584:	9802c01e 	bne	r19,zero,1000c088 <___vfiprintf_internal_r+0x14e8>
1000b588:	01440074 	movhi	r5,4097
1000b58c:	294c3e04 	addi	r5,r5,12536
1000b590:	d9402615 	stw	r5,152(sp)
1000b594:	8880080c 	andi	r2,r17,32
1000b598:	103f541e 	bne	r2,zero,1000b2ec <__alt_data_end+0xf800b2ec>
1000b59c:	8880040c 	andi	r2,r17,16
1000b5a0:	1001f226 	beq	r2,zero,1000bd6c <___vfiprintf_internal_r+0x11cc>
1000b5a4:	d9402217 	ldw	r5,136(sp)
1000b5a8:	0029883a 	mov	r20,zero
1000b5ac:	2cc00017 	ldw	r19,0(r5)
1000b5b0:	29400104 	addi	r5,r5,4
1000b5b4:	d9402215 	stw	r5,136(sp)
1000b5b8:	003f5106 	br	1000b300 <__alt_data_end+0xf800b300>
1000b5bc:	d8c02217 	ldw	r3,136(sp)
1000b5c0:	b811883a 	mov	r8,r23
1000b5c4:	d8001d85 	stb	zero,118(sp)
1000b5c8:	1dc00017 	ldw	r23,0(r3)
1000b5cc:	1f000104 	addi	fp,r3,4
1000b5d0:	b8025926 	beq	r23,zero,1000bf38 <___vfiprintf_internal_r+0x1398>
1000b5d4:	80023316 	blt	r16,zero,1000bea4 <___vfiprintf_internal_r+0x1304>
1000b5d8:	800d883a 	mov	r6,r16
1000b5dc:	000b883a 	mov	r5,zero
1000b5e0:	b809883a 	mov	r4,r23
1000b5e4:	da002a15 	stw	r8,168(sp)
1000b5e8:	0008ce00 	call	10008ce0 <memchr>
1000b5ec:	da002a17 	ldw	r8,168(sp)
1000b5f0:	10026826 	beq	r2,zero,1000bf94 <___vfiprintf_internal_r+0x13f4>
1000b5f4:	15e9c83a 	sub	r20,r2,r23
1000b5f8:	dd401d83 	ldbu	r21,118(sp)
1000b5fc:	df002215 	stw	fp,136(sp)
1000b600:	0021883a 	mov	r16,zero
1000b604:	003e6906 	br	1000afac <__alt_data_end+0xf800afac>
1000b608:	9cc03fcc 	andi	r19,r19,255
1000b60c:	b811883a 	mov	r8,r23
1000b610:	983fc126 	beq	r19,zero,1000b518 <__alt_data_end+0xf800b518>
1000b614:	d8c02303 	ldbu	r3,140(sp)
1000b618:	d8c01d85 	stb	r3,118(sp)
1000b61c:	003fbe06 	br	1000b518 <__alt_data_end+0xf800b518>
1000b620:	d9002217 	ldw	r4,136(sp)
1000b624:	d9402217 	ldw	r5,136(sp)
1000b628:	21000017 	ldw	r4,0(r4)
1000b62c:	28800104 	addi	r2,r5,4
1000b630:	d9002515 	stw	r4,148(sp)
1000b634:	203e3d16 	blt	r4,zero,1000af2c <__alt_data_end+0xf800af2c>
1000b638:	d8802215 	stw	r2,136(sp)
1000b63c:	b0c00007 	ldb	r3,0(r22)
1000b640:	003db406 	br	1000ad14 <__alt_data_end+0xf800ad14>
1000b644:	00c00ac4 	movi	r3,43
1000b648:	d8c02305 	stb	r3,140(sp)
1000b64c:	04c00044 	movi	r19,1
1000b650:	b0c00007 	ldb	r3,0(r22)
1000b654:	003daf06 	br	1000ad14 <__alt_data_end+0xf800ad14>
1000b658:	b0c00007 	ldb	r3,0(r22)
1000b65c:	01000a84 	movi	r4,42
1000b660:	b4000044 	addi	r16,r22,1
1000b664:	19025e26 	beq	r3,r4,1000bfe0 <___vfiprintf_internal_r+0x1440>
1000b668:	1f3ff404 	addi	fp,r3,-48
1000b66c:	0009883a 	mov	r4,zero
1000b670:	af025236 	bltu	r21,fp,1000bfbc <___vfiprintf_internal_r+0x141c>
1000b674:	01400284 	movi	r5,10
1000b678:	000d8440 	call	1000d844 <__mulsi3>
1000b67c:	80c00007 	ldb	r3,0(r16)
1000b680:	1709883a 	add	r4,r2,fp
1000b684:	85800044 	addi	r22,r16,1
1000b688:	1f3ff404 	addi	fp,r3,-48
1000b68c:	b021883a 	mov	r16,r22
1000b690:	af3ff82e 	bgeu	r21,fp,1000b674 <__alt_data_end+0xf800b674>
1000b694:	2021883a 	mov	r16,r4
1000b698:	203d9f0e 	bge	r4,zero,1000ad18 <__alt_data_end+0xf800ad18>
1000b69c:	043fffc4 	movi	r16,-1
1000b6a0:	003d9d06 	br	1000ad18 <__alt_data_end+0xf800ad18>
1000b6a4:	8c401014 	ori	r17,r17,64
1000b6a8:	b0c00007 	ldb	r3,0(r22)
1000b6ac:	003d9906 	br	1000ad14 <__alt_data_end+0xf800ad14>
1000b6b0:	d9002217 	ldw	r4,136(sp)
1000b6b4:	d8001d85 	stb	zero,118(sp)
1000b6b8:	20c00204 	addi	r3,r4,8
1000b6bc:	24c00017 	ldw	r19,0(r4)
1000b6c0:	25000117 	ldw	r20,4(r4)
1000b6c4:	8001e716 	blt	r16,zero,1000be64 <___vfiprintf_internal_r+0x12c4>
1000b6c8:	013fdfc4 	movi	r4,-129
1000b6cc:	9d04b03a 	or	r2,r19,r20
1000b6d0:	d8c02215 	stw	r3,136(sp)
1000b6d4:	8922703a 	and	r17,r17,r4
1000b6d8:	002b883a 	mov	r21,zero
1000b6dc:	103f2f1e 	bne	r2,zero,1000b39c <__alt_data_end+0xf800b39c>
1000b6e0:	803e2f26 	beq	r16,zero,1000afa0 <__alt_data_end+0xf800afa0>
1000b6e4:	0027883a 	mov	r19,zero
1000b6e8:	9cc00c04 	addi	r19,r19,48
1000b6ec:	dcc019c5 	stb	r19,103(sp)
1000b6f0:	dd002817 	ldw	r20,160(sp)
1000b6f4:	ddc019c4 	addi	r23,sp,103
1000b6f8:	003e2c06 	br	1000afac <__alt_data_end+0xf800afac>
1000b6fc:	9cc03fcc 	andi	r19,r19,255
1000b700:	b811883a 	mov	r8,r23
1000b704:	9802571e 	bne	r19,zero,1000c064 <___vfiprintf_internal_r+0x14c4>
1000b708:	18005726 	beq	r3,zero,1000b868 <___vfiprintf_internal_r+0xcc8>
1000b70c:	04c00044 	movi	r19,1
1000b710:	d8c01005 	stb	r3,64(sp)
1000b714:	d8001d85 	stb	zero,118(sp)
1000b718:	9829883a 	mov	r20,r19
1000b71c:	ddc01004 	addi	r23,sp,64
1000b720:	003f0a06 	br	1000b34c <__alt_data_end+0xf800b34c>
1000b724:	d9402017 	ldw	r5,128(sp)
1000b728:	d9002117 	ldw	r4,132(sp)
1000b72c:	d9801a04 	addi	r6,sp,104
1000b730:	da802a15 	stw	r10,168(sp)
1000b734:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000b738:	da802a17 	ldw	r10,168(sp)
1000b73c:	1000501e 	bne	r2,zero,1000b880 <___vfiprintf_internal_r+0xce0>
1000b740:	d9801b17 	ldw	r6,108(sp)
1000b744:	d8801c17 	ldw	r2,112(sp)
1000b748:	d811883a 	mov	r8,sp
1000b74c:	31000044 	addi	r4,r6,1
1000b750:	003e3606 	br	1000b02c <__alt_data_end+0xf800b02c>
1000b754:	d9001b17 	ldw	r4,108(sp)
1000b758:	d8801c17 	ldw	r2,112(sp)
1000b75c:	21400044 	addi	r5,r4,1
1000b760:	d9801d87 	ldb	r6,118(sp)
1000b764:	303e5226 	beq	r6,zero,1000b0b0 <__alt_data_end+0xf800b0b0>
1000b768:	01800044 	movi	r6,1
1000b76c:	d9001d84 	addi	r4,sp,118
1000b770:	1185883a 	add	r2,r2,r6
1000b774:	41000015 	stw	r4,0(r8)
1000b778:	41800115 	stw	r6,4(r8)
1000b77c:	d8801c15 	stw	r2,112(sp)
1000b780:	d9401b15 	stw	r5,108(sp)
1000b784:	010001c4 	movi	r4,7
1000b788:	2140b00e 	bge	r4,r5,1000ba4c <___vfiprintf_internal_r+0xeac>
1000b78c:	1000f61e 	bne	r2,zero,1000bb68 <___vfiprintf_internal_r+0xfc8>
1000b790:	3800b31e 	bne	r7,zero,1000ba60 <___vfiprintf_internal_r+0xec0>
1000b794:	0009883a 	mov	r4,zero
1000b798:	300b883a 	mov	r5,r6
1000b79c:	d811883a 	mov	r8,sp
1000b7a0:	01802004 	movi	r6,128
1000b7a4:	19be5226 	beq	r3,r6,1000b0f0 <__alt_data_end+0xf800b0f0>
1000b7a8:	8521c83a 	sub	r16,r16,r20
1000b7ac:	043e790e 	bge	zero,r16,1000b194 <__alt_data_end+0xf800b194>
1000b7b0:	05400404 	movi	r21,16
1000b7b4:	ac01b00e 	bge	r21,r16,1000be78 <___vfiprintf_internal_r+0x12d8>
1000b7b8:	01440074 	movhi	r5,4097
1000b7bc:	294ca404 	addi	r5,r5,12944
1000b7c0:	d9402315 	stw	r5,140(sp)
1000b7c4:	070001c4 	movi	fp,7
1000b7c8:	00000506 	br	1000b7e0 <___vfiprintf_internal_r+0xc40>
1000b7cc:	21400084 	addi	r5,r4,2
1000b7d0:	42000204 	addi	r8,r8,8
1000b7d4:	1809883a 	mov	r4,r3
1000b7d8:	843ffc04 	addi	r16,r16,-16
1000b7dc:	ac000d0e 	bge	r21,r16,1000b814 <___vfiprintf_internal_r+0xc74>
1000b7e0:	10800404 	addi	r2,r2,16
1000b7e4:	20c00044 	addi	r3,r4,1
1000b7e8:	44800015 	stw	r18,0(r8)
1000b7ec:	45400115 	stw	r21,4(r8)
1000b7f0:	d8801c15 	stw	r2,112(sp)
1000b7f4:	d8c01b15 	stw	r3,108(sp)
1000b7f8:	e0fff40e 	bge	fp,r3,1000b7cc <__alt_data_end+0xf800b7cc>
1000b7fc:	1000101e 	bne	r2,zero,1000b840 <___vfiprintf_internal_r+0xca0>
1000b800:	843ffc04 	addi	r16,r16,-16
1000b804:	01400044 	movi	r5,1
1000b808:	0009883a 	mov	r4,zero
1000b80c:	d811883a 	mov	r8,sp
1000b810:	ac3ff316 	blt	r21,r16,1000b7e0 <__alt_data_end+0xf800b7e0>
1000b814:	d8c02317 	ldw	r3,140(sp)
1000b818:	1405883a 	add	r2,r2,r16
1000b81c:	44000115 	stw	r16,4(r8)
1000b820:	40c00015 	stw	r3,0(r8)
1000b824:	d8801c15 	stw	r2,112(sp)
1000b828:	d9401b15 	stw	r5,108(sp)
1000b82c:	00c001c4 	movi	r3,7
1000b830:	19401916 	blt	r3,r5,1000b898 <___vfiprintf_internal_r+0xcf8>
1000b834:	42000204 	addi	r8,r8,8
1000b838:	29400044 	addi	r5,r5,1
1000b83c:	003e5506 	br	1000b194 <__alt_data_end+0xf800b194>
1000b840:	d9402017 	ldw	r5,128(sp)
1000b844:	d9002117 	ldw	r4,132(sp)
1000b848:	d9801a04 	addi	r6,sp,104
1000b84c:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000b850:	10000b1e 	bne	r2,zero,1000b880 <___vfiprintf_internal_r+0xce0>
1000b854:	d9001b17 	ldw	r4,108(sp)
1000b858:	d8801c17 	ldw	r2,112(sp)
1000b85c:	d811883a 	mov	r8,sp
1000b860:	21400044 	addi	r5,r4,1
1000b864:	003fdc06 	br	1000b7d8 <__alt_data_end+0xf800b7d8>
1000b868:	d8801c17 	ldw	r2,112(sp)
1000b86c:	10000426 	beq	r2,zero,1000b880 <___vfiprintf_internal_r+0xce0>
1000b870:	d9402017 	ldw	r5,128(sp)
1000b874:	d9002117 	ldw	r4,132(sp)
1000b878:	d9801a04 	addi	r6,sp,104
1000b87c:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000b880:	d9402017 	ldw	r5,128(sp)
1000b884:	2880030b 	ldhu	r2,12(r5)
1000b888:	1080100c 	andi	r2,r2,64
1000b88c:	10014d1e 	bne	r2,zero,1000bdc4 <___vfiprintf_internal_r+0x1224>
1000b890:	d8802417 	ldw	r2,144(sp)
1000b894:	003d9706 	br	1000aef4 <__alt_data_end+0xf800aef4>
1000b898:	1000d21e 	bne	r2,zero,1000bbe4 <___vfiprintf_internal_r+0x1044>
1000b89c:	00c00044 	movi	r3,1
1000b8a0:	a005883a 	mov	r2,r20
1000b8a4:	ddc00015 	stw	r23,0(sp)
1000b8a8:	dd000115 	stw	r20,4(sp)
1000b8ac:	dd001c15 	stw	r20,112(sp)
1000b8b0:	d8c01b15 	stw	r3,108(sp)
1000b8b4:	d811883a 	mov	r8,sp
1000b8b8:	42000204 	addi	r8,r8,8
1000b8bc:	8c40010c 	andi	r17,r17,4
1000b8c0:	88004026 	beq	r17,zero,1000b9c4 <___vfiprintf_internal_r+0xe24>
1000b8c4:	d9002517 	ldw	r4,148(sp)
1000b8c8:	24e3c83a 	sub	r17,r4,r19
1000b8cc:	04403d0e 	bge	zero,r17,1000b9c4 <___vfiprintf_internal_r+0xe24>
1000b8d0:	04000404 	movi	r16,16
1000b8d4:	8441a90e 	bge	r16,r17,1000bf7c <___vfiprintf_internal_r+0x13dc>
1000b8d8:	00c40074 	movhi	r3,4097
1000b8dc:	18cca804 	addi	r3,r3,12960
1000b8e0:	d9001b17 	ldw	r4,108(sp)
1000b8e4:	d8c02315 	stw	r3,140(sp)
1000b8e8:	050001c4 	movi	r20,7
1000b8ec:	dd402117 	ldw	r21,132(sp)
1000b8f0:	ddc02017 	ldw	r23,128(sp)
1000b8f4:	00000506 	br	1000b90c <___vfiprintf_internal_r+0xd6c>
1000b8f8:	21400084 	addi	r5,r4,2
1000b8fc:	42000204 	addi	r8,r8,8
1000b900:	1809883a 	mov	r4,r3
1000b904:	8c7ffc04 	addi	r17,r17,-16
1000b908:	84400f0e 	bge	r16,r17,1000b948 <___vfiprintf_internal_r+0xda8>
1000b90c:	01440074 	movhi	r5,4097
1000b910:	10800404 	addi	r2,r2,16
1000b914:	20c00044 	addi	r3,r4,1
1000b918:	294ca804 	addi	r5,r5,12960
1000b91c:	41400015 	stw	r5,0(r8)
1000b920:	44000115 	stw	r16,4(r8)
1000b924:	d8801c15 	stw	r2,112(sp)
1000b928:	d8c01b15 	stw	r3,108(sp)
1000b92c:	a0fff20e 	bge	r20,r3,1000b8f8 <__alt_data_end+0xf800b8f8>
1000b930:	1000141e 	bne	r2,zero,1000b984 <___vfiprintf_internal_r+0xde4>
1000b934:	8c7ffc04 	addi	r17,r17,-16
1000b938:	01400044 	movi	r5,1
1000b93c:	0009883a 	mov	r4,zero
1000b940:	d811883a 	mov	r8,sp
1000b944:	847ff116 	blt	r16,r17,1000b90c <__alt_data_end+0xf800b90c>
1000b948:	d8c02317 	ldw	r3,140(sp)
1000b94c:	1445883a 	add	r2,r2,r17
1000b950:	44400115 	stw	r17,4(r8)
1000b954:	40c00015 	stw	r3,0(r8)
1000b958:	d8801c15 	stw	r2,112(sp)
1000b95c:	d9401b15 	stw	r5,108(sp)
1000b960:	00c001c4 	movi	r3,7
1000b964:	1940170e 	bge	r3,r5,1000b9c4 <___vfiprintf_internal_r+0xe24>
1000b968:	1000101e 	bne	r2,zero,1000b9ac <___vfiprintf_internal_r+0xe0c>
1000b96c:	d8802517 	ldw	r2,148(sp)
1000b970:	14c11616 	blt	r2,r19,1000bdcc <___vfiprintf_internal_r+0x122c>
1000b974:	d9002417 	ldw	r4,144(sp)
1000b978:	2089883a 	add	r4,r4,r2
1000b97c:	d9002415 	stw	r4,144(sp)
1000b980:	003e1806 	br	1000b1e4 <__alt_data_end+0xf800b1e4>
1000b984:	d9801a04 	addi	r6,sp,104
1000b988:	b80b883a 	mov	r5,r23
1000b98c:	a809883a 	mov	r4,r21
1000b990:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000b994:	103fba1e 	bne	r2,zero,1000b880 <__alt_data_end+0xf800b880>
1000b998:	d9001b17 	ldw	r4,108(sp)
1000b99c:	d8801c17 	ldw	r2,112(sp)
1000b9a0:	d811883a 	mov	r8,sp
1000b9a4:	21400044 	addi	r5,r4,1
1000b9a8:	003fd606 	br	1000b904 <__alt_data_end+0xf800b904>
1000b9ac:	d9402017 	ldw	r5,128(sp)
1000b9b0:	d9002117 	ldw	r4,132(sp)
1000b9b4:	d9801a04 	addi	r6,sp,104
1000b9b8:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000b9bc:	103fb01e 	bne	r2,zero,1000b880 <__alt_data_end+0xf800b880>
1000b9c0:	d8801c17 	ldw	r2,112(sp)
1000b9c4:	d8c02517 	ldw	r3,148(sp)
1000b9c8:	1cc0010e 	bge	r3,r19,1000b9d0 <___vfiprintf_internal_r+0xe30>
1000b9cc:	9807883a 	mov	r3,r19
1000b9d0:	d9002417 	ldw	r4,144(sp)
1000b9d4:	20c9883a 	add	r4,r4,r3
1000b9d8:	d9002415 	stw	r4,144(sp)
1000b9dc:	103e0126 	beq	r2,zero,1000b1e4 <__alt_data_end+0xf800b1e4>
1000b9e0:	d9402017 	ldw	r5,128(sp)
1000b9e4:	d9002117 	ldw	r4,132(sp)
1000b9e8:	d9801a04 	addi	r6,sp,104
1000b9ec:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000b9f0:	103dfc26 	beq	r2,zero,1000b1e4 <__alt_data_end+0xf800b1e4>
1000b9f4:	003fa206 	br	1000b880 <__alt_data_end+0xf800b880>
1000b9f8:	d9402017 	ldw	r5,128(sp)
1000b9fc:	d9002117 	ldw	r4,132(sp)
1000ba00:	d9801a04 	addi	r6,sp,104
1000ba04:	d9c02b15 	stw	r7,172(sp)
1000ba08:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000ba0c:	d9c02b17 	ldw	r7,172(sp)
1000ba10:	103f9b1e 	bne	r2,zero,1000b880 <__alt_data_end+0xf800b880>
1000ba14:	d9001b17 	ldw	r4,108(sp)
1000ba18:	d8801c17 	ldw	r2,112(sp)
1000ba1c:	d811883a 	mov	r8,sp
1000ba20:	21800044 	addi	r6,r4,1
1000ba24:	003dbf06 	br	1000b124 <__alt_data_end+0xf800b124>
1000ba28:	1000d81e 	bne	r2,zero,1000bd8c <___vfiprintf_internal_r+0x11ec>
1000ba2c:	d9001d87 	ldb	r4,118(sp)
1000ba30:	20000a26 	beq	r4,zero,1000ba5c <___vfiprintf_internal_r+0xebc>
1000ba34:	00800044 	movi	r2,1
1000ba38:	d9001d84 	addi	r4,sp,118
1000ba3c:	100b883a 	mov	r5,r2
1000ba40:	d9000015 	stw	r4,0(sp)
1000ba44:	d8800115 	stw	r2,4(sp)
1000ba48:	d811883a 	mov	r8,sp
1000ba4c:	2809883a 	mov	r4,r5
1000ba50:	42000204 	addi	r8,r8,8
1000ba54:	29400044 	addi	r5,r5,1
1000ba58:	003d9506 	br	1000b0b0 <__alt_data_end+0xf800b0b0>
1000ba5c:	3800fd26 	beq	r7,zero,1000be54 <___vfiprintf_internal_r+0x12b4>
1000ba60:	00800084 	movi	r2,2
1000ba64:	d9001d04 	addi	r4,sp,116
1000ba68:	d9000015 	stw	r4,0(sp)
1000ba6c:	d8800115 	stw	r2,4(sp)
1000ba70:	01400044 	movi	r5,1
1000ba74:	d811883a 	mov	r8,sp
1000ba78:	2809883a 	mov	r4,r5
1000ba7c:	42000204 	addi	r8,r8,8
1000ba80:	29400044 	addi	r5,r5,1
1000ba84:	003f4606 	br	1000b7a0 <__alt_data_end+0xf800b7a0>
1000ba88:	d8802517 	ldw	r2,148(sp)
1000ba8c:	14c0010e 	bge	r2,r19,1000ba94 <___vfiprintf_internal_r+0xef4>
1000ba90:	9805883a 	mov	r2,r19
1000ba94:	d9402417 	ldw	r5,144(sp)
1000ba98:	288b883a 	add	r5,r5,r2
1000ba9c:	d9402415 	stw	r5,144(sp)
1000baa0:	003dd006 	br	1000b1e4 <__alt_data_end+0xf800b1e4>
1000baa4:	d8001d85 	stb	zero,118(sp)
1000baa8:	80005d16 	blt	r16,zero,1000bc20 <___vfiprintf_internal_r+0x1080>
1000baac:	00ffdfc4 	movi	r3,-129
1000bab0:	9d04b03a 	or	r2,r19,r20
1000bab4:	88e2703a 	and	r17,r17,r3
1000bab8:	103d3726 	beq	r2,zero,1000af98 <__alt_data_end+0xf800af98>
1000babc:	002b883a 	mov	r21,zero
1000bac0:	d9002617 	ldw	r4,152(sp)
1000bac4:	ddc01a04 	addi	r23,sp,104
1000bac8:	988003cc 	andi	r2,r19,15
1000bacc:	a006973a 	slli	r3,r20,28
1000bad0:	2085883a 	add	r2,r4,r2
1000bad4:	9826d13a 	srli	r19,r19,4
1000bad8:	10800003 	ldbu	r2,0(r2)
1000badc:	a028d13a 	srli	r20,r20,4
1000bae0:	bdffffc4 	addi	r23,r23,-1
1000bae4:	1ce6b03a 	or	r19,r3,r19
1000bae8:	b8800005 	stb	r2,0(r23)
1000baec:	9d04b03a 	or	r2,r19,r20
1000baf0:	103ff51e 	bne	r2,zero,1000bac8 <__alt_data_end+0xf800bac8>
1000baf4:	d8801e17 	ldw	r2,120(sp)
1000baf8:	15e9c83a 	sub	r20,r2,r23
1000bafc:	003d2b06 	br	1000afac <__alt_data_end+0xf800afac>
1000bb00:	d9402017 	ldw	r5,128(sp)
1000bb04:	d9002117 	ldw	r4,132(sp)
1000bb08:	d9801a04 	addi	r6,sp,104
1000bb0c:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000bb10:	103f5b1e 	bne	r2,zero,1000b880 <__alt_data_end+0xf800b880>
1000bb14:	d8801c17 	ldw	r2,112(sp)
1000bb18:	d811883a 	mov	r8,sp
1000bb1c:	003f6706 	br	1000b8bc <__alt_data_end+0xf800b8bc>
1000bb20:	d9402017 	ldw	r5,128(sp)
1000bb24:	d9002117 	ldw	r4,132(sp)
1000bb28:	d9801a04 	addi	r6,sp,104
1000bb2c:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000bb30:	103f531e 	bne	r2,zero,1000b880 <__alt_data_end+0xf800b880>
1000bb34:	d811883a 	mov	r8,sp
1000bb38:	003cd906 	br	1000aea0 <__alt_data_end+0xf800aea0>
1000bb3c:	10803fcc 	andi	r2,r2,255
1000bb40:	1080201c 	xori	r2,r2,128
1000bb44:	10bfe004 	addi	r2,r2,-128
1000bb48:	00c00c04 	movi	r3,48
1000bb4c:	10ffe926 	beq	r2,r3,1000baf4 <__alt_data_end+0xf800baf4>
1000bb50:	b8ffffc5 	stb	r3,-1(r23)
1000bb54:	d8c01e17 	ldw	r3,120(sp)
1000bb58:	b8bfffc4 	addi	r2,r23,-1
1000bb5c:	102f883a 	mov	r23,r2
1000bb60:	18a9c83a 	sub	r20,r3,r2
1000bb64:	003d1106 	br	1000afac <__alt_data_end+0xf800afac>
1000bb68:	d9402017 	ldw	r5,128(sp)
1000bb6c:	d9002117 	ldw	r4,132(sp)
1000bb70:	d9801a04 	addi	r6,sp,104
1000bb74:	d8c02a15 	stw	r3,168(sp)
1000bb78:	d9c02b15 	stw	r7,172(sp)
1000bb7c:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000bb80:	d8c02a17 	ldw	r3,168(sp)
1000bb84:	d9c02b17 	ldw	r7,172(sp)
1000bb88:	103f3d1e 	bne	r2,zero,1000b880 <__alt_data_end+0xf800b880>
1000bb8c:	d9001b17 	ldw	r4,108(sp)
1000bb90:	d8801c17 	ldw	r2,112(sp)
1000bb94:	d811883a 	mov	r8,sp
1000bb98:	21400044 	addi	r5,r4,1
1000bb9c:	003d4406 	br	1000b0b0 <__alt_data_end+0xf800b0b0>
1000bba0:	d9402017 	ldw	r5,128(sp)
1000bba4:	d9002117 	ldw	r4,132(sp)
1000bba8:	d9801a04 	addi	r6,sp,104
1000bbac:	d8c02a15 	stw	r3,168(sp)
1000bbb0:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000bbb4:	d8c02a17 	ldw	r3,168(sp)
1000bbb8:	103f311e 	bne	r2,zero,1000b880 <__alt_data_end+0xf800b880>
1000bbbc:	d9001b17 	ldw	r4,108(sp)
1000bbc0:	d8801c17 	ldw	r2,112(sp)
1000bbc4:	d811883a 	mov	r8,sp
1000bbc8:	21400044 	addi	r5,r4,1
1000bbcc:	003ef406 	br	1000b7a0 <__alt_data_end+0xf800b7a0>
1000bbd0:	1000bd1e 	bne	r2,zero,1000bec8 <___vfiprintf_internal_r+0x1328>
1000bbd4:	01400044 	movi	r5,1
1000bbd8:	0009883a 	mov	r4,zero
1000bbdc:	d811883a 	mov	r8,sp
1000bbe0:	003ef106 	br	1000b7a8 <__alt_data_end+0xf800b7a8>
1000bbe4:	d9402017 	ldw	r5,128(sp)
1000bbe8:	d9002117 	ldw	r4,132(sp)
1000bbec:	d9801a04 	addi	r6,sp,104
1000bbf0:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000bbf4:	103f221e 	bne	r2,zero,1000b880 <__alt_data_end+0xf800b880>
1000bbf8:	d9401b17 	ldw	r5,108(sp)
1000bbfc:	d8801c17 	ldw	r2,112(sp)
1000bc00:	d811883a 	mov	r8,sp
1000bc04:	29400044 	addi	r5,r5,1
1000bc08:	003d6206 	br	1000b194 <__alt_data_end+0xf800b194>
1000bc0c:	01440074 	movhi	r5,4097
1000bc10:	294c4304 	addi	r5,r5,12556
1000bc14:	d9402615 	stw	r5,152(sp)
1000bc18:	d8c02215 	stw	r3,136(sp)
1000bc1c:	1023883a 	mov	r17,r2
1000bc20:	9d04b03a 	or	r2,r19,r20
1000bc24:	103fa51e 	bne	r2,zero,1000babc <__alt_data_end+0xf800babc>
1000bc28:	002b883a 	mov	r21,zero
1000bc2c:	00800084 	movi	r2,2
1000bc30:	003e4a06 	br	1000b55c <__alt_data_end+0xf800b55c>
1000bc34:	01440074 	movhi	r5,4097
1000bc38:	294c4304 	addi	r5,r5,12556
1000bc3c:	002b883a 	mov	r21,zero
1000bc40:	d9402615 	stw	r5,152(sp)
1000bc44:	003f9e06 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000bc48:	d9402217 	ldw	r5,136(sp)
1000bc4c:	d8001d85 	stb	zero,118(sp)
1000bc50:	0029883a 	mov	r20,zero
1000bc54:	28800104 	addi	r2,r5,4
1000bc58:	2cc00017 	ldw	r19,0(r5)
1000bc5c:	803e3a16 	blt	r16,zero,1000b548 <__alt_data_end+0xf800b548>
1000bc60:	00ffdfc4 	movi	r3,-129
1000bc64:	d8802215 	stw	r2,136(sp)
1000bc68:	88e2703a 	and	r17,r17,r3
1000bc6c:	002b883a 	mov	r21,zero
1000bc70:	983e9b26 	beq	r19,zero,1000b6e0 <__alt_data_end+0xf800b6e0>
1000bc74:	00800244 	movi	r2,9
1000bc78:	14fdc936 	bltu	r2,r19,1000b3a0 <__alt_data_end+0xf800b3a0>
1000bc7c:	003e9a06 	br	1000b6e8 <__alt_data_end+0xf800b6e8>
1000bc80:	00800c04 	movi	r2,48
1000bc84:	d8c01d45 	stb	r3,117(sp)
1000bc88:	d8801d05 	stb	r2,116(sp)
1000bc8c:	d8001d85 	stb	zero,118(sp)
1000bc90:	88c00094 	ori	r3,r17,2
1000bc94:	80009c16 	blt	r16,zero,1000bf08 <___vfiprintf_internal_r+0x1368>
1000bc98:	00bfdfc4 	movi	r2,-129
1000bc9c:	88a2703a 	and	r17,r17,r2
1000bca0:	8c400094 	ori	r17,r17,2
1000bca4:	002b883a 	mov	r21,zero
1000bca8:	003f8506 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000bcac:	b029883a 	mov	r20,r22
1000bcb0:	003c0b06 	br	1000ace0 <__alt_data_end+0xf800ace0>
1000bcb4:	04e7c83a 	sub	r19,zero,r19
1000bcb8:	05400b44 	movi	r21,45
1000bcbc:	9804c03a 	cmpne	r2,r19,zero
1000bcc0:	0529c83a 	sub	r20,zero,r20
1000bcc4:	dd401d85 	stb	r21,118(sp)
1000bcc8:	a0a9c83a 	sub	r20,r20,r2
1000bccc:	80009716 	blt	r16,zero,1000bf2c <___vfiprintf_internal_r+0x138c>
1000bcd0:	00bfdfc4 	movi	r2,-129
1000bcd4:	88a2703a 	and	r17,r17,r2
1000bcd8:	003db006 	br	1000b39c <__alt_data_end+0xf800b39c>
1000bcdc:	b0c00007 	ldb	r3,0(r22)
1000bce0:	003c0c06 	br	1000ad14 <__alt_data_end+0xf800ad14>
1000bce4:	8880100c 	andi	r2,r17,64
1000bce8:	d8001d85 	stb	zero,118(sp)
1000bcec:	1000461e 	bne	r2,zero,1000be08 <___vfiprintf_internal_r+0x1268>
1000bcf0:	d9002217 	ldw	r4,136(sp)
1000bcf4:	0029883a 	mov	r20,zero
1000bcf8:	20800104 	addi	r2,r4,4
1000bcfc:	24c00017 	ldw	r19,0(r4)
1000bd00:	803df80e 	bge	r16,zero,1000b4e4 <__alt_data_end+0xf800b4e4>
1000bd04:	9d06b03a 	or	r3,r19,r20
1000bd08:	d8802215 	stw	r2,136(sp)
1000bd0c:	183d5e1e 	bne	r3,zero,1000b288 <__alt_data_end+0xf800b288>
1000bd10:	002b883a 	mov	r21,zero
1000bd14:	0005883a 	mov	r2,zero
1000bd18:	003e1006 	br	1000b55c <__alt_data_end+0xf800b55c>
1000bd1c:	8880040c 	andi	r2,r17,16
1000bd20:	1000321e 	bne	r2,zero,1000bdec <___vfiprintf_internal_r+0x124c>
1000bd24:	8c40100c 	andi	r17,r17,64
1000bd28:	88008d26 	beq	r17,zero,1000bf60 <___vfiprintf_internal_r+0x13c0>
1000bd2c:	d9402217 	ldw	r5,136(sp)
1000bd30:	d8c02417 	ldw	r3,144(sp)
1000bd34:	28800017 	ldw	r2,0(r5)
1000bd38:	29400104 	addi	r5,r5,4
1000bd3c:	d9402215 	stw	r5,136(sp)
1000bd40:	10c0000d 	sth	r3,0(r2)
1000bd44:	003bca06 	br	1000ac70 <__alt_data_end+0xf800ac70>
1000bd48:	8880100c 	andi	r2,r17,64
1000bd4c:	10003a26 	beq	r2,zero,1000be38 <___vfiprintf_internal_r+0x1298>
1000bd50:	d8802217 	ldw	r2,136(sp)
1000bd54:	14c0000f 	ldh	r19,0(r2)
1000bd58:	10800104 	addi	r2,r2,4
1000bd5c:	d8802215 	stw	r2,136(sp)
1000bd60:	9829d7fa 	srai	r20,r19,31
1000bd64:	a005883a 	mov	r2,r20
1000bd68:	003d8506 	br	1000b380 <__alt_data_end+0xf800b380>
1000bd6c:	8880100c 	andi	r2,r17,64
1000bd70:	10002b26 	beq	r2,zero,1000be20 <___vfiprintf_internal_r+0x1280>
1000bd74:	d8802217 	ldw	r2,136(sp)
1000bd78:	0029883a 	mov	r20,zero
1000bd7c:	14c0000b 	ldhu	r19,0(r2)
1000bd80:	10800104 	addi	r2,r2,4
1000bd84:	d8802215 	stw	r2,136(sp)
1000bd88:	003d5d06 	br	1000b300 <__alt_data_end+0xf800b300>
1000bd8c:	d9402017 	ldw	r5,128(sp)
1000bd90:	d9002117 	ldw	r4,132(sp)
1000bd94:	d9801a04 	addi	r6,sp,104
1000bd98:	d8c02a15 	stw	r3,168(sp)
1000bd9c:	d9c02b15 	stw	r7,172(sp)
1000bda0:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000bda4:	d8c02a17 	ldw	r3,168(sp)
1000bda8:	d9c02b17 	ldw	r7,172(sp)
1000bdac:	103eb41e 	bne	r2,zero,1000b880 <__alt_data_end+0xf800b880>
1000bdb0:	d9001b17 	ldw	r4,108(sp)
1000bdb4:	d8801c17 	ldw	r2,112(sp)
1000bdb8:	d811883a 	mov	r8,sp
1000bdbc:	21400044 	addi	r5,r4,1
1000bdc0:	003e6706 	br	1000b760 <__alt_data_end+0xf800b760>
1000bdc4:	00bfffc4 	movi	r2,-1
1000bdc8:	003c4a06 	br	1000aef4 <__alt_data_end+0xf800aef4>
1000bdcc:	9805883a 	mov	r2,r19
1000bdd0:	003ee806 	br	1000b974 <__alt_data_end+0xf800b974>
1000bdd4:	d8c02217 	ldw	r3,136(sp)
1000bdd8:	0029883a 	mov	r20,zero
1000bddc:	18800104 	addi	r2,r3,4
1000bde0:	1cc0000b 	ldhu	r19,0(r3)
1000bde4:	803f9e0e 	bge	r16,zero,1000bc60 <__alt_data_end+0xf800bc60>
1000bde8:	003dd706 	br	1000b548 <__alt_data_end+0xf800b548>
1000bdec:	d8c02217 	ldw	r3,136(sp)
1000bdf0:	d9002417 	ldw	r4,144(sp)
1000bdf4:	18800017 	ldw	r2,0(r3)
1000bdf8:	18c00104 	addi	r3,r3,4
1000bdfc:	d8c02215 	stw	r3,136(sp)
1000be00:	11000015 	stw	r4,0(r2)
1000be04:	003b9a06 	br	1000ac70 <__alt_data_end+0xf800ac70>
1000be08:	d8c02217 	ldw	r3,136(sp)
1000be0c:	0029883a 	mov	r20,zero
1000be10:	18800104 	addi	r2,r3,4
1000be14:	1cc0000b 	ldhu	r19,0(r3)
1000be18:	803db20e 	bge	r16,zero,1000b4e4 <__alt_data_end+0xf800b4e4>
1000be1c:	003fb906 	br	1000bd04 <__alt_data_end+0xf800bd04>
1000be20:	d9002217 	ldw	r4,136(sp)
1000be24:	0029883a 	mov	r20,zero
1000be28:	24c00017 	ldw	r19,0(r4)
1000be2c:	21000104 	addi	r4,r4,4
1000be30:	d9002215 	stw	r4,136(sp)
1000be34:	003d3206 	br	1000b300 <__alt_data_end+0xf800b300>
1000be38:	d8c02217 	ldw	r3,136(sp)
1000be3c:	1cc00017 	ldw	r19,0(r3)
1000be40:	18c00104 	addi	r3,r3,4
1000be44:	d8c02215 	stw	r3,136(sp)
1000be48:	9829d7fa 	srai	r20,r19,31
1000be4c:	a005883a 	mov	r2,r20
1000be50:	003d4b06 	br	1000b380 <__alt_data_end+0xf800b380>
1000be54:	0009883a 	mov	r4,zero
1000be58:	01400044 	movi	r5,1
1000be5c:	d811883a 	mov	r8,sp
1000be60:	003e4f06 	br	1000b7a0 <__alt_data_end+0xf800b7a0>
1000be64:	d8c02215 	stw	r3,136(sp)
1000be68:	002b883a 	mov	r21,zero
1000be6c:	003db806 	br	1000b550 <__alt_data_end+0xf800b550>
1000be70:	d811883a 	mov	r8,sp
1000be74:	003e9606 	br	1000b8d0 <__alt_data_end+0xf800b8d0>
1000be78:	01040074 	movhi	r4,4097
1000be7c:	210ca404 	addi	r4,r4,12944
1000be80:	d9002315 	stw	r4,140(sp)
1000be84:	003e6306 	br	1000b814 <__alt_data_end+0xf800b814>
1000be88:	b0c00043 	ldbu	r3,1(r22)
1000be8c:	8c400814 	ori	r17,r17,32
1000be90:	b5800044 	addi	r22,r22,1
1000be94:	18c03fcc 	andi	r3,r3,255
1000be98:	18c0201c 	xori	r3,r3,128
1000be9c:	18ffe004 	addi	r3,r3,-128
1000bea0:	003b9c06 	br	1000ad14 <__alt_data_end+0xf800ad14>
1000bea4:	b809883a 	mov	r4,r23
1000bea8:	da002a15 	stw	r8,168(sp)
1000beac:	00033100 	call	10003310 <strlen>
1000beb0:	1029883a 	mov	r20,r2
1000beb4:	dd401d83 	ldbu	r21,118(sp)
1000beb8:	df002215 	stw	fp,136(sp)
1000bebc:	0021883a 	mov	r16,zero
1000bec0:	da002a17 	ldw	r8,168(sp)
1000bec4:	003c3906 	br	1000afac <__alt_data_end+0xf800afac>
1000bec8:	d9402017 	ldw	r5,128(sp)
1000becc:	d9002117 	ldw	r4,132(sp)
1000bed0:	d9801a04 	addi	r6,sp,104
1000bed4:	000aa8c0 	call	1000aa8c <__sprint_r.part.0>
1000bed8:	103e691e 	bne	r2,zero,1000b880 <__alt_data_end+0xf800b880>
1000bedc:	d9001b17 	ldw	r4,108(sp)
1000bee0:	d8801c17 	ldw	r2,112(sp)
1000bee4:	d811883a 	mov	r8,sp
1000bee8:	21400044 	addi	r5,r4,1
1000beec:	003e2e06 	br	1000b7a8 <__alt_data_end+0xf800b7a8>
1000bef0:	01040074 	movhi	r4,4097
1000bef4:	210ca804 	addi	r4,r4,12960
1000bef8:	d9002315 	stw	r4,140(sp)
1000befc:	d9001b17 	ldw	r4,108(sp)
1000bf00:	21000044 	addi	r4,r4,1
1000bf04:	003c5e06 	br	1000b080 <__alt_data_end+0xf800b080>
1000bf08:	002b883a 	mov	r21,zero
1000bf0c:	00800084 	movi	r2,2
1000bf10:	10803fcc 	andi	r2,r2,255
1000bf14:	01000044 	movi	r4,1
1000bf18:	11002b26 	beq	r2,r4,1000bfc8 <___vfiprintf_internal_r+0x1428>
1000bf1c:	01000084 	movi	r4,2
1000bf20:	11002b1e 	bne	r2,r4,1000bfd0 <___vfiprintf_internal_r+0x1430>
1000bf24:	1823883a 	mov	r17,r3
1000bf28:	003ee506 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000bf2c:	8807883a 	mov	r3,r17
1000bf30:	00800044 	movi	r2,1
1000bf34:	003ff606 	br	1000bf10 <__alt_data_end+0xf800bf10>
1000bf38:	00800184 	movi	r2,6
1000bf3c:	1400012e 	bgeu	r2,r16,1000bf44 <___vfiprintf_internal_r+0x13a4>
1000bf40:	1021883a 	mov	r16,r2
1000bf44:	8029883a 	mov	r20,r16
1000bf48:	8027883a 	mov	r19,r16
1000bf4c:	80002216 	blt	r16,zero,1000bfd8 <___vfiprintf_internal_r+0x1438>
1000bf50:	05c40074 	movhi	r23,4097
1000bf54:	df002215 	stw	fp,136(sp)
1000bf58:	bdcc4804 	addi	r23,r23,12576
1000bf5c:	003cfb06 	br	1000b34c <__alt_data_end+0xf800b34c>
1000bf60:	d9002217 	ldw	r4,136(sp)
1000bf64:	d9402417 	ldw	r5,144(sp)
1000bf68:	20800017 	ldw	r2,0(r4)
1000bf6c:	21000104 	addi	r4,r4,4
1000bf70:	d9002215 	stw	r4,136(sp)
1000bf74:	11400015 	stw	r5,0(r2)
1000bf78:	003b3d06 	br	1000ac70 <__alt_data_end+0xf800ac70>
1000bf7c:	01440074 	movhi	r5,4097
1000bf80:	294ca804 	addi	r5,r5,12960
1000bf84:	d9402315 	stw	r5,140(sp)
1000bf88:	d9401b17 	ldw	r5,108(sp)
1000bf8c:	29400044 	addi	r5,r5,1
1000bf90:	003e6d06 	br	1000b948 <__alt_data_end+0xf800b948>
1000bf94:	8029883a 	mov	r20,r16
1000bf98:	dd401d83 	ldbu	r21,118(sp)
1000bf9c:	df002215 	stw	fp,136(sp)
1000bfa0:	0021883a 	mov	r16,zero
1000bfa4:	003c0106 	br	1000afac <__alt_data_end+0xf800afac>
1000bfa8:	00c40074 	movhi	r3,4097
1000bfac:	18cca404 	addi	r3,r3,12944
1000bfb0:	d8c02315 	stw	r3,140(sp)
1000bfb4:	280d883a 	mov	r6,r5
1000bfb8:	003c6906 	br	1000b160 <__alt_data_end+0xf800b160>
1000bfbc:	802d883a 	mov	r22,r16
1000bfc0:	0021883a 	mov	r16,zero
1000bfc4:	003b5406 	br	1000ad18 <__alt_data_end+0xf800ad18>
1000bfc8:	1823883a 	mov	r17,r3
1000bfcc:	003cf306 	br	1000b39c <__alt_data_end+0xf800b39c>
1000bfd0:	1823883a 	mov	r17,r3
1000bfd4:	003cad06 	br	1000b28c <__alt_data_end+0xf800b28c>
1000bfd8:	0027883a 	mov	r19,zero
1000bfdc:	003fdc06 	br	1000bf50 <__alt_data_end+0xf800bf50>
1000bfe0:	d9402217 	ldw	r5,136(sp)
1000bfe4:	8005883a 	mov	r2,r16
1000bfe8:	b0c00043 	ldbu	r3,1(r22)
1000bfec:	2c000017 	ldw	r16,0(r5)
1000bff0:	29000104 	addi	r4,r5,4
1000bff4:	d9002215 	stw	r4,136(sp)
1000bff8:	102d883a 	mov	r22,r2
1000bffc:	803fa50e 	bge	r16,zero,1000be94 <__alt_data_end+0xf800be94>
1000c000:	18c03fcc 	andi	r3,r3,255
1000c004:	18c0201c 	xori	r3,r3,128
1000c008:	043fffc4 	movi	r16,-1
1000c00c:	18ffe004 	addi	r3,r3,-128
1000c010:	003b4006 	br	1000ad14 <__alt_data_end+0xf800ad14>
1000c014:	d9402303 	ldbu	r5,140(sp)
1000c018:	d9401d85 	stb	r5,118(sp)
1000c01c:	003cae06 	br	1000b2d8 <__alt_data_end+0xf800b2d8>
1000c020:	d8c02303 	ldbu	r3,140(sp)
1000c024:	d8c01d85 	stb	r3,118(sp)
1000c028:	003d1406 	br	1000b47c <__alt_data_end+0xf800b47c>
1000c02c:	d8c02303 	ldbu	r3,140(sp)
1000c030:	d8c01d85 	stb	r3,118(sp)
1000c034:	003cca06 	br	1000b360 <__alt_data_end+0xf800b360>
1000c038:	8880004c 	andi	r2,r17,1
1000c03c:	002b883a 	mov	r21,zero
1000c040:	10000526 	beq	r2,zero,1000c058 <___vfiprintf_internal_r+0x14b8>
1000c044:	00800c04 	movi	r2,48
1000c048:	d88019c5 	stb	r2,103(sp)
1000c04c:	dd002817 	ldw	r20,160(sp)
1000c050:	ddc019c4 	addi	r23,sp,103
1000c054:	003bd506 	br	1000afac <__alt_data_end+0xf800afac>
1000c058:	0029883a 	mov	r20,zero
1000c05c:	ddc01a04 	addi	r23,sp,104
1000c060:	003bd206 	br	1000afac <__alt_data_end+0xf800afac>
1000c064:	d9002303 	ldbu	r4,140(sp)
1000c068:	d9001d85 	stb	r4,118(sp)
1000c06c:	003da606 	br	1000b708 <__alt_data_end+0xf800b708>
1000c070:	d8c02303 	ldbu	r3,140(sp)
1000c074:	d8c01d85 	stb	r3,118(sp)
1000c078:	003c7606 	br	1000b254 <__alt_data_end+0xf800b254>
1000c07c:	d8c02303 	ldbu	r3,140(sp)
1000c080:	d8c01d85 	stb	r3,118(sp)
1000c084:	003c6506 	br	1000b21c <__alt_data_end+0xf800b21c>
1000c088:	d9002303 	ldbu	r4,140(sp)
1000c08c:	d9001d85 	stb	r4,118(sp)
1000c090:	003d3d06 	br	1000b588 <__alt_data_end+0xf800b588>
1000c094:	d8c02303 	ldbu	r3,140(sp)
1000c098:	d8c01d85 	stb	r3,118(sp)
1000c09c:	003d1d06 	br	1000b514 <__alt_data_end+0xf800b514>
1000c0a0:	d8c02303 	ldbu	r3,140(sp)
1000c0a4:	d8c01d85 	stb	r3,118(sp)
1000c0a8:	003d0306 	br	1000b4b8 <__alt_data_end+0xf800b4b8>

1000c0ac <__vfiprintf_internal>:
1000c0ac:	00840074 	movhi	r2,4097
1000c0b0:	1093a504 	addi	r2,r2,20116
1000c0b4:	300f883a 	mov	r7,r6
1000c0b8:	280d883a 	mov	r6,r5
1000c0bc:	200b883a 	mov	r5,r4
1000c0c0:	11000017 	ldw	r4,0(r2)
1000c0c4:	000aba01 	jmpi	1000aba0 <___vfiprintf_internal_r>

1000c0c8 <__sbprintf>:
1000c0c8:	2880030b 	ldhu	r2,12(r5)
1000c0cc:	2ac01917 	ldw	r11,100(r5)
1000c0d0:	2a80038b 	ldhu	r10,14(r5)
1000c0d4:	2a400717 	ldw	r9,28(r5)
1000c0d8:	2a000917 	ldw	r8,36(r5)
1000c0dc:	defee204 	addi	sp,sp,-1144
1000c0e0:	00c10004 	movi	r3,1024
1000c0e4:	dc011a15 	stw	r16,1128(sp)
1000c0e8:	10bfff4c 	andi	r2,r2,65533
1000c0ec:	2821883a 	mov	r16,r5
1000c0f0:	d8cb883a 	add	r5,sp,r3
1000c0f4:	dc811c15 	stw	r18,1136(sp)
1000c0f8:	dc411b15 	stw	r17,1132(sp)
1000c0fc:	dfc11d15 	stw	ra,1140(sp)
1000c100:	2025883a 	mov	r18,r4
1000c104:	d881030d 	sth	r2,1036(sp)
1000c108:	dac11915 	stw	r11,1124(sp)
1000c10c:	da81038d 	sth	r10,1038(sp)
1000c110:	da410715 	stw	r9,1052(sp)
1000c114:	da010915 	stw	r8,1060(sp)
1000c118:	dec10015 	stw	sp,1024(sp)
1000c11c:	dec10415 	stw	sp,1040(sp)
1000c120:	d8c10215 	stw	r3,1032(sp)
1000c124:	d8c10515 	stw	r3,1044(sp)
1000c128:	d8010615 	stw	zero,1048(sp)
1000c12c:	000aba00 	call	1000aba0 <___vfiprintf_internal_r>
1000c130:	1023883a 	mov	r17,r2
1000c134:	10000416 	blt	r2,zero,1000c148 <__sbprintf+0x80>
1000c138:	d9410004 	addi	r5,sp,1024
1000c13c:	9009883a 	mov	r4,r18
1000c140:	000737c0 	call	1000737c <_fflush_r>
1000c144:	10000d1e 	bne	r2,zero,1000c17c <__sbprintf+0xb4>
1000c148:	d881030b 	ldhu	r2,1036(sp)
1000c14c:	1080100c 	andi	r2,r2,64
1000c150:	10000326 	beq	r2,zero,1000c160 <__sbprintf+0x98>
1000c154:	8080030b 	ldhu	r2,12(r16)
1000c158:	10801014 	ori	r2,r2,64
1000c15c:	8080030d 	sth	r2,12(r16)
1000c160:	8805883a 	mov	r2,r17
1000c164:	dfc11d17 	ldw	ra,1140(sp)
1000c168:	dc811c17 	ldw	r18,1136(sp)
1000c16c:	dc411b17 	ldw	r17,1132(sp)
1000c170:	dc011a17 	ldw	r16,1128(sp)
1000c174:	dec11e04 	addi	sp,sp,1144
1000c178:	f800283a 	ret
1000c17c:	047fffc4 	movi	r17,-1
1000c180:	003ff106 	br	1000c148 <__alt_data_end+0xf800c148>

1000c184 <_write_r>:
1000c184:	defffd04 	addi	sp,sp,-12
1000c188:	2805883a 	mov	r2,r5
1000c18c:	dc000015 	stw	r16,0(sp)
1000c190:	04040074 	movhi	r16,4097
1000c194:	dc400115 	stw	r17,4(sp)
1000c198:	300b883a 	mov	r5,r6
1000c19c:	841a7604 	addi	r16,r16,27096
1000c1a0:	2023883a 	mov	r17,r4
1000c1a4:	380d883a 	mov	r6,r7
1000c1a8:	1009883a 	mov	r4,r2
1000c1ac:	dfc00215 	stw	ra,8(sp)
1000c1b0:	80000015 	stw	zero,0(r16)
1000c1b4:	00109d40 	call	100109d4 <write>
1000c1b8:	00ffffc4 	movi	r3,-1
1000c1bc:	10c00526 	beq	r2,r3,1000c1d4 <_write_r+0x50>
1000c1c0:	dfc00217 	ldw	ra,8(sp)
1000c1c4:	dc400117 	ldw	r17,4(sp)
1000c1c8:	dc000017 	ldw	r16,0(sp)
1000c1cc:	dec00304 	addi	sp,sp,12
1000c1d0:	f800283a 	ret
1000c1d4:	80c00017 	ldw	r3,0(r16)
1000c1d8:	183ff926 	beq	r3,zero,1000c1c0 <__alt_data_end+0xf800c1c0>
1000c1dc:	88c00015 	stw	r3,0(r17)
1000c1e0:	003ff706 	br	1000c1c0 <__alt_data_end+0xf800c1c0>

1000c1e4 <_close_r>:
1000c1e4:	defffd04 	addi	sp,sp,-12
1000c1e8:	dc000015 	stw	r16,0(sp)
1000c1ec:	04040074 	movhi	r16,4097
1000c1f0:	dc400115 	stw	r17,4(sp)
1000c1f4:	841a7604 	addi	r16,r16,27096
1000c1f8:	2023883a 	mov	r17,r4
1000c1fc:	2809883a 	mov	r4,r5
1000c200:	dfc00215 	stw	ra,8(sp)
1000c204:	80000015 	stw	zero,0(r16)
1000c208:	001014c0 	call	1001014c <close>
1000c20c:	00ffffc4 	movi	r3,-1
1000c210:	10c00526 	beq	r2,r3,1000c228 <_close_r+0x44>
1000c214:	dfc00217 	ldw	ra,8(sp)
1000c218:	dc400117 	ldw	r17,4(sp)
1000c21c:	dc000017 	ldw	r16,0(sp)
1000c220:	dec00304 	addi	sp,sp,12
1000c224:	f800283a 	ret
1000c228:	80c00017 	ldw	r3,0(r16)
1000c22c:	183ff926 	beq	r3,zero,1000c214 <__alt_data_end+0xf800c214>
1000c230:	88c00015 	stw	r3,0(r17)
1000c234:	003ff706 	br	1000c214 <__alt_data_end+0xf800c214>

1000c238 <_calloc_r>:
1000c238:	defffe04 	addi	sp,sp,-8
1000c23c:	2805883a 	mov	r2,r5
1000c240:	dc000015 	stw	r16,0(sp)
1000c244:	300b883a 	mov	r5,r6
1000c248:	2021883a 	mov	r16,r4
1000c24c:	1009883a 	mov	r4,r2
1000c250:	dfc00115 	stw	ra,4(sp)
1000c254:	000d8440 	call	1000d844 <__mulsi3>
1000c258:	100b883a 	mov	r5,r2
1000c25c:	8009883a 	mov	r4,r16
1000c260:	00084d40 	call	100084d4 <_malloc_r>
1000c264:	10002926 	beq	r2,zero,1000c30c <_calloc_r+0xd4>
1000c268:	11bfff17 	ldw	r6,-4(r2)
1000c26c:	1021883a 	mov	r16,r2
1000c270:	00bfff04 	movi	r2,-4
1000c274:	308c703a 	and	r6,r6,r2
1000c278:	00c00904 	movi	r3,36
1000c27c:	308d883a 	add	r6,r6,r2
1000c280:	19801636 	bltu	r3,r6,1000c2dc <_calloc_r+0xa4>
1000c284:	008004c4 	movi	r2,19
1000c288:	11800b2e 	bgeu	r2,r6,1000c2b8 <_calloc_r+0x80>
1000c28c:	80000015 	stw	zero,0(r16)
1000c290:	80000115 	stw	zero,4(r16)
1000c294:	008006c4 	movi	r2,27
1000c298:	11801a2e 	bgeu	r2,r6,1000c304 <_calloc_r+0xcc>
1000c29c:	80000215 	stw	zero,8(r16)
1000c2a0:	80000315 	stw	zero,12(r16)
1000c2a4:	30c0151e 	bne	r6,r3,1000c2fc <_calloc_r+0xc4>
1000c2a8:	80000415 	stw	zero,16(r16)
1000c2ac:	80800604 	addi	r2,r16,24
1000c2b0:	80000515 	stw	zero,20(r16)
1000c2b4:	00000106 	br	1000c2bc <_calloc_r+0x84>
1000c2b8:	8005883a 	mov	r2,r16
1000c2bc:	10000015 	stw	zero,0(r2)
1000c2c0:	10000115 	stw	zero,4(r2)
1000c2c4:	10000215 	stw	zero,8(r2)
1000c2c8:	8005883a 	mov	r2,r16
1000c2cc:	dfc00117 	ldw	ra,4(sp)
1000c2d0:	dc000017 	ldw	r16,0(sp)
1000c2d4:	dec00204 	addi	sp,sp,8
1000c2d8:	f800283a 	ret
1000c2dc:	000b883a 	mov	r5,zero
1000c2e0:	8009883a 	mov	r4,r16
1000c2e4:	00090680 	call	10009068 <memset>
1000c2e8:	8005883a 	mov	r2,r16
1000c2ec:	dfc00117 	ldw	ra,4(sp)
1000c2f0:	dc000017 	ldw	r16,0(sp)
1000c2f4:	dec00204 	addi	sp,sp,8
1000c2f8:	f800283a 	ret
1000c2fc:	80800404 	addi	r2,r16,16
1000c300:	003fee06 	br	1000c2bc <__alt_data_end+0xf800c2bc>
1000c304:	80800204 	addi	r2,r16,8
1000c308:	003fec06 	br	1000c2bc <__alt_data_end+0xf800c2bc>
1000c30c:	0005883a 	mov	r2,zero
1000c310:	003fee06 	br	1000c2cc <__alt_data_end+0xf800c2cc>

1000c314 <_fclose_r>:
1000c314:	28003926 	beq	r5,zero,1000c3fc <_fclose_r+0xe8>
1000c318:	defffc04 	addi	sp,sp,-16
1000c31c:	dc400115 	stw	r17,4(sp)
1000c320:	dc000015 	stw	r16,0(sp)
1000c324:	dfc00315 	stw	ra,12(sp)
1000c328:	dc800215 	stw	r18,8(sp)
1000c32c:	2023883a 	mov	r17,r4
1000c330:	2821883a 	mov	r16,r5
1000c334:	20000226 	beq	r4,zero,1000c340 <_fclose_r+0x2c>
1000c338:	20800e17 	ldw	r2,56(r4)
1000c33c:	10002726 	beq	r2,zero,1000c3dc <_fclose_r+0xc8>
1000c340:	8080030f 	ldh	r2,12(r16)
1000c344:	1000071e 	bne	r2,zero,1000c364 <_fclose_r+0x50>
1000c348:	0005883a 	mov	r2,zero
1000c34c:	dfc00317 	ldw	ra,12(sp)
1000c350:	dc800217 	ldw	r18,8(sp)
1000c354:	dc400117 	ldw	r17,4(sp)
1000c358:	dc000017 	ldw	r16,0(sp)
1000c35c:	dec00404 	addi	sp,sp,16
1000c360:	f800283a 	ret
1000c364:	800b883a 	mov	r5,r16
1000c368:	8809883a 	mov	r4,r17
1000c36c:	00071600 	call	10007160 <__sflush_r>
1000c370:	1025883a 	mov	r18,r2
1000c374:	80800b17 	ldw	r2,44(r16)
1000c378:	10000426 	beq	r2,zero,1000c38c <_fclose_r+0x78>
1000c37c:	81400717 	ldw	r5,28(r16)
1000c380:	8809883a 	mov	r4,r17
1000c384:	103ee83a 	callr	r2
1000c388:	10001616 	blt	r2,zero,1000c3e4 <_fclose_r+0xd0>
1000c38c:	8080030b 	ldhu	r2,12(r16)
1000c390:	1080200c 	andi	r2,r2,128
1000c394:	1000151e 	bne	r2,zero,1000c3ec <_fclose_r+0xd8>
1000c398:	81400c17 	ldw	r5,48(r16)
1000c39c:	28000526 	beq	r5,zero,1000c3b4 <_fclose_r+0xa0>
1000c3a0:	80801004 	addi	r2,r16,64
1000c3a4:	28800226 	beq	r5,r2,1000c3b0 <_fclose_r+0x9c>
1000c3a8:	8809883a 	mov	r4,r17
1000c3ac:	00078dc0 	call	100078dc <_free_r>
1000c3b0:	80000c15 	stw	zero,48(r16)
1000c3b4:	81401117 	ldw	r5,68(r16)
1000c3b8:	28000326 	beq	r5,zero,1000c3c8 <_fclose_r+0xb4>
1000c3bc:	8809883a 	mov	r4,r17
1000c3c0:	00078dc0 	call	100078dc <_free_r>
1000c3c4:	80001115 	stw	zero,68(r16)
1000c3c8:	00077780 	call	10007778 <__sfp_lock_acquire>
1000c3cc:	8000030d 	sth	zero,12(r16)
1000c3d0:	000777c0 	call	1000777c <__sfp_lock_release>
1000c3d4:	9005883a 	mov	r2,r18
1000c3d8:	003fdc06 	br	1000c34c <__alt_data_end+0xf800c34c>
1000c3dc:	00077680 	call	10007768 <__sinit>
1000c3e0:	003fd706 	br	1000c340 <__alt_data_end+0xf800c340>
1000c3e4:	04bfffc4 	movi	r18,-1
1000c3e8:	003fe806 	br	1000c38c <__alt_data_end+0xf800c38c>
1000c3ec:	81400417 	ldw	r5,16(r16)
1000c3f0:	8809883a 	mov	r4,r17
1000c3f4:	00078dc0 	call	100078dc <_free_r>
1000c3f8:	003fe706 	br	1000c398 <__alt_data_end+0xf800c398>
1000c3fc:	0005883a 	mov	r2,zero
1000c400:	f800283a 	ret

1000c404 <fclose>:
1000c404:	00840074 	movhi	r2,4097
1000c408:	1093a504 	addi	r2,r2,20116
1000c40c:	200b883a 	mov	r5,r4
1000c410:	11000017 	ldw	r4,0(r2)
1000c414:	000c3141 	jmpi	1000c314 <_fclose_r>

1000c418 <__fputwc>:
1000c418:	defff804 	addi	sp,sp,-32
1000c41c:	dcc00415 	stw	r19,16(sp)
1000c420:	dc800315 	stw	r18,12(sp)
1000c424:	dc000115 	stw	r16,4(sp)
1000c428:	dfc00715 	stw	ra,28(sp)
1000c42c:	dd400615 	stw	r21,24(sp)
1000c430:	dd000515 	stw	r20,20(sp)
1000c434:	dc400215 	stw	r17,8(sp)
1000c438:	2027883a 	mov	r19,r4
1000c43c:	2825883a 	mov	r18,r5
1000c440:	3021883a 	mov	r16,r6
1000c444:	00082c40 	call	100082c4 <__locale_mb_cur_max>
1000c448:	00c00044 	movi	r3,1
1000c44c:	10c03e26 	beq	r2,r3,1000c548 <__fputwc+0x130>
1000c450:	81c01704 	addi	r7,r16,92
1000c454:	900d883a 	mov	r6,r18
1000c458:	d80b883a 	mov	r5,sp
1000c45c:	9809883a 	mov	r4,r19
1000c460:	000c8e80 	call	1000c8e8 <_wcrtomb_r>
1000c464:	1029883a 	mov	r20,r2
1000c468:	00bfffc4 	movi	r2,-1
1000c46c:	a0802026 	beq	r20,r2,1000c4f0 <__fputwc+0xd8>
1000c470:	d9400003 	ldbu	r5,0(sp)
1000c474:	a0001c26 	beq	r20,zero,1000c4e8 <__fputwc+0xd0>
1000c478:	0023883a 	mov	r17,zero
1000c47c:	05400284 	movi	r21,10
1000c480:	00000906 	br	1000c4a8 <__fputwc+0x90>
1000c484:	80800017 	ldw	r2,0(r16)
1000c488:	11400005 	stb	r5,0(r2)
1000c48c:	80c00017 	ldw	r3,0(r16)
1000c490:	18c00044 	addi	r3,r3,1
1000c494:	80c00015 	stw	r3,0(r16)
1000c498:	8c400044 	addi	r17,r17,1
1000c49c:	dc45883a 	add	r2,sp,r17
1000c4a0:	8d00112e 	bgeu	r17,r20,1000c4e8 <__fputwc+0xd0>
1000c4a4:	11400003 	ldbu	r5,0(r2)
1000c4a8:	80c00217 	ldw	r3,8(r16)
1000c4ac:	18ffffc4 	addi	r3,r3,-1
1000c4b0:	80c00215 	stw	r3,8(r16)
1000c4b4:	183ff30e 	bge	r3,zero,1000c484 <__alt_data_end+0xf800c484>
1000c4b8:	80800617 	ldw	r2,24(r16)
1000c4bc:	18801916 	blt	r3,r2,1000c524 <__fputwc+0x10c>
1000c4c0:	80800017 	ldw	r2,0(r16)
1000c4c4:	11400005 	stb	r5,0(r2)
1000c4c8:	80800017 	ldw	r2,0(r16)
1000c4cc:	10c00003 	ldbu	r3,0(r2)
1000c4d0:	10800044 	addi	r2,r2,1
1000c4d4:	1d402326 	beq	r3,r21,1000c564 <__fputwc+0x14c>
1000c4d8:	80800015 	stw	r2,0(r16)
1000c4dc:	8c400044 	addi	r17,r17,1
1000c4e0:	dc45883a 	add	r2,sp,r17
1000c4e4:	8d3fef36 	bltu	r17,r20,1000c4a4 <__alt_data_end+0xf800c4a4>
1000c4e8:	9005883a 	mov	r2,r18
1000c4ec:	00000406 	br	1000c500 <__fputwc+0xe8>
1000c4f0:	80c0030b 	ldhu	r3,12(r16)
1000c4f4:	a005883a 	mov	r2,r20
1000c4f8:	18c01014 	ori	r3,r3,64
1000c4fc:	80c0030d 	sth	r3,12(r16)
1000c500:	dfc00717 	ldw	ra,28(sp)
1000c504:	dd400617 	ldw	r21,24(sp)
1000c508:	dd000517 	ldw	r20,20(sp)
1000c50c:	dcc00417 	ldw	r19,16(sp)
1000c510:	dc800317 	ldw	r18,12(sp)
1000c514:	dc400217 	ldw	r17,8(sp)
1000c518:	dc000117 	ldw	r16,4(sp)
1000c51c:	dec00804 	addi	sp,sp,32
1000c520:	f800283a 	ret
1000c524:	800d883a 	mov	r6,r16
1000c528:	29403fcc 	andi	r5,r5,255
1000c52c:	9809883a 	mov	r4,r19
1000c530:	000c7900 	call	1000c790 <__swbuf_r>
1000c534:	10bfffe0 	cmpeqi	r2,r2,-1
1000c538:	10803fcc 	andi	r2,r2,255
1000c53c:	103fd626 	beq	r2,zero,1000c498 <__alt_data_end+0xf800c498>
1000c540:	00bfffc4 	movi	r2,-1
1000c544:	003fee06 	br	1000c500 <__alt_data_end+0xf800c500>
1000c548:	90ffffc4 	addi	r3,r18,-1
1000c54c:	01003f84 	movi	r4,254
1000c550:	20ffbf36 	bltu	r4,r3,1000c450 <__alt_data_end+0xf800c450>
1000c554:	900b883a 	mov	r5,r18
1000c558:	dc800005 	stb	r18,0(sp)
1000c55c:	1029883a 	mov	r20,r2
1000c560:	003fc506 	br	1000c478 <__alt_data_end+0xf800c478>
1000c564:	800d883a 	mov	r6,r16
1000c568:	a80b883a 	mov	r5,r21
1000c56c:	9809883a 	mov	r4,r19
1000c570:	000c7900 	call	1000c790 <__swbuf_r>
1000c574:	10bfffe0 	cmpeqi	r2,r2,-1
1000c578:	003fef06 	br	1000c538 <__alt_data_end+0xf800c538>

1000c57c <_fputwc_r>:
1000c57c:	3080030b 	ldhu	r2,12(r6)
1000c580:	10c8000c 	andi	r3,r2,8192
1000c584:	1800051e 	bne	r3,zero,1000c59c <_fputwc_r+0x20>
1000c588:	30c01917 	ldw	r3,100(r6)
1000c58c:	10880014 	ori	r2,r2,8192
1000c590:	3080030d 	sth	r2,12(r6)
1000c594:	18880014 	ori	r2,r3,8192
1000c598:	30801915 	stw	r2,100(r6)
1000c59c:	000c4181 	jmpi	1000c418 <__fputwc>

1000c5a0 <fputwc>:
1000c5a0:	00840074 	movhi	r2,4097
1000c5a4:	defffc04 	addi	sp,sp,-16
1000c5a8:	1093a504 	addi	r2,r2,20116
1000c5ac:	dc000115 	stw	r16,4(sp)
1000c5b0:	14000017 	ldw	r16,0(r2)
1000c5b4:	dc400215 	stw	r17,8(sp)
1000c5b8:	dfc00315 	stw	ra,12(sp)
1000c5bc:	2023883a 	mov	r17,r4
1000c5c0:	80000226 	beq	r16,zero,1000c5cc <fputwc+0x2c>
1000c5c4:	80800e17 	ldw	r2,56(r16)
1000c5c8:	10001026 	beq	r2,zero,1000c60c <fputwc+0x6c>
1000c5cc:	2880030b 	ldhu	r2,12(r5)
1000c5d0:	10c8000c 	andi	r3,r2,8192
1000c5d4:	1800051e 	bne	r3,zero,1000c5ec <fputwc+0x4c>
1000c5d8:	28c01917 	ldw	r3,100(r5)
1000c5dc:	10880014 	ori	r2,r2,8192
1000c5e0:	2880030d 	sth	r2,12(r5)
1000c5e4:	18880014 	ori	r2,r3,8192
1000c5e8:	28801915 	stw	r2,100(r5)
1000c5ec:	280d883a 	mov	r6,r5
1000c5f0:	8009883a 	mov	r4,r16
1000c5f4:	880b883a 	mov	r5,r17
1000c5f8:	dfc00317 	ldw	ra,12(sp)
1000c5fc:	dc400217 	ldw	r17,8(sp)
1000c600:	dc000117 	ldw	r16,4(sp)
1000c604:	dec00404 	addi	sp,sp,16
1000c608:	000c4181 	jmpi	1000c418 <__fputwc>
1000c60c:	8009883a 	mov	r4,r16
1000c610:	d9400015 	stw	r5,0(sp)
1000c614:	00077680 	call	10007768 <__sinit>
1000c618:	d9400017 	ldw	r5,0(sp)
1000c61c:	003feb06 	br	1000c5cc <__alt_data_end+0xf800c5cc>

1000c620 <_fstat_r>:
1000c620:	defffd04 	addi	sp,sp,-12
1000c624:	2805883a 	mov	r2,r5
1000c628:	dc000015 	stw	r16,0(sp)
1000c62c:	04040074 	movhi	r16,4097
1000c630:	dc400115 	stw	r17,4(sp)
1000c634:	841a7604 	addi	r16,r16,27096
1000c638:	2023883a 	mov	r17,r4
1000c63c:	300b883a 	mov	r5,r6
1000c640:	1009883a 	mov	r4,r2
1000c644:	dfc00215 	stw	ra,8(sp)
1000c648:	80000015 	stw	zero,0(r16)
1000c64c:	001028c0 	call	1001028c <fstat>
1000c650:	00ffffc4 	movi	r3,-1
1000c654:	10c00526 	beq	r2,r3,1000c66c <_fstat_r+0x4c>
1000c658:	dfc00217 	ldw	ra,8(sp)
1000c65c:	dc400117 	ldw	r17,4(sp)
1000c660:	dc000017 	ldw	r16,0(sp)
1000c664:	dec00304 	addi	sp,sp,12
1000c668:	f800283a 	ret
1000c66c:	80c00017 	ldw	r3,0(r16)
1000c670:	183ff926 	beq	r3,zero,1000c658 <__alt_data_end+0xf800c658>
1000c674:	88c00015 	stw	r3,0(r17)
1000c678:	003ff706 	br	1000c658 <__alt_data_end+0xf800c658>

1000c67c <_isatty_r>:
1000c67c:	defffd04 	addi	sp,sp,-12
1000c680:	dc000015 	stw	r16,0(sp)
1000c684:	04040074 	movhi	r16,4097
1000c688:	dc400115 	stw	r17,4(sp)
1000c68c:	841a7604 	addi	r16,r16,27096
1000c690:	2023883a 	mov	r17,r4
1000c694:	2809883a 	mov	r4,r5
1000c698:	dfc00215 	stw	ra,8(sp)
1000c69c:	80000015 	stw	zero,0(r16)
1000c6a0:	00103800 	call	10010380 <isatty>
1000c6a4:	00ffffc4 	movi	r3,-1
1000c6a8:	10c00526 	beq	r2,r3,1000c6c0 <_isatty_r+0x44>
1000c6ac:	dfc00217 	ldw	ra,8(sp)
1000c6b0:	dc400117 	ldw	r17,4(sp)
1000c6b4:	dc000017 	ldw	r16,0(sp)
1000c6b8:	dec00304 	addi	sp,sp,12
1000c6bc:	f800283a 	ret
1000c6c0:	80c00017 	ldw	r3,0(r16)
1000c6c4:	183ff926 	beq	r3,zero,1000c6ac <__alt_data_end+0xf800c6ac>
1000c6c8:	88c00015 	stw	r3,0(r17)
1000c6cc:	003ff706 	br	1000c6ac <__alt_data_end+0xf800c6ac>

1000c6d0 <_lseek_r>:
1000c6d0:	defffd04 	addi	sp,sp,-12
1000c6d4:	2805883a 	mov	r2,r5
1000c6d8:	dc000015 	stw	r16,0(sp)
1000c6dc:	04040074 	movhi	r16,4097
1000c6e0:	dc400115 	stw	r17,4(sp)
1000c6e4:	300b883a 	mov	r5,r6
1000c6e8:	841a7604 	addi	r16,r16,27096
1000c6ec:	2023883a 	mov	r17,r4
1000c6f0:	380d883a 	mov	r6,r7
1000c6f4:	1009883a 	mov	r4,r2
1000c6f8:	dfc00215 	stw	ra,8(sp)
1000c6fc:	80000015 	stw	zero,0(r16)
1000c700:	00105540 	call	10010554 <lseek>
1000c704:	00ffffc4 	movi	r3,-1
1000c708:	10c00526 	beq	r2,r3,1000c720 <_lseek_r+0x50>
1000c70c:	dfc00217 	ldw	ra,8(sp)
1000c710:	dc400117 	ldw	r17,4(sp)
1000c714:	dc000017 	ldw	r16,0(sp)
1000c718:	dec00304 	addi	sp,sp,12
1000c71c:	f800283a 	ret
1000c720:	80c00017 	ldw	r3,0(r16)
1000c724:	183ff926 	beq	r3,zero,1000c70c <__alt_data_end+0xf800c70c>
1000c728:	88c00015 	stw	r3,0(r17)
1000c72c:	003ff706 	br	1000c70c <__alt_data_end+0xf800c70c>

1000c730 <_read_r>:
1000c730:	defffd04 	addi	sp,sp,-12
1000c734:	2805883a 	mov	r2,r5
1000c738:	dc000015 	stw	r16,0(sp)
1000c73c:	04040074 	movhi	r16,4097
1000c740:	dc400115 	stw	r17,4(sp)
1000c744:	300b883a 	mov	r5,r6
1000c748:	841a7604 	addi	r16,r16,27096
1000c74c:	2023883a 	mov	r17,r4
1000c750:	380d883a 	mov	r6,r7
1000c754:	1009883a 	mov	r4,r2
1000c758:	dfc00215 	stw	ra,8(sp)
1000c75c:	80000015 	stw	zero,0(r16)
1000c760:	00107300 	call	10010730 <read>
1000c764:	00ffffc4 	movi	r3,-1
1000c768:	10c00526 	beq	r2,r3,1000c780 <_read_r+0x50>
1000c76c:	dfc00217 	ldw	ra,8(sp)
1000c770:	dc400117 	ldw	r17,4(sp)
1000c774:	dc000017 	ldw	r16,0(sp)
1000c778:	dec00304 	addi	sp,sp,12
1000c77c:	f800283a 	ret
1000c780:	80c00017 	ldw	r3,0(r16)
1000c784:	183ff926 	beq	r3,zero,1000c76c <__alt_data_end+0xf800c76c>
1000c788:	88c00015 	stw	r3,0(r17)
1000c78c:	003ff706 	br	1000c76c <__alt_data_end+0xf800c76c>

1000c790 <__swbuf_r>:
1000c790:	defffb04 	addi	sp,sp,-20
1000c794:	dcc00315 	stw	r19,12(sp)
1000c798:	dc800215 	stw	r18,8(sp)
1000c79c:	dc000015 	stw	r16,0(sp)
1000c7a0:	dfc00415 	stw	ra,16(sp)
1000c7a4:	dc400115 	stw	r17,4(sp)
1000c7a8:	2025883a 	mov	r18,r4
1000c7ac:	2827883a 	mov	r19,r5
1000c7b0:	3021883a 	mov	r16,r6
1000c7b4:	20000226 	beq	r4,zero,1000c7c0 <__swbuf_r+0x30>
1000c7b8:	20800e17 	ldw	r2,56(r4)
1000c7bc:	10004226 	beq	r2,zero,1000c8c8 <__swbuf_r+0x138>
1000c7c0:	80800617 	ldw	r2,24(r16)
1000c7c4:	8100030b 	ldhu	r4,12(r16)
1000c7c8:	80800215 	stw	r2,8(r16)
1000c7cc:	2080020c 	andi	r2,r4,8
1000c7d0:	10003626 	beq	r2,zero,1000c8ac <__swbuf_r+0x11c>
1000c7d4:	80c00417 	ldw	r3,16(r16)
1000c7d8:	18003426 	beq	r3,zero,1000c8ac <__swbuf_r+0x11c>
1000c7dc:	2088000c 	andi	r2,r4,8192
1000c7e0:	9c403fcc 	andi	r17,r19,255
1000c7e4:	10001a26 	beq	r2,zero,1000c850 <__swbuf_r+0xc0>
1000c7e8:	80800017 	ldw	r2,0(r16)
1000c7ec:	81000517 	ldw	r4,20(r16)
1000c7f0:	10c7c83a 	sub	r3,r2,r3
1000c7f4:	1900200e 	bge	r3,r4,1000c878 <__swbuf_r+0xe8>
1000c7f8:	18c00044 	addi	r3,r3,1
1000c7fc:	81000217 	ldw	r4,8(r16)
1000c800:	11400044 	addi	r5,r2,1
1000c804:	81400015 	stw	r5,0(r16)
1000c808:	213fffc4 	addi	r4,r4,-1
1000c80c:	81000215 	stw	r4,8(r16)
1000c810:	14c00005 	stb	r19,0(r2)
1000c814:	80800517 	ldw	r2,20(r16)
1000c818:	10c01e26 	beq	r2,r3,1000c894 <__swbuf_r+0x104>
1000c81c:	8080030b 	ldhu	r2,12(r16)
1000c820:	1080004c 	andi	r2,r2,1
1000c824:	10000226 	beq	r2,zero,1000c830 <__swbuf_r+0xa0>
1000c828:	00800284 	movi	r2,10
1000c82c:	88801926 	beq	r17,r2,1000c894 <__swbuf_r+0x104>
1000c830:	8805883a 	mov	r2,r17
1000c834:	dfc00417 	ldw	ra,16(sp)
1000c838:	dcc00317 	ldw	r19,12(sp)
1000c83c:	dc800217 	ldw	r18,8(sp)
1000c840:	dc400117 	ldw	r17,4(sp)
1000c844:	dc000017 	ldw	r16,0(sp)
1000c848:	dec00504 	addi	sp,sp,20
1000c84c:	f800283a 	ret
1000c850:	81401917 	ldw	r5,100(r16)
1000c854:	00b7ffc4 	movi	r2,-8193
1000c858:	21080014 	ori	r4,r4,8192
1000c85c:	2884703a 	and	r2,r5,r2
1000c860:	80801915 	stw	r2,100(r16)
1000c864:	80800017 	ldw	r2,0(r16)
1000c868:	8100030d 	sth	r4,12(r16)
1000c86c:	81000517 	ldw	r4,20(r16)
1000c870:	10c7c83a 	sub	r3,r2,r3
1000c874:	193fe016 	blt	r3,r4,1000c7f8 <__alt_data_end+0xf800c7f8>
1000c878:	800b883a 	mov	r5,r16
1000c87c:	9009883a 	mov	r4,r18
1000c880:	000737c0 	call	1000737c <_fflush_r>
1000c884:	1000071e 	bne	r2,zero,1000c8a4 <__swbuf_r+0x114>
1000c888:	80800017 	ldw	r2,0(r16)
1000c88c:	00c00044 	movi	r3,1
1000c890:	003fda06 	br	1000c7fc <__alt_data_end+0xf800c7fc>
1000c894:	800b883a 	mov	r5,r16
1000c898:	9009883a 	mov	r4,r18
1000c89c:	000737c0 	call	1000737c <_fflush_r>
1000c8a0:	103fe326 	beq	r2,zero,1000c830 <__alt_data_end+0xf800c830>
1000c8a4:	00bfffc4 	movi	r2,-1
1000c8a8:	003fe206 	br	1000c834 <__alt_data_end+0xf800c834>
1000c8ac:	800b883a 	mov	r5,r16
1000c8b0:	9009883a 	mov	r4,r18
1000c8b4:	000575c0 	call	1000575c <__swsetup_r>
1000c8b8:	103ffa1e 	bne	r2,zero,1000c8a4 <__alt_data_end+0xf800c8a4>
1000c8bc:	8100030b 	ldhu	r4,12(r16)
1000c8c0:	80c00417 	ldw	r3,16(r16)
1000c8c4:	003fc506 	br	1000c7dc <__alt_data_end+0xf800c7dc>
1000c8c8:	00077680 	call	10007768 <__sinit>
1000c8cc:	003fbc06 	br	1000c7c0 <__alt_data_end+0xf800c7c0>

1000c8d0 <__swbuf>:
1000c8d0:	00840074 	movhi	r2,4097
1000c8d4:	1093a504 	addi	r2,r2,20116
1000c8d8:	280d883a 	mov	r6,r5
1000c8dc:	200b883a 	mov	r5,r4
1000c8e0:	11000017 	ldw	r4,0(r2)
1000c8e4:	000c7901 	jmpi	1000c790 <__swbuf_r>

1000c8e8 <_wcrtomb_r>:
1000c8e8:	defff604 	addi	sp,sp,-40
1000c8ec:	00840074 	movhi	r2,4097
1000c8f0:	dc800815 	stw	r18,32(sp)
1000c8f4:	dc400715 	stw	r17,28(sp)
1000c8f8:	dc000615 	stw	r16,24(sp)
1000c8fc:	1093a904 	addi	r2,r2,20132
1000c900:	dfc00915 	stw	ra,36(sp)
1000c904:	2021883a 	mov	r16,r4
1000c908:	3823883a 	mov	r17,r7
1000c90c:	14800017 	ldw	r18,0(r2)
1000c910:	28001426 	beq	r5,zero,1000c964 <_wcrtomb_r+0x7c>
1000c914:	d9400415 	stw	r5,16(sp)
1000c918:	d9800515 	stw	r6,20(sp)
1000c91c:	00082b80 	call	100082b8 <__locale_charset>
1000c920:	d9800517 	ldw	r6,20(sp)
1000c924:	d9400417 	ldw	r5,16(sp)
1000c928:	100f883a 	mov	r7,r2
1000c92c:	dc400015 	stw	r17,0(sp)
1000c930:	8009883a 	mov	r4,r16
1000c934:	903ee83a 	callr	r18
1000c938:	00ffffc4 	movi	r3,-1
1000c93c:	10c0031e 	bne	r2,r3,1000c94c <_wcrtomb_r+0x64>
1000c940:	88000015 	stw	zero,0(r17)
1000c944:	00c02284 	movi	r3,138
1000c948:	80c00015 	stw	r3,0(r16)
1000c94c:	dfc00917 	ldw	ra,36(sp)
1000c950:	dc800817 	ldw	r18,32(sp)
1000c954:	dc400717 	ldw	r17,28(sp)
1000c958:	dc000617 	ldw	r16,24(sp)
1000c95c:	dec00a04 	addi	sp,sp,40
1000c960:	f800283a 	ret
1000c964:	00082b80 	call	100082b8 <__locale_charset>
1000c968:	100f883a 	mov	r7,r2
1000c96c:	dc400015 	stw	r17,0(sp)
1000c970:	000d883a 	mov	r6,zero
1000c974:	d9400104 	addi	r5,sp,4
1000c978:	8009883a 	mov	r4,r16
1000c97c:	903ee83a 	callr	r18
1000c980:	003fed06 	br	1000c938 <__alt_data_end+0xf800c938>

1000c984 <wcrtomb>:
1000c984:	defff604 	addi	sp,sp,-40
1000c988:	00840074 	movhi	r2,4097
1000c98c:	dc800615 	stw	r18,24(sp)
1000c990:	dc400515 	stw	r17,20(sp)
1000c994:	1093a504 	addi	r2,r2,20116
1000c998:	dfc00915 	stw	ra,36(sp)
1000c99c:	dd000815 	stw	r20,32(sp)
1000c9a0:	dcc00715 	stw	r19,28(sp)
1000c9a4:	dc000415 	stw	r16,16(sp)
1000c9a8:	3025883a 	mov	r18,r6
1000c9ac:	14400017 	ldw	r17,0(r2)
1000c9b0:	20001926 	beq	r4,zero,1000ca18 <wcrtomb+0x94>
1000c9b4:	00840074 	movhi	r2,4097
1000c9b8:	1093a904 	addi	r2,r2,20132
1000c9bc:	15000017 	ldw	r20,0(r2)
1000c9c0:	2021883a 	mov	r16,r4
1000c9c4:	2827883a 	mov	r19,r5
1000c9c8:	00082b80 	call	100082b8 <__locale_charset>
1000c9cc:	100f883a 	mov	r7,r2
1000c9d0:	dc800015 	stw	r18,0(sp)
1000c9d4:	980d883a 	mov	r6,r19
1000c9d8:	800b883a 	mov	r5,r16
1000c9dc:	8809883a 	mov	r4,r17
1000c9e0:	a03ee83a 	callr	r20
1000c9e4:	00ffffc4 	movi	r3,-1
1000c9e8:	10c0031e 	bne	r2,r3,1000c9f8 <wcrtomb+0x74>
1000c9ec:	90000015 	stw	zero,0(r18)
1000c9f0:	00c02284 	movi	r3,138
1000c9f4:	88c00015 	stw	r3,0(r17)
1000c9f8:	dfc00917 	ldw	ra,36(sp)
1000c9fc:	dd000817 	ldw	r20,32(sp)
1000ca00:	dcc00717 	ldw	r19,28(sp)
1000ca04:	dc800617 	ldw	r18,24(sp)
1000ca08:	dc400517 	ldw	r17,20(sp)
1000ca0c:	dc000417 	ldw	r16,16(sp)
1000ca10:	dec00a04 	addi	sp,sp,40
1000ca14:	f800283a 	ret
1000ca18:	00840074 	movhi	r2,4097
1000ca1c:	1093a904 	addi	r2,r2,20132
1000ca20:	14000017 	ldw	r16,0(r2)
1000ca24:	00082b80 	call	100082b8 <__locale_charset>
1000ca28:	100f883a 	mov	r7,r2
1000ca2c:	dc800015 	stw	r18,0(sp)
1000ca30:	000d883a 	mov	r6,zero
1000ca34:	d9400104 	addi	r5,sp,4
1000ca38:	8809883a 	mov	r4,r17
1000ca3c:	803ee83a 	callr	r16
1000ca40:	003fe806 	br	1000c9e4 <__alt_data_end+0xf800c9e4>

1000ca44 <__ascii_wctomb>:
1000ca44:	28000526 	beq	r5,zero,1000ca5c <__ascii_wctomb+0x18>
1000ca48:	00803fc4 	movi	r2,255
1000ca4c:	11800536 	bltu	r2,r6,1000ca64 <__ascii_wctomb+0x20>
1000ca50:	29800005 	stb	r6,0(r5)
1000ca54:	00800044 	movi	r2,1
1000ca58:	f800283a 	ret
1000ca5c:	0005883a 	mov	r2,zero
1000ca60:	f800283a 	ret
1000ca64:	00802284 	movi	r2,138
1000ca68:	20800015 	stw	r2,0(r4)
1000ca6c:	00bfffc4 	movi	r2,-1
1000ca70:	f800283a 	ret

1000ca74 <_wctomb_r>:
1000ca74:	00840074 	movhi	r2,4097
1000ca78:	defff904 	addi	sp,sp,-28
1000ca7c:	1093a904 	addi	r2,r2,20132
1000ca80:	dfc00615 	stw	ra,24(sp)
1000ca84:	dc400515 	stw	r17,20(sp)
1000ca88:	dc000415 	stw	r16,16(sp)
1000ca8c:	3823883a 	mov	r17,r7
1000ca90:	14000017 	ldw	r16,0(r2)
1000ca94:	d9000115 	stw	r4,4(sp)
1000ca98:	d9400215 	stw	r5,8(sp)
1000ca9c:	d9800315 	stw	r6,12(sp)
1000caa0:	00082b80 	call	100082b8 <__locale_charset>
1000caa4:	d9800317 	ldw	r6,12(sp)
1000caa8:	d9400217 	ldw	r5,8(sp)
1000caac:	d9000117 	ldw	r4,4(sp)
1000cab0:	100f883a 	mov	r7,r2
1000cab4:	dc400015 	stw	r17,0(sp)
1000cab8:	803ee83a 	callr	r16
1000cabc:	dfc00617 	ldw	ra,24(sp)
1000cac0:	dc400517 	ldw	r17,20(sp)
1000cac4:	dc000417 	ldw	r16,16(sp)
1000cac8:	dec00704 	addi	sp,sp,28
1000cacc:	f800283a 	ret

1000cad0 <__udivdi3>:
1000cad0:	defff404 	addi	sp,sp,-48
1000cad4:	dcc00515 	stw	r19,20(sp)
1000cad8:	dc000215 	stw	r16,8(sp)
1000cadc:	dfc00b15 	stw	ra,44(sp)
1000cae0:	df000a15 	stw	fp,40(sp)
1000cae4:	ddc00915 	stw	r23,36(sp)
1000cae8:	dd800815 	stw	r22,32(sp)
1000caec:	dd400715 	stw	r21,28(sp)
1000caf0:	dd000615 	stw	r20,24(sp)
1000caf4:	dc800415 	stw	r18,16(sp)
1000caf8:	dc400315 	stw	r17,12(sp)
1000cafc:	2027883a 	mov	r19,r4
1000cb00:	2821883a 	mov	r16,r5
1000cb04:	3800461e 	bne	r7,zero,1000cc20 <__udivdi3+0x150>
1000cb08:	3023883a 	mov	r17,r6
1000cb0c:	2025883a 	mov	r18,r4
1000cb10:	2980572e 	bgeu	r5,r6,1000cc70 <__udivdi3+0x1a0>
1000cb14:	00bfffd4 	movui	r2,65535
1000cb18:	282d883a 	mov	r22,r5
1000cb1c:	1180b236 	bltu	r2,r6,1000cde8 <__udivdi3+0x318>
1000cb20:	00803fc4 	movi	r2,255
1000cb24:	1185803a 	cmpltu	r2,r2,r6
1000cb28:	100490fa 	slli	r2,r2,3
1000cb2c:	3086d83a 	srl	r3,r6,r2
1000cb30:	01040074 	movhi	r4,4097
1000cb34:	210cac04 	addi	r4,r4,12976
1000cb38:	20c7883a 	add	r3,r4,r3
1000cb3c:	18c00003 	ldbu	r3,0(r3)
1000cb40:	1885883a 	add	r2,r3,r2
1000cb44:	00c00804 	movi	r3,32
1000cb48:	1887c83a 	sub	r3,r3,r2
1000cb4c:	18000526 	beq	r3,zero,1000cb64 <__udivdi3+0x94>
1000cb50:	80e0983a 	sll	r16,r16,r3
1000cb54:	9884d83a 	srl	r2,r19,r2
1000cb58:	30e2983a 	sll	r17,r6,r3
1000cb5c:	98e4983a 	sll	r18,r19,r3
1000cb60:	142cb03a 	or	r22,r2,r16
1000cb64:	882ad43a 	srli	r21,r17,16
1000cb68:	b009883a 	mov	r4,r22
1000cb6c:	8d3fffcc 	andi	r20,r17,65535
1000cb70:	a80b883a 	mov	r5,r21
1000cb74:	000d7ec0 	call	1000d7ec <__umodsi3>
1000cb78:	b009883a 	mov	r4,r22
1000cb7c:	a80b883a 	mov	r5,r21
1000cb80:	1027883a 	mov	r19,r2
1000cb84:	000d7880 	call	1000d788 <__udivsi3>
1000cb88:	100b883a 	mov	r5,r2
1000cb8c:	a009883a 	mov	r4,r20
1000cb90:	102d883a 	mov	r22,r2
1000cb94:	000d8440 	call	1000d844 <__mulsi3>
1000cb98:	9826943a 	slli	r19,r19,16
1000cb9c:	9006d43a 	srli	r3,r18,16
1000cba0:	1cc6b03a 	or	r3,r3,r19
1000cba4:	1880052e 	bgeu	r3,r2,1000cbbc <__udivdi3+0xec>
1000cba8:	1c47883a 	add	r3,r3,r17
1000cbac:	b13fffc4 	addi	r4,r22,-1
1000cbb0:	1c400136 	bltu	r3,r17,1000cbb8 <__udivdi3+0xe8>
1000cbb4:	18814236 	bltu	r3,r2,1000d0c0 <__udivdi3+0x5f0>
1000cbb8:	202d883a 	mov	r22,r4
1000cbbc:	18a1c83a 	sub	r16,r3,r2
1000cbc0:	8009883a 	mov	r4,r16
1000cbc4:	a80b883a 	mov	r5,r21
1000cbc8:	000d7ec0 	call	1000d7ec <__umodsi3>
1000cbcc:	1027883a 	mov	r19,r2
1000cbd0:	8009883a 	mov	r4,r16
1000cbd4:	a80b883a 	mov	r5,r21
1000cbd8:	9826943a 	slli	r19,r19,16
1000cbdc:	000d7880 	call	1000d788 <__udivsi3>
1000cbe0:	100b883a 	mov	r5,r2
1000cbe4:	a009883a 	mov	r4,r20
1000cbe8:	94bfffcc 	andi	r18,r18,65535
1000cbec:	1021883a 	mov	r16,r2
1000cbf0:	94e4b03a 	or	r18,r18,r19
1000cbf4:	000d8440 	call	1000d844 <__mulsi3>
1000cbf8:	9080052e 	bgeu	r18,r2,1000cc10 <__udivdi3+0x140>
1000cbfc:	8ca5883a 	add	r18,r17,r18
1000cc00:	80ffffc4 	addi	r3,r16,-1
1000cc04:	94410c36 	bltu	r18,r17,1000d038 <__udivdi3+0x568>
1000cc08:	90810b2e 	bgeu	r18,r2,1000d038 <__udivdi3+0x568>
1000cc0c:	843fff84 	addi	r16,r16,-2
1000cc10:	b004943a 	slli	r2,r22,16
1000cc14:	0007883a 	mov	r3,zero
1000cc18:	1404b03a 	or	r2,r2,r16
1000cc1c:	00005e06 	br	1000cd98 <__udivdi3+0x2c8>
1000cc20:	29c05b36 	bltu	r5,r7,1000cd90 <__udivdi3+0x2c0>
1000cc24:	00bfffd4 	movui	r2,65535
1000cc28:	11c0672e 	bgeu	r2,r7,1000cdc8 <__udivdi3+0x2f8>
1000cc2c:	00804034 	movhi	r2,256
1000cc30:	10bfffc4 	addi	r2,r2,-1
1000cc34:	11c10a36 	bltu	r2,r7,1000d060 <__udivdi3+0x590>
1000cc38:	00800404 	movi	r2,16
1000cc3c:	3886d83a 	srl	r3,r7,r2
1000cc40:	01040074 	movhi	r4,4097
1000cc44:	210cac04 	addi	r4,r4,12976
1000cc48:	20c7883a 	add	r3,r4,r3
1000cc4c:	18c00003 	ldbu	r3,0(r3)
1000cc50:	05c00804 	movi	r23,32
1000cc54:	1885883a 	add	r2,r3,r2
1000cc58:	b8afc83a 	sub	r23,r23,r2
1000cc5c:	b800671e 	bne	r23,zero,1000cdfc <__udivdi3+0x32c>
1000cc60:	3c010536 	bltu	r7,r16,1000d078 <__udivdi3+0x5a8>
1000cc64:	9985403a 	cmpgeu	r2,r19,r6
1000cc68:	0007883a 	mov	r3,zero
1000cc6c:	00004a06 	br	1000cd98 <__udivdi3+0x2c8>
1000cc70:	3000041e 	bne	r6,zero,1000cc84 <__udivdi3+0x1b4>
1000cc74:	000b883a 	mov	r5,zero
1000cc78:	01000044 	movi	r4,1
1000cc7c:	000d7880 	call	1000d788 <__udivsi3>
1000cc80:	1023883a 	mov	r17,r2
1000cc84:	00bfffd4 	movui	r2,65535
1000cc88:	1440532e 	bgeu	r2,r17,1000cdd8 <__udivdi3+0x308>
1000cc8c:	00804034 	movhi	r2,256
1000cc90:	10bfffc4 	addi	r2,r2,-1
1000cc94:	1440f436 	bltu	r2,r17,1000d068 <__udivdi3+0x598>
1000cc98:	00800404 	movi	r2,16
1000cc9c:	8886d83a 	srl	r3,r17,r2
1000cca0:	01040074 	movhi	r4,4097
1000cca4:	210cac04 	addi	r4,r4,12976
1000cca8:	20c7883a 	add	r3,r4,r3
1000ccac:	18c00003 	ldbu	r3,0(r3)
1000ccb0:	1885883a 	add	r2,r3,r2
1000ccb4:	00c00804 	movi	r3,32
1000ccb8:	1887c83a 	sub	r3,r3,r2
1000ccbc:	1800a51e 	bne	r3,zero,1000cf54 <__udivdi3+0x484>
1000ccc0:	882ad43a 	srli	r21,r17,16
1000ccc4:	8461c83a 	sub	r16,r16,r17
1000ccc8:	8d3fffcc 	andi	r20,r17,65535
1000cccc:	00c00044 	movi	r3,1
1000ccd0:	a80b883a 	mov	r5,r21
1000ccd4:	8009883a 	mov	r4,r16
1000ccd8:	d8c00115 	stw	r3,4(sp)
1000ccdc:	000d7ec0 	call	1000d7ec <__umodsi3>
1000cce0:	a80b883a 	mov	r5,r21
1000cce4:	8009883a 	mov	r4,r16
1000cce8:	1027883a 	mov	r19,r2
1000ccec:	000d7880 	call	1000d788 <__udivsi3>
1000ccf0:	a00b883a 	mov	r5,r20
1000ccf4:	1009883a 	mov	r4,r2
1000ccf8:	102d883a 	mov	r22,r2
1000ccfc:	000d8440 	call	1000d844 <__mulsi3>
1000cd00:	9826943a 	slli	r19,r19,16
1000cd04:	900ed43a 	srli	r7,r18,16
1000cd08:	d8c00117 	ldw	r3,4(sp)
1000cd0c:	3cceb03a 	or	r7,r7,r19
1000cd10:	3880052e 	bgeu	r7,r2,1000cd28 <__udivdi3+0x258>
1000cd14:	3c4f883a 	add	r7,r7,r17
1000cd18:	b13fffc4 	addi	r4,r22,-1
1000cd1c:	3c400136 	bltu	r7,r17,1000cd24 <__udivdi3+0x254>
1000cd20:	3880e436 	bltu	r7,r2,1000d0b4 <__udivdi3+0x5e4>
1000cd24:	202d883a 	mov	r22,r4
1000cd28:	38a1c83a 	sub	r16,r7,r2
1000cd2c:	8009883a 	mov	r4,r16
1000cd30:	a80b883a 	mov	r5,r21
1000cd34:	d8c00115 	stw	r3,4(sp)
1000cd38:	000d7ec0 	call	1000d7ec <__umodsi3>
1000cd3c:	1027883a 	mov	r19,r2
1000cd40:	8009883a 	mov	r4,r16
1000cd44:	a80b883a 	mov	r5,r21
1000cd48:	9826943a 	slli	r19,r19,16
1000cd4c:	000d7880 	call	1000d788 <__udivsi3>
1000cd50:	a00b883a 	mov	r5,r20
1000cd54:	1009883a 	mov	r4,r2
1000cd58:	94bfffcc 	andi	r18,r18,65535
1000cd5c:	1021883a 	mov	r16,r2
1000cd60:	94e4b03a 	or	r18,r18,r19
1000cd64:	000d8440 	call	1000d844 <__mulsi3>
1000cd68:	d8c00117 	ldw	r3,4(sp)
1000cd6c:	9080052e 	bgeu	r18,r2,1000cd84 <__udivdi3+0x2b4>
1000cd70:	8ca5883a 	add	r18,r17,r18
1000cd74:	813fffc4 	addi	r4,r16,-1
1000cd78:	9440ad36 	bltu	r18,r17,1000d030 <__udivdi3+0x560>
1000cd7c:	9080ac2e 	bgeu	r18,r2,1000d030 <__udivdi3+0x560>
1000cd80:	843fff84 	addi	r16,r16,-2
1000cd84:	b004943a 	slli	r2,r22,16
1000cd88:	1404b03a 	or	r2,r2,r16
1000cd8c:	00000206 	br	1000cd98 <__udivdi3+0x2c8>
1000cd90:	0007883a 	mov	r3,zero
1000cd94:	0005883a 	mov	r2,zero
1000cd98:	dfc00b17 	ldw	ra,44(sp)
1000cd9c:	df000a17 	ldw	fp,40(sp)
1000cda0:	ddc00917 	ldw	r23,36(sp)
1000cda4:	dd800817 	ldw	r22,32(sp)
1000cda8:	dd400717 	ldw	r21,28(sp)
1000cdac:	dd000617 	ldw	r20,24(sp)
1000cdb0:	dcc00517 	ldw	r19,20(sp)
1000cdb4:	dc800417 	ldw	r18,16(sp)
1000cdb8:	dc400317 	ldw	r17,12(sp)
1000cdbc:	dc000217 	ldw	r16,8(sp)
1000cdc0:	dec00c04 	addi	sp,sp,48
1000cdc4:	f800283a 	ret
1000cdc8:	00803fc4 	movi	r2,255
1000cdcc:	11c5803a 	cmpltu	r2,r2,r7
1000cdd0:	100490fa 	slli	r2,r2,3
1000cdd4:	003f9906 	br	1000cc3c <__alt_data_end+0xf800cc3c>
1000cdd8:	00803fc4 	movi	r2,255
1000cddc:	1445803a 	cmpltu	r2,r2,r17
1000cde0:	100490fa 	slli	r2,r2,3
1000cde4:	003fad06 	br	1000cc9c <__alt_data_end+0xf800cc9c>
1000cde8:	00804034 	movhi	r2,256
1000cdec:	10bfffc4 	addi	r2,r2,-1
1000cdf0:	11809f36 	bltu	r2,r6,1000d070 <__udivdi3+0x5a0>
1000cdf4:	00800404 	movi	r2,16
1000cdf8:	003f4c06 	br	1000cb2c <__alt_data_end+0xf800cb2c>
1000cdfc:	3dce983a 	sll	r7,r7,r23
1000ce00:	30b8d83a 	srl	fp,r6,r2
1000ce04:	80a2d83a 	srl	r17,r16,r2
1000ce08:	35cc983a 	sll	r6,r6,r23
1000ce0c:	3f38b03a 	or	fp,r7,fp
1000ce10:	e024d43a 	srli	r18,fp,16
1000ce14:	9884d83a 	srl	r2,r19,r2
1000ce18:	85e0983a 	sll	r16,r16,r23
1000ce1c:	8809883a 	mov	r4,r17
1000ce20:	900b883a 	mov	r5,r18
1000ce24:	d9800015 	stw	r6,0(sp)
1000ce28:	1420b03a 	or	r16,r2,r16
1000ce2c:	000d7ec0 	call	1000d7ec <__umodsi3>
1000ce30:	900b883a 	mov	r5,r18
1000ce34:	8809883a 	mov	r4,r17
1000ce38:	1029883a 	mov	r20,r2
1000ce3c:	e5bfffcc 	andi	r22,fp,65535
1000ce40:	000d7880 	call	1000d788 <__udivsi3>
1000ce44:	100b883a 	mov	r5,r2
1000ce48:	b009883a 	mov	r4,r22
1000ce4c:	102b883a 	mov	r21,r2
1000ce50:	000d8440 	call	1000d844 <__mulsi3>
1000ce54:	a028943a 	slli	r20,r20,16
1000ce58:	8006d43a 	srli	r3,r16,16
1000ce5c:	1d06b03a 	or	r3,r3,r20
1000ce60:	1880042e 	bgeu	r3,r2,1000ce74 <__udivdi3+0x3a4>
1000ce64:	1f07883a 	add	r3,r3,fp
1000ce68:	a93fffc4 	addi	r4,r21,-1
1000ce6c:	1f00892e 	bgeu	r3,fp,1000d094 <__udivdi3+0x5c4>
1000ce70:	202b883a 	mov	r21,r4
1000ce74:	18a3c83a 	sub	r17,r3,r2
1000ce78:	8809883a 	mov	r4,r17
1000ce7c:	900b883a 	mov	r5,r18
1000ce80:	000d7ec0 	call	1000d7ec <__umodsi3>
1000ce84:	1029883a 	mov	r20,r2
1000ce88:	8809883a 	mov	r4,r17
1000ce8c:	900b883a 	mov	r5,r18
1000ce90:	a028943a 	slli	r20,r20,16
1000ce94:	000d7880 	call	1000d788 <__udivsi3>
1000ce98:	100b883a 	mov	r5,r2
1000ce9c:	b009883a 	mov	r4,r22
1000cea0:	843fffcc 	andi	r16,r16,65535
1000cea4:	1023883a 	mov	r17,r2
1000cea8:	8520b03a 	or	r16,r16,r20
1000ceac:	000d8440 	call	1000d844 <__mulsi3>
1000ceb0:	8080042e 	bgeu	r16,r2,1000cec4 <__udivdi3+0x3f4>
1000ceb4:	8721883a 	add	r16,r16,fp
1000ceb8:	88ffffc4 	addi	r3,r17,-1
1000cebc:	8700712e 	bgeu	r16,fp,1000d084 <__udivdi3+0x5b4>
1000cec0:	1823883a 	mov	r17,r3
1000cec4:	a80e943a 	slli	r7,r21,16
1000cec8:	d8c00017 	ldw	r3,0(sp)
1000cecc:	80a1c83a 	sub	r16,r16,r2
1000ced0:	3c64b03a 	or	r18,r7,r17
1000ced4:	1d3fffcc 	andi	r20,r3,65535
1000ced8:	9022d43a 	srli	r17,r18,16
1000cedc:	95bfffcc 	andi	r22,r18,65535
1000cee0:	a00b883a 	mov	r5,r20
1000cee4:	b009883a 	mov	r4,r22
1000cee8:	182ad43a 	srli	r21,r3,16
1000ceec:	000d8440 	call	1000d844 <__mulsi3>
1000cef0:	a00b883a 	mov	r5,r20
1000cef4:	8809883a 	mov	r4,r17
1000cef8:	1039883a 	mov	fp,r2
1000cefc:	000d8440 	call	1000d844 <__mulsi3>
1000cf00:	8809883a 	mov	r4,r17
1000cf04:	a80b883a 	mov	r5,r21
1000cf08:	1029883a 	mov	r20,r2
1000cf0c:	000d8440 	call	1000d844 <__mulsi3>
1000cf10:	a80b883a 	mov	r5,r21
1000cf14:	b009883a 	mov	r4,r22
1000cf18:	1023883a 	mov	r17,r2
1000cf1c:	000d8440 	call	1000d844 <__mulsi3>
1000cf20:	e006d43a 	srli	r3,fp,16
1000cf24:	1505883a 	add	r2,r2,r20
1000cf28:	1887883a 	add	r3,r3,r2
1000cf2c:	1d00022e 	bgeu	r3,r20,1000cf38 <__udivdi3+0x468>
1000cf30:	00800074 	movhi	r2,1
1000cf34:	88a3883a 	add	r17,r17,r2
1000cf38:	1804d43a 	srli	r2,r3,16
1000cf3c:	1463883a 	add	r17,r2,r17
1000cf40:	84404436 	bltu	r16,r17,1000d054 <__udivdi3+0x584>
1000cf44:	84403e26 	beq	r16,r17,1000d040 <__udivdi3+0x570>
1000cf48:	9005883a 	mov	r2,r18
1000cf4c:	0007883a 	mov	r3,zero
1000cf50:	003f9106 	br	1000cd98 <__alt_data_end+0xf800cd98>
1000cf54:	88e2983a 	sll	r17,r17,r3
1000cf58:	80aed83a 	srl	r23,r16,r2
1000cf5c:	80e0983a 	sll	r16,r16,r3
1000cf60:	882ad43a 	srli	r21,r17,16
1000cf64:	9884d83a 	srl	r2,r19,r2
1000cf68:	b809883a 	mov	r4,r23
1000cf6c:	a80b883a 	mov	r5,r21
1000cf70:	98e4983a 	sll	r18,r19,r3
1000cf74:	142cb03a 	or	r22,r2,r16
1000cf78:	000d7ec0 	call	1000d7ec <__umodsi3>
1000cf7c:	b809883a 	mov	r4,r23
1000cf80:	a80b883a 	mov	r5,r21
1000cf84:	1027883a 	mov	r19,r2
1000cf88:	8d3fffcc 	andi	r20,r17,65535
1000cf8c:	000d7880 	call	1000d788 <__udivsi3>
1000cf90:	a009883a 	mov	r4,r20
1000cf94:	100b883a 	mov	r5,r2
1000cf98:	102f883a 	mov	r23,r2
1000cf9c:	000d8440 	call	1000d844 <__mulsi3>
1000cfa0:	9826943a 	slli	r19,r19,16
1000cfa4:	b008d43a 	srli	r4,r22,16
1000cfa8:	24c8b03a 	or	r4,r4,r19
1000cfac:	2080062e 	bgeu	r4,r2,1000cfc8 <__udivdi3+0x4f8>
1000cfb0:	2449883a 	add	r4,r4,r17
1000cfb4:	b8ffffc4 	addi	r3,r23,-1
1000cfb8:	24403c36 	bltu	r4,r17,1000d0ac <__udivdi3+0x5dc>
1000cfbc:	20803b2e 	bgeu	r4,r2,1000d0ac <__udivdi3+0x5dc>
1000cfc0:	bdffff84 	addi	r23,r23,-2
1000cfc4:	2449883a 	add	r4,r4,r17
1000cfc8:	20a1c83a 	sub	r16,r4,r2
1000cfcc:	a80b883a 	mov	r5,r21
1000cfd0:	8009883a 	mov	r4,r16
1000cfd4:	000d7ec0 	call	1000d7ec <__umodsi3>
1000cfd8:	a80b883a 	mov	r5,r21
1000cfdc:	8009883a 	mov	r4,r16
1000cfe0:	1027883a 	mov	r19,r2
1000cfe4:	000d7880 	call	1000d788 <__udivsi3>
1000cfe8:	a009883a 	mov	r4,r20
1000cfec:	100b883a 	mov	r5,r2
1000cff0:	9826943a 	slli	r19,r19,16
1000cff4:	1039883a 	mov	fp,r2
1000cff8:	000d8440 	call	1000d844 <__mulsi3>
1000cffc:	b13fffcc 	andi	r4,r22,65535
1000d000:	24c8b03a 	or	r4,r4,r19
1000d004:	2080062e 	bgeu	r4,r2,1000d020 <__udivdi3+0x550>
1000d008:	2449883a 	add	r4,r4,r17
1000d00c:	e0ffffc4 	addi	r3,fp,-1
1000d010:	24402436 	bltu	r4,r17,1000d0a4 <__udivdi3+0x5d4>
1000d014:	2080232e 	bgeu	r4,r2,1000d0a4 <__udivdi3+0x5d4>
1000d018:	e73fff84 	addi	fp,fp,-2
1000d01c:	2449883a 	add	r4,r4,r17
1000d020:	b82e943a 	slli	r23,r23,16
1000d024:	20a1c83a 	sub	r16,r4,r2
1000d028:	bf06b03a 	or	r3,r23,fp
1000d02c:	003f2806 	br	1000ccd0 <__alt_data_end+0xf800ccd0>
1000d030:	2021883a 	mov	r16,r4
1000d034:	003f5306 	br	1000cd84 <__alt_data_end+0xf800cd84>
1000d038:	1821883a 	mov	r16,r3
1000d03c:	003ef406 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d040:	1806943a 	slli	r3,r3,16
1000d044:	9de6983a 	sll	r19,r19,r23
1000d048:	e73fffcc 	andi	fp,fp,65535
1000d04c:	1f07883a 	add	r3,r3,fp
1000d050:	98ffbd2e 	bgeu	r19,r3,1000cf48 <__alt_data_end+0xf800cf48>
1000d054:	90bfffc4 	addi	r2,r18,-1
1000d058:	0007883a 	mov	r3,zero
1000d05c:	003f4e06 	br	1000cd98 <__alt_data_end+0xf800cd98>
1000d060:	00800604 	movi	r2,24
1000d064:	003ef506 	br	1000cc3c <__alt_data_end+0xf800cc3c>
1000d068:	00800604 	movi	r2,24
1000d06c:	003f0b06 	br	1000cc9c <__alt_data_end+0xf800cc9c>
1000d070:	00800604 	movi	r2,24
1000d074:	003ead06 	br	1000cb2c <__alt_data_end+0xf800cb2c>
1000d078:	0007883a 	mov	r3,zero
1000d07c:	00800044 	movi	r2,1
1000d080:	003f4506 	br	1000cd98 <__alt_data_end+0xf800cd98>
1000d084:	80bf8e2e 	bgeu	r16,r2,1000cec0 <__alt_data_end+0xf800cec0>
1000d088:	8c7fff84 	addi	r17,r17,-2
1000d08c:	8721883a 	add	r16,r16,fp
1000d090:	003f8c06 	br	1000cec4 <__alt_data_end+0xf800cec4>
1000d094:	18bf762e 	bgeu	r3,r2,1000ce70 <__alt_data_end+0xf800ce70>
1000d098:	ad7fff84 	addi	r21,r21,-2
1000d09c:	1f07883a 	add	r3,r3,fp
1000d0a0:	003f7406 	br	1000ce74 <__alt_data_end+0xf800ce74>
1000d0a4:	1839883a 	mov	fp,r3
1000d0a8:	003fdd06 	br	1000d020 <__alt_data_end+0xf800d020>
1000d0ac:	182f883a 	mov	r23,r3
1000d0b0:	003fc506 	br	1000cfc8 <__alt_data_end+0xf800cfc8>
1000d0b4:	b5bfff84 	addi	r22,r22,-2
1000d0b8:	3c4f883a 	add	r7,r7,r17
1000d0bc:	003f1a06 	br	1000cd28 <__alt_data_end+0xf800cd28>
1000d0c0:	b5bfff84 	addi	r22,r22,-2
1000d0c4:	1c47883a 	add	r3,r3,r17
1000d0c8:	003ebc06 	br	1000cbbc <__alt_data_end+0xf800cbbc>

1000d0cc <__umoddi3>:
1000d0cc:	defff304 	addi	sp,sp,-52
1000d0d0:	df000b15 	stw	fp,44(sp)
1000d0d4:	dc400415 	stw	r17,16(sp)
1000d0d8:	dc000315 	stw	r16,12(sp)
1000d0dc:	dfc00c15 	stw	ra,48(sp)
1000d0e0:	ddc00a15 	stw	r23,40(sp)
1000d0e4:	dd800915 	stw	r22,36(sp)
1000d0e8:	dd400815 	stw	r21,32(sp)
1000d0ec:	dd000715 	stw	r20,28(sp)
1000d0f0:	dcc00615 	stw	r19,24(sp)
1000d0f4:	dc800515 	stw	r18,20(sp)
1000d0f8:	2021883a 	mov	r16,r4
1000d0fc:	2823883a 	mov	r17,r5
1000d100:	2839883a 	mov	fp,r5
1000d104:	3800401e 	bne	r7,zero,1000d208 <__umoddi3+0x13c>
1000d108:	3027883a 	mov	r19,r6
1000d10c:	2029883a 	mov	r20,r4
1000d110:	2980552e 	bgeu	r5,r6,1000d268 <__umoddi3+0x19c>
1000d114:	00bfffd4 	movui	r2,65535
1000d118:	1180a236 	bltu	r2,r6,1000d3a4 <__umoddi3+0x2d8>
1000d11c:	01003fc4 	movi	r4,255
1000d120:	2189803a 	cmpltu	r4,r4,r6
1000d124:	200890fa 	slli	r4,r4,3
1000d128:	3104d83a 	srl	r2,r6,r4
1000d12c:	00c40074 	movhi	r3,4097
1000d130:	18ccac04 	addi	r3,r3,12976
1000d134:	1885883a 	add	r2,r3,r2
1000d138:	10c00003 	ldbu	r3,0(r2)
1000d13c:	00800804 	movi	r2,32
1000d140:	1909883a 	add	r4,r3,r4
1000d144:	1125c83a 	sub	r18,r2,r4
1000d148:	90000526 	beq	r18,zero,1000d160 <__umoddi3+0x94>
1000d14c:	8ca2983a 	sll	r17,r17,r18
1000d150:	8108d83a 	srl	r4,r16,r4
1000d154:	34a6983a 	sll	r19,r6,r18
1000d158:	84a8983a 	sll	r20,r16,r18
1000d15c:	2478b03a 	or	fp,r4,r17
1000d160:	982cd43a 	srli	r22,r19,16
1000d164:	e009883a 	mov	r4,fp
1000d168:	9dffffcc 	andi	r23,r19,65535
1000d16c:	b00b883a 	mov	r5,r22
1000d170:	000d7ec0 	call	1000d7ec <__umodsi3>
1000d174:	b00b883a 	mov	r5,r22
1000d178:	e009883a 	mov	r4,fp
1000d17c:	102b883a 	mov	r21,r2
1000d180:	000d7880 	call	1000d788 <__udivsi3>
1000d184:	100b883a 	mov	r5,r2
1000d188:	b809883a 	mov	r4,r23
1000d18c:	000d8440 	call	1000d844 <__mulsi3>
1000d190:	a82a943a 	slli	r21,r21,16
1000d194:	a006d43a 	srli	r3,r20,16
1000d198:	1d46b03a 	or	r3,r3,r21
1000d19c:	1880032e 	bgeu	r3,r2,1000d1ac <__umoddi3+0xe0>
1000d1a0:	1cc7883a 	add	r3,r3,r19
1000d1a4:	1cc00136 	bltu	r3,r19,1000d1ac <__umoddi3+0xe0>
1000d1a8:	18813136 	bltu	r3,r2,1000d670 <__umoddi3+0x5a4>
1000d1ac:	18a1c83a 	sub	r16,r3,r2
1000d1b0:	b00b883a 	mov	r5,r22
1000d1b4:	8009883a 	mov	r4,r16
1000d1b8:	000d7ec0 	call	1000d7ec <__umodsi3>
1000d1bc:	b00b883a 	mov	r5,r22
1000d1c0:	8009883a 	mov	r4,r16
1000d1c4:	1023883a 	mov	r17,r2
1000d1c8:	000d7880 	call	1000d788 <__udivsi3>
1000d1cc:	100b883a 	mov	r5,r2
1000d1d0:	b809883a 	mov	r4,r23
1000d1d4:	8822943a 	slli	r17,r17,16
1000d1d8:	000d8440 	call	1000d844 <__mulsi3>
1000d1dc:	a0ffffcc 	andi	r3,r20,65535
1000d1e0:	1c46b03a 	or	r3,r3,r17
1000d1e4:	1880042e 	bgeu	r3,r2,1000d1f8 <__umoddi3+0x12c>
1000d1e8:	1cc7883a 	add	r3,r3,r19
1000d1ec:	1cc00236 	bltu	r3,r19,1000d1f8 <__umoddi3+0x12c>
1000d1f0:	1880012e 	bgeu	r3,r2,1000d1f8 <__umoddi3+0x12c>
1000d1f4:	1cc7883a 	add	r3,r3,r19
1000d1f8:	1885c83a 	sub	r2,r3,r2
1000d1fc:	1484d83a 	srl	r2,r2,r18
1000d200:	0007883a 	mov	r3,zero
1000d204:	00005306 	br	1000d354 <__umoddi3+0x288>
1000d208:	29c05036 	bltu	r5,r7,1000d34c <__umoddi3+0x280>
1000d20c:	00bfffd4 	movui	r2,65535
1000d210:	11c05c2e 	bgeu	r2,r7,1000d384 <__umoddi3+0x2b8>
1000d214:	00804034 	movhi	r2,256
1000d218:	10bfffc4 	addi	r2,r2,-1
1000d21c:	11c10636 	bltu	r2,r7,1000d638 <__umoddi3+0x56c>
1000d220:	01000404 	movi	r4,16
1000d224:	3904d83a 	srl	r2,r7,r4
1000d228:	00c40074 	movhi	r3,4097
1000d22c:	18ccac04 	addi	r3,r3,12976
1000d230:	1885883a 	add	r2,r3,r2
1000d234:	14c00003 	ldbu	r19,0(r2)
1000d238:	00c00804 	movi	r3,32
1000d23c:	9927883a 	add	r19,r19,r4
1000d240:	1ce9c83a 	sub	r20,r3,r19
1000d244:	a0005c1e 	bne	r20,zero,1000d3b8 <__umoddi3+0x2ec>
1000d248:	3c400136 	bltu	r7,r17,1000d250 <__umoddi3+0x184>
1000d24c:	81810a36 	bltu	r16,r6,1000d678 <__umoddi3+0x5ac>
1000d250:	8185c83a 	sub	r2,r16,r6
1000d254:	89e3c83a 	sub	r17,r17,r7
1000d258:	8089803a 	cmpltu	r4,r16,r2
1000d25c:	8939c83a 	sub	fp,r17,r4
1000d260:	e007883a 	mov	r3,fp
1000d264:	00003b06 	br	1000d354 <__umoddi3+0x288>
1000d268:	3000041e 	bne	r6,zero,1000d27c <__umoddi3+0x1b0>
1000d26c:	000b883a 	mov	r5,zero
1000d270:	01000044 	movi	r4,1
1000d274:	000d7880 	call	1000d788 <__udivsi3>
1000d278:	1027883a 	mov	r19,r2
1000d27c:	00bfffd4 	movui	r2,65535
1000d280:	14c0442e 	bgeu	r2,r19,1000d394 <__umoddi3+0x2c8>
1000d284:	00804034 	movhi	r2,256
1000d288:	10bfffc4 	addi	r2,r2,-1
1000d28c:	14c0ec36 	bltu	r2,r19,1000d640 <__umoddi3+0x574>
1000d290:	00800404 	movi	r2,16
1000d294:	9886d83a 	srl	r3,r19,r2
1000d298:	01040074 	movhi	r4,4097
1000d29c:	210cac04 	addi	r4,r4,12976
1000d2a0:	20c7883a 	add	r3,r4,r3
1000d2a4:	18c00003 	ldbu	r3,0(r3)
1000d2a8:	1887883a 	add	r3,r3,r2
1000d2ac:	00800804 	movi	r2,32
1000d2b0:	10e5c83a 	sub	r18,r2,r3
1000d2b4:	9000ab1e 	bne	r18,zero,1000d564 <__umoddi3+0x498>
1000d2b8:	982cd43a 	srli	r22,r19,16
1000d2bc:	8ce3c83a 	sub	r17,r17,r19
1000d2c0:	9dffffcc 	andi	r23,r19,65535
1000d2c4:	b00b883a 	mov	r5,r22
1000d2c8:	8809883a 	mov	r4,r17
1000d2cc:	000d7ec0 	call	1000d7ec <__umodsi3>
1000d2d0:	b00b883a 	mov	r5,r22
1000d2d4:	8809883a 	mov	r4,r17
1000d2d8:	102b883a 	mov	r21,r2
1000d2dc:	000d7880 	call	1000d788 <__udivsi3>
1000d2e0:	b80b883a 	mov	r5,r23
1000d2e4:	1009883a 	mov	r4,r2
1000d2e8:	000d8440 	call	1000d844 <__mulsi3>
1000d2ec:	a82a943a 	slli	r21,r21,16
1000d2f0:	a006d43a 	srli	r3,r20,16
1000d2f4:	1d46b03a 	or	r3,r3,r21
1000d2f8:	1880042e 	bgeu	r3,r2,1000d30c <__umoddi3+0x240>
1000d2fc:	1cc7883a 	add	r3,r3,r19
1000d300:	1cc00236 	bltu	r3,r19,1000d30c <__umoddi3+0x240>
1000d304:	1880012e 	bgeu	r3,r2,1000d30c <__umoddi3+0x240>
1000d308:	1cc7883a 	add	r3,r3,r19
1000d30c:	18a1c83a 	sub	r16,r3,r2
1000d310:	b00b883a 	mov	r5,r22
1000d314:	8009883a 	mov	r4,r16
1000d318:	000d7ec0 	call	1000d7ec <__umodsi3>
1000d31c:	1023883a 	mov	r17,r2
1000d320:	b00b883a 	mov	r5,r22
1000d324:	8009883a 	mov	r4,r16
1000d328:	000d7880 	call	1000d788 <__udivsi3>
1000d32c:	8822943a 	slli	r17,r17,16
1000d330:	b80b883a 	mov	r5,r23
1000d334:	1009883a 	mov	r4,r2
1000d338:	000d8440 	call	1000d844 <__mulsi3>
1000d33c:	a53fffcc 	andi	r20,r20,65535
1000d340:	a446b03a 	or	r3,r20,r17
1000d344:	18bfac2e 	bgeu	r3,r2,1000d1f8 <__alt_data_end+0xf800d1f8>
1000d348:	003fa706 	br	1000d1e8 <__alt_data_end+0xf800d1e8>
1000d34c:	2005883a 	mov	r2,r4
1000d350:	2807883a 	mov	r3,r5
1000d354:	dfc00c17 	ldw	ra,48(sp)
1000d358:	df000b17 	ldw	fp,44(sp)
1000d35c:	ddc00a17 	ldw	r23,40(sp)
1000d360:	dd800917 	ldw	r22,36(sp)
1000d364:	dd400817 	ldw	r21,32(sp)
1000d368:	dd000717 	ldw	r20,28(sp)
1000d36c:	dcc00617 	ldw	r19,24(sp)
1000d370:	dc800517 	ldw	r18,20(sp)
1000d374:	dc400417 	ldw	r17,16(sp)
1000d378:	dc000317 	ldw	r16,12(sp)
1000d37c:	dec00d04 	addi	sp,sp,52
1000d380:	f800283a 	ret
1000d384:	04c03fc4 	movi	r19,255
1000d388:	99c9803a 	cmpltu	r4,r19,r7
1000d38c:	200890fa 	slli	r4,r4,3
1000d390:	003fa406 	br	1000d224 <__alt_data_end+0xf800d224>
1000d394:	00803fc4 	movi	r2,255
1000d398:	14c5803a 	cmpltu	r2,r2,r19
1000d39c:	100490fa 	slli	r2,r2,3
1000d3a0:	003fbc06 	br	1000d294 <__alt_data_end+0xf800d294>
1000d3a4:	00804034 	movhi	r2,256
1000d3a8:	10bfffc4 	addi	r2,r2,-1
1000d3ac:	1180a636 	bltu	r2,r6,1000d648 <__umoddi3+0x57c>
1000d3b0:	01000404 	movi	r4,16
1000d3b4:	003f5c06 	br	1000d128 <__alt_data_end+0xf800d128>
1000d3b8:	3d0e983a 	sll	r7,r7,r20
1000d3bc:	34ead83a 	srl	r21,r6,r19
1000d3c0:	8cc6d83a 	srl	r3,r17,r19
1000d3c4:	8d10983a 	sll	r8,r17,r20
1000d3c8:	3d6ab03a 	or	r21,r7,r21
1000d3cc:	a82cd43a 	srli	r22,r21,16
1000d3d0:	84e2d83a 	srl	r17,r16,r19
1000d3d4:	1809883a 	mov	r4,r3
1000d3d8:	b00b883a 	mov	r5,r22
1000d3dc:	8a22b03a 	or	r17,r17,r8
1000d3e0:	3524983a 	sll	r18,r6,r20
1000d3e4:	dc400015 	stw	r17,0(sp)
1000d3e8:	d8c00115 	stw	r3,4(sp)
1000d3ec:	000d7ec0 	call	1000d7ec <__umodsi3>
1000d3f0:	d8c00117 	ldw	r3,4(sp)
1000d3f4:	b00b883a 	mov	r5,r22
1000d3f8:	1039883a 	mov	fp,r2
1000d3fc:	1809883a 	mov	r4,r3
1000d400:	000d7880 	call	1000d788 <__udivsi3>
1000d404:	adffffcc 	andi	r23,r21,65535
1000d408:	100b883a 	mov	r5,r2
1000d40c:	b809883a 	mov	r4,r23
1000d410:	1023883a 	mov	r17,r2
1000d414:	000d8440 	call	1000d844 <__mulsi3>
1000d418:	d9400017 	ldw	r5,0(sp)
1000d41c:	e008943a 	slli	r4,fp,16
1000d420:	8520983a 	sll	r16,r16,r20
1000d424:	2806d43a 	srli	r3,r5,16
1000d428:	1906b03a 	or	r3,r3,r4
1000d42c:	1880042e 	bgeu	r3,r2,1000d440 <__umoddi3+0x374>
1000d430:	1d47883a 	add	r3,r3,r21
1000d434:	893fffc4 	addi	r4,r17,-1
1000d438:	1d40892e 	bgeu	r3,r21,1000d660 <__umoddi3+0x594>
1000d43c:	2023883a 	mov	r17,r4
1000d440:	18b9c83a 	sub	fp,r3,r2
1000d444:	b00b883a 	mov	r5,r22
1000d448:	e009883a 	mov	r4,fp
1000d44c:	000d7ec0 	call	1000d7ec <__umodsi3>
1000d450:	b00b883a 	mov	r5,r22
1000d454:	e009883a 	mov	r4,fp
1000d458:	d8800215 	stw	r2,8(sp)
1000d45c:	000d7880 	call	1000d788 <__udivsi3>
1000d460:	100b883a 	mov	r5,r2
1000d464:	b809883a 	mov	r4,r23
1000d468:	102d883a 	mov	r22,r2
1000d46c:	000d8440 	call	1000d844 <__mulsi3>
1000d470:	d9800217 	ldw	r6,8(sp)
1000d474:	d8c00017 	ldw	r3,0(sp)
1000d478:	300c943a 	slli	r6,r6,16
1000d47c:	1a3fffcc 	andi	r8,r3,65535
1000d480:	4190b03a 	or	r8,r8,r6
1000d484:	4080042e 	bgeu	r8,r2,1000d498 <__umoddi3+0x3cc>
1000d488:	4551883a 	add	r8,r8,r21
1000d48c:	b0ffffc4 	addi	r3,r22,-1
1000d490:	45406f2e 	bgeu	r8,r21,1000d650 <__umoddi3+0x584>
1000d494:	182d883a 	mov	r22,r3
1000d498:	880e943a 	slli	r7,r17,16
1000d49c:	9006d43a 	srli	r3,r18,16
1000d4a0:	91bfffcc 	andi	r6,r18,65535
1000d4a4:	3dacb03a 	or	r22,r7,r22
1000d4a8:	b02ed43a 	srli	r23,r22,16
1000d4ac:	b5bfffcc 	andi	r22,r22,65535
1000d4b0:	300b883a 	mov	r5,r6
1000d4b4:	b009883a 	mov	r4,r22
1000d4b8:	40a3c83a 	sub	r17,r8,r2
1000d4bc:	d8c00115 	stw	r3,4(sp)
1000d4c0:	d9800215 	stw	r6,8(sp)
1000d4c4:	000d8440 	call	1000d844 <__mulsi3>
1000d4c8:	d9800217 	ldw	r6,8(sp)
1000d4cc:	b809883a 	mov	r4,r23
1000d4d0:	1039883a 	mov	fp,r2
1000d4d4:	300b883a 	mov	r5,r6
1000d4d8:	000d8440 	call	1000d844 <__mulsi3>
1000d4dc:	d8c00117 	ldw	r3,4(sp)
1000d4e0:	b809883a 	mov	r4,r23
1000d4e4:	d8800215 	stw	r2,8(sp)
1000d4e8:	180b883a 	mov	r5,r3
1000d4ec:	000d8440 	call	1000d844 <__mulsi3>
1000d4f0:	d8c00117 	ldw	r3,4(sp)
1000d4f4:	b009883a 	mov	r4,r22
1000d4f8:	102f883a 	mov	r23,r2
1000d4fc:	180b883a 	mov	r5,r3
1000d500:	000d8440 	call	1000d844 <__mulsi3>
1000d504:	d9800217 	ldw	r6,8(sp)
1000d508:	e006d43a 	srli	r3,fp,16
1000d50c:	1185883a 	add	r2,r2,r6
1000d510:	1885883a 	add	r2,r3,r2
1000d514:	1180022e 	bgeu	r2,r6,1000d520 <__umoddi3+0x454>
1000d518:	00c00074 	movhi	r3,1
1000d51c:	b8ef883a 	add	r23,r23,r3
1000d520:	1006d43a 	srli	r3,r2,16
1000d524:	1004943a 	slli	r2,r2,16
1000d528:	e73fffcc 	andi	fp,fp,65535
1000d52c:	1dc7883a 	add	r3,r3,r23
1000d530:	1739883a 	add	fp,r2,fp
1000d534:	88c03a36 	bltu	r17,r3,1000d620 <__umoddi3+0x554>
1000d538:	88c05126 	beq	r17,r3,1000d680 <__umoddi3+0x5b4>
1000d53c:	88c9c83a 	sub	r4,r17,r3
1000d540:	e00f883a 	mov	r7,fp
1000d544:	81cfc83a 	sub	r7,r16,r7
1000d548:	81c7803a 	cmpltu	r3,r16,r7
1000d54c:	20c7c83a 	sub	r3,r4,r3
1000d550:	1cc4983a 	sll	r2,r3,r19
1000d554:	3d0ed83a 	srl	r7,r7,r20
1000d558:	1d06d83a 	srl	r3,r3,r20
1000d55c:	11c4b03a 	or	r2,r2,r7
1000d560:	003f7c06 	br	1000d354 <__alt_data_end+0xf800d354>
1000d564:	9ca6983a 	sll	r19,r19,r18
1000d568:	88f8d83a 	srl	fp,r17,r3
1000d56c:	80c4d83a 	srl	r2,r16,r3
1000d570:	982cd43a 	srli	r22,r19,16
1000d574:	8ca2983a 	sll	r17,r17,r18
1000d578:	e009883a 	mov	r4,fp
1000d57c:	b00b883a 	mov	r5,r22
1000d580:	146ab03a 	or	r21,r2,r17
1000d584:	000d7ec0 	call	1000d7ec <__umodsi3>
1000d588:	b00b883a 	mov	r5,r22
1000d58c:	e009883a 	mov	r4,fp
1000d590:	1029883a 	mov	r20,r2
1000d594:	9dffffcc 	andi	r23,r19,65535
1000d598:	000d7880 	call	1000d788 <__udivsi3>
1000d59c:	b809883a 	mov	r4,r23
1000d5a0:	100b883a 	mov	r5,r2
1000d5a4:	000d8440 	call	1000d844 <__mulsi3>
1000d5a8:	a008943a 	slli	r4,r20,16
1000d5ac:	a806d43a 	srli	r3,r21,16
1000d5b0:	84a8983a 	sll	r20,r16,r18
1000d5b4:	1906b03a 	or	r3,r3,r4
1000d5b8:	1880042e 	bgeu	r3,r2,1000d5cc <__umoddi3+0x500>
1000d5bc:	1cc7883a 	add	r3,r3,r19
1000d5c0:	1cc00236 	bltu	r3,r19,1000d5cc <__umoddi3+0x500>
1000d5c4:	1880012e 	bgeu	r3,r2,1000d5cc <__umoddi3+0x500>
1000d5c8:	1cc7883a 	add	r3,r3,r19
1000d5cc:	18a3c83a 	sub	r17,r3,r2
1000d5d0:	b00b883a 	mov	r5,r22
1000d5d4:	8809883a 	mov	r4,r17
1000d5d8:	000d7ec0 	call	1000d7ec <__umodsi3>
1000d5dc:	b00b883a 	mov	r5,r22
1000d5e0:	8809883a 	mov	r4,r17
1000d5e4:	1021883a 	mov	r16,r2
1000d5e8:	000d7880 	call	1000d788 <__udivsi3>
1000d5ec:	100b883a 	mov	r5,r2
1000d5f0:	b809883a 	mov	r4,r23
1000d5f4:	8020943a 	slli	r16,r16,16
1000d5f8:	000d8440 	call	1000d844 <__mulsi3>
1000d5fc:	a8ffffcc 	andi	r3,r21,65535
1000d600:	1c06b03a 	or	r3,r3,r16
1000d604:	1880042e 	bgeu	r3,r2,1000d618 <__umoddi3+0x54c>
1000d608:	1cc7883a 	add	r3,r3,r19
1000d60c:	1cc00236 	bltu	r3,r19,1000d618 <__umoddi3+0x54c>
1000d610:	1880012e 	bgeu	r3,r2,1000d618 <__umoddi3+0x54c>
1000d614:	1cc7883a 	add	r3,r3,r19
1000d618:	18a3c83a 	sub	r17,r3,r2
1000d61c:	003f2906 	br	1000d2c4 <__alt_data_end+0xf800d2c4>
1000d620:	e48fc83a 	sub	r7,fp,r18
1000d624:	1d49c83a 	sub	r4,r3,r21
1000d628:	e1f9803a 	cmpltu	fp,fp,r7
1000d62c:	2739c83a 	sub	fp,r4,fp
1000d630:	8f09c83a 	sub	r4,r17,fp
1000d634:	003fc306 	br	1000d544 <__alt_data_end+0xf800d544>
1000d638:	01000604 	movi	r4,24
1000d63c:	003ef906 	br	1000d224 <__alt_data_end+0xf800d224>
1000d640:	00800604 	movi	r2,24
1000d644:	003f1306 	br	1000d294 <__alt_data_end+0xf800d294>
1000d648:	01000604 	movi	r4,24
1000d64c:	003eb606 	br	1000d128 <__alt_data_end+0xf800d128>
1000d650:	40bf902e 	bgeu	r8,r2,1000d494 <__alt_data_end+0xf800d494>
1000d654:	b5bfff84 	addi	r22,r22,-2
1000d658:	4551883a 	add	r8,r8,r21
1000d65c:	003f8e06 	br	1000d498 <__alt_data_end+0xf800d498>
1000d660:	18bf762e 	bgeu	r3,r2,1000d43c <__alt_data_end+0xf800d43c>
1000d664:	8c7fff84 	addi	r17,r17,-2
1000d668:	1d47883a 	add	r3,r3,r21
1000d66c:	003f7406 	br	1000d440 <__alt_data_end+0xf800d440>
1000d670:	1cc7883a 	add	r3,r3,r19
1000d674:	003ecd06 	br	1000d1ac <__alt_data_end+0xf800d1ac>
1000d678:	8005883a 	mov	r2,r16
1000d67c:	003ef806 	br	1000d260 <__alt_data_end+0xf800d260>
1000d680:	873fe736 	bltu	r16,fp,1000d620 <__alt_data_end+0xf800d620>
1000d684:	e00f883a 	mov	r7,fp
1000d688:	0009883a 	mov	r4,zero
1000d68c:	003fad06 	br	1000d544 <__alt_data_end+0xf800d544>

1000d690 <__divsi3>:
1000d690:	20001b16 	blt	r4,zero,1000d700 <__divsi3+0x70>
1000d694:	000f883a 	mov	r7,zero
1000d698:	28001616 	blt	r5,zero,1000d6f4 <__divsi3+0x64>
1000d69c:	200d883a 	mov	r6,r4
1000d6a0:	29001a2e 	bgeu	r5,r4,1000d70c <__divsi3+0x7c>
1000d6a4:	00800804 	movi	r2,32
1000d6a8:	00c00044 	movi	r3,1
1000d6ac:	00000106 	br	1000d6b4 <__divsi3+0x24>
1000d6b0:	10000d26 	beq	r2,zero,1000d6e8 <__divsi3+0x58>
1000d6b4:	294b883a 	add	r5,r5,r5
1000d6b8:	10bfffc4 	addi	r2,r2,-1
1000d6bc:	18c7883a 	add	r3,r3,r3
1000d6c0:	293ffb36 	bltu	r5,r4,1000d6b0 <__alt_data_end+0xf800d6b0>
1000d6c4:	0005883a 	mov	r2,zero
1000d6c8:	18000726 	beq	r3,zero,1000d6e8 <__divsi3+0x58>
1000d6cc:	0005883a 	mov	r2,zero
1000d6d0:	31400236 	bltu	r6,r5,1000d6dc <__divsi3+0x4c>
1000d6d4:	314dc83a 	sub	r6,r6,r5
1000d6d8:	10c4b03a 	or	r2,r2,r3
1000d6dc:	1806d07a 	srli	r3,r3,1
1000d6e0:	280ad07a 	srli	r5,r5,1
1000d6e4:	183ffa1e 	bne	r3,zero,1000d6d0 <__alt_data_end+0xf800d6d0>
1000d6e8:	38000126 	beq	r7,zero,1000d6f0 <__divsi3+0x60>
1000d6ec:	0085c83a 	sub	r2,zero,r2
1000d6f0:	f800283a 	ret
1000d6f4:	014bc83a 	sub	r5,zero,r5
1000d6f8:	39c0005c 	xori	r7,r7,1
1000d6fc:	003fe706 	br	1000d69c <__alt_data_end+0xf800d69c>
1000d700:	0109c83a 	sub	r4,zero,r4
1000d704:	01c00044 	movi	r7,1
1000d708:	003fe306 	br	1000d698 <__alt_data_end+0xf800d698>
1000d70c:	00c00044 	movi	r3,1
1000d710:	003fee06 	br	1000d6cc <__alt_data_end+0xf800d6cc>

1000d714 <__modsi3>:
1000d714:	20001716 	blt	r4,zero,1000d774 <__modsi3+0x60>
1000d718:	000f883a 	mov	r7,zero
1000d71c:	2005883a 	mov	r2,r4
1000d720:	28001216 	blt	r5,zero,1000d76c <__modsi3+0x58>
1000d724:	2900162e 	bgeu	r5,r4,1000d780 <__modsi3+0x6c>
1000d728:	01800804 	movi	r6,32
1000d72c:	00c00044 	movi	r3,1
1000d730:	00000106 	br	1000d738 <__modsi3+0x24>
1000d734:	30000a26 	beq	r6,zero,1000d760 <__modsi3+0x4c>
1000d738:	294b883a 	add	r5,r5,r5
1000d73c:	31bfffc4 	addi	r6,r6,-1
1000d740:	18c7883a 	add	r3,r3,r3
1000d744:	293ffb36 	bltu	r5,r4,1000d734 <__alt_data_end+0xf800d734>
1000d748:	18000526 	beq	r3,zero,1000d760 <__modsi3+0x4c>
1000d74c:	1806d07a 	srli	r3,r3,1
1000d750:	11400136 	bltu	r2,r5,1000d758 <__modsi3+0x44>
1000d754:	1145c83a 	sub	r2,r2,r5
1000d758:	280ad07a 	srli	r5,r5,1
1000d75c:	183ffb1e 	bne	r3,zero,1000d74c <__alt_data_end+0xf800d74c>
1000d760:	38000126 	beq	r7,zero,1000d768 <__modsi3+0x54>
1000d764:	0085c83a 	sub	r2,zero,r2
1000d768:	f800283a 	ret
1000d76c:	014bc83a 	sub	r5,zero,r5
1000d770:	003fec06 	br	1000d724 <__alt_data_end+0xf800d724>
1000d774:	0109c83a 	sub	r4,zero,r4
1000d778:	01c00044 	movi	r7,1
1000d77c:	003fe706 	br	1000d71c <__alt_data_end+0xf800d71c>
1000d780:	00c00044 	movi	r3,1
1000d784:	003ff106 	br	1000d74c <__alt_data_end+0xf800d74c>

1000d788 <__udivsi3>:
1000d788:	200d883a 	mov	r6,r4
1000d78c:	2900152e 	bgeu	r5,r4,1000d7e4 <__udivsi3+0x5c>
1000d790:	28001416 	blt	r5,zero,1000d7e4 <__udivsi3+0x5c>
1000d794:	00800804 	movi	r2,32
1000d798:	00c00044 	movi	r3,1
1000d79c:	00000206 	br	1000d7a8 <__udivsi3+0x20>
1000d7a0:	10000e26 	beq	r2,zero,1000d7dc <__udivsi3+0x54>
1000d7a4:	28000516 	blt	r5,zero,1000d7bc <__udivsi3+0x34>
1000d7a8:	294b883a 	add	r5,r5,r5
1000d7ac:	10bfffc4 	addi	r2,r2,-1
1000d7b0:	18c7883a 	add	r3,r3,r3
1000d7b4:	293ffa36 	bltu	r5,r4,1000d7a0 <__alt_data_end+0xf800d7a0>
1000d7b8:	18000826 	beq	r3,zero,1000d7dc <__udivsi3+0x54>
1000d7bc:	0005883a 	mov	r2,zero
1000d7c0:	31400236 	bltu	r6,r5,1000d7cc <__udivsi3+0x44>
1000d7c4:	314dc83a 	sub	r6,r6,r5
1000d7c8:	10c4b03a 	or	r2,r2,r3
1000d7cc:	1806d07a 	srli	r3,r3,1
1000d7d0:	280ad07a 	srli	r5,r5,1
1000d7d4:	183ffa1e 	bne	r3,zero,1000d7c0 <__alt_data_end+0xf800d7c0>
1000d7d8:	f800283a 	ret
1000d7dc:	0005883a 	mov	r2,zero
1000d7e0:	f800283a 	ret
1000d7e4:	00c00044 	movi	r3,1
1000d7e8:	003ff406 	br	1000d7bc <__alt_data_end+0xf800d7bc>

1000d7ec <__umodsi3>:
1000d7ec:	2005883a 	mov	r2,r4
1000d7f0:	2900122e 	bgeu	r5,r4,1000d83c <__umodsi3+0x50>
1000d7f4:	28001116 	blt	r5,zero,1000d83c <__umodsi3+0x50>
1000d7f8:	01800804 	movi	r6,32
1000d7fc:	00c00044 	movi	r3,1
1000d800:	00000206 	br	1000d80c <__umodsi3+0x20>
1000d804:	30000c26 	beq	r6,zero,1000d838 <__umodsi3+0x4c>
1000d808:	28000516 	blt	r5,zero,1000d820 <__umodsi3+0x34>
1000d80c:	294b883a 	add	r5,r5,r5
1000d810:	31bfffc4 	addi	r6,r6,-1
1000d814:	18c7883a 	add	r3,r3,r3
1000d818:	293ffa36 	bltu	r5,r4,1000d804 <__alt_data_end+0xf800d804>
1000d81c:	18000626 	beq	r3,zero,1000d838 <__umodsi3+0x4c>
1000d820:	1806d07a 	srli	r3,r3,1
1000d824:	11400136 	bltu	r2,r5,1000d82c <__umodsi3+0x40>
1000d828:	1145c83a 	sub	r2,r2,r5
1000d82c:	280ad07a 	srli	r5,r5,1
1000d830:	183ffb1e 	bne	r3,zero,1000d820 <__alt_data_end+0xf800d820>
1000d834:	f800283a 	ret
1000d838:	f800283a 	ret
1000d83c:	00c00044 	movi	r3,1
1000d840:	003ff706 	br	1000d820 <__alt_data_end+0xf800d820>

1000d844 <__mulsi3>:
1000d844:	0005883a 	mov	r2,zero
1000d848:	20000726 	beq	r4,zero,1000d868 <__mulsi3+0x24>
1000d84c:	20c0004c 	andi	r3,r4,1
1000d850:	2008d07a 	srli	r4,r4,1
1000d854:	18000126 	beq	r3,zero,1000d85c <__mulsi3+0x18>
1000d858:	1145883a 	add	r2,r2,r5
1000d85c:	294b883a 	add	r5,r5,r5
1000d860:	203ffa1e 	bne	r4,zero,1000d84c <__alt_data_end+0xf800d84c>
1000d864:	f800283a 	ret
1000d868:	f800283a 	ret

1000d86c <__adddf3>:
1000d86c:	02c00434 	movhi	r11,16
1000d870:	5affffc4 	addi	r11,r11,-1
1000d874:	2806d7fa 	srli	r3,r5,31
1000d878:	2ad4703a 	and	r10,r5,r11
1000d87c:	3ad2703a 	and	r9,r7,r11
1000d880:	3804d53a 	srli	r2,r7,20
1000d884:	3018d77a 	srli	r12,r6,29
1000d888:	280ad53a 	srli	r5,r5,20
1000d88c:	501490fa 	slli	r10,r10,3
1000d890:	2010d77a 	srli	r8,r4,29
1000d894:	481290fa 	slli	r9,r9,3
1000d898:	380ed7fa 	srli	r7,r7,31
1000d89c:	defffb04 	addi	sp,sp,-20
1000d8a0:	dc800215 	stw	r18,8(sp)
1000d8a4:	dc400115 	stw	r17,4(sp)
1000d8a8:	dc000015 	stw	r16,0(sp)
1000d8ac:	dfc00415 	stw	ra,16(sp)
1000d8b0:	dcc00315 	stw	r19,12(sp)
1000d8b4:	1c803fcc 	andi	r18,r3,255
1000d8b8:	2c01ffcc 	andi	r16,r5,2047
1000d8bc:	5210b03a 	or	r8,r10,r8
1000d8c0:	202290fa 	slli	r17,r4,3
1000d8c4:	1081ffcc 	andi	r2,r2,2047
1000d8c8:	4b12b03a 	or	r9,r9,r12
1000d8cc:	300c90fa 	slli	r6,r6,3
1000d8d0:	91c07526 	beq	r18,r7,1000daa8 <__adddf3+0x23c>
1000d8d4:	8087c83a 	sub	r3,r16,r2
1000d8d8:	00c0ab0e 	bge	zero,r3,1000db88 <__adddf3+0x31c>
1000d8dc:	10002a1e 	bne	r2,zero,1000d988 <__adddf3+0x11c>
1000d8e0:	4984b03a 	or	r2,r9,r6
1000d8e4:	1000961e 	bne	r2,zero,1000db40 <__adddf3+0x2d4>
1000d8e8:	888001cc 	andi	r2,r17,7
1000d8ec:	10000726 	beq	r2,zero,1000d90c <__adddf3+0xa0>
1000d8f0:	888003cc 	andi	r2,r17,15
1000d8f4:	00c00104 	movi	r3,4
1000d8f8:	10c00426 	beq	r2,r3,1000d90c <__adddf3+0xa0>
1000d8fc:	88c7883a 	add	r3,r17,r3
1000d900:	1c63803a 	cmpltu	r17,r3,r17
1000d904:	4451883a 	add	r8,r8,r17
1000d908:	1823883a 	mov	r17,r3
1000d90c:	4080202c 	andhi	r2,r8,128
1000d910:	10005926 	beq	r2,zero,1000da78 <__adddf3+0x20c>
1000d914:	84000044 	addi	r16,r16,1
1000d918:	0081ffc4 	movi	r2,2047
1000d91c:	8080ba26 	beq	r16,r2,1000dc08 <__adddf3+0x39c>
1000d920:	00bfe034 	movhi	r2,65408
1000d924:	10bfffc4 	addi	r2,r2,-1
1000d928:	4090703a 	and	r8,r8,r2
1000d92c:	4004977a 	slli	r2,r8,29
1000d930:	4010927a 	slli	r8,r8,9
1000d934:	8822d0fa 	srli	r17,r17,3
1000d938:	8401ffcc 	andi	r16,r16,2047
1000d93c:	4010d33a 	srli	r8,r8,12
1000d940:	9007883a 	mov	r3,r18
1000d944:	1444b03a 	or	r2,r2,r17
1000d948:	8401ffcc 	andi	r16,r16,2047
1000d94c:	8020953a 	slli	r16,r16,20
1000d950:	18c03fcc 	andi	r3,r3,255
1000d954:	01000434 	movhi	r4,16
1000d958:	213fffc4 	addi	r4,r4,-1
1000d95c:	180697fa 	slli	r3,r3,31
1000d960:	4110703a 	and	r8,r8,r4
1000d964:	4410b03a 	or	r8,r8,r16
1000d968:	40c6b03a 	or	r3,r8,r3
1000d96c:	dfc00417 	ldw	ra,16(sp)
1000d970:	dcc00317 	ldw	r19,12(sp)
1000d974:	dc800217 	ldw	r18,8(sp)
1000d978:	dc400117 	ldw	r17,4(sp)
1000d97c:	dc000017 	ldw	r16,0(sp)
1000d980:	dec00504 	addi	sp,sp,20
1000d984:	f800283a 	ret
1000d988:	0081ffc4 	movi	r2,2047
1000d98c:	80bfd626 	beq	r16,r2,1000d8e8 <__alt_data_end+0xf800d8e8>
1000d990:	4a402034 	orhi	r9,r9,128
1000d994:	00800e04 	movi	r2,56
1000d998:	10c09f16 	blt	r2,r3,1000dc18 <__adddf3+0x3ac>
1000d99c:	008007c4 	movi	r2,31
1000d9a0:	10c0c216 	blt	r2,r3,1000dcac <__adddf3+0x440>
1000d9a4:	00800804 	movi	r2,32
1000d9a8:	10c5c83a 	sub	r2,r2,r3
1000d9ac:	488a983a 	sll	r5,r9,r2
1000d9b0:	30c8d83a 	srl	r4,r6,r3
1000d9b4:	3084983a 	sll	r2,r6,r2
1000d9b8:	48c6d83a 	srl	r3,r9,r3
1000d9bc:	290cb03a 	or	r6,r5,r4
1000d9c0:	1004c03a 	cmpne	r2,r2,zero
1000d9c4:	308cb03a 	or	r6,r6,r2
1000d9c8:	898dc83a 	sub	r6,r17,r6
1000d9cc:	89a3803a 	cmpltu	r17,r17,r6
1000d9d0:	40d1c83a 	sub	r8,r8,r3
1000d9d4:	4451c83a 	sub	r8,r8,r17
1000d9d8:	3023883a 	mov	r17,r6
1000d9dc:	4080202c 	andhi	r2,r8,128
1000d9e0:	10002326 	beq	r2,zero,1000da70 <__adddf3+0x204>
1000d9e4:	04c02034 	movhi	r19,128
1000d9e8:	9cffffc4 	addi	r19,r19,-1
1000d9ec:	44e6703a 	and	r19,r8,r19
1000d9f0:	98007626 	beq	r19,zero,1000dbcc <__adddf3+0x360>
1000d9f4:	9809883a 	mov	r4,r19
1000d9f8:	00100ac0 	call	100100ac <__clzsi2>
1000d9fc:	10fffe04 	addi	r3,r2,-8
1000da00:	010007c4 	movi	r4,31
1000da04:	20c07716 	blt	r4,r3,1000dbe4 <__adddf3+0x378>
1000da08:	00800804 	movi	r2,32
1000da0c:	10c5c83a 	sub	r2,r2,r3
1000da10:	8884d83a 	srl	r2,r17,r2
1000da14:	98d0983a 	sll	r8,r19,r3
1000da18:	88e2983a 	sll	r17,r17,r3
1000da1c:	1204b03a 	or	r2,r2,r8
1000da20:	1c007416 	blt	r3,r16,1000dbf4 <__adddf3+0x388>
1000da24:	1c21c83a 	sub	r16,r3,r16
1000da28:	82000044 	addi	r8,r16,1
1000da2c:	00c007c4 	movi	r3,31
1000da30:	1a009116 	blt	r3,r8,1000dc78 <__adddf3+0x40c>
1000da34:	00c00804 	movi	r3,32
1000da38:	1a07c83a 	sub	r3,r3,r8
1000da3c:	8a08d83a 	srl	r4,r17,r8
1000da40:	88e2983a 	sll	r17,r17,r3
1000da44:	10c6983a 	sll	r3,r2,r3
1000da48:	1210d83a 	srl	r8,r2,r8
1000da4c:	8804c03a 	cmpne	r2,r17,zero
1000da50:	1906b03a 	or	r3,r3,r4
1000da54:	18a2b03a 	or	r17,r3,r2
1000da58:	0021883a 	mov	r16,zero
1000da5c:	003fa206 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000da60:	1890b03a 	or	r8,r3,r2
1000da64:	40017d26 	beq	r8,zero,1000e05c <__adddf3+0x7f0>
1000da68:	1011883a 	mov	r8,r2
1000da6c:	1823883a 	mov	r17,r3
1000da70:	888001cc 	andi	r2,r17,7
1000da74:	103f9e1e 	bne	r2,zero,1000d8f0 <__alt_data_end+0xf800d8f0>
1000da78:	4004977a 	slli	r2,r8,29
1000da7c:	8822d0fa 	srli	r17,r17,3
1000da80:	4010d0fa 	srli	r8,r8,3
1000da84:	9007883a 	mov	r3,r18
1000da88:	1444b03a 	or	r2,r2,r17
1000da8c:	0101ffc4 	movi	r4,2047
1000da90:	81002426 	beq	r16,r4,1000db24 <__adddf3+0x2b8>
1000da94:	8120703a 	and	r16,r16,r4
1000da98:	01000434 	movhi	r4,16
1000da9c:	213fffc4 	addi	r4,r4,-1
1000daa0:	4110703a 	and	r8,r8,r4
1000daa4:	003fa806 	br	1000d948 <__alt_data_end+0xf800d948>
1000daa8:	8089c83a 	sub	r4,r16,r2
1000daac:	01005e0e 	bge	zero,r4,1000dc28 <__adddf3+0x3bc>
1000dab0:	10002b26 	beq	r2,zero,1000db60 <__adddf3+0x2f4>
1000dab4:	0081ffc4 	movi	r2,2047
1000dab8:	80bf8b26 	beq	r16,r2,1000d8e8 <__alt_data_end+0xf800d8e8>
1000dabc:	4a402034 	orhi	r9,r9,128
1000dac0:	00800e04 	movi	r2,56
1000dac4:	1100a40e 	bge	r2,r4,1000dd58 <__adddf3+0x4ec>
1000dac8:	498cb03a 	or	r6,r9,r6
1000dacc:	300ac03a 	cmpne	r5,r6,zero
1000dad0:	0013883a 	mov	r9,zero
1000dad4:	2c4b883a 	add	r5,r5,r17
1000dad8:	2c63803a 	cmpltu	r17,r5,r17
1000dadc:	4a11883a 	add	r8,r9,r8
1000dae0:	8a11883a 	add	r8,r17,r8
1000dae4:	2823883a 	mov	r17,r5
1000dae8:	4080202c 	andhi	r2,r8,128
1000daec:	103fe026 	beq	r2,zero,1000da70 <__alt_data_end+0xf800da70>
1000daf0:	84000044 	addi	r16,r16,1
1000daf4:	0081ffc4 	movi	r2,2047
1000daf8:	8080d226 	beq	r16,r2,1000de44 <__adddf3+0x5d8>
1000dafc:	00bfe034 	movhi	r2,65408
1000db00:	10bfffc4 	addi	r2,r2,-1
1000db04:	4090703a 	and	r8,r8,r2
1000db08:	880ad07a 	srli	r5,r17,1
1000db0c:	400897fa 	slli	r4,r8,31
1000db10:	88c0004c 	andi	r3,r17,1
1000db14:	28e2b03a 	or	r17,r5,r3
1000db18:	4010d07a 	srli	r8,r8,1
1000db1c:	2462b03a 	or	r17,r4,r17
1000db20:	003f7106 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000db24:	4088b03a 	or	r4,r8,r2
1000db28:	20014526 	beq	r4,zero,1000e040 <__adddf3+0x7d4>
1000db2c:	01000434 	movhi	r4,16
1000db30:	42000234 	orhi	r8,r8,8
1000db34:	213fffc4 	addi	r4,r4,-1
1000db38:	4110703a 	and	r8,r8,r4
1000db3c:	003f8206 	br	1000d948 <__alt_data_end+0xf800d948>
1000db40:	18ffffc4 	addi	r3,r3,-1
1000db44:	1800491e 	bne	r3,zero,1000dc6c <__adddf3+0x400>
1000db48:	898bc83a 	sub	r5,r17,r6
1000db4c:	8963803a 	cmpltu	r17,r17,r5
1000db50:	4251c83a 	sub	r8,r8,r9
1000db54:	4451c83a 	sub	r8,r8,r17
1000db58:	2823883a 	mov	r17,r5
1000db5c:	003f9f06 	br	1000d9dc <__alt_data_end+0xf800d9dc>
1000db60:	4984b03a 	or	r2,r9,r6
1000db64:	103f6026 	beq	r2,zero,1000d8e8 <__alt_data_end+0xf800d8e8>
1000db68:	213fffc4 	addi	r4,r4,-1
1000db6c:	2000931e 	bne	r4,zero,1000ddbc <__adddf3+0x550>
1000db70:	898d883a 	add	r6,r17,r6
1000db74:	3463803a 	cmpltu	r17,r6,r17
1000db78:	4251883a 	add	r8,r8,r9
1000db7c:	8a11883a 	add	r8,r17,r8
1000db80:	3023883a 	mov	r17,r6
1000db84:	003fd806 	br	1000dae8 <__alt_data_end+0xf800dae8>
1000db88:	1800541e 	bne	r3,zero,1000dcdc <__adddf3+0x470>
1000db8c:	80800044 	addi	r2,r16,1
1000db90:	1081ffcc 	andi	r2,r2,2047
1000db94:	00c00044 	movi	r3,1
1000db98:	1880a00e 	bge	r3,r2,1000de1c <__adddf3+0x5b0>
1000db9c:	8989c83a 	sub	r4,r17,r6
1000dba0:	8905803a 	cmpltu	r2,r17,r4
1000dba4:	4267c83a 	sub	r19,r8,r9
1000dba8:	98a7c83a 	sub	r19,r19,r2
1000dbac:	9880202c 	andhi	r2,r19,128
1000dbb0:	10006326 	beq	r2,zero,1000dd40 <__adddf3+0x4d4>
1000dbb4:	3463c83a 	sub	r17,r6,r17
1000dbb8:	4a07c83a 	sub	r3,r9,r8
1000dbbc:	344d803a 	cmpltu	r6,r6,r17
1000dbc0:	19a7c83a 	sub	r19,r3,r6
1000dbc4:	3825883a 	mov	r18,r7
1000dbc8:	983f8a1e 	bne	r19,zero,1000d9f4 <__alt_data_end+0xf800d9f4>
1000dbcc:	8809883a 	mov	r4,r17
1000dbd0:	00100ac0 	call	100100ac <__clzsi2>
1000dbd4:	10800804 	addi	r2,r2,32
1000dbd8:	10fffe04 	addi	r3,r2,-8
1000dbdc:	010007c4 	movi	r4,31
1000dbe0:	20ff890e 	bge	r4,r3,1000da08 <__alt_data_end+0xf800da08>
1000dbe4:	10bff604 	addi	r2,r2,-40
1000dbe8:	8884983a 	sll	r2,r17,r2
1000dbec:	0023883a 	mov	r17,zero
1000dbf0:	1c3f8c0e 	bge	r3,r16,1000da24 <__alt_data_end+0xf800da24>
1000dbf4:	023fe034 	movhi	r8,65408
1000dbf8:	423fffc4 	addi	r8,r8,-1
1000dbfc:	80e1c83a 	sub	r16,r16,r3
1000dc00:	1210703a 	and	r8,r2,r8
1000dc04:	003f3806 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000dc08:	9007883a 	mov	r3,r18
1000dc0c:	0011883a 	mov	r8,zero
1000dc10:	0005883a 	mov	r2,zero
1000dc14:	003f4c06 	br	1000d948 <__alt_data_end+0xf800d948>
1000dc18:	498cb03a 	or	r6,r9,r6
1000dc1c:	300cc03a 	cmpne	r6,r6,zero
1000dc20:	0007883a 	mov	r3,zero
1000dc24:	003f6806 	br	1000d9c8 <__alt_data_end+0xf800d9c8>
1000dc28:	20009c1e 	bne	r4,zero,1000de9c <__adddf3+0x630>
1000dc2c:	80800044 	addi	r2,r16,1
1000dc30:	1141ffcc 	andi	r5,r2,2047
1000dc34:	01000044 	movi	r4,1
1000dc38:	2140670e 	bge	r4,r5,1000ddd8 <__adddf3+0x56c>
1000dc3c:	0101ffc4 	movi	r4,2047
1000dc40:	11007f26 	beq	r2,r4,1000de40 <__adddf3+0x5d4>
1000dc44:	898d883a 	add	r6,r17,r6
1000dc48:	4247883a 	add	r3,r8,r9
1000dc4c:	3451803a 	cmpltu	r8,r6,r17
1000dc50:	40d1883a 	add	r8,r8,r3
1000dc54:	402297fa 	slli	r17,r8,31
1000dc58:	300cd07a 	srli	r6,r6,1
1000dc5c:	4010d07a 	srli	r8,r8,1
1000dc60:	1021883a 	mov	r16,r2
1000dc64:	89a2b03a 	or	r17,r17,r6
1000dc68:	003f1f06 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000dc6c:	0081ffc4 	movi	r2,2047
1000dc70:	80bf481e 	bne	r16,r2,1000d994 <__alt_data_end+0xf800d994>
1000dc74:	003f1c06 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000dc78:	843ff844 	addi	r16,r16,-31
1000dc7c:	01000804 	movi	r4,32
1000dc80:	1406d83a 	srl	r3,r2,r16
1000dc84:	41005026 	beq	r8,r4,1000ddc8 <__adddf3+0x55c>
1000dc88:	01001004 	movi	r4,64
1000dc8c:	2211c83a 	sub	r8,r4,r8
1000dc90:	1204983a 	sll	r2,r2,r8
1000dc94:	88a2b03a 	or	r17,r17,r2
1000dc98:	8822c03a 	cmpne	r17,r17,zero
1000dc9c:	1c62b03a 	or	r17,r3,r17
1000dca0:	0011883a 	mov	r8,zero
1000dca4:	0021883a 	mov	r16,zero
1000dca8:	003f7106 	br	1000da70 <__alt_data_end+0xf800da70>
1000dcac:	193ff804 	addi	r4,r3,-32
1000dcb0:	00800804 	movi	r2,32
1000dcb4:	4908d83a 	srl	r4,r9,r4
1000dcb8:	18804526 	beq	r3,r2,1000ddd0 <__adddf3+0x564>
1000dcbc:	00801004 	movi	r2,64
1000dcc0:	10c5c83a 	sub	r2,r2,r3
1000dcc4:	4886983a 	sll	r3,r9,r2
1000dcc8:	198cb03a 	or	r6,r3,r6
1000dccc:	300cc03a 	cmpne	r6,r6,zero
1000dcd0:	218cb03a 	or	r6,r4,r6
1000dcd4:	0007883a 	mov	r3,zero
1000dcd8:	003f3b06 	br	1000d9c8 <__alt_data_end+0xf800d9c8>
1000dcdc:	80002a26 	beq	r16,zero,1000dd88 <__adddf3+0x51c>
1000dce0:	0101ffc4 	movi	r4,2047
1000dce4:	11006826 	beq	r2,r4,1000de88 <__adddf3+0x61c>
1000dce8:	00c7c83a 	sub	r3,zero,r3
1000dcec:	42002034 	orhi	r8,r8,128
1000dcf0:	01000e04 	movi	r4,56
1000dcf4:	20c07c16 	blt	r4,r3,1000dee8 <__adddf3+0x67c>
1000dcf8:	010007c4 	movi	r4,31
1000dcfc:	20c0da16 	blt	r4,r3,1000e068 <__adddf3+0x7fc>
1000dd00:	01000804 	movi	r4,32
1000dd04:	20c9c83a 	sub	r4,r4,r3
1000dd08:	4114983a 	sll	r10,r8,r4
1000dd0c:	88cad83a 	srl	r5,r17,r3
1000dd10:	8908983a 	sll	r4,r17,r4
1000dd14:	40c6d83a 	srl	r3,r8,r3
1000dd18:	5162b03a 	or	r17,r10,r5
1000dd1c:	2008c03a 	cmpne	r4,r4,zero
1000dd20:	8922b03a 	or	r17,r17,r4
1000dd24:	3463c83a 	sub	r17,r6,r17
1000dd28:	48c7c83a 	sub	r3,r9,r3
1000dd2c:	344d803a 	cmpltu	r6,r6,r17
1000dd30:	1991c83a 	sub	r8,r3,r6
1000dd34:	1021883a 	mov	r16,r2
1000dd38:	3825883a 	mov	r18,r7
1000dd3c:	003f2706 	br	1000d9dc <__alt_data_end+0xf800d9dc>
1000dd40:	24d0b03a 	or	r8,r4,r19
1000dd44:	40001b1e 	bne	r8,zero,1000ddb4 <__adddf3+0x548>
1000dd48:	0005883a 	mov	r2,zero
1000dd4c:	0007883a 	mov	r3,zero
1000dd50:	0021883a 	mov	r16,zero
1000dd54:	003f4d06 	br	1000da8c <__alt_data_end+0xf800da8c>
1000dd58:	008007c4 	movi	r2,31
1000dd5c:	11003c16 	blt	r2,r4,1000de50 <__adddf3+0x5e4>
1000dd60:	00800804 	movi	r2,32
1000dd64:	1105c83a 	sub	r2,r2,r4
1000dd68:	488e983a 	sll	r7,r9,r2
1000dd6c:	310ad83a 	srl	r5,r6,r4
1000dd70:	3084983a 	sll	r2,r6,r2
1000dd74:	4912d83a 	srl	r9,r9,r4
1000dd78:	394ab03a 	or	r5,r7,r5
1000dd7c:	1004c03a 	cmpne	r2,r2,zero
1000dd80:	288ab03a 	or	r5,r5,r2
1000dd84:	003f5306 	br	1000dad4 <__alt_data_end+0xf800dad4>
1000dd88:	4448b03a 	or	r4,r8,r17
1000dd8c:	20003e26 	beq	r4,zero,1000de88 <__adddf3+0x61c>
1000dd90:	00c6303a 	nor	r3,zero,r3
1000dd94:	18003a1e 	bne	r3,zero,1000de80 <__adddf3+0x614>
1000dd98:	3463c83a 	sub	r17,r6,r17
1000dd9c:	4a07c83a 	sub	r3,r9,r8
1000dda0:	344d803a 	cmpltu	r6,r6,r17
1000dda4:	1991c83a 	sub	r8,r3,r6
1000dda8:	1021883a 	mov	r16,r2
1000ddac:	3825883a 	mov	r18,r7
1000ddb0:	003f0a06 	br	1000d9dc <__alt_data_end+0xf800d9dc>
1000ddb4:	2023883a 	mov	r17,r4
1000ddb8:	003f0d06 	br	1000d9f0 <__alt_data_end+0xf800d9f0>
1000ddbc:	0081ffc4 	movi	r2,2047
1000ddc0:	80bf3f1e 	bne	r16,r2,1000dac0 <__alt_data_end+0xf800dac0>
1000ddc4:	003ec806 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000ddc8:	0005883a 	mov	r2,zero
1000ddcc:	003fb106 	br	1000dc94 <__alt_data_end+0xf800dc94>
1000ddd0:	0007883a 	mov	r3,zero
1000ddd4:	003fbc06 	br	1000dcc8 <__alt_data_end+0xf800dcc8>
1000ddd8:	4444b03a 	or	r2,r8,r17
1000dddc:	8000871e 	bne	r16,zero,1000dffc <__adddf3+0x790>
1000dde0:	1000ba26 	beq	r2,zero,1000e0cc <__adddf3+0x860>
1000dde4:	4984b03a 	or	r2,r9,r6
1000dde8:	103ebf26 	beq	r2,zero,1000d8e8 <__alt_data_end+0xf800d8e8>
1000ddec:	8985883a 	add	r2,r17,r6
1000ddf0:	4247883a 	add	r3,r8,r9
1000ddf4:	1451803a 	cmpltu	r8,r2,r17
1000ddf8:	40d1883a 	add	r8,r8,r3
1000ddfc:	40c0202c 	andhi	r3,r8,128
1000de00:	1023883a 	mov	r17,r2
1000de04:	183f1a26 	beq	r3,zero,1000da70 <__alt_data_end+0xf800da70>
1000de08:	00bfe034 	movhi	r2,65408
1000de0c:	10bfffc4 	addi	r2,r2,-1
1000de10:	2021883a 	mov	r16,r4
1000de14:	4090703a 	and	r8,r8,r2
1000de18:	003eb306 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000de1c:	4444b03a 	or	r2,r8,r17
1000de20:	8000291e 	bne	r16,zero,1000dec8 <__adddf3+0x65c>
1000de24:	10004b1e 	bne	r2,zero,1000df54 <__adddf3+0x6e8>
1000de28:	4990b03a 	or	r8,r9,r6
1000de2c:	40008b26 	beq	r8,zero,1000e05c <__adddf3+0x7f0>
1000de30:	4811883a 	mov	r8,r9
1000de34:	3023883a 	mov	r17,r6
1000de38:	3825883a 	mov	r18,r7
1000de3c:	003eaa06 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000de40:	1021883a 	mov	r16,r2
1000de44:	0011883a 	mov	r8,zero
1000de48:	0005883a 	mov	r2,zero
1000de4c:	003f0f06 	br	1000da8c <__alt_data_end+0xf800da8c>
1000de50:	217ff804 	addi	r5,r4,-32
1000de54:	00800804 	movi	r2,32
1000de58:	494ad83a 	srl	r5,r9,r5
1000de5c:	20807d26 	beq	r4,r2,1000e054 <__adddf3+0x7e8>
1000de60:	00801004 	movi	r2,64
1000de64:	1109c83a 	sub	r4,r2,r4
1000de68:	4912983a 	sll	r9,r9,r4
1000de6c:	498cb03a 	or	r6,r9,r6
1000de70:	300cc03a 	cmpne	r6,r6,zero
1000de74:	298ab03a 	or	r5,r5,r6
1000de78:	0013883a 	mov	r9,zero
1000de7c:	003f1506 	br	1000dad4 <__alt_data_end+0xf800dad4>
1000de80:	0101ffc4 	movi	r4,2047
1000de84:	113f9a1e 	bne	r2,r4,1000dcf0 <__alt_data_end+0xf800dcf0>
1000de88:	4811883a 	mov	r8,r9
1000de8c:	3023883a 	mov	r17,r6
1000de90:	1021883a 	mov	r16,r2
1000de94:	3825883a 	mov	r18,r7
1000de98:	003e9306 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000de9c:	8000161e 	bne	r16,zero,1000def8 <__adddf3+0x68c>
1000dea0:	444ab03a 	or	r5,r8,r17
1000dea4:	28005126 	beq	r5,zero,1000dfec <__adddf3+0x780>
1000dea8:	0108303a 	nor	r4,zero,r4
1000deac:	20004d1e 	bne	r4,zero,1000dfe4 <__adddf3+0x778>
1000deb0:	89a3883a 	add	r17,r17,r6
1000deb4:	4253883a 	add	r9,r8,r9
1000deb8:	898d803a 	cmpltu	r6,r17,r6
1000debc:	3251883a 	add	r8,r6,r9
1000dec0:	1021883a 	mov	r16,r2
1000dec4:	003f0806 	br	1000dae8 <__alt_data_end+0xf800dae8>
1000dec8:	1000301e 	bne	r2,zero,1000df8c <__adddf3+0x720>
1000decc:	4984b03a 	or	r2,r9,r6
1000ded0:	10007126 	beq	r2,zero,1000e098 <__adddf3+0x82c>
1000ded4:	4811883a 	mov	r8,r9
1000ded8:	3023883a 	mov	r17,r6
1000dedc:	3825883a 	mov	r18,r7
1000dee0:	0401ffc4 	movi	r16,2047
1000dee4:	003e8006 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000dee8:	4462b03a 	or	r17,r8,r17
1000deec:	8822c03a 	cmpne	r17,r17,zero
1000def0:	0007883a 	mov	r3,zero
1000def4:	003f8b06 	br	1000dd24 <__alt_data_end+0xf800dd24>
1000def8:	0141ffc4 	movi	r5,2047
1000defc:	11403b26 	beq	r2,r5,1000dfec <__adddf3+0x780>
1000df00:	0109c83a 	sub	r4,zero,r4
1000df04:	42002034 	orhi	r8,r8,128
1000df08:	01400e04 	movi	r5,56
1000df0c:	29006716 	blt	r5,r4,1000e0ac <__adddf3+0x840>
1000df10:	014007c4 	movi	r5,31
1000df14:	29007016 	blt	r5,r4,1000e0d8 <__adddf3+0x86c>
1000df18:	01400804 	movi	r5,32
1000df1c:	290bc83a 	sub	r5,r5,r4
1000df20:	4154983a 	sll	r10,r8,r5
1000df24:	890ed83a 	srl	r7,r17,r4
1000df28:	894a983a 	sll	r5,r17,r5
1000df2c:	4108d83a 	srl	r4,r8,r4
1000df30:	51e2b03a 	or	r17,r10,r7
1000df34:	280ac03a 	cmpne	r5,r5,zero
1000df38:	8962b03a 	or	r17,r17,r5
1000df3c:	89a3883a 	add	r17,r17,r6
1000df40:	2253883a 	add	r9,r4,r9
1000df44:	898d803a 	cmpltu	r6,r17,r6
1000df48:	3251883a 	add	r8,r6,r9
1000df4c:	1021883a 	mov	r16,r2
1000df50:	003ee506 	br	1000dae8 <__alt_data_end+0xf800dae8>
1000df54:	4984b03a 	or	r2,r9,r6
1000df58:	103e6326 	beq	r2,zero,1000d8e8 <__alt_data_end+0xf800d8e8>
1000df5c:	8987c83a 	sub	r3,r17,r6
1000df60:	88c9803a 	cmpltu	r4,r17,r3
1000df64:	4245c83a 	sub	r2,r8,r9
1000df68:	1105c83a 	sub	r2,r2,r4
1000df6c:	1100202c 	andhi	r4,r2,128
1000df70:	203ebb26 	beq	r4,zero,1000da60 <__alt_data_end+0xf800da60>
1000df74:	3463c83a 	sub	r17,r6,r17
1000df78:	4a07c83a 	sub	r3,r9,r8
1000df7c:	344d803a 	cmpltu	r6,r6,r17
1000df80:	1991c83a 	sub	r8,r3,r6
1000df84:	3825883a 	mov	r18,r7
1000df88:	003e5706 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000df8c:	4984b03a 	or	r2,r9,r6
1000df90:	10002e26 	beq	r2,zero,1000e04c <__adddf3+0x7e0>
1000df94:	4004d0fa 	srli	r2,r8,3
1000df98:	8822d0fa 	srli	r17,r17,3
1000df9c:	4010977a 	slli	r8,r8,29
1000dfa0:	10c0022c 	andhi	r3,r2,8
1000dfa4:	4462b03a 	or	r17,r8,r17
1000dfa8:	18000826 	beq	r3,zero,1000dfcc <__adddf3+0x760>
1000dfac:	4808d0fa 	srli	r4,r9,3
1000dfb0:	20c0022c 	andhi	r3,r4,8
1000dfb4:	1800051e 	bne	r3,zero,1000dfcc <__adddf3+0x760>
1000dfb8:	300cd0fa 	srli	r6,r6,3
1000dfbc:	4806977a 	slli	r3,r9,29
1000dfc0:	2005883a 	mov	r2,r4
1000dfc4:	3825883a 	mov	r18,r7
1000dfc8:	19a2b03a 	or	r17,r3,r6
1000dfcc:	8810d77a 	srli	r8,r17,29
1000dfd0:	100490fa 	slli	r2,r2,3
1000dfd4:	882290fa 	slli	r17,r17,3
1000dfd8:	0401ffc4 	movi	r16,2047
1000dfdc:	4090b03a 	or	r8,r8,r2
1000dfe0:	003e4106 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000dfe4:	0141ffc4 	movi	r5,2047
1000dfe8:	117fc71e 	bne	r2,r5,1000df08 <__alt_data_end+0xf800df08>
1000dfec:	4811883a 	mov	r8,r9
1000dff0:	3023883a 	mov	r17,r6
1000dff4:	1021883a 	mov	r16,r2
1000dff8:	003e3b06 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000dffc:	10002f26 	beq	r2,zero,1000e0bc <__adddf3+0x850>
1000e000:	4984b03a 	or	r2,r9,r6
1000e004:	10001126 	beq	r2,zero,1000e04c <__adddf3+0x7e0>
1000e008:	4004d0fa 	srli	r2,r8,3
1000e00c:	8822d0fa 	srli	r17,r17,3
1000e010:	4010977a 	slli	r8,r8,29
1000e014:	10c0022c 	andhi	r3,r2,8
1000e018:	4462b03a 	or	r17,r8,r17
1000e01c:	183feb26 	beq	r3,zero,1000dfcc <__alt_data_end+0xf800dfcc>
1000e020:	4808d0fa 	srli	r4,r9,3
1000e024:	20c0022c 	andhi	r3,r4,8
1000e028:	183fe81e 	bne	r3,zero,1000dfcc <__alt_data_end+0xf800dfcc>
1000e02c:	300cd0fa 	srli	r6,r6,3
1000e030:	4806977a 	slli	r3,r9,29
1000e034:	2005883a 	mov	r2,r4
1000e038:	19a2b03a 	or	r17,r3,r6
1000e03c:	003fe306 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e040:	0011883a 	mov	r8,zero
1000e044:	0005883a 	mov	r2,zero
1000e048:	003e3f06 	br	1000d948 <__alt_data_end+0xf800d948>
1000e04c:	0401ffc4 	movi	r16,2047
1000e050:	003e2506 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000e054:	0013883a 	mov	r9,zero
1000e058:	003f8406 	br	1000de6c <__alt_data_end+0xf800de6c>
1000e05c:	0005883a 	mov	r2,zero
1000e060:	0007883a 	mov	r3,zero
1000e064:	003e8906 	br	1000da8c <__alt_data_end+0xf800da8c>
1000e068:	197ff804 	addi	r5,r3,-32
1000e06c:	01000804 	movi	r4,32
1000e070:	414ad83a 	srl	r5,r8,r5
1000e074:	19002426 	beq	r3,r4,1000e108 <__adddf3+0x89c>
1000e078:	01001004 	movi	r4,64
1000e07c:	20c7c83a 	sub	r3,r4,r3
1000e080:	40c6983a 	sll	r3,r8,r3
1000e084:	1c46b03a 	or	r3,r3,r17
1000e088:	1806c03a 	cmpne	r3,r3,zero
1000e08c:	28e2b03a 	or	r17,r5,r3
1000e090:	0007883a 	mov	r3,zero
1000e094:	003f2306 	br	1000dd24 <__alt_data_end+0xf800dd24>
1000e098:	0007883a 	mov	r3,zero
1000e09c:	5811883a 	mov	r8,r11
1000e0a0:	00bfffc4 	movi	r2,-1
1000e0a4:	0401ffc4 	movi	r16,2047
1000e0a8:	003e7806 	br	1000da8c <__alt_data_end+0xf800da8c>
1000e0ac:	4462b03a 	or	r17,r8,r17
1000e0b0:	8822c03a 	cmpne	r17,r17,zero
1000e0b4:	0009883a 	mov	r4,zero
1000e0b8:	003fa006 	br	1000df3c <__alt_data_end+0xf800df3c>
1000e0bc:	4811883a 	mov	r8,r9
1000e0c0:	3023883a 	mov	r17,r6
1000e0c4:	0401ffc4 	movi	r16,2047
1000e0c8:	003e0706 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000e0cc:	4811883a 	mov	r8,r9
1000e0d0:	3023883a 	mov	r17,r6
1000e0d4:	003e0406 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000e0d8:	21fff804 	addi	r7,r4,-32
1000e0dc:	01400804 	movi	r5,32
1000e0e0:	41ced83a 	srl	r7,r8,r7
1000e0e4:	21400a26 	beq	r4,r5,1000e110 <__adddf3+0x8a4>
1000e0e8:	01401004 	movi	r5,64
1000e0ec:	2909c83a 	sub	r4,r5,r4
1000e0f0:	4108983a 	sll	r4,r8,r4
1000e0f4:	2448b03a 	or	r4,r4,r17
1000e0f8:	2008c03a 	cmpne	r4,r4,zero
1000e0fc:	3922b03a 	or	r17,r7,r4
1000e100:	0009883a 	mov	r4,zero
1000e104:	003f8d06 	br	1000df3c <__alt_data_end+0xf800df3c>
1000e108:	0007883a 	mov	r3,zero
1000e10c:	003fdd06 	br	1000e084 <__alt_data_end+0xf800e084>
1000e110:	0009883a 	mov	r4,zero
1000e114:	003ff706 	br	1000e0f4 <__alt_data_end+0xf800e0f4>

1000e118 <__divdf3>:
1000e118:	defff004 	addi	sp,sp,-64
1000e11c:	dc800815 	stw	r18,32(sp)
1000e120:	2824d53a 	srli	r18,r5,20
1000e124:	dd800c15 	stw	r22,48(sp)
1000e128:	282cd7fa 	srli	r22,r5,31
1000e12c:	dc000615 	stw	r16,24(sp)
1000e130:	04000434 	movhi	r16,16
1000e134:	843fffc4 	addi	r16,r16,-1
1000e138:	dfc00f15 	stw	ra,60(sp)
1000e13c:	df000e15 	stw	fp,56(sp)
1000e140:	ddc00d15 	stw	r23,52(sp)
1000e144:	dd400b15 	stw	r21,44(sp)
1000e148:	dd000a15 	stw	r20,40(sp)
1000e14c:	dcc00915 	stw	r19,36(sp)
1000e150:	dc400715 	stw	r17,28(sp)
1000e154:	9481ffcc 	andi	r18,r18,2047
1000e158:	2c20703a 	and	r16,r5,r16
1000e15c:	b2003fcc 	andi	r8,r22,255
1000e160:	90006126 	beq	r18,zero,1000e2e8 <__divdf3+0x1d0>
1000e164:	0081ffc4 	movi	r2,2047
1000e168:	202b883a 	mov	r21,r4
1000e16c:	90803726 	beq	r18,r2,1000e24c <__divdf3+0x134>
1000e170:	80800434 	orhi	r2,r16,16
1000e174:	100490fa 	slli	r2,r2,3
1000e178:	2020d77a 	srli	r16,r4,29
1000e17c:	202a90fa 	slli	r21,r4,3
1000e180:	94bf0044 	addi	r18,r18,-1023
1000e184:	80a0b03a 	or	r16,r16,r2
1000e188:	0013883a 	mov	r9,zero
1000e18c:	000b883a 	mov	r5,zero
1000e190:	3806d53a 	srli	r3,r7,20
1000e194:	382ed7fa 	srli	r23,r7,31
1000e198:	04400434 	movhi	r17,16
1000e19c:	8c7fffc4 	addi	r17,r17,-1
1000e1a0:	18c1ffcc 	andi	r3,r3,2047
1000e1a4:	3029883a 	mov	r20,r6
1000e1a8:	3c62703a 	and	r17,r7,r17
1000e1ac:	bf003fcc 	andi	fp,r23,255
1000e1b0:	18006e26 	beq	r3,zero,1000e36c <__divdf3+0x254>
1000e1b4:	0081ffc4 	movi	r2,2047
1000e1b8:	18806626 	beq	r3,r2,1000e354 <__divdf3+0x23c>
1000e1bc:	88800434 	orhi	r2,r17,16
1000e1c0:	100490fa 	slli	r2,r2,3
1000e1c4:	3022d77a 	srli	r17,r6,29
1000e1c8:	302890fa 	slli	r20,r6,3
1000e1cc:	18ff0044 	addi	r3,r3,-1023
1000e1d0:	88a2b03a 	or	r17,r17,r2
1000e1d4:	000f883a 	mov	r7,zero
1000e1d8:	b5e6f03a 	xor	r19,r22,r23
1000e1dc:	3a4cb03a 	or	r6,r7,r9
1000e1e0:	008003c4 	movi	r2,15
1000e1e4:	9809883a 	mov	r4,r19
1000e1e8:	90c7c83a 	sub	r3,r18,r3
1000e1ec:	9cc03fcc 	andi	r19,r19,255
1000e1f0:	11809636 	bltu	r2,r6,1000e44c <__divdf3+0x334>
1000e1f4:	300c90ba 	slli	r6,r6,2
1000e1f8:	00840074 	movhi	r2,4097
1000e1fc:	10b88304 	addi	r2,r2,-7668
1000e200:	308d883a 	add	r6,r6,r2
1000e204:	30800017 	ldw	r2,0(r6)
1000e208:	1000683a 	jmp	r2
1000e20c:	1000e44c 	andi	zero,r2,913
1000e210:	1000e284 	addi	zero,r2,906
1000e214:	1000e43c 	xorhi	zero,r2,912
1000e218:	1000e278 	rdprs	zero,r2,905
1000e21c:	1000e43c 	xorhi	zero,r2,912
1000e220:	1000e410 	cmplti	zero,r2,912
1000e224:	1000e43c 	xorhi	zero,r2,912
1000e228:	1000e278 	rdprs	zero,r2,905
1000e22c:	1000e284 	addi	zero,r2,906
1000e230:	1000e284 	addi	zero,r2,906
1000e234:	1000e410 	cmplti	zero,r2,912
1000e238:	1000e278 	rdprs	zero,r2,905
1000e23c:	1000e268 	cmpgeui	zero,r2,905
1000e240:	1000e268 	cmpgeui	zero,r2,905
1000e244:	1000e268 	cmpgeui	zero,r2,905
1000e248:	1000e7d4 	ori	zero,r2,927
1000e24c:	2404b03a 	or	r2,r4,r16
1000e250:	10006c1e 	bne	r2,zero,1000e404 <__divdf3+0x2ec>
1000e254:	02400204 	movi	r9,8
1000e258:	0021883a 	mov	r16,zero
1000e25c:	002b883a 	mov	r21,zero
1000e260:	01400084 	movi	r5,2
1000e264:	003fca06 	br	1000e190 <__alt_data_end+0xf800e190>
1000e268:	8023883a 	mov	r17,r16
1000e26c:	a829883a 	mov	r20,r21
1000e270:	4039883a 	mov	fp,r8
1000e274:	280f883a 	mov	r7,r5
1000e278:	00800084 	movi	r2,2
1000e27c:	3881601e 	bne	r7,r2,1000e800 <__divdf3+0x6e8>
1000e280:	e027883a 	mov	r19,fp
1000e284:	9900004c 	andi	r4,r19,1
1000e288:	0081ffc4 	movi	r2,2047
1000e28c:	0021883a 	mov	r16,zero
1000e290:	002b883a 	mov	r21,zero
1000e294:	1004953a 	slli	r2,r2,20
1000e298:	20c03fcc 	andi	r3,r4,255
1000e29c:	01400434 	movhi	r5,16
1000e2a0:	297fffc4 	addi	r5,r5,-1
1000e2a4:	180697fa 	slli	r3,r3,31
1000e2a8:	8160703a 	and	r16,r16,r5
1000e2ac:	80a0b03a 	or	r16,r16,r2
1000e2b0:	80c6b03a 	or	r3,r16,r3
1000e2b4:	a805883a 	mov	r2,r21
1000e2b8:	dfc00f17 	ldw	ra,60(sp)
1000e2bc:	df000e17 	ldw	fp,56(sp)
1000e2c0:	ddc00d17 	ldw	r23,52(sp)
1000e2c4:	dd800c17 	ldw	r22,48(sp)
1000e2c8:	dd400b17 	ldw	r21,44(sp)
1000e2cc:	dd000a17 	ldw	r20,40(sp)
1000e2d0:	dcc00917 	ldw	r19,36(sp)
1000e2d4:	dc800817 	ldw	r18,32(sp)
1000e2d8:	dc400717 	ldw	r17,28(sp)
1000e2dc:	dc000617 	ldw	r16,24(sp)
1000e2e0:	dec01004 	addi	sp,sp,64
1000e2e4:	f800283a 	ret
1000e2e8:	2404b03a 	or	r2,r4,r16
1000e2ec:	2023883a 	mov	r17,r4
1000e2f0:	10003f26 	beq	r2,zero,1000e3f0 <__divdf3+0x2d8>
1000e2f4:	80015e26 	beq	r16,zero,1000e870 <__divdf3+0x758>
1000e2f8:	8009883a 	mov	r4,r16
1000e2fc:	d9800215 	stw	r6,8(sp)
1000e300:	d9c00515 	stw	r7,20(sp)
1000e304:	da000415 	stw	r8,16(sp)
1000e308:	00100ac0 	call	100100ac <__clzsi2>
1000e30c:	d9800217 	ldw	r6,8(sp)
1000e310:	d9c00517 	ldw	r7,20(sp)
1000e314:	da000417 	ldw	r8,16(sp)
1000e318:	113ffd44 	addi	r4,r2,-11
1000e31c:	00c00704 	movi	r3,28
1000e320:	19014f16 	blt	r3,r4,1000e860 <__divdf3+0x748>
1000e324:	00c00744 	movi	r3,29
1000e328:	157ffe04 	addi	r21,r2,-8
1000e32c:	1907c83a 	sub	r3,r3,r4
1000e330:	8560983a 	sll	r16,r16,r21
1000e334:	88c6d83a 	srl	r3,r17,r3
1000e338:	8d6a983a 	sll	r21,r17,r21
1000e33c:	1c20b03a 	or	r16,r3,r16
1000e340:	1080fcc4 	addi	r2,r2,1011
1000e344:	00a5c83a 	sub	r18,zero,r2
1000e348:	0013883a 	mov	r9,zero
1000e34c:	000b883a 	mov	r5,zero
1000e350:	003f8f06 	br	1000e190 <__alt_data_end+0xf800e190>
1000e354:	3444b03a 	or	r2,r6,r17
1000e358:	1000231e 	bne	r2,zero,1000e3e8 <__divdf3+0x2d0>
1000e35c:	0023883a 	mov	r17,zero
1000e360:	0029883a 	mov	r20,zero
1000e364:	01c00084 	movi	r7,2
1000e368:	003f9b06 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e36c:	3444b03a 	or	r2,r6,r17
1000e370:	10001926 	beq	r2,zero,1000e3d8 <__divdf3+0x2c0>
1000e374:	88014b26 	beq	r17,zero,1000e8a4 <__divdf3+0x78c>
1000e378:	8809883a 	mov	r4,r17
1000e37c:	d9400115 	stw	r5,4(sp)
1000e380:	d9800215 	stw	r6,8(sp)
1000e384:	da000415 	stw	r8,16(sp)
1000e388:	da400315 	stw	r9,12(sp)
1000e38c:	00100ac0 	call	100100ac <__clzsi2>
1000e390:	d9400117 	ldw	r5,4(sp)
1000e394:	d9800217 	ldw	r6,8(sp)
1000e398:	da000417 	ldw	r8,16(sp)
1000e39c:	da400317 	ldw	r9,12(sp)
1000e3a0:	113ffd44 	addi	r4,r2,-11
1000e3a4:	00c00704 	movi	r3,28
1000e3a8:	19013a16 	blt	r3,r4,1000e894 <__divdf3+0x77c>
1000e3ac:	00c00744 	movi	r3,29
1000e3b0:	153ffe04 	addi	r20,r2,-8
1000e3b4:	1907c83a 	sub	r3,r3,r4
1000e3b8:	8d22983a 	sll	r17,r17,r20
1000e3bc:	30c6d83a 	srl	r3,r6,r3
1000e3c0:	3528983a 	sll	r20,r6,r20
1000e3c4:	1c62b03a 	or	r17,r3,r17
1000e3c8:	1080fcc4 	addi	r2,r2,1011
1000e3cc:	0087c83a 	sub	r3,zero,r2
1000e3d0:	000f883a 	mov	r7,zero
1000e3d4:	003f8006 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e3d8:	0023883a 	mov	r17,zero
1000e3dc:	0029883a 	mov	r20,zero
1000e3e0:	01c00044 	movi	r7,1
1000e3e4:	003f7c06 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e3e8:	01c000c4 	movi	r7,3
1000e3ec:	003f7a06 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e3f0:	02400104 	movi	r9,4
1000e3f4:	0021883a 	mov	r16,zero
1000e3f8:	002b883a 	mov	r21,zero
1000e3fc:	01400044 	movi	r5,1
1000e400:	003f6306 	br	1000e190 <__alt_data_end+0xf800e190>
1000e404:	02400304 	movi	r9,12
1000e408:	014000c4 	movi	r5,3
1000e40c:	003f6006 	br	1000e190 <__alt_data_end+0xf800e190>
1000e410:	04000434 	movhi	r16,16
1000e414:	0009883a 	mov	r4,zero
1000e418:	843fffc4 	addi	r16,r16,-1
1000e41c:	057fffc4 	movi	r21,-1
1000e420:	0081ffc4 	movi	r2,2047
1000e424:	003f9b06 	br	1000e294 <__alt_data_end+0xf800e294>
1000e428:	00c00044 	movi	r3,1
1000e42c:	1887c83a 	sub	r3,r3,r2
1000e430:	01000e04 	movi	r4,56
1000e434:	20c1530e 	bge	r4,r3,1000e984 <__divdf3+0x86c>
1000e438:	9900004c 	andi	r4,r19,1
1000e43c:	0005883a 	mov	r2,zero
1000e440:	0021883a 	mov	r16,zero
1000e444:	002b883a 	mov	r21,zero
1000e448:	003f9206 	br	1000e294 <__alt_data_end+0xf800e294>
1000e44c:	8c012e36 	bltu	r17,r16,1000e908 <__divdf3+0x7f0>
1000e450:	84412c26 	beq	r16,r17,1000e904 <__divdf3+0x7ec>
1000e454:	a82f883a 	mov	r23,r21
1000e458:	18ffffc4 	addi	r3,r3,-1
1000e45c:	002b883a 	mov	r21,zero
1000e460:	a004d63a 	srli	r2,r20,24
1000e464:	8822923a 	slli	r17,r17,8
1000e468:	a028923a 	slli	r20,r20,8
1000e46c:	8009883a 	mov	r4,r16
1000e470:	88acb03a 	or	r22,r17,r2
1000e474:	dd000015 	stw	r20,0(sp)
1000e478:	b028d43a 	srli	r20,r22,16
1000e47c:	d8c00215 	stw	r3,8(sp)
1000e480:	b4bfffcc 	andi	r18,r22,65535
1000e484:	a00b883a 	mov	r5,r20
1000e488:	000d7880 	call	1000d788 <__udivsi3>
1000e48c:	100b883a 	mov	r5,r2
1000e490:	9009883a 	mov	r4,r18
1000e494:	1023883a 	mov	r17,r2
1000e498:	000d8440 	call	1000d844 <__mulsi3>
1000e49c:	8009883a 	mov	r4,r16
1000e4a0:	a00b883a 	mov	r5,r20
1000e4a4:	1039883a 	mov	fp,r2
1000e4a8:	000d7ec0 	call	1000d7ec <__umodsi3>
1000e4ac:	1004943a 	slli	r2,r2,16
1000e4b0:	b808d43a 	srli	r4,r23,16
1000e4b4:	d8c00217 	ldw	r3,8(sp)
1000e4b8:	2084b03a 	or	r2,r4,r2
1000e4bc:	1700062e 	bgeu	r2,fp,1000e4d8 <__divdf3+0x3c0>
1000e4c0:	1585883a 	add	r2,r2,r22
1000e4c4:	893fffc4 	addi	r4,r17,-1
1000e4c8:	15811d36 	bltu	r2,r22,1000e940 <__divdf3+0x828>
1000e4cc:	17011c2e 	bgeu	r2,fp,1000e940 <__divdf3+0x828>
1000e4d0:	8c7fff84 	addi	r17,r17,-2
1000e4d4:	1585883a 	add	r2,r2,r22
1000e4d8:	1739c83a 	sub	fp,r2,fp
1000e4dc:	a00b883a 	mov	r5,r20
1000e4e0:	e009883a 	mov	r4,fp
1000e4e4:	d8c00215 	stw	r3,8(sp)
1000e4e8:	000d7880 	call	1000d788 <__udivsi3>
1000e4ec:	100b883a 	mov	r5,r2
1000e4f0:	9009883a 	mov	r4,r18
1000e4f4:	1021883a 	mov	r16,r2
1000e4f8:	000d8440 	call	1000d844 <__mulsi3>
1000e4fc:	a00b883a 	mov	r5,r20
1000e500:	e009883a 	mov	r4,fp
1000e504:	d8800415 	stw	r2,16(sp)
1000e508:	000d7ec0 	call	1000d7ec <__umodsi3>
1000e50c:	1004943a 	slli	r2,r2,16
1000e510:	da000417 	ldw	r8,16(sp)
1000e514:	bdffffcc 	andi	r23,r23,65535
1000e518:	b884b03a 	or	r2,r23,r2
1000e51c:	d8c00217 	ldw	r3,8(sp)
1000e520:	1200062e 	bgeu	r2,r8,1000e53c <__divdf3+0x424>
1000e524:	1585883a 	add	r2,r2,r22
1000e528:	813fffc4 	addi	r4,r16,-1
1000e52c:	15810236 	bltu	r2,r22,1000e938 <__divdf3+0x820>
1000e530:	1201012e 	bgeu	r2,r8,1000e938 <__divdf3+0x820>
1000e534:	843fff84 	addi	r16,r16,-2
1000e538:	1585883a 	add	r2,r2,r22
1000e53c:	8822943a 	slli	r17,r17,16
1000e540:	d9800017 	ldw	r6,0(sp)
1000e544:	1211c83a 	sub	r8,r2,r8
1000e548:	8c22b03a 	or	r17,r17,r16
1000e54c:	373fffcc 	andi	fp,r6,65535
1000e550:	8abfffcc 	andi	r10,r17,65535
1000e554:	8820d43a 	srli	r16,r17,16
1000e558:	5009883a 	mov	r4,r10
1000e55c:	e00b883a 	mov	r5,fp
1000e560:	302ed43a 	srli	r23,r6,16
1000e564:	d8c00215 	stw	r3,8(sp)
1000e568:	da000415 	stw	r8,16(sp)
1000e56c:	da800115 	stw	r10,4(sp)
1000e570:	000d8440 	call	1000d844 <__mulsi3>
1000e574:	800b883a 	mov	r5,r16
1000e578:	e009883a 	mov	r4,fp
1000e57c:	d8800515 	stw	r2,20(sp)
1000e580:	000d8440 	call	1000d844 <__mulsi3>
1000e584:	8009883a 	mov	r4,r16
1000e588:	b80b883a 	mov	r5,r23
1000e58c:	d8800315 	stw	r2,12(sp)
1000e590:	000d8440 	call	1000d844 <__mulsi3>
1000e594:	da800117 	ldw	r10,4(sp)
1000e598:	b80b883a 	mov	r5,r23
1000e59c:	1021883a 	mov	r16,r2
1000e5a0:	5009883a 	mov	r4,r10
1000e5a4:	000d8440 	call	1000d844 <__mulsi3>
1000e5a8:	d9c00517 	ldw	r7,20(sp)
1000e5ac:	da400317 	ldw	r9,12(sp)
1000e5b0:	d8c00217 	ldw	r3,8(sp)
1000e5b4:	3808d43a 	srli	r4,r7,16
1000e5b8:	1245883a 	add	r2,r2,r9
1000e5bc:	da000417 	ldw	r8,16(sp)
1000e5c0:	2085883a 	add	r2,r4,r2
1000e5c4:	1240022e 	bgeu	r2,r9,1000e5d0 <__divdf3+0x4b8>
1000e5c8:	01000074 	movhi	r4,1
1000e5cc:	8121883a 	add	r16,r16,r4
1000e5d0:	1008d43a 	srli	r4,r2,16
1000e5d4:	1004943a 	slli	r2,r2,16
1000e5d8:	39ffffcc 	andi	r7,r7,65535
1000e5dc:	2409883a 	add	r4,r4,r16
1000e5e0:	11c5883a 	add	r2,r2,r7
1000e5e4:	4100bb36 	bltu	r8,r4,1000e8d4 <__divdf3+0x7bc>
1000e5e8:	4100d726 	beq	r8,r4,1000e948 <__divdf3+0x830>
1000e5ec:	4109c83a 	sub	r4,r8,r4
1000e5f0:	a8a1c83a 	sub	r16,r21,r2
1000e5f4:	ac2b803a 	cmpltu	r21,r21,r16
1000e5f8:	256bc83a 	sub	r21,r4,r21
1000e5fc:	b540d926 	beq	r22,r21,1000e964 <__divdf3+0x84c>
1000e600:	a00b883a 	mov	r5,r20
1000e604:	a809883a 	mov	r4,r21
1000e608:	d8c00215 	stw	r3,8(sp)
1000e60c:	000d7880 	call	1000d788 <__udivsi3>
1000e610:	100b883a 	mov	r5,r2
1000e614:	9009883a 	mov	r4,r18
1000e618:	d8800515 	stw	r2,20(sp)
1000e61c:	000d8440 	call	1000d844 <__mulsi3>
1000e620:	a809883a 	mov	r4,r21
1000e624:	a00b883a 	mov	r5,r20
1000e628:	d8800415 	stw	r2,16(sp)
1000e62c:	000d7ec0 	call	1000d7ec <__umodsi3>
1000e630:	1004943a 	slli	r2,r2,16
1000e634:	8008d43a 	srli	r4,r16,16
1000e638:	da000417 	ldw	r8,16(sp)
1000e63c:	d8c00217 	ldw	r3,8(sp)
1000e640:	2084b03a 	or	r2,r4,r2
1000e644:	d9c00517 	ldw	r7,20(sp)
1000e648:	1200062e 	bgeu	r2,r8,1000e664 <__divdf3+0x54c>
1000e64c:	1585883a 	add	r2,r2,r22
1000e650:	393fffc4 	addi	r4,r7,-1
1000e654:	1580c536 	bltu	r2,r22,1000e96c <__divdf3+0x854>
1000e658:	1200c42e 	bgeu	r2,r8,1000e96c <__divdf3+0x854>
1000e65c:	39ffff84 	addi	r7,r7,-2
1000e660:	1585883a 	add	r2,r2,r22
1000e664:	122bc83a 	sub	r21,r2,r8
1000e668:	a00b883a 	mov	r5,r20
1000e66c:	a809883a 	mov	r4,r21
1000e670:	d8c00215 	stw	r3,8(sp)
1000e674:	d9c00515 	stw	r7,20(sp)
1000e678:	000d7880 	call	1000d788 <__udivsi3>
1000e67c:	9009883a 	mov	r4,r18
1000e680:	100b883a 	mov	r5,r2
1000e684:	d8800415 	stw	r2,16(sp)
1000e688:	000d8440 	call	1000d844 <__mulsi3>
1000e68c:	a809883a 	mov	r4,r21
1000e690:	a00b883a 	mov	r5,r20
1000e694:	1025883a 	mov	r18,r2
1000e698:	000d7ec0 	call	1000d7ec <__umodsi3>
1000e69c:	1004943a 	slli	r2,r2,16
1000e6a0:	813fffcc 	andi	r4,r16,65535
1000e6a4:	d8c00217 	ldw	r3,8(sp)
1000e6a8:	20a0b03a 	or	r16,r4,r2
1000e6ac:	d9c00517 	ldw	r7,20(sp)
1000e6b0:	da000417 	ldw	r8,16(sp)
1000e6b4:	8480062e 	bgeu	r16,r18,1000e6d0 <__divdf3+0x5b8>
1000e6b8:	85a1883a 	add	r16,r16,r22
1000e6bc:	40bfffc4 	addi	r2,r8,-1
1000e6c0:	8580ac36 	bltu	r16,r22,1000e974 <__divdf3+0x85c>
1000e6c4:	8480ab2e 	bgeu	r16,r18,1000e974 <__divdf3+0x85c>
1000e6c8:	423fff84 	addi	r8,r8,-2
1000e6cc:	85a1883a 	add	r16,r16,r22
1000e6d0:	3804943a 	slli	r2,r7,16
1000e6d4:	84a1c83a 	sub	r16,r16,r18
1000e6d8:	e009883a 	mov	r4,fp
1000e6dc:	1228b03a 	or	r20,r2,r8
1000e6e0:	a1ffffcc 	andi	r7,r20,65535
1000e6e4:	a024d43a 	srli	r18,r20,16
1000e6e8:	380b883a 	mov	r5,r7
1000e6ec:	d8c00215 	stw	r3,8(sp)
1000e6f0:	d9c00515 	stw	r7,20(sp)
1000e6f4:	000d8440 	call	1000d844 <__mulsi3>
1000e6f8:	900b883a 	mov	r5,r18
1000e6fc:	e009883a 	mov	r4,fp
1000e700:	102b883a 	mov	r21,r2
1000e704:	000d8440 	call	1000d844 <__mulsi3>
1000e708:	900b883a 	mov	r5,r18
1000e70c:	b809883a 	mov	r4,r23
1000e710:	1039883a 	mov	fp,r2
1000e714:	000d8440 	call	1000d844 <__mulsi3>
1000e718:	d9c00517 	ldw	r7,20(sp)
1000e71c:	b80b883a 	mov	r5,r23
1000e720:	1025883a 	mov	r18,r2
1000e724:	3809883a 	mov	r4,r7
1000e728:	000d8440 	call	1000d844 <__mulsi3>
1000e72c:	a808d43a 	srli	r4,r21,16
1000e730:	1705883a 	add	r2,r2,fp
1000e734:	d8c00217 	ldw	r3,8(sp)
1000e738:	2085883a 	add	r2,r4,r2
1000e73c:	1700022e 	bgeu	r2,fp,1000e748 <__divdf3+0x630>
1000e740:	01000074 	movhi	r4,1
1000e744:	9125883a 	add	r18,r18,r4
1000e748:	1008d43a 	srli	r4,r2,16
1000e74c:	1004943a 	slli	r2,r2,16
1000e750:	ad7fffcc 	andi	r21,r21,65535
1000e754:	2489883a 	add	r4,r4,r18
1000e758:	1545883a 	add	r2,r2,r21
1000e75c:	81003836 	bltu	r16,r4,1000e840 <__divdf3+0x728>
1000e760:	81003626 	beq	r16,r4,1000e83c <__divdf3+0x724>
1000e764:	a5000054 	ori	r20,r20,1
1000e768:	1880ffc4 	addi	r2,r3,1023
1000e76c:	00bf2e0e 	bge	zero,r2,1000e428 <__alt_data_end+0xf800e428>
1000e770:	a10001cc 	andi	r4,r20,7
1000e774:	20000726 	beq	r4,zero,1000e794 <__divdf3+0x67c>
1000e778:	a10003cc 	andi	r4,r20,15
1000e77c:	01400104 	movi	r5,4
1000e780:	21400426 	beq	r4,r5,1000e794 <__divdf3+0x67c>
1000e784:	a149883a 	add	r4,r20,r5
1000e788:	2529803a 	cmpltu	r20,r4,r20
1000e78c:	8d23883a 	add	r17,r17,r20
1000e790:	2029883a 	mov	r20,r4
1000e794:	8900402c 	andhi	r4,r17,256
1000e798:	20000426 	beq	r4,zero,1000e7ac <__divdf3+0x694>
1000e79c:	18810004 	addi	r2,r3,1024
1000e7a0:	00ffc034 	movhi	r3,65280
1000e7a4:	18ffffc4 	addi	r3,r3,-1
1000e7a8:	88e2703a 	and	r17,r17,r3
1000e7ac:	00c1ff84 	movi	r3,2046
1000e7b0:	18beb416 	blt	r3,r2,1000e284 <__alt_data_end+0xf800e284>
1000e7b4:	a028d0fa 	srli	r20,r20,3
1000e7b8:	882a977a 	slli	r21,r17,29
1000e7bc:	8820927a 	slli	r16,r17,9
1000e7c0:	1081ffcc 	andi	r2,r2,2047
1000e7c4:	ad2ab03a 	or	r21,r21,r20
1000e7c8:	8020d33a 	srli	r16,r16,12
1000e7cc:	9900004c 	andi	r4,r19,1
1000e7d0:	003eb006 	br	1000e294 <__alt_data_end+0xf800e294>
1000e7d4:	8080022c 	andhi	r2,r16,8
1000e7d8:	10001226 	beq	r2,zero,1000e824 <__divdf3+0x70c>
1000e7dc:	8880022c 	andhi	r2,r17,8
1000e7e0:	1000101e 	bne	r2,zero,1000e824 <__divdf3+0x70c>
1000e7e4:	00800434 	movhi	r2,16
1000e7e8:	8c000234 	orhi	r16,r17,8
1000e7ec:	10bfffc4 	addi	r2,r2,-1
1000e7f0:	b809883a 	mov	r4,r23
1000e7f4:	80a0703a 	and	r16,r16,r2
1000e7f8:	a02b883a 	mov	r21,r20
1000e7fc:	003f0806 	br	1000e420 <__alt_data_end+0xf800e420>
1000e800:	008000c4 	movi	r2,3
1000e804:	3880b126 	beq	r7,r2,1000eacc <__divdf3+0x9b4>
1000e808:	00800044 	movi	r2,1
1000e80c:	38805b1e 	bne	r7,r2,1000e97c <__divdf3+0x864>
1000e810:	e009883a 	mov	r4,fp
1000e814:	0005883a 	mov	r2,zero
1000e818:	0021883a 	mov	r16,zero
1000e81c:	002b883a 	mov	r21,zero
1000e820:	003e9c06 	br	1000e294 <__alt_data_end+0xf800e294>
1000e824:	00800434 	movhi	r2,16
1000e828:	84000234 	orhi	r16,r16,8
1000e82c:	10bfffc4 	addi	r2,r2,-1
1000e830:	b009883a 	mov	r4,r22
1000e834:	80a0703a 	and	r16,r16,r2
1000e838:	003ef906 	br	1000e420 <__alt_data_end+0xf800e420>
1000e83c:	103fca26 	beq	r2,zero,1000e768 <__alt_data_end+0xf800e768>
1000e840:	b421883a 	add	r16,r22,r16
1000e844:	a17fffc4 	addi	r5,r20,-1
1000e848:	8580422e 	bgeu	r16,r22,1000e954 <__divdf3+0x83c>
1000e84c:	2829883a 	mov	r20,r5
1000e850:	813fc41e 	bne	r16,r4,1000e764 <__alt_data_end+0xf800e764>
1000e854:	d9800017 	ldw	r6,0(sp)
1000e858:	30bfc21e 	bne	r6,r2,1000e764 <__alt_data_end+0xf800e764>
1000e85c:	003fc206 	br	1000e768 <__alt_data_end+0xf800e768>
1000e860:	143ff604 	addi	r16,r2,-40
1000e864:	8c20983a 	sll	r16,r17,r16
1000e868:	002b883a 	mov	r21,zero
1000e86c:	003eb406 	br	1000e340 <__alt_data_end+0xf800e340>
1000e870:	d9800215 	stw	r6,8(sp)
1000e874:	d9c00515 	stw	r7,20(sp)
1000e878:	da000415 	stw	r8,16(sp)
1000e87c:	00100ac0 	call	100100ac <__clzsi2>
1000e880:	10800804 	addi	r2,r2,32
1000e884:	da000417 	ldw	r8,16(sp)
1000e888:	d9c00517 	ldw	r7,20(sp)
1000e88c:	d9800217 	ldw	r6,8(sp)
1000e890:	003ea106 	br	1000e318 <__alt_data_end+0xf800e318>
1000e894:	147ff604 	addi	r17,r2,-40
1000e898:	3462983a 	sll	r17,r6,r17
1000e89c:	0029883a 	mov	r20,zero
1000e8a0:	003ec906 	br	1000e3c8 <__alt_data_end+0xf800e3c8>
1000e8a4:	3009883a 	mov	r4,r6
1000e8a8:	d9400115 	stw	r5,4(sp)
1000e8ac:	d9800215 	stw	r6,8(sp)
1000e8b0:	da000415 	stw	r8,16(sp)
1000e8b4:	da400315 	stw	r9,12(sp)
1000e8b8:	00100ac0 	call	100100ac <__clzsi2>
1000e8bc:	10800804 	addi	r2,r2,32
1000e8c0:	da400317 	ldw	r9,12(sp)
1000e8c4:	da000417 	ldw	r8,16(sp)
1000e8c8:	d9800217 	ldw	r6,8(sp)
1000e8cc:	d9400117 	ldw	r5,4(sp)
1000e8d0:	003eb306 	br	1000e3a0 <__alt_data_end+0xf800e3a0>
1000e8d4:	d9800017 	ldw	r6,0(sp)
1000e8d8:	a9ab883a 	add	r21,r21,r6
1000e8dc:	a98b803a 	cmpltu	r5,r21,r6
1000e8e0:	2d8b883a 	add	r5,r5,r22
1000e8e4:	2a11883a 	add	r8,r5,r8
1000e8e8:	897fffc4 	addi	r5,r17,-1
1000e8ec:	b2000c2e 	bgeu	r22,r8,1000e920 <__divdf3+0x808>
1000e8f0:	41003f36 	bltu	r8,r4,1000e9f0 <__divdf3+0x8d8>
1000e8f4:	22006c26 	beq	r4,r8,1000eaa8 <__divdf3+0x990>
1000e8f8:	4109c83a 	sub	r4,r8,r4
1000e8fc:	2823883a 	mov	r17,r5
1000e900:	003f3b06 	br	1000e5f0 <__alt_data_end+0xf800e5f0>
1000e904:	ad3ed336 	bltu	r21,r20,1000e454 <__alt_data_end+0xf800e454>
1000e908:	a804d07a 	srli	r2,r21,1
1000e90c:	802e97fa 	slli	r23,r16,31
1000e910:	a82a97fa 	slli	r21,r21,31
1000e914:	8020d07a 	srli	r16,r16,1
1000e918:	b8aeb03a 	or	r23,r23,r2
1000e91c:	003ed006 	br	1000e460 <__alt_data_end+0xf800e460>
1000e920:	b23ff51e 	bne	r22,r8,1000e8f8 <__alt_data_end+0xf800e8f8>
1000e924:	d9800017 	ldw	r6,0(sp)
1000e928:	a9bff12e 	bgeu	r21,r6,1000e8f0 <__alt_data_end+0xf800e8f0>
1000e92c:	b109c83a 	sub	r4,r22,r4
1000e930:	2823883a 	mov	r17,r5
1000e934:	003f2e06 	br	1000e5f0 <__alt_data_end+0xf800e5f0>
1000e938:	2021883a 	mov	r16,r4
1000e93c:	003eff06 	br	1000e53c <__alt_data_end+0xf800e53c>
1000e940:	2023883a 	mov	r17,r4
1000e944:	003ee406 	br	1000e4d8 <__alt_data_end+0xf800e4d8>
1000e948:	a8bfe236 	bltu	r21,r2,1000e8d4 <__alt_data_end+0xf800e8d4>
1000e94c:	0009883a 	mov	r4,zero
1000e950:	003f2706 	br	1000e5f0 <__alt_data_end+0xf800e5f0>
1000e954:	81002d36 	bltu	r16,r4,1000ea0c <__divdf3+0x8f4>
1000e958:	24005626 	beq	r4,r16,1000eab4 <__divdf3+0x99c>
1000e95c:	2829883a 	mov	r20,r5
1000e960:	003f8006 	br	1000e764 <__alt_data_end+0xf800e764>
1000e964:	053fffc4 	movi	r20,-1
1000e968:	003f7f06 	br	1000e768 <__alt_data_end+0xf800e768>
1000e96c:	200f883a 	mov	r7,r4
1000e970:	003f3c06 	br	1000e664 <__alt_data_end+0xf800e664>
1000e974:	1011883a 	mov	r8,r2
1000e978:	003f5506 	br	1000e6d0 <__alt_data_end+0xf800e6d0>
1000e97c:	e027883a 	mov	r19,fp
1000e980:	003f7906 	br	1000e768 <__alt_data_end+0xf800e768>
1000e984:	010007c4 	movi	r4,31
1000e988:	20c02816 	blt	r4,r3,1000ea2c <__divdf3+0x914>
1000e98c:	00800804 	movi	r2,32
1000e990:	10c5c83a 	sub	r2,r2,r3
1000e994:	888a983a 	sll	r5,r17,r2
1000e998:	a0c8d83a 	srl	r4,r20,r3
1000e99c:	a084983a 	sll	r2,r20,r2
1000e9a0:	88e2d83a 	srl	r17,r17,r3
1000e9a4:	2906b03a 	or	r3,r5,r4
1000e9a8:	1004c03a 	cmpne	r2,r2,zero
1000e9ac:	1886b03a 	or	r3,r3,r2
1000e9b0:	188001cc 	andi	r2,r3,7
1000e9b4:	10000726 	beq	r2,zero,1000e9d4 <__divdf3+0x8bc>
1000e9b8:	188003cc 	andi	r2,r3,15
1000e9bc:	01000104 	movi	r4,4
1000e9c0:	11000426 	beq	r2,r4,1000e9d4 <__divdf3+0x8bc>
1000e9c4:	1805883a 	mov	r2,r3
1000e9c8:	10c00104 	addi	r3,r2,4
1000e9cc:	1885803a 	cmpltu	r2,r3,r2
1000e9d0:	88a3883a 	add	r17,r17,r2
1000e9d4:	8880202c 	andhi	r2,r17,128
1000e9d8:	10002926 	beq	r2,zero,1000ea80 <__divdf3+0x968>
1000e9dc:	9900004c 	andi	r4,r19,1
1000e9e0:	00800044 	movi	r2,1
1000e9e4:	0021883a 	mov	r16,zero
1000e9e8:	002b883a 	mov	r21,zero
1000e9ec:	003e2906 	br	1000e294 <__alt_data_end+0xf800e294>
1000e9f0:	d9800017 	ldw	r6,0(sp)
1000e9f4:	8c7fff84 	addi	r17,r17,-2
1000e9f8:	a9ab883a 	add	r21,r21,r6
1000e9fc:	a98b803a 	cmpltu	r5,r21,r6
1000ea00:	2d8b883a 	add	r5,r5,r22
1000ea04:	2a11883a 	add	r8,r5,r8
1000ea08:	003ef806 	br	1000e5ec <__alt_data_end+0xf800e5ec>
1000ea0c:	d9800017 	ldw	r6,0(sp)
1000ea10:	318f883a 	add	r7,r6,r6
1000ea14:	398b803a 	cmpltu	r5,r7,r6
1000ea18:	2d8d883a 	add	r6,r5,r22
1000ea1c:	81a1883a 	add	r16,r16,r6
1000ea20:	a17fff84 	addi	r5,r20,-2
1000ea24:	d9c00015 	stw	r7,0(sp)
1000ea28:	003f8806 	br	1000e84c <__alt_data_end+0xf800e84c>
1000ea2c:	013ff844 	movi	r4,-31
1000ea30:	2085c83a 	sub	r2,r4,r2
1000ea34:	8888d83a 	srl	r4,r17,r2
1000ea38:	00800804 	movi	r2,32
1000ea3c:	18802126 	beq	r3,r2,1000eac4 <__divdf3+0x9ac>
1000ea40:	04001004 	movi	r16,64
1000ea44:	80c7c83a 	sub	r3,r16,r3
1000ea48:	88e0983a 	sll	r16,r17,r3
1000ea4c:	8504b03a 	or	r2,r16,r20
1000ea50:	1004c03a 	cmpne	r2,r2,zero
1000ea54:	2084b03a 	or	r2,r4,r2
1000ea58:	144001cc 	andi	r17,r2,7
1000ea5c:	88000d1e 	bne	r17,zero,1000ea94 <__divdf3+0x97c>
1000ea60:	0021883a 	mov	r16,zero
1000ea64:	102ad0fa 	srli	r21,r2,3
1000ea68:	9900004c 	andi	r4,r19,1
1000ea6c:	0005883a 	mov	r2,zero
1000ea70:	ac6ab03a 	or	r21,r21,r17
1000ea74:	003e0706 	br	1000e294 <__alt_data_end+0xf800e294>
1000ea78:	1007883a 	mov	r3,r2
1000ea7c:	0023883a 	mov	r17,zero
1000ea80:	8820927a 	slli	r16,r17,9
1000ea84:	1805883a 	mov	r2,r3
1000ea88:	8822977a 	slli	r17,r17,29
1000ea8c:	8020d33a 	srli	r16,r16,12
1000ea90:	003ff406 	br	1000ea64 <__alt_data_end+0xf800ea64>
1000ea94:	10c003cc 	andi	r3,r2,15
1000ea98:	01000104 	movi	r4,4
1000ea9c:	193ff626 	beq	r3,r4,1000ea78 <__alt_data_end+0xf800ea78>
1000eaa0:	0023883a 	mov	r17,zero
1000eaa4:	003fc806 	br	1000e9c8 <__alt_data_end+0xf800e9c8>
1000eaa8:	a8bfd136 	bltu	r21,r2,1000e9f0 <__alt_data_end+0xf800e9f0>
1000eaac:	2823883a 	mov	r17,r5
1000eab0:	003fa606 	br	1000e94c <__alt_data_end+0xf800e94c>
1000eab4:	d9800017 	ldw	r6,0(sp)
1000eab8:	30bfd436 	bltu	r6,r2,1000ea0c <__alt_data_end+0xf800ea0c>
1000eabc:	2829883a 	mov	r20,r5
1000eac0:	003f6406 	br	1000e854 <__alt_data_end+0xf800e854>
1000eac4:	0021883a 	mov	r16,zero
1000eac8:	003fe006 	br	1000ea4c <__alt_data_end+0xf800ea4c>
1000eacc:	00800434 	movhi	r2,16
1000ead0:	8c000234 	orhi	r16,r17,8
1000ead4:	10bfffc4 	addi	r2,r2,-1
1000ead8:	e009883a 	mov	r4,fp
1000eadc:	80a0703a 	and	r16,r16,r2
1000eae0:	a02b883a 	mov	r21,r20
1000eae4:	003e4e06 	br	1000e420 <__alt_data_end+0xf800e420>

1000eae8 <__eqdf2>:
1000eae8:	2804d53a 	srli	r2,r5,20
1000eaec:	3806d53a 	srli	r3,r7,20
1000eaf0:	02000434 	movhi	r8,16
1000eaf4:	423fffc4 	addi	r8,r8,-1
1000eaf8:	1081ffcc 	andi	r2,r2,2047
1000eafc:	0281ffc4 	movi	r10,2047
1000eb00:	2a12703a 	and	r9,r5,r8
1000eb04:	18c1ffcc 	andi	r3,r3,2047
1000eb08:	3a10703a 	and	r8,r7,r8
1000eb0c:	280ad7fa 	srli	r5,r5,31
1000eb10:	380ed7fa 	srli	r7,r7,31
1000eb14:	12801026 	beq	r2,r10,1000eb58 <__eqdf2+0x70>
1000eb18:	0281ffc4 	movi	r10,2047
1000eb1c:	1a800a26 	beq	r3,r10,1000eb48 <__eqdf2+0x60>
1000eb20:	10c00226 	beq	r2,r3,1000eb2c <__eqdf2+0x44>
1000eb24:	00800044 	movi	r2,1
1000eb28:	f800283a 	ret
1000eb2c:	4a3ffd1e 	bne	r9,r8,1000eb24 <__alt_data_end+0xf800eb24>
1000eb30:	21bffc1e 	bne	r4,r6,1000eb24 <__alt_data_end+0xf800eb24>
1000eb34:	29c00c26 	beq	r5,r7,1000eb68 <__eqdf2+0x80>
1000eb38:	103ffa1e 	bne	r2,zero,1000eb24 <__alt_data_end+0xf800eb24>
1000eb3c:	2244b03a 	or	r2,r4,r9
1000eb40:	1004c03a 	cmpne	r2,r2,zero
1000eb44:	f800283a 	ret
1000eb48:	3214b03a 	or	r10,r6,r8
1000eb4c:	503ff426 	beq	r10,zero,1000eb20 <__alt_data_end+0xf800eb20>
1000eb50:	00800044 	movi	r2,1
1000eb54:	f800283a 	ret
1000eb58:	2254b03a 	or	r10,r4,r9
1000eb5c:	503fee26 	beq	r10,zero,1000eb18 <__alt_data_end+0xf800eb18>
1000eb60:	00800044 	movi	r2,1
1000eb64:	f800283a 	ret
1000eb68:	0005883a 	mov	r2,zero
1000eb6c:	f800283a 	ret

1000eb70 <__gedf2>:
1000eb70:	2804d53a 	srli	r2,r5,20
1000eb74:	3806d53a 	srli	r3,r7,20
1000eb78:	02000434 	movhi	r8,16
1000eb7c:	423fffc4 	addi	r8,r8,-1
1000eb80:	1081ffcc 	andi	r2,r2,2047
1000eb84:	0241ffc4 	movi	r9,2047
1000eb88:	2a14703a 	and	r10,r5,r8
1000eb8c:	18c1ffcc 	andi	r3,r3,2047
1000eb90:	3a10703a 	and	r8,r7,r8
1000eb94:	280ad7fa 	srli	r5,r5,31
1000eb98:	380ed7fa 	srli	r7,r7,31
1000eb9c:	12401d26 	beq	r2,r9,1000ec14 <__gedf2+0xa4>
1000eba0:	0241ffc4 	movi	r9,2047
1000eba4:	1a401226 	beq	r3,r9,1000ebf0 <__gedf2+0x80>
1000eba8:	1000081e 	bne	r2,zero,1000ebcc <__gedf2+0x5c>
1000ebac:	2296b03a 	or	r11,r4,r10
1000ebb0:	5813003a 	cmpeq	r9,r11,zero
1000ebb4:	1800091e 	bne	r3,zero,1000ebdc <__gedf2+0x6c>
1000ebb8:	3218b03a 	or	r12,r6,r8
1000ebbc:	6000071e 	bne	r12,zero,1000ebdc <__gedf2+0x6c>
1000ebc0:	0005883a 	mov	r2,zero
1000ebc4:	5800101e 	bne	r11,zero,1000ec08 <__gedf2+0x98>
1000ebc8:	f800283a 	ret
1000ebcc:	18000c1e 	bne	r3,zero,1000ec00 <__gedf2+0x90>
1000ebd0:	3212b03a 	or	r9,r6,r8
1000ebd4:	48000c26 	beq	r9,zero,1000ec08 <__gedf2+0x98>
1000ebd8:	0013883a 	mov	r9,zero
1000ebdc:	39c03fcc 	andi	r7,r7,255
1000ebe0:	48000826 	beq	r9,zero,1000ec04 <__gedf2+0x94>
1000ebe4:	38000926 	beq	r7,zero,1000ec0c <__gedf2+0x9c>
1000ebe8:	00800044 	movi	r2,1
1000ebec:	f800283a 	ret
1000ebf0:	3212b03a 	or	r9,r6,r8
1000ebf4:	483fec26 	beq	r9,zero,1000eba8 <__alt_data_end+0xf800eba8>
1000ebf8:	00bfff84 	movi	r2,-2
1000ebfc:	f800283a 	ret
1000ec00:	39c03fcc 	andi	r7,r7,255
1000ec04:	29c00626 	beq	r5,r7,1000ec20 <__gedf2+0xb0>
1000ec08:	283ff726 	beq	r5,zero,1000ebe8 <__alt_data_end+0xf800ebe8>
1000ec0c:	00bfffc4 	movi	r2,-1
1000ec10:	f800283a 	ret
1000ec14:	2292b03a 	or	r9,r4,r10
1000ec18:	483fe126 	beq	r9,zero,1000eba0 <__alt_data_end+0xf800eba0>
1000ec1c:	003ff606 	br	1000ebf8 <__alt_data_end+0xf800ebf8>
1000ec20:	18bff916 	blt	r3,r2,1000ec08 <__alt_data_end+0xf800ec08>
1000ec24:	10c00316 	blt	r2,r3,1000ec34 <__gedf2+0xc4>
1000ec28:	42bff736 	bltu	r8,r10,1000ec08 <__alt_data_end+0xf800ec08>
1000ec2c:	52000326 	beq	r10,r8,1000ec3c <__gedf2+0xcc>
1000ec30:	5200042e 	bgeu	r10,r8,1000ec44 <__gedf2+0xd4>
1000ec34:	283fec1e 	bne	r5,zero,1000ebe8 <__alt_data_end+0xf800ebe8>
1000ec38:	003ff406 	br	1000ec0c <__alt_data_end+0xf800ec0c>
1000ec3c:	313ff236 	bltu	r6,r4,1000ec08 <__alt_data_end+0xf800ec08>
1000ec40:	21bffc36 	bltu	r4,r6,1000ec34 <__alt_data_end+0xf800ec34>
1000ec44:	0005883a 	mov	r2,zero
1000ec48:	f800283a 	ret

1000ec4c <__ledf2>:
1000ec4c:	2804d53a 	srli	r2,r5,20
1000ec50:	3810d53a 	srli	r8,r7,20
1000ec54:	00c00434 	movhi	r3,16
1000ec58:	18ffffc4 	addi	r3,r3,-1
1000ec5c:	1081ffcc 	andi	r2,r2,2047
1000ec60:	0241ffc4 	movi	r9,2047
1000ec64:	28d4703a 	and	r10,r5,r3
1000ec68:	4201ffcc 	andi	r8,r8,2047
1000ec6c:	38c6703a 	and	r3,r7,r3
1000ec70:	280ad7fa 	srli	r5,r5,31
1000ec74:	380ed7fa 	srli	r7,r7,31
1000ec78:	12401f26 	beq	r2,r9,1000ecf8 <__ledf2+0xac>
1000ec7c:	0241ffc4 	movi	r9,2047
1000ec80:	42401426 	beq	r8,r9,1000ecd4 <__ledf2+0x88>
1000ec84:	1000091e 	bne	r2,zero,1000ecac <__ledf2+0x60>
1000ec88:	2296b03a 	or	r11,r4,r10
1000ec8c:	5813003a 	cmpeq	r9,r11,zero
1000ec90:	29403fcc 	andi	r5,r5,255
1000ec94:	40000a1e 	bne	r8,zero,1000ecc0 <__ledf2+0x74>
1000ec98:	30d8b03a 	or	r12,r6,r3
1000ec9c:	6000081e 	bne	r12,zero,1000ecc0 <__ledf2+0x74>
1000eca0:	0005883a 	mov	r2,zero
1000eca4:	5800111e 	bne	r11,zero,1000ecec <__ledf2+0xa0>
1000eca8:	f800283a 	ret
1000ecac:	29403fcc 	andi	r5,r5,255
1000ecb0:	40000c1e 	bne	r8,zero,1000ece4 <__ledf2+0x98>
1000ecb4:	30d2b03a 	or	r9,r6,r3
1000ecb8:	48000c26 	beq	r9,zero,1000ecec <__ledf2+0xa0>
1000ecbc:	0013883a 	mov	r9,zero
1000ecc0:	39c03fcc 	andi	r7,r7,255
1000ecc4:	48000826 	beq	r9,zero,1000ece8 <__ledf2+0x9c>
1000ecc8:	38001126 	beq	r7,zero,1000ed10 <__ledf2+0xc4>
1000eccc:	00800044 	movi	r2,1
1000ecd0:	f800283a 	ret
1000ecd4:	30d2b03a 	or	r9,r6,r3
1000ecd8:	483fea26 	beq	r9,zero,1000ec84 <__alt_data_end+0xf800ec84>
1000ecdc:	00800084 	movi	r2,2
1000ece0:	f800283a 	ret
1000ece4:	39c03fcc 	andi	r7,r7,255
1000ece8:	39400726 	beq	r7,r5,1000ed08 <__ledf2+0xbc>
1000ecec:	2800081e 	bne	r5,zero,1000ed10 <__ledf2+0xc4>
1000ecf0:	00800044 	movi	r2,1
1000ecf4:	f800283a 	ret
1000ecf8:	2292b03a 	or	r9,r4,r10
1000ecfc:	483fdf26 	beq	r9,zero,1000ec7c <__alt_data_end+0xf800ec7c>
1000ed00:	00800084 	movi	r2,2
1000ed04:	f800283a 	ret
1000ed08:	4080030e 	bge	r8,r2,1000ed18 <__ledf2+0xcc>
1000ed0c:	383fef26 	beq	r7,zero,1000eccc <__alt_data_end+0xf800eccc>
1000ed10:	00bfffc4 	movi	r2,-1
1000ed14:	f800283a 	ret
1000ed18:	123feb16 	blt	r2,r8,1000ecc8 <__alt_data_end+0xf800ecc8>
1000ed1c:	1abff336 	bltu	r3,r10,1000ecec <__alt_data_end+0xf800ecec>
1000ed20:	50c00326 	beq	r10,r3,1000ed30 <__ledf2+0xe4>
1000ed24:	50c0042e 	bgeu	r10,r3,1000ed38 <__ledf2+0xec>
1000ed28:	283fe81e 	bne	r5,zero,1000eccc <__alt_data_end+0xf800eccc>
1000ed2c:	003ff806 	br	1000ed10 <__alt_data_end+0xf800ed10>
1000ed30:	313fee36 	bltu	r6,r4,1000ecec <__alt_data_end+0xf800ecec>
1000ed34:	21bffc36 	bltu	r4,r6,1000ed28 <__alt_data_end+0xf800ed28>
1000ed38:	0005883a 	mov	r2,zero
1000ed3c:	f800283a 	ret

1000ed40 <__muldf3>:
1000ed40:	deffee04 	addi	sp,sp,-72
1000ed44:	dd000c15 	stw	r20,48(sp)
1000ed48:	2828d53a 	srli	r20,r5,20
1000ed4c:	ddc00f15 	stw	r23,60(sp)
1000ed50:	282ed7fa 	srli	r23,r5,31
1000ed54:	dc000815 	stw	r16,32(sp)
1000ed58:	04000434 	movhi	r16,16
1000ed5c:	dcc00b15 	stw	r19,44(sp)
1000ed60:	843fffc4 	addi	r16,r16,-1
1000ed64:	dfc01115 	stw	ra,68(sp)
1000ed68:	df001015 	stw	fp,64(sp)
1000ed6c:	dd800e15 	stw	r22,56(sp)
1000ed70:	dd400d15 	stw	r21,52(sp)
1000ed74:	dc800a15 	stw	r18,40(sp)
1000ed78:	dc400915 	stw	r17,36(sp)
1000ed7c:	a501ffcc 	andi	r20,r20,2047
1000ed80:	2c20703a 	and	r16,r5,r16
1000ed84:	b827883a 	mov	r19,r23
1000ed88:	ba403fcc 	andi	r9,r23,255
1000ed8c:	a0006026 	beq	r20,zero,1000ef10 <__muldf3+0x1d0>
1000ed90:	0081ffc4 	movi	r2,2047
1000ed94:	202d883a 	mov	r22,r4
1000ed98:	a0803626 	beq	r20,r2,1000ee74 <__muldf3+0x134>
1000ed9c:	84000434 	orhi	r16,r16,16
1000eda0:	200ad77a 	srli	r5,r4,29
1000eda4:	800490fa 	slli	r2,r16,3
1000eda8:	202c90fa 	slli	r22,r4,3
1000edac:	a53f0044 	addi	r20,r20,-1023
1000edb0:	28a0b03a 	or	r16,r5,r2
1000edb4:	002b883a 	mov	r21,zero
1000edb8:	000b883a 	mov	r5,zero
1000edbc:	3804d53a 	srli	r2,r7,20
1000edc0:	3838d7fa 	srli	fp,r7,31
1000edc4:	04400434 	movhi	r17,16
1000edc8:	8c7fffc4 	addi	r17,r17,-1
1000edcc:	1081ffcc 	andi	r2,r2,2047
1000edd0:	3025883a 	mov	r18,r6
1000edd4:	3c62703a 	and	r17,r7,r17
1000edd8:	e2803fcc 	andi	r10,fp,255
1000eddc:	10006d26 	beq	r2,zero,1000ef94 <__muldf3+0x254>
1000ede0:	00c1ffc4 	movi	r3,2047
1000ede4:	10c06526 	beq	r2,r3,1000ef7c <__muldf3+0x23c>
1000ede8:	8c400434 	orhi	r17,r17,16
1000edec:	300ed77a 	srli	r7,r6,29
1000edf0:	880690fa 	slli	r3,r17,3
1000edf4:	302490fa 	slli	r18,r6,3
1000edf8:	10bf0044 	addi	r2,r2,-1023
1000edfc:	38e2b03a 	or	r17,r7,r3
1000ee00:	000f883a 	mov	r7,zero
1000ee04:	a087883a 	add	r3,r20,r2
1000ee08:	010003c4 	movi	r4,15
1000ee0c:	3d44b03a 	or	r2,r7,r21
1000ee10:	e5ccf03a 	xor	r6,fp,r23
1000ee14:	1a000044 	addi	r8,r3,1
1000ee18:	20809b36 	bltu	r4,r2,1000f088 <__muldf3+0x348>
1000ee1c:	100490ba 	slli	r2,r2,2
1000ee20:	01040074 	movhi	r4,4097
1000ee24:	213b8d04 	addi	r4,r4,-4556
1000ee28:	1105883a 	add	r2,r2,r4
1000ee2c:	10800017 	ldw	r2,0(r2)
1000ee30:	1000683a 	jmp	r2
1000ee34:	1000f088 	cmpgei	zero,r2,962
1000ee38:	1000ee94 	ori	zero,r2,954
1000ee3c:	1000ee94 	ori	zero,r2,954
1000ee40:	1000ee90 	cmplti	zero,r2,954
1000ee44:	1000f064 	muli	zero,r2,961
1000ee48:	1000f064 	muli	zero,r2,961
1000ee4c:	1000f04c 	andi	zero,r2,961
1000ee50:	1000ee90 	cmplti	zero,r2,954
1000ee54:	1000f064 	muli	zero,r2,961
1000ee58:	1000f04c 	andi	zero,r2,961
1000ee5c:	1000f064 	muli	zero,r2,961
1000ee60:	1000ee90 	cmplti	zero,r2,954
1000ee64:	1000f074 	orhi	zero,r2,961
1000ee68:	1000f074 	orhi	zero,r2,961
1000ee6c:	1000f074 	orhi	zero,r2,961
1000ee70:	1000f3d4 	ori	zero,r2,975
1000ee74:	2404b03a 	or	r2,r4,r16
1000ee78:	1000711e 	bne	r2,zero,1000f040 <__muldf3+0x300>
1000ee7c:	05400204 	movi	r21,8
1000ee80:	0021883a 	mov	r16,zero
1000ee84:	002d883a 	mov	r22,zero
1000ee88:	01400084 	movi	r5,2
1000ee8c:	003fcb06 	br	1000edbc <__alt_data_end+0xf800edbc>
1000ee90:	500d883a 	mov	r6,r10
1000ee94:	00800084 	movi	r2,2
1000ee98:	38805926 	beq	r7,r2,1000f000 <__muldf3+0x2c0>
1000ee9c:	008000c4 	movi	r2,3
1000eea0:	3881bb26 	beq	r7,r2,1000f590 <__muldf3+0x850>
1000eea4:	00800044 	movi	r2,1
1000eea8:	3881961e 	bne	r7,r2,1000f504 <__muldf3+0x7c4>
1000eeac:	3027883a 	mov	r19,r6
1000eeb0:	0005883a 	mov	r2,zero
1000eeb4:	0021883a 	mov	r16,zero
1000eeb8:	002d883a 	mov	r22,zero
1000eebc:	1004953a 	slli	r2,r2,20
1000eec0:	98c03fcc 	andi	r3,r19,255
1000eec4:	04400434 	movhi	r17,16
1000eec8:	8c7fffc4 	addi	r17,r17,-1
1000eecc:	180697fa 	slli	r3,r3,31
1000eed0:	8460703a 	and	r16,r16,r17
1000eed4:	80a0b03a 	or	r16,r16,r2
1000eed8:	80c6b03a 	or	r3,r16,r3
1000eedc:	b005883a 	mov	r2,r22
1000eee0:	dfc01117 	ldw	ra,68(sp)
1000eee4:	df001017 	ldw	fp,64(sp)
1000eee8:	ddc00f17 	ldw	r23,60(sp)
1000eeec:	dd800e17 	ldw	r22,56(sp)
1000eef0:	dd400d17 	ldw	r21,52(sp)
1000eef4:	dd000c17 	ldw	r20,48(sp)
1000eef8:	dcc00b17 	ldw	r19,44(sp)
1000eefc:	dc800a17 	ldw	r18,40(sp)
1000ef00:	dc400917 	ldw	r17,36(sp)
1000ef04:	dc000817 	ldw	r16,32(sp)
1000ef08:	dec01204 	addi	sp,sp,72
1000ef0c:	f800283a 	ret
1000ef10:	2404b03a 	or	r2,r4,r16
1000ef14:	202b883a 	mov	r21,r4
1000ef18:	10004426 	beq	r2,zero,1000f02c <__muldf3+0x2ec>
1000ef1c:	80015126 	beq	r16,zero,1000f464 <__muldf3+0x724>
1000ef20:	8009883a 	mov	r4,r16
1000ef24:	d9800715 	stw	r6,28(sp)
1000ef28:	d9c00215 	stw	r7,8(sp)
1000ef2c:	da400415 	stw	r9,16(sp)
1000ef30:	00100ac0 	call	100100ac <__clzsi2>
1000ef34:	d9800717 	ldw	r6,28(sp)
1000ef38:	d9c00217 	ldw	r7,8(sp)
1000ef3c:	da400417 	ldw	r9,16(sp)
1000ef40:	113ffd44 	addi	r4,r2,-11
1000ef44:	00c00704 	movi	r3,28
1000ef48:	19014216 	blt	r3,r4,1000f454 <__muldf3+0x714>
1000ef4c:	00c00744 	movi	r3,29
1000ef50:	15bffe04 	addi	r22,r2,-8
1000ef54:	1907c83a 	sub	r3,r3,r4
1000ef58:	85a0983a 	sll	r16,r16,r22
1000ef5c:	a8c6d83a 	srl	r3,r21,r3
1000ef60:	adac983a 	sll	r22,r21,r22
1000ef64:	1c20b03a 	or	r16,r3,r16
1000ef68:	1080fcc4 	addi	r2,r2,1011
1000ef6c:	00a9c83a 	sub	r20,zero,r2
1000ef70:	002b883a 	mov	r21,zero
1000ef74:	000b883a 	mov	r5,zero
1000ef78:	003f9006 	br	1000edbc <__alt_data_end+0xf800edbc>
1000ef7c:	3446b03a 	or	r3,r6,r17
1000ef80:	1800281e 	bne	r3,zero,1000f024 <__muldf3+0x2e4>
1000ef84:	0023883a 	mov	r17,zero
1000ef88:	0025883a 	mov	r18,zero
1000ef8c:	01c00084 	movi	r7,2
1000ef90:	003f9c06 	br	1000ee04 <__alt_data_end+0xf800ee04>
1000ef94:	3446b03a 	or	r3,r6,r17
1000ef98:	18001e26 	beq	r3,zero,1000f014 <__muldf3+0x2d4>
1000ef9c:	88012126 	beq	r17,zero,1000f424 <__muldf3+0x6e4>
1000efa0:	8809883a 	mov	r4,r17
1000efa4:	d9400215 	stw	r5,8(sp)
1000efa8:	d9800715 	stw	r6,28(sp)
1000efac:	da400415 	stw	r9,16(sp)
1000efb0:	da800315 	stw	r10,12(sp)
1000efb4:	00100ac0 	call	100100ac <__clzsi2>
1000efb8:	d9400217 	ldw	r5,8(sp)
1000efbc:	d9800717 	ldw	r6,28(sp)
1000efc0:	da400417 	ldw	r9,16(sp)
1000efc4:	da800317 	ldw	r10,12(sp)
1000efc8:	113ffd44 	addi	r4,r2,-11
1000efcc:	00c00704 	movi	r3,28
1000efd0:	19011016 	blt	r3,r4,1000f414 <__muldf3+0x6d4>
1000efd4:	00c00744 	movi	r3,29
1000efd8:	14bffe04 	addi	r18,r2,-8
1000efdc:	1907c83a 	sub	r3,r3,r4
1000efe0:	8ca2983a 	sll	r17,r17,r18
1000efe4:	30c6d83a 	srl	r3,r6,r3
1000efe8:	34a4983a 	sll	r18,r6,r18
1000efec:	1c62b03a 	or	r17,r3,r17
1000eff0:	1080fcc4 	addi	r2,r2,1011
1000eff4:	0085c83a 	sub	r2,zero,r2
1000eff8:	000f883a 	mov	r7,zero
1000effc:	003f8106 	br	1000ee04 <__alt_data_end+0xf800ee04>
1000f000:	3027883a 	mov	r19,r6
1000f004:	0081ffc4 	movi	r2,2047
1000f008:	0021883a 	mov	r16,zero
1000f00c:	002d883a 	mov	r22,zero
1000f010:	003faa06 	br	1000eebc <__alt_data_end+0xf800eebc>
1000f014:	0023883a 	mov	r17,zero
1000f018:	0025883a 	mov	r18,zero
1000f01c:	01c00044 	movi	r7,1
1000f020:	003f7806 	br	1000ee04 <__alt_data_end+0xf800ee04>
1000f024:	01c000c4 	movi	r7,3
1000f028:	003f7606 	br	1000ee04 <__alt_data_end+0xf800ee04>
1000f02c:	05400104 	movi	r21,4
1000f030:	0021883a 	mov	r16,zero
1000f034:	002d883a 	mov	r22,zero
1000f038:	01400044 	movi	r5,1
1000f03c:	003f5f06 	br	1000edbc <__alt_data_end+0xf800edbc>
1000f040:	05400304 	movi	r21,12
1000f044:	014000c4 	movi	r5,3
1000f048:	003f5c06 	br	1000edbc <__alt_data_end+0xf800edbc>
1000f04c:	04000434 	movhi	r16,16
1000f050:	0027883a 	mov	r19,zero
1000f054:	843fffc4 	addi	r16,r16,-1
1000f058:	05bfffc4 	movi	r22,-1
1000f05c:	0081ffc4 	movi	r2,2047
1000f060:	003f9606 	br	1000eebc <__alt_data_end+0xf800eebc>
1000f064:	8023883a 	mov	r17,r16
1000f068:	b025883a 	mov	r18,r22
1000f06c:	280f883a 	mov	r7,r5
1000f070:	003f8806 	br	1000ee94 <__alt_data_end+0xf800ee94>
1000f074:	8023883a 	mov	r17,r16
1000f078:	b025883a 	mov	r18,r22
1000f07c:	480d883a 	mov	r6,r9
1000f080:	280f883a 	mov	r7,r5
1000f084:	003f8306 	br	1000ee94 <__alt_data_end+0xf800ee94>
1000f088:	b026d43a 	srli	r19,r22,16
1000f08c:	902ed43a 	srli	r23,r18,16
1000f090:	b5bfffcc 	andi	r22,r22,65535
1000f094:	94bfffcc 	andi	r18,r18,65535
1000f098:	b00b883a 	mov	r5,r22
1000f09c:	9009883a 	mov	r4,r18
1000f0a0:	d8c00515 	stw	r3,20(sp)
1000f0a4:	d9800715 	stw	r6,28(sp)
1000f0a8:	da000615 	stw	r8,24(sp)
1000f0ac:	000d8440 	call	1000d844 <__mulsi3>
1000f0b0:	980b883a 	mov	r5,r19
1000f0b4:	9009883a 	mov	r4,r18
1000f0b8:	1029883a 	mov	r20,r2
1000f0bc:	000d8440 	call	1000d844 <__mulsi3>
1000f0c0:	b80b883a 	mov	r5,r23
1000f0c4:	9809883a 	mov	r4,r19
1000f0c8:	102b883a 	mov	r21,r2
1000f0cc:	000d8440 	call	1000d844 <__mulsi3>
1000f0d0:	b809883a 	mov	r4,r23
1000f0d4:	b00b883a 	mov	r5,r22
1000f0d8:	1039883a 	mov	fp,r2
1000f0dc:	000d8440 	call	1000d844 <__mulsi3>
1000f0e0:	a008d43a 	srli	r4,r20,16
1000f0e4:	1545883a 	add	r2,r2,r21
1000f0e8:	d8c00517 	ldw	r3,20(sp)
1000f0ec:	2085883a 	add	r2,r4,r2
1000f0f0:	d9800717 	ldw	r6,28(sp)
1000f0f4:	da000617 	ldw	r8,24(sp)
1000f0f8:	1540022e 	bgeu	r2,r21,1000f104 <__muldf3+0x3c4>
1000f0fc:	01000074 	movhi	r4,1
1000f100:	e139883a 	add	fp,fp,r4
1000f104:	100e943a 	slli	r7,r2,16
1000f108:	1004d43a 	srli	r2,r2,16
1000f10c:	882ad43a 	srli	r21,r17,16
1000f110:	a53fffcc 	andi	r20,r20,65535
1000f114:	8c7fffcc 	andi	r17,r17,65535
1000f118:	3d29883a 	add	r20,r7,r20
1000f11c:	b00b883a 	mov	r5,r22
1000f120:	8809883a 	mov	r4,r17
1000f124:	d8c00515 	stw	r3,20(sp)
1000f128:	d9800715 	stw	r6,28(sp)
1000f12c:	da000615 	stw	r8,24(sp)
1000f130:	dd000115 	stw	r20,4(sp)
1000f134:	d8800015 	stw	r2,0(sp)
1000f138:	000d8440 	call	1000d844 <__mulsi3>
1000f13c:	980b883a 	mov	r5,r19
1000f140:	8809883a 	mov	r4,r17
1000f144:	d8800215 	stw	r2,8(sp)
1000f148:	000d8440 	call	1000d844 <__mulsi3>
1000f14c:	9809883a 	mov	r4,r19
1000f150:	a80b883a 	mov	r5,r21
1000f154:	1029883a 	mov	r20,r2
1000f158:	000d8440 	call	1000d844 <__mulsi3>
1000f15c:	b00b883a 	mov	r5,r22
1000f160:	a809883a 	mov	r4,r21
1000f164:	d8800415 	stw	r2,16(sp)
1000f168:	000d8440 	call	1000d844 <__mulsi3>
1000f16c:	d9c00217 	ldw	r7,8(sp)
1000f170:	1505883a 	add	r2,r2,r20
1000f174:	d8c00517 	ldw	r3,20(sp)
1000f178:	3826d43a 	srli	r19,r7,16
1000f17c:	d9800717 	ldw	r6,28(sp)
1000f180:	da000617 	ldw	r8,24(sp)
1000f184:	9885883a 	add	r2,r19,r2
1000f188:	da400417 	ldw	r9,16(sp)
1000f18c:	1500022e 	bgeu	r2,r20,1000f198 <__muldf3+0x458>
1000f190:	01000074 	movhi	r4,1
1000f194:	4913883a 	add	r9,r9,r4
1000f198:	1028d43a 	srli	r20,r2,16
1000f19c:	1004943a 	slli	r2,r2,16
1000f1a0:	802cd43a 	srli	r22,r16,16
1000f1a4:	843fffcc 	andi	r16,r16,65535
1000f1a8:	3cffffcc 	andi	r19,r7,65535
1000f1ac:	9009883a 	mov	r4,r18
1000f1b0:	800b883a 	mov	r5,r16
1000f1b4:	a269883a 	add	r20,r20,r9
1000f1b8:	d8c00515 	stw	r3,20(sp)
1000f1bc:	d9800715 	stw	r6,28(sp)
1000f1c0:	da000615 	stw	r8,24(sp)
1000f1c4:	14e7883a 	add	r19,r2,r19
1000f1c8:	000d8440 	call	1000d844 <__mulsi3>
1000f1cc:	9009883a 	mov	r4,r18
1000f1d0:	b00b883a 	mov	r5,r22
1000f1d4:	d8800315 	stw	r2,12(sp)
1000f1d8:	000d8440 	call	1000d844 <__mulsi3>
1000f1dc:	b809883a 	mov	r4,r23
1000f1e0:	b00b883a 	mov	r5,r22
1000f1e4:	d8800215 	stw	r2,8(sp)
1000f1e8:	000d8440 	call	1000d844 <__mulsi3>
1000f1ec:	b80b883a 	mov	r5,r23
1000f1f0:	8009883a 	mov	r4,r16
1000f1f4:	d8800415 	stw	r2,16(sp)
1000f1f8:	000d8440 	call	1000d844 <__mulsi3>
1000f1fc:	da800317 	ldw	r10,12(sp)
1000f200:	d9c00217 	ldw	r7,8(sp)
1000f204:	d9000017 	ldw	r4,0(sp)
1000f208:	502ed43a 	srli	r23,r10,16
1000f20c:	11c5883a 	add	r2,r2,r7
1000f210:	24e5883a 	add	r18,r4,r19
1000f214:	b885883a 	add	r2,r23,r2
1000f218:	d8c00517 	ldw	r3,20(sp)
1000f21c:	d9800717 	ldw	r6,28(sp)
1000f220:	da000617 	ldw	r8,24(sp)
1000f224:	da400417 	ldw	r9,16(sp)
1000f228:	11c0022e 	bgeu	r2,r7,1000f234 <__muldf3+0x4f4>
1000f22c:	01000074 	movhi	r4,1
1000f230:	4913883a 	add	r9,r9,r4
1000f234:	100ed43a 	srli	r7,r2,16
1000f238:	1004943a 	slli	r2,r2,16
1000f23c:	55ffffcc 	andi	r23,r10,65535
1000f240:	3a53883a 	add	r9,r7,r9
1000f244:	8809883a 	mov	r4,r17
1000f248:	800b883a 	mov	r5,r16
1000f24c:	d8c00515 	stw	r3,20(sp)
1000f250:	d9800715 	stw	r6,28(sp)
1000f254:	da000615 	stw	r8,24(sp)
1000f258:	da400415 	stw	r9,16(sp)
1000f25c:	15ef883a 	add	r23,r2,r23
1000f260:	000d8440 	call	1000d844 <__mulsi3>
1000f264:	8809883a 	mov	r4,r17
1000f268:	b00b883a 	mov	r5,r22
1000f26c:	d8800215 	stw	r2,8(sp)
1000f270:	000d8440 	call	1000d844 <__mulsi3>
1000f274:	b00b883a 	mov	r5,r22
1000f278:	a809883a 	mov	r4,r21
1000f27c:	d8800315 	stw	r2,12(sp)
1000f280:	000d8440 	call	1000d844 <__mulsi3>
1000f284:	8009883a 	mov	r4,r16
1000f288:	a80b883a 	mov	r5,r21
1000f28c:	1023883a 	mov	r17,r2
1000f290:	000d8440 	call	1000d844 <__mulsi3>
1000f294:	d9c00217 	ldw	r7,8(sp)
1000f298:	da800317 	ldw	r10,12(sp)
1000f29c:	d8c00517 	ldw	r3,20(sp)
1000f2a0:	3808d43a 	srli	r4,r7,16
1000f2a4:	1285883a 	add	r2,r2,r10
1000f2a8:	d9800717 	ldw	r6,28(sp)
1000f2ac:	2085883a 	add	r2,r4,r2
1000f2b0:	da000617 	ldw	r8,24(sp)
1000f2b4:	da400417 	ldw	r9,16(sp)
1000f2b8:	1280022e 	bgeu	r2,r10,1000f2c4 <__muldf3+0x584>
1000f2bc:	01000074 	movhi	r4,1
1000f2c0:	8923883a 	add	r17,r17,r4
1000f2c4:	1008943a 	slli	r4,r2,16
1000f2c8:	39ffffcc 	andi	r7,r7,65535
1000f2cc:	e4b9883a 	add	fp,fp,r18
1000f2d0:	21cf883a 	add	r7,r4,r7
1000f2d4:	e4e7803a 	cmpltu	r19,fp,r19
1000f2d8:	3d0f883a 	add	r7,r7,r20
1000f2dc:	bf39883a 	add	fp,r23,fp
1000f2e0:	99c9883a 	add	r4,r19,r7
1000f2e4:	e5ef803a 	cmpltu	r23,fp,r23
1000f2e8:	490b883a 	add	r5,r9,r4
1000f2ec:	1004d43a 	srli	r2,r2,16
1000f2f0:	b965883a 	add	r18,r23,r5
1000f2f4:	24c9803a 	cmpltu	r4,r4,r19
1000f2f8:	3d29803a 	cmpltu	r20,r7,r20
1000f2fc:	a128b03a 	or	r20,r20,r4
1000f300:	95ef803a 	cmpltu	r23,r18,r23
1000f304:	2a53803a 	cmpltu	r9,r5,r9
1000f308:	a0a9883a 	add	r20,r20,r2
1000f30c:	4deeb03a 	or	r23,r9,r23
1000f310:	a5ef883a 	add	r23,r20,r23
1000f314:	bc63883a 	add	r17,r23,r17
1000f318:	e004927a 	slli	r2,fp,9
1000f31c:	d9000117 	ldw	r4,4(sp)
1000f320:	882e927a 	slli	r23,r17,9
1000f324:	9022d5fa 	srli	r17,r18,23
1000f328:	e038d5fa 	srli	fp,fp,23
1000f32c:	1104b03a 	or	r2,r2,r4
1000f330:	9024927a 	slli	r18,r18,9
1000f334:	1004c03a 	cmpne	r2,r2,zero
1000f338:	bc62b03a 	or	r17,r23,r17
1000f33c:	1738b03a 	or	fp,r2,fp
1000f340:	8880402c 	andhi	r2,r17,256
1000f344:	e4a4b03a 	or	r18,fp,r18
1000f348:	10000726 	beq	r2,zero,1000f368 <__muldf3+0x628>
1000f34c:	9006d07a 	srli	r3,r18,1
1000f350:	880497fa 	slli	r2,r17,31
1000f354:	9480004c 	andi	r18,r18,1
1000f358:	8822d07a 	srli	r17,r17,1
1000f35c:	1ca4b03a 	or	r18,r3,r18
1000f360:	14a4b03a 	or	r18,r2,r18
1000f364:	4007883a 	mov	r3,r8
1000f368:	1880ffc4 	addi	r2,r3,1023
1000f36c:	0080460e 	bge	zero,r2,1000f488 <__muldf3+0x748>
1000f370:	910001cc 	andi	r4,r18,7
1000f374:	20000726 	beq	r4,zero,1000f394 <__muldf3+0x654>
1000f378:	910003cc 	andi	r4,r18,15
1000f37c:	01400104 	movi	r5,4
1000f380:	21400426 	beq	r4,r5,1000f394 <__muldf3+0x654>
1000f384:	9149883a 	add	r4,r18,r5
1000f388:	24a5803a 	cmpltu	r18,r4,r18
1000f38c:	8ca3883a 	add	r17,r17,r18
1000f390:	2025883a 	mov	r18,r4
1000f394:	8900402c 	andhi	r4,r17,256
1000f398:	20000426 	beq	r4,zero,1000f3ac <__muldf3+0x66c>
1000f39c:	18810004 	addi	r2,r3,1024
1000f3a0:	00ffc034 	movhi	r3,65280
1000f3a4:	18ffffc4 	addi	r3,r3,-1
1000f3a8:	88e2703a 	and	r17,r17,r3
1000f3ac:	00c1ff84 	movi	r3,2046
1000f3b0:	18bf1316 	blt	r3,r2,1000f000 <__alt_data_end+0xf800f000>
1000f3b4:	882c977a 	slli	r22,r17,29
1000f3b8:	9024d0fa 	srli	r18,r18,3
1000f3bc:	8822927a 	slli	r17,r17,9
1000f3c0:	1081ffcc 	andi	r2,r2,2047
1000f3c4:	b4acb03a 	or	r22,r22,r18
1000f3c8:	8820d33a 	srli	r16,r17,12
1000f3cc:	3027883a 	mov	r19,r6
1000f3d0:	003eba06 	br	1000eebc <__alt_data_end+0xf800eebc>
1000f3d4:	8080022c 	andhi	r2,r16,8
1000f3d8:	10000926 	beq	r2,zero,1000f400 <__muldf3+0x6c0>
1000f3dc:	8880022c 	andhi	r2,r17,8
1000f3e0:	1000071e 	bne	r2,zero,1000f400 <__muldf3+0x6c0>
1000f3e4:	00800434 	movhi	r2,16
1000f3e8:	8c000234 	orhi	r16,r17,8
1000f3ec:	10bfffc4 	addi	r2,r2,-1
1000f3f0:	e027883a 	mov	r19,fp
1000f3f4:	80a0703a 	and	r16,r16,r2
1000f3f8:	902d883a 	mov	r22,r18
1000f3fc:	003f1706 	br	1000f05c <__alt_data_end+0xf800f05c>
1000f400:	00800434 	movhi	r2,16
1000f404:	84000234 	orhi	r16,r16,8
1000f408:	10bfffc4 	addi	r2,r2,-1
1000f40c:	80a0703a 	and	r16,r16,r2
1000f410:	003f1206 	br	1000f05c <__alt_data_end+0xf800f05c>
1000f414:	147ff604 	addi	r17,r2,-40
1000f418:	3462983a 	sll	r17,r6,r17
1000f41c:	0025883a 	mov	r18,zero
1000f420:	003ef306 	br	1000eff0 <__alt_data_end+0xf800eff0>
1000f424:	3009883a 	mov	r4,r6
1000f428:	d9400215 	stw	r5,8(sp)
1000f42c:	d9800715 	stw	r6,28(sp)
1000f430:	da400415 	stw	r9,16(sp)
1000f434:	da800315 	stw	r10,12(sp)
1000f438:	00100ac0 	call	100100ac <__clzsi2>
1000f43c:	10800804 	addi	r2,r2,32
1000f440:	da800317 	ldw	r10,12(sp)
1000f444:	da400417 	ldw	r9,16(sp)
1000f448:	d9800717 	ldw	r6,28(sp)
1000f44c:	d9400217 	ldw	r5,8(sp)
1000f450:	003edd06 	br	1000efc8 <__alt_data_end+0xf800efc8>
1000f454:	143ff604 	addi	r16,r2,-40
1000f458:	ac20983a 	sll	r16,r21,r16
1000f45c:	002d883a 	mov	r22,zero
1000f460:	003ec106 	br	1000ef68 <__alt_data_end+0xf800ef68>
1000f464:	d9800715 	stw	r6,28(sp)
1000f468:	d9c00215 	stw	r7,8(sp)
1000f46c:	da400415 	stw	r9,16(sp)
1000f470:	00100ac0 	call	100100ac <__clzsi2>
1000f474:	10800804 	addi	r2,r2,32
1000f478:	da400417 	ldw	r9,16(sp)
1000f47c:	d9c00217 	ldw	r7,8(sp)
1000f480:	d9800717 	ldw	r6,28(sp)
1000f484:	003eae06 	br	1000ef40 <__alt_data_end+0xf800ef40>
1000f488:	00c00044 	movi	r3,1
1000f48c:	1887c83a 	sub	r3,r3,r2
1000f490:	01000e04 	movi	r4,56
1000f494:	20fe8516 	blt	r4,r3,1000eeac <__alt_data_end+0xf800eeac>
1000f498:	010007c4 	movi	r4,31
1000f49c:	20c01b16 	blt	r4,r3,1000f50c <__muldf3+0x7cc>
1000f4a0:	00800804 	movi	r2,32
1000f4a4:	10c5c83a 	sub	r2,r2,r3
1000f4a8:	888a983a 	sll	r5,r17,r2
1000f4ac:	90c8d83a 	srl	r4,r18,r3
1000f4b0:	9084983a 	sll	r2,r18,r2
1000f4b4:	88e2d83a 	srl	r17,r17,r3
1000f4b8:	2906b03a 	or	r3,r5,r4
1000f4bc:	1004c03a 	cmpne	r2,r2,zero
1000f4c0:	1886b03a 	or	r3,r3,r2
1000f4c4:	188001cc 	andi	r2,r3,7
1000f4c8:	10000726 	beq	r2,zero,1000f4e8 <__muldf3+0x7a8>
1000f4cc:	188003cc 	andi	r2,r3,15
1000f4d0:	01000104 	movi	r4,4
1000f4d4:	11000426 	beq	r2,r4,1000f4e8 <__muldf3+0x7a8>
1000f4d8:	1805883a 	mov	r2,r3
1000f4dc:	10c00104 	addi	r3,r2,4
1000f4e0:	1885803a 	cmpltu	r2,r3,r2
1000f4e4:	88a3883a 	add	r17,r17,r2
1000f4e8:	8880202c 	andhi	r2,r17,128
1000f4ec:	10001c26 	beq	r2,zero,1000f560 <__muldf3+0x820>
1000f4f0:	3027883a 	mov	r19,r6
1000f4f4:	00800044 	movi	r2,1
1000f4f8:	0021883a 	mov	r16,zero
1000f4fc:	002d883a 	mov	r22,zero
1000f500:	003e6e06 	br	1000eebc <__alt_data_end+0xf800eebc>
1000f504:	4007883a 	mov	r3,r8
1000f508:	003f9706 	br	1000f368 <__alt_data_end+0xf800f368>
1000f50c:	017ff844 	movi	r5,-31
1000f510:	2885c83a 	sub	r2,r5,r2
1000f514:	888ad83a 	srl	r5,r17,r2
1000f518:	00800804 	movi	r2,32
1000f51c:	18801a26 	beq	r3,r2,1000f588 <__muldf3+0x848>
1000f520:	01001004 	movi	r4,64
1000f524:	20c7c83a 	sub	r3,r4,r3
1000f528:	88e2983a 	sll	r17,r17,r3
1000f52c:	8ca4b03a 	or	r18,r17,r18
1000f530:	9004c03a 	cmpne	r2,r18,zero
1000f534:	2884b03a 	or	r2,r5,r2
1000f538:	144001cc 	andi	r17,r2,7
1000f53c:	88000d1e 	bne	r17,zero,1000f574 <__muldf3+0x834>
1000f540:	0021883a 	mov	r16,zero
1000f544:	102cd0fa 	srli	r22,r2,3
1000f548:	3027883a 	mov	r19,r6
1000f54c:	0005883a 	mov	r2,zero
1000f550:	b46cb03a 	or	r22,r22,r17
1000f554:	003e5906 	br	1000eebc <__alt_data_end+0xf800eebc>
1000f558:	1007883a 	mov	r3,r2
1000f55c:	0023883a 	mov	r17,zero
1000f560:	8820927a 	slli	r16,r17,9
1000f564:	1805883a 	mov	r2,r3
1000f568:	8822977a 	slli	r17,r17,29
1000f56c:	8020d33a 	srli	r16,r16,12
1000f570:	003ff406 	br	1000f544 <__alt_data_end+0xf800f544>
1000f574:	10c003cc 	andi	r3,r2,15
1000f578:	01000104 	movi	r4,4
1000f57c:	193ff626 	beq	r3,r4,1000f558 <__alt_data_end+0xf800f558>
1000f580:	0023883a 	mov	r17,zero
1000f584:	003fd506 	br	1000f4dc <__alt_data_end+0xf800f4dc>
1000f588:	0023883a 	mov	r17,zero
1000f58c:	003fe706 	br	1000f52c <__alt_data_end+0xf800f52c>
1000f590:	00800434 	movhi	r2,16
1000f594:	8c000234 	orhi	r16,r17,8
1000f598:	10bfffc4 	addi	r2,r2,-1
1000f59c:	3027883a 	mov	r19,r6
1000f5a0:	80a0703a 	and	r16,r16,r2
1000f5a4:	902d883a 	mov	r22,r18
1000f5a8:	003eac06 	br	1000f05c <__alt_data_end+0xf800f05c>

1000f5ac <__subdf3>:
1000f5ac:	02000434 	movhi	r8,16
1000f5b0:	423fffc4 	addi	r8,r8,-1
1000f5b4:	defffb04 	addi	sp,sp,-20
1000f5b8:	2a14703a 	and	r10,r5,r8
1000f5bc:	3812d53a 	srli	r9,r7,20
1000f5c0:	3a10703a 	and	r8,r7,r8
1000f5c4:	2006d77a 	srli	r3,r4,29
1000f5c8:	3004d77a 	srli	r2,r6,29
1000f5cc:	dc000015 	stw	r16,0(sp)
1000f5d0:	501490fa 	slli	r10,r10,3
1000f5d4:	2820d53a 	srli	r16,r5,20
1000f5d8:	401090fa 	slli	r8,r8,3
1000f5dc:	dc800215 	stw	r18,8(sp)
1000f5e0:	dc400115 	stw	r17,4(sp)
1000f5e4:	dfc00415 	stw	ra,16(sp)
1000f5e8:	202290fa 	slli	r17,r4,3
1000f5ec:	dcc00315 	stw	r19,12(sp)
1000f5f0:	4a41ffcc 	andi	r9,r9,2047
1000f5f4:	0101ffc4 	movi	r4,2047
1000f5f8:	2824d7fa 	srli	r18,r5,31
1000f5fc:	8401ffcc 	andi	r16,r16,2047
1000f600:	50c6b03a 	or	r3,r10,r3
1000f604:	380ed7fa 	srli	r7,r7,31
1000f608:	408ab03a 	or	r5,r8,r2
1000f60c:	300c90fa 	slli	r6,r6,3
1000f610:	49009626 	beq	r9,r4,1000f86c <__subdf3+0x2c0>
1000f614:	39c0005c 	xori	r7,r7,1
1000f618:	8245c83a 	sub	r2,r16,r9
1000f61c:	3c807426 	beq	r7,r18,1000f7f0 <__subdf3+0x244>
1000f620:	0080af0e 	bge	zero,r2,1000f8e0 <__subdf3+0x334>
1000f624:	48002a1e 	bne	r9,zero,1000f6d0 <__subdf3+0x124>
1000f628:	2988b03a 	or	r4,r5,r6
1000f62c:	20009a1e 	bne	r4,zero,1000f898 <__subdf3+0x2ec>
1000f630:	888001cc 	andi	r2,r17,7
1000f634:	10000726 	beq	r2,zero,1000f654 <__subdf3+0xa8>
1000f638:	888003cc 	andi	r2,r17,15
1000f63c:	01000104 	movi	r4,4
1000f640:	11000426 	beq	r2,r4,1000f654 <__subdf3+0xa8>
1000f644:	890b883a 	add	r5,r17,r4
1000f648:	2c63803a 	cmpltu	r17,r5,r17
1000f64c:	1c47883a 	add	r3,r3,r17
1000f650:	2823883a 	mov	r17,r5
1000f654:	1880202c 	andhi	r2,r3,128
1000f658:	10005926 	beq	r2,zero,1000f7c0 <__subdf3+0x214>
1000f65c:	84000044 	addi	r16,r16,1
1000f660:	0081ffc4 	movi	r2,2047
1000f664:	8080be26 	beq	r16,r2,1000f960 <__subdf3+0x3b4>
1000f668:	017fe034 	movhi	r5,65408
1000f66c:	297fffc4 	addi	r5,r5,-1
1000f670:	1946703a 	and	r3,r3,r5
1000f674:	1804977a 	slli	r2,r3,29
1000f678:	1806927a 	slli	r3,r3,9
1000f67c:	8822d0fa 	srli	r17,r17,3
1000f680:	8401ffcc 	andi	r16,r16,2047
1000f684:	180ad33a 	srli	r5,r3,12
1000f688:	9100004c 	andi	r4,r18,1
1000f68c:	1444b03a 	or	r2,r2,r17
1000f690:	80c1ffcc 	andi	r3,r16,2047
1000f694:	1820953a 	slli	r16,r3,20
1000f698:	20c03fcc 	andi	r3,r4,255
1000f69c:	180897fa 	slli	r4,r3,31
1000f6a0:	00c00434 	movhi	r3,16
1000f6a4:	18ffffc4 	addi	r3,r3,-1
1000f6a8:	28c6703a 	and	r3,r5,r3
1000f6ac:	1c06b03a 	or	r3,r3,r16
1000f6b0:	1906b03a 	or	r3,r3,r4
1000f6b4:	dfc00417 	ldw	ra,16(sp)
1000f6b8:	dcc00317 	ldw	r19,12(sp)
1000f6bc:	dc800217 	ldw	r18,8(sp)
1000f6c0:	dc400117 	ldw	r17,4(sp)
1000f6c4:	dc000017 	ldw	r16,0(sp)
1000f6c8:	dec00504 	addi	sp,sp,20
1000f6cc:	f800283a 	ret
1000f6d0:	0101ffc4 	movi	r4,2047
1000f6d4:	813fd626 	beq	r16,r4,1000f630 <__alt_data_end+0xf800f630>
1000f6d8:	29402034 	orhi	r5,r5,128
1000f6dc:	01000e04 	movi	r4,56
1000f6e0:	2080a316 	blt	r4,r2,1000f970 <__subdf3+0x3c4>
1000f6e4:	010007c4 	movi	r4,31
1000f6e8:	2080c616 	blt	r4,r2,1000fa04 <__subdf3+0x458>
1000f6ec:	01000804 	movi	r4,32
1000f6f0:	2089c83a 	sub	r4,r4,r2
1000f6f4:	2910983a 	sll	r8,r5,r4
1000f6f8:	308ed83a 	srl	r7,r6,r2
1000f6fc:	3108983a 	sll	r4,r6,r4
1000f700:	2884d83a 	srl	r2,r5,r2
1000f704:	41ccb03a 	or	r6,r8,r7
1000f708:	2008c03a 	cmpne	r4,r4,zero
1000f70c:	310cb03a 	or	r6,r6,r4
1000f710:	898dc83a 	sub	r6,r17,r6
1000f714:	89a3803a 	cmpltu	r17,r17,r6
1000f718:	1887c83a 	sub	r3,r3,r2
1000f71c:	1c47c83a 	sub	r3,r3,r17
1000f720:	3023883a 	mov	r17,r6
1000f724:	1880202c 	andhi	r2,r3,128
1000f728:	10002326 	beq	r2,zero,1000f7b8 <__subdf3+0x20c>
1000f72c:	04c02034 	movhi	r19,128
1000f730:	9cffffc4 	addi	r19,r19,-1
1000f734:	1ce6703a 	and	r19,r3,r19
1000f738:	98007a26 	beq	r19,zero,1000f924 <__subdf3+0x378>
1000f73c:	9809883a 	mov	r4,r19
1000f740:	00100ac0 	call	100100ac <__clzsi2>
1000f744:	113ffe04 	addi	r4,r2,-8
1000f748:	00c007c4 	movi	r3,31
1000f74c:	19007b16 	blt	r3,r4,1000f93c <__subdf3+0x390>
1000f750:	00800804 	movi	r2,32
1000f754:	1105c83a 	sub	r2,r2,r4
1000f758:	8884d83a 	srl	r2,r17,r2
1000f75c:	9906983a 	sll	r3,r19,r4
1000f760:	8922983a 	sll	r17,r17,r4
1000f764:	10c4b03a 	or	r2,r2,r3
1000f768:	24007816 	blt	r4,r16,1000f94c <__subdf3+0x3a0>
1000f76c:	2421c83a 	sub	r16,r4,r16
1000f770:	80c00044 	addi	r3,r16,1
1000f774:	010007c4 	movi	r4,31
1000f778:	20c09516 	blt	r4,r3,1000f9d0 <__subdf3+0x424>
1000f77c:	01400804 	movi	r5,32
1000f780:	28cbc83a 	sub	r5,r5,r3
1000f784:	88c8d83a 	srl	r4,r17,r3
1000f788:	8962983a 	sll	r17,r17,r5
1000f78c:	114a983a 	sll	r5,r2,r5
1000f790:	10c6d83a 	srl	r3,r2,r3
1000f794:	8804c03a 	cmpne	r2,r17,zero
1000f798:	290ab03a 	or	r5,r5,r4
1000f79c:	28a2b03a 	or	r17,r5,r2
1000f7a0:	0021883a 	mov	r16,zero
1000f7a4:	003fa206 	br	1000f630 <__alt_data_end+0xf800f630>
1000f7a8:	2090b03a 	or	r8,r4,r2
1000f7ac:	40018e26 	beq	r8,zero,1000fde8 <__subdf3+0x83c>
1000f7b0:	1007883a 	mov	r3,r2
1000f7b4:	2023883a 	mov	r17,r4
1000f7b8:	888001cc 	andi	r2,r17,7
1000f7bc:	103f9e1e 	bne	r2,zero,1000f638 <__alt_data_end+0xf800f638>
1000f7c0:	1804977a 	slli	r2,r3,29
1000f7c4:	8822d0fa 	srli	r17,r17,3
1000f7c8:	1810d0fa 	srli	r8,r3,3
1000f7cc:	9100004c 	andi	r4,r18,1
1000f7d0:	1444b03a 	or	r2,r2,r17
1000f7d4:	00c1ffc4 	movi	r3,2047
1000f7d8:	80c02826 	beq	r16,r3,1000f87c <__subdf3+0x2d0>
1000f7dc:	01400434 	movhi	r5,16
1000f7e0:	297fffc4 	addi	r5,r5,-1
1000f7e4:	80e0703a 	and	r16,r16,r3
1000f7e8:	414a703a 	and	r5,r8,r5
1000f7ec:	003fa806 	br	1000f690 <__alt_data_end+0xf800f690>
1000f7f0:	0080630e 	bge	zero,r2,1000f980 <__subdf3+0x3d4>
1000f7f4:	48003026 	beq	r9,zero,1000f8b8 <__subdf3+0x30c>
1000f7f8:	0101ffc4 	movi	r4,2047
1000f7fc:	813f8c26 	beq	r16,r4,1000f630 <__alt_data_end+0xf800f630>
1000f800:	29402034 	orhi	r5,r5,128
1000f804:	01000e04 	movi	r4,56
1000f808:	2080a90e 	bge	r4,r2,1000fab0 <__subdf3+0x504>
1000f80c:	298cb03a 	or	r6,r5,r6
1000f810:	3012c03a 	cmpne	r9,r6,zero
1000f814:	0005883a 	mov	r2,zero
1000f818:	4c53883a 	add	r9,r9,r17
1000f81c:	4c63803a 	cmpltu	r17,r9,r17
1000f820:	10c7883a 	add	r3,r2,r3
1000f824:	88c7883a 	add	r3,r17,r3
1000f828:	4823883a 	mov	r17,r9
1000f82c:	1880202c 	andhi	r2,r3,128
1000f830:	1000d026 	beq	r2,zero,1000fb74 <__subdf3+0x5c8>
1000f834:	84000044 	addi	r16,r16,1
1000f838:	0081ffc4 	movi	r2,2047
1000f83c:	8080fe26 	beq	r16,r2,1000fc38 <__subdf3+0x68c>
1000f840:	00bfe034 	movhi	r2,65408
1000f844:	10bfffc4 	addi	r2,r2,-1
1000f848:	1886703a 	and	r3,r3,r2
1000f84c:	880ad07a 	srli	r5,r17,1
1000f850:	180497fa 	slli	r2,r3,31
1000f854:	8900004c 	andi	r4,r17,1
1000f858:	2922b03a 	or	r17,r5,r4
1000f85c:	1806d07a 	srli	r3,r3,1
1000f860:	1462b03a 	or	r17,r2,r17
1000f864:	3825883a 	mov	r18,r7
1000f868:	003f7106 	br	1000f630 <__alt_data_end+0xf800f630>
1000f86c:	2984b03a 	or	r2,r5,r6
1000f870:	103f6826 	beq	r2,zero,1000f614 <__alt_data_end+0xf800f614>
1000f874:	39c03fcc 	andi	r7,r7,255
1000f878:	003f6706 	br	1000f618 <__alt_data_end+0xf800f618>
1000f87c:	4086b03a 	or	r3,r8,r2
1000f880:	18015226 	beq	r3,zero,1000fdcc <__subdf3+0x820>
1000f884:	00c00434 	movhi	r3,16
1000f888:	41400234 	orhi	r5,r8,8
1000f88c:	18ffffc4 	addi	r3,r3,-1
1000f890:	28ca703a 	and	r5,r5,r3
1000f894:	003f7e06 	br	1000f690 <__alt_data_end+0xf800f690>
1000f898:	10bfffc4 	addi	r2,r2,-1
1000f89c:	1000491e 	bne	r2,zero,1000f9c4 <__subdf3+0x418>
1000f8a0:	898fc83a 	sub	r7,r17,r6
1000f8a4:	89e3803a 	cmpltu	r17,r17,r7
1000f8a8:	1947c83a 	sub	r3,r3,r5
1000f8ac:	1c47c83a 	sub	r3,r3,r17
1000f8b0:	3823883a 	mov	r17,r7
1000f8b4:	003f9b06 	br	1000f724 <__alt_data_end+0xf800f724>
1000f8b8:	2988b03a 	or	r4,r5,r6
1000f8bc:	203f5c26 	beq	r4,zero,1000f630 <__alt_data_end+0xf800f630>
1000f8c0:	10bfffc4 	addi	r2,r2,-1
1000f8c4:	1000931e 	bne	r2,zero,1000fb14 <__subdf3+0x568>
1000f8c8:	898d883a 	add	r6,r17,r6
1000f8cc:	3463803a 	cmpltu	r17,r6,r17
1000f8d0:	1947883a 	add	r3,r3,r5
1000f8d4:	88c7883a 	add	r3,r17,r3
1000f8d8:	3023883a 	mov	r17,r6
1000f8dc:	003fd306 	br	1000f82c <__alt_data_end+0xf800f82c>
1000f8e0:	1000541e 	bne	r2,zero,1000fa34 <__subdf3+0x488>
1000f8e4:	80800044 	addi	r2,r16,1
1000f8e8:	1081ffcc 	andi	r2,r2,2047
1000f8ec:	01000044 	movi	r4,1
1000f8f0:	2080a20e 	bge	r4,r2,1000fb7c <__subdf3+0x5d0>
1000f8f4:	8989c83a 	sub	r4,r17,r6
1000f8f8:	8905803a 	cmpltu	r2,r17,r4
1000f8fc:	1967c83a 	sub	r19,r3,r5
1000f900:	98a7c83a 	sub	r19,r19,r2
1000f904:	9880202c 	andhi	r2,r19,128
1000f908:	10006326 	beq	r2,zero,1000fa98 <__subdf3+0x4ec>
1000f90c:	3463c83a 	sub	r17,r6,r17
1000f910:	28c7c83a 	sub	r3,r5,r3
1000f914:	344d803a 	cmpltu	r6,r6,r17
1000f918:	19a7c83a 	sub	r19,r3,r6
1000f91c:	3825883a 	mov	r18,r7
1000f920:	983f861e 	bne	r19,zero,1000f73c <__alt_data_end+0xf800f73c>
1000f924:	8809883a 	mov	r4,r17
1000f928:	00100ac0 	call	100100ac <__clzsi2>
1000f92c:	10800804 	addi	r2,r2,32
1000f930:	113ffe04 	addi	r4,r2,-8
1000f934:	00c007c4 	movi	r3,31
1000f938:	193f850e 	bge	r3,r4,1000f750 <__alt_data_end+0xf800f750>
1000f93c:	10bff604 	addi	r2,r2,-40
1000f940:	8884983a 	sll	r2,r17,r2
1000f944:	0023883a 	mov	r17,zero
1000f948:	243f880e 	bge	r4,r16,1000f76c <__alt_data_end+0xf800f76c>
1000f94c:	00ffe034 	movhi	r3,65408
1000f950:	18ffffc4 	addi	r3,r3,-1
1000f954:	8121c83a 	sub	r16,r16,r4
1000f958:	10c6703a 	and	r3,r2,r3
1000f95c:	003f3406 	br	1000f630 <__alt_data_end+0xf800f630>
1000f960:	9100004c 	andi	r4,r18,1
1000f964:	000b883a 	mov	r5,zero
1000f968:	0005883a 	mov	r2,zero
1000f96c:	003f4806 	br	1000f690 <__alt_data_end+0xf800f690>
1000f970:	298cb03a 	or	r6,r5,r6
1000f974:	300cc03a 	cmpne	r6,r6,zero
1000f978:	0005883a 	mov	r2,zero
1000f97c:	003f6406 	br	1000f710 <__alt_data_end+0xf800f710>
1000f980:	10009a1e 	bne	r2,zero,1000fbec <__subdf3+0x640>
1000f984:	82400044 	addi	r9,r16,1
1000f988:	4881ffcc 	andi	r2,r9,2047
1000f98c:	02800044 	movi	r10,1
1000f990:	5080670e 	bge	r10,r2,1000fb30 <__subdf3+0x584>
1000f994:	0081ffc4 	movi	r2,2047
1000f998:	4880af26 	beq	r9,r2,1000fc58 <__subdf3+0x6ac>
1000f99c:	898d883a 	add	r6,r17,r6
1000f9a0:	1945883a 	add	r2,r3,r5
1000f9a4:	3447803a 	cmpltu	r3,r6,r17
1000f9a8:	1887883a 	add	r3,r3,r2
1000f9ac:	182297fa 	slli	r17,r3,31
1000f9b0:	300cd07a 	srli	r6,r6,1
1000f9b4:	1806d07a 	srli	r3,r3,1
1000f9b8:	4821883a 	mov	r16,r9
1000f9bc:	89a2b03a 	or	r17,r17,r6
1000f9c0:	003f1b06 	br	1000f630 <__alt_data_end+0xf800f630>
1000f9c4:	0101ffc4 	movi	r4,2047
1000f9c8:	813f441e 	bne	r16,r4,1000f6dc <__alt_data_end+0xf800f6dc>
1000f9cc:	003f1806 	br	1000f630 <__alt_data_end+0xf800f630>
1000f9d0:	843ff844 	addi	r16,r16,-31
1000f9d4:	01400804 	movi	r5,32
1000f9d8:	1408d83a 	srl	r4,r2,r16
1000f9dc:	19405026 	beq	r3,r5,1000fb20 <__subdf3+0x574>
1000f9e0:	01401004 	movi	r5,64
1000f9e4:	28c7c83a 	sub	r3,r5,r3
1000f9e8:	10c4983a 	sll	r2,r2,r3
1000f9ec:	88a2b03a 	or	r17,r17,r2
1000f9f0:	8822c03a 	cmpne	r17,r17,zero
1000f9f4:	2462b03a 	or	r17,r4,r17
1000f9f8:	0007883a 	mov	r3,zero
1000f9fc:	0021883a 	mov	r16,zero
1000fa00:	003f6d06 	br	1000f7b8 <__alt_data_end+0xf800f7b8>
1000fa04:	11fff804 	addi	r7,r2,-32
1000fa08:	01000804 	movi	r4,32
1000fa0c:	29ced83a 	srl	r7,r5,r7
1000fa10:	11004526 	beq	r2,r4,1000fb28 <__subdf3+0x57c>
1000fa14:	01001004 	movi	r4,64
1000fa18:	2089c83a 	sub	r4,r4,r2
1000fa1c:	2904983a 	sll	r2,r5,r4
1000fa20:	118cb03a 	or	r6,r2,r6
1000fa24:	300cc03a 	cmpne	r6,r6,zero
1000fa28:	398cb03a 	or	r6,r7,r6
1000fa2c:	0005883a 	mov	r2,zero
1000fa30:	003f3706 	br	1000f710 <__alt_data_end+0xf800f710>
1000fa34:	80002a26 	beq	r16,zero,1000fae0 <__subdf3+0x534>
1000fa38:	0101ffc4 	movi	r4,2047
1000fa3c:	49006626 	beq	r9,r4,1000fbd8 <__subdf3+0x62c>
1000fa40:	0085c83a 	sub	r2,zero,r2
1000fa44:	18c02034 	orhi	r3,r3,128
1000fa48:	01000e04 	movi	r4,56
1000fa4c:	20807e16 	blt	r4,r2,1000fc48 <__subdf3+0x69c>
1000fa50:	010007c4 	movi	r4,31
1000fa54:	2080e716 	blt	r4,r2,1000fdf4 <__subdf3+0x848>
1000fa58:	01000804 	movi	r4,32
1000fa5c:	2089c83a 	sub	r4,r4,r2
1000fa60:	1914983a 	sll	r10,r3,r4
1000fa64:	8890d83a 	srl	r8,r17,r2
1000fa68:	8908983a 	sll	r4,r17,r4
1000fa6c:	1884d83a 	srl	r2,r3,r2
1000fa70:	5222b03a 	or	r17,r10,r8
1000fa74:	2006c03a 	cmpne	r3,r4,zero
1000fa78:	88e2b03a 	or	r17,r17,r3
1000fa7c:	3463c83a 	sub	r17,r6,r17
1000fa80:	2885c83a 	sub	r2,r5,r2
1000fa84:	344d803a 	cmpltu	r6,r6,r17
1000fa88:	1187c83a 	sub	r3,r2,r6
1000fa8c:	4821883a 	mov	r16,r9
1000fa90:	3825883a 	mov	r18,r7
1000fa94:	003f2306 	br	1000f724 <__alt_data_end+0xf800f724>
1000fa98:	24d0b03a 	or	r8,r4,r19
1000fa9c:	40001b1e 	bne	r8,zero,1000fb0c <__subdf3+0x560>
1000faa0:	0005883a 	mov	r2,zero
1000faa4:	0009883a 	mov	r4,zero
1000faa8:	0021883a 	mov	r16,zero
1000faac:	003f4906 	br	1000f7d4 <__alt_data_end+0xf800f7d4>
1000fab0:	010007c4 	movi	r4,31
1000fab4:	20803a16 	blt	r4,r2,1000fba0 <__subdf3+0x5f4>
1000fab8:	01000804 	movi	r4,32
1000fabc:	2089c83a 	sub	r4,r4,r2
1000fac0:	2912983a 	sll	r9,r5,r4
1000fac4:	3090d83a 	srl	r8,r6,r2
1000fac8:	3108983a 	sll	r4,r6,r4
1000facc:	2884d83a 	srl	r2,r5,r2
1000fad0:	4a12b03a 	or	r9,r9,r8
1000fad4:	2008c03a 	cmpne	r4,r4,zero
1000fad8:	4912b03a 	or	r9,r9,r4
1000fadc:	003f4e06 	br	1000f818 <__alt_data_end+0xf800f818>
1000fae0:	1c48b03a 	or	r4,r3,r17
1000fae4:	20003c26 	beq	r4,zero,1000fbd8 <__subdf3+0x62c>
1000fae8:	0084303a 	nor	r2,zero,r2
1000faec:	1000381e 	bne	r2,zero,1000fbd0 <__subdf3+0x624>
1000faf0:	3463c83a 	sub	r17,r6,r17
1000faf4:	28c5c83a 	sub	r2,r5,r3
1000faf8:	344d803a 	cmpltu	r6,r6,r17
1000fafc:	1187c83a 	sub	r3,r2,r6
1000fb00:	4821883a 	mov	r16,r9
1000fb04:	3825883a 	mov	r18,r7
1000fb08:	003f0606 	br	1000f724 <__alt_data_end+0xf800f724>
1000fb0c:	2023883a 	mov	r17,r4
1000fb10:	003f0906 	br	1000f738 <__alt_data_end+0xf800f738>
1000fb14:	0101ffc4 	movi	r4,2047
1000fb18:	813f3a1e 	bne	r16,r4,1000f804 <__alt_data_end+0xf800f804>
1000fb1c:	003ec406 	br	1000f630 <__alt_data_end+0xf800f630>
1000fb20:	0005883a 	mov	r2,zero
1000fb24:	003fb106 	br	1000f9ec <__alt_data_end+0xf800f9ec>
1000fb28:	0005883a 	mov	r2,zero
1000fb2c:	003fbc06 	br	1000fa20 <__alt_data_end+0xf800fa20>
1000fb30:	1c44b03a 	or	r2,r3,r17
1000fb34:	80008e1e 	bne	r16,zero,1000fd70 <__subdf3+0x7c4>
1000fb38:	1000c826 	beq	r2,zero,1000fe5c <__subdf3+0x8b0>
1000fb3c:	2984b03a 	or	r2,r5,r6
1000fb40:	103ebb26 	beq	r2,zero,1000f630 <__alt_data_end+0xf800f630>
1000fb44:	8989883a 	add	r4,r17,r6
1000fb48:	1945883a 	add	r2,r3,r5
1000fb4c:	2447803a 	cmpltu	r3,r4,r17
1000fb50:	1887883a 	add	r3,r3,r2
1000fb54:	1880202c 	andhi	r2,r3,128
1000fb58:	2023883a 	mov	r17,r4
1000fb5c:	103f1626 	beq	r2,zero,1000f7b8 <__alt_data_end+0xf800f7b8>
1000fb60:	00bfe034 	movhi	r2,65408
1000fb64:	10bfffc4 	addi	r2,r2,-1
1000fb68:	5021883a 	mov	r16,r10
1000fb6c:	1886703a 	and	r3,r3,r2
1000fb70:	003eaf06 	br	1000f630 <__alt_data_end+0xf800f630>
1000fb74:	3825883a 	mov	r18,r7
1000fb78:	003f0f06 	br	1000f7b8 <__alt_data_end+0xf800f7b8>
1000fb7c:	1c44b03a 	or	r2,r3,r17
1000fb80:	8000251e 	bne	r16,zero,1000fc18 <__subdf3+0x66c>
1000fb84:	1000661e 	bne	r2,zero,1000fd20 <__subdf3+0x774>
1000fb88:	2990b03a 	or	r8,r5,r6
1000fb8c:	40009626 	beq	r8,zero,1000fde8 <__subdf3+0x83c>
1000fb90:	2807883a 	mov	r3,r5
1000fb94:	3023883a 	mov	r17,r6
1000fb98:	3825883a 	mov	r18,r7
1000fb9c:	003ea406 	br	1000f630 <__alt_data_end+0xf800f630>
1000fba0:	127ff804 	addi	r9,r2,-32
1000fba4:	01000804 	movi	r4,32
1000fba8:	2a52d83a 	srl	r9,r5,r9
1000fbac:	11008c26 	beq	r2,r4,1000fde0 <__subdf3+0x834>
1000fbb0:	01001004 	movi	r4,64
1000fbb4:	2085c83a 	sub	r2,r4,r2
1000fbb8:	2884983a 	sll	r2,r5,r2
1000fbbc:	118cb03a 	or	r6,r2,r6
1000fbc0:	300cc03a 	cmpne	r6,r6,zero
1000fbc4:	4992b03a 	or	r9,r9,r6
1000fbc8:	0005883a 	mov	r2,zero
1000fbcc:	003f1206 	br	1000f818 <__alt_data_end+0xf800f818>
1000fbd0:	0101ffc4 	movi	r4,2047
1000fbd4:	493f9c1e 	bne	r9,r4,1000fa48 <__alt_data_end+0xf800fa48>
1000fbd8:	2807883a 	mov	r3,r5
1000fbdc:	3023883a 	mov	r17,r6
1000fbe0:	4821883a 	mov	r16,r9
1000fbe4:	3825883a 	mov	r18,r7
1000fbe8:	003e9106 	br	1000f630 <__alt_data_end+0xf800f630>
1000fbec:	80001f1e 	bne	r16,zero,1000fc6c <__subdf3+0x6c0>
1000fbf0:	1c48b03a 	or	r4,r3,r17
1000fbf4:	20005a26 	beq	r4,zero,1000fd60 <__subdf3+0x7b4>
1000fbf8:	0084303a 	nor	r2,zero,r2
1000fbfc:	1000561e 	bne	r2,zero,1000fd58 <__subdf3+0x7ac>
1000fc00:	89a3883a 	add	r17,r17,r6
1000fc04:	1945883a 	add	r2,r3,r5
1000fc08:	898d803a 	cmpltu	r6,r17,r6
1000fc0c:	3087883a 	add	r3,r6,r2
1000fc10:	4821883a 	mov	r16,r9
1000fc14:	003f0506 	br	1000f82c <__alt_data_end+0xf800f82c>
1000fc18:	10002b1e 	bne	r2,zero,1000fcc8 <__subdf3+0x71c>
1000fc1c:	2984b03a 	or	r2,r5,r6
1000fc20:	10008026 	beq	r2,zero,1000fe24 <__subdf3+0x878>
1000fc24:	2807883a 	mov	r3,r5
1000fc28:	3023883a 	mov	r17,r6
1000fc2c:	3825883a 	mov	r18,r7
1000fc30:	0401ffc4 	movi	r16,2047
1000fc34:	003e7e06 	br	1000f630 <__alt_data_end+0xf800f630>
1000fc38:	3809883a 	mov	r4,r7
1000fc3c:	0011883a 	mov	r8,zero
1000fc40:	0005883a 	mov	r2,zero
1000fc44:	003ee306 	br	1000f7d4 <__alt_data_end+0xf800f7d4>
1000fc48:	1c62b03a 	or	r17,r3,r17
1000fc4c:	8822c03a 	cmpne	r17,r17,zero
1000fc50:	0005883a 	mov	r2,zero
1000fc54:	003f8906 	br	1000fa7c <__alt_data_end+0xf800fa7c>
1000fc58:	3809883a 	mov	r4,r7
1000fc5c:	4821883a 	mov	r16,r9
1000fc60:	0011883a 	mov	r8,zero
1000fc64:	0005883a 	mov	r2,zero
1000fc68:	003eda06 	br	1000f7d4 <__alt_data_end+0xf800f7d4>
1000fc6c:	0101ffc4 	movi	r4,2047
1000fc70:	49003b26 	beq	r9,r4,1000fd60 <__subdf3+0x7b4>
1000fc74:	0085c83a 	sub	r2,zero,r2
1000fc78:	18c02034 	orhi	r3,r3,128
1000fc7c:	01000e04 	movi	r4,56
1000fc80:	20806e16 	blt	r4,r2,1000fe3c <__subdf3+0x890>
1000fc84:	010007c4 	movi	r4,31
1000fc88:	20807716 	blt	r4,r2,1000fe68 <__subdf3+0x8bc>
1000fc8c:	01000804 	movi	r4,32
1000fc90:	2089c83a 	sub	r4,r4,r2
1000fc94:	1914983a 	sll	r10,r3,r4
1000fc98:	8890d83a 	srl	r8,r17,r2
1000fc9c:	8908983a 	sll	r4,r17,r4
1000fca0:	1884d83a 	srl	r2,r3,r2
1000fca4:	5222b03a 	or	r17,r10,r8
1000fca8:	2006c03a 	cmpne	r3,r4,zero
1000fcac:	88e2b03a 	or	r17,r17,r3
1000fcb0:	89a3883a 	add	r17,r17,r6
1000fcb4:	1145883a 	add	r2,r2,r5
1000fcb8:	898d803a 	cmpltu	r6,r17,r6
1000fcbc:	3087883a 	add	r3,r6,r2
1000fcc0:	4821883a 	mov	r16,r9
1000fcc4:	003ed906 	br	1000f82c <__alt_data_end+0xf800f82c>
1000fcc8:	2984b03a 	or	r2,r5,r6
1000fccc:	10004226 	beq	r2,zero,1000fdd8 <__subdf3+0x82c>
1000fcd0:	1808d0fa 	srli	r4,r3,3
1000fcd4:	8822d0fa 	srli	r17,r17,3
1000fcd8:	1806977a 	slli	r3,r3,29
1000fcdc:	2080022c 	andhi	r2,r4,8
1000fce0:	1c62b03a 	or	r17,r3,r17
1000fce4:	10000826 	beq	r2,zero,1000fd08 <__subdf3+0x75c>
1000fce8:	2812d0fa 	srli	r9,r5,3
1000fcec:	4880022c 	andhi	r2,r9,8
1000fcf0:	1000051e 	bne	r2,zero,1000fd08 <__subdf3+0x75c>
1000fcf4:	300cd0fa 	srli	r6,r6,3
1000fcf8:	2804977a 	slli	r2,r5,29
1000fcfc:	4809883a 	mov	r4,r9
1000fd00:	3825883a 	mov	r18,r7
1000fd04:	11a2b03a 	or	r17,r2,r6
1000fd08:	8806d77a 	srli	r3,r17,29
1000fd0c:	200890fa 	slli	r4,r4,3
1000fd10:	882290fa 	slli	r17,r17,3
1000fd14:	0401ffc4 	movi	r16,2047
1000fd18:	1906b03a 	or	r3,r3,r4
1000fd1c:	003e4406 	br	1000f630 <__alt_data_end+0xf800f630>
1000fd20:	2984b03a 	or	r2,r5,r6
1000fd24:	103e4226 	beq	r2,zero,1000f630 <__alt_data_end+0xf800f630>
1000fd28:	8989c83a 	sub	r4,r17,r6
1000fd2c:	8911803a 	cmpltu	r8,r17,r4
1000fd30:	1945c83a 	sub	r2,r3,r5
1000fd34:	1205c83a 	sub	r2,r2,r8
1000fd38:	1200202c 	andhi	r8,r2,128
1000fd3c:	403e9a26 	beq	r8,zero,1000f7a8 <__alt_data_end+0xf800f7a8>
1000fd40:	3463c83a 	sub	r17,r6,r17
1000fd44:	28c5c83a 	sub	r2,r5,r3
1000fd48:	344d803a 	cmpltu	r6,r6,r17
1000fd4c:	1187c83a 	sub	r3,r2,r6
1000fd50:	3825883a 	mov	r18,r7
1000fd54:	003e3606 	br	1000f630 <__alt_data_end+0xf800f630>
1000fd58:	0101ffc4 	movi	r4,2047
1000fd5c:	493fc71e 	bne	r9,r4,1000fc7c <__alt_data_end+0xf800fc7c>
1000fd60:	2807883a 	mov	r3,r5
1000fd64:	3023883a 	mov	r17,r6
1000fd68:	4821883a 	mov	r16,r9
1000fd6c:	003e3006 	br	1000f630 <__alt_data_end+0xf800f630>
1000fd70:	10003626 	beq	r2,zero,1000fe4c <__subdf3+0x8a0>
1000fd74:	2984b03a 	or	r2,r5,r6
1000fd78:	10001726 	beq	r2,zero,1000fdd8 <__subdf3+0x82c>
1000fd7c:	1808d0fa 	srli	r4,r3,3
1000fd80:	8822d0fa 	srli	r17,r17,3
1000fd84:	1806977a 	slli	r3,r3,29
1000fd88:	2080022c 	andhi	r2,r4,8
1000fd8c:	1c62b03a 	or	r17,r3,r17
1000fd90:	10000726 	beq	r2,zero,1000fdb0 <__subdf3+0x804>
1000fd94:	2812d0fa 	srli	r9,r5,3
1000fd98:	4880022c 	andhi	r2,r9,8
1000fd9c:	1000041e 	bne	r2,zero,1000fdb0 <__subdf3+0x804>
1000fda0:	300cd0fa 	srli	r6,r6,3
1000fda4:	2804977a 	slli	r2,r5,29
1000fda8:	4809883a 	mov	r4,r9
1000fdac:	11a2b03a 	or	r17,r2,r6
1000fdb0:	8806d77a 	srli	r3,r17,29
1000fdb4:	200890fa 	slli	r4,r4,3
1000fdb8:	882290fa 	slli	r17,r17,3
1000fdbc:	3825883a 	mov	r18,r7
1000fdc0:	1906b03a 	or	r3,r3,r4
1000fdc4:	0401ffc4 	movi	r16,2047
1000fdc8:	003e1906 	br	1000f630 <__alt_data_end+0xf800f630>
1000fdcc:	000b883a 	mov	r5,zero
1000fdd0:	0005883a 	mov	r2,zero
1000fdd4:	003e2e06 	br	1000f690 <__alt_data_end+0xf800f690>
1000fdd8:	0401ffc4 	movi	r16,2047
1000fddc:	003e1406 	br	1000f630 <__alt_data_end+0xf800f630>
1000fde0:	0005883a 	mov	r2,zero
1000fde4:	003f7506 	br	1000fbbc <__alt_data_end+0xf800fbbc>
1000fde8:	0005883a 	mov	r2,zero
1000fdec:	0009883a 	mov	r4,zero
1000fdf0:	003e7806 	br	1000f7d4 <__alt_data_end+0xf800f7d4>
1000fdf4:	123ff804 	addi	r8,r2,-32
1000fdf8:	01000804 	movi	r4,32
1000fdfc:	1a10d83a 	srl	r8,r3,r8
1000fe00:	11002526 	beq	r2,r4,1000fe98 <__subdf3+0x8ec>
1000fe04:	01001004 	movi	r4,64
1000fe08:	2085c83a 	sub	r2,r4,r2
1000fe0c:	1884983a 	sll	r2,r3,r2
1000fe10:	1444b03a 	or	r2,r2,r17
1000fe14:	1004c03a 	cmpne	r2,r2,zero
1000fe18:	40a2b03a 	or	r17,r8,r2
1000fe1c:	0005883a 	mov	r2,zero
1000fe20:	003f1606 	br	1000fa7c <__alt_data_end+0xf800fa7c>
1000fe24:	02000434 	movhi	r8,16
1000fe28:	0009883a 	mov	r4,zero
1000fe2c:	423fffc4 	addi	r8,r8,-1
1000fe30:	00bfffc4 	movi	r2,-1
1000fe34:	0401ffc4 	movi	r16,2047
1000fe38:	003e6606 	br	1000f7d4 <__alt_data_end+0xf800f7d4>
1000fe3c:	1c62b03a 	or	r17,r3,r17
1000fe40:	8822c03a 	cmpne	r17,r17,zero
1000fe44:	0005883a 	mov	r2,zero
1000fe48:	003f9906 	br	1000fcb0 <__alt_data_end+0xf800fcb0>
1000fe4c:	2807883a 	mov	r3,r5
1000fe50:	3023883a 	mov	r17,r6
1000fe54:	0401ffc4 	movi	r16,2047
1000fe58:	003df506 	br	1000f630 <__alt_data_end+0xf800f630>
1000fe5c:	2807883a 	mov	r3,r5
1000fe60:	3023883a 	mov	r17,r6
1000fe64:	003df206 	br	1000f630 <__alt_data_end+0xf800f630>
1000fe68:	123ff804 	addi	r8,r2,-32
1000fe6c:	01000804 	movi	r4,32
1000fe70:	1a10d83a 	srl	r8,r3,r8
1000fe74:	11000a26 	beq	r2,r4,1000fea0 <__subdf3+0x8f4>
1000fe78:	01001004 	movi	r4,64
1000fe7c:	2085c83a 	sub	r2,r4,r2
1000fe80:	1884983a 	sll	r2,r3,r2
1000fe84:	1444b03a 	or	r2,r2,r17
1000fe88:	1004c03a 	cmpne	r2,r2,zero
1000fe8c:	40a2b03a 	or	r17,r8,r2
1000fe90:	0005883a 	mov	r2,zero
1000fe94:	003f8606 	br	1000fcb0 <__alt_data_end+0xf800fcb0>
1000fe98:	0005883a 	mov	r2,zero
1000fe9c:	003fdc06 	br	1000fe10 <__alt_data_end+0xf800fe10>
1000fea0:	0005883a 	mov	r2,zero
1000fea4:	003ff706 	br	1000fe84 <__alt_data_end+0xf800fe84>

1000fea8 <__fixdfsi>:
1000fea8:	280cd53a 	srli	r6,r5,20
1000feac:	00c00434 	movhi	r3,16
1000feb0:	18ffffc4 	addi	r3,r3,-1
1000feb4:	3181ffcc 	andi	r6,r6,2047
1000feb8:	01c0ff84 	movi	r7,1022
1000febc:	28c6703a 	and	r3,r5,r3
1000fec0:	280ad7fa 	srli	r5,r5,31
1000fec4:	3980120e 	bge	r7,r6,1000ff10 <__fixdfsi+0x68>
1000fec8:	00810744 	movi	r2,1053
1000fecc:	11800c16 	blt	r2,r6,1000ff00 <__fixdfsi+0x58>
1000fed0:	00810cc4 	movi	r2,1075
1000fed4:	1185c83a 	sub	r2,r2,r6
1000fed8:	01c007c4 	movi	r7,31
1000fedc:	18c00434 	orhi	r3,r3,16
1000fee0:	38800d16 	blt	r7,r2,1000ff18 <__fixdfsi+0x70>
1000fee4:	31befb44 	addi	r6,r6,-1043
1000fee8:	2084d83a 	srl	r2,r4,r2
1000feec:	1986983a 	sll	r3,r3,r6
1000fef0:	1884b03a 	or	r2,r3,r2
1000fef4:	28000726 	beq	r5,zero,1000ff14 <__fixdfsi+0x6c>
1000fef8:	0085c83a 	sub	r2,zero,r2
1000fefc:	f800283a 	ret
1000ff00:	00a00034 	movhi	r2,32768
1000ff04:	10bfffc4 	addi	r2,r2,-1
1000ff08:	2885883a 	add	r2,r5,r2
1000ff0c:	f800283a 	ret
1000ff10:	0005883a 	mov	r2,zero
1000ff14:	f800283a 	ret
1000ff18:	008104c4 	movi	r2,1043
1000ff1c:	1185c83a 	sub	r2,r2,r6
1000ff20:	1884d83a 	srl	r2,r3,r2
1000ff24:	003ff306 	br	1000fef4 <__alt_data_end+0xf800fef4>

1000ff28 <__floatsidf>:
1000ff28:	defffd04 	addi	sp,sp,-12
1000ff2c:	dfc00215 	stw	ra,8(sp)
1000ff30:	dc400115 	stw	r17,4(sp)
1000ff34:	dc000015 	stw	r16,0(sp)
1000ff38:	20002b26 	beq	r4,zero,1000ffe8 <__floatsidf+0xc0>
1000ff3c:	2023883a 	mov	r17,r4
1000ff40:	2020d7fa 	srli	r16,r4,31
1000ff44:	20002d16 	blt	r4,zero,1000fffc <__floatsidf+0xd4>
1000ff48:	8809883a 	mov	r4,r17
1000ff4c:	00100ac0 	call	100100ac <__clzsi2>
1000ff50:	01410784 	movi	r5,1054
1000ff54:	288bc83a 	sub	r5,r5,r2
1000ff58:	01010cc4 	movi	r4,1075
1000ff5c:	2149c83a 	sub	r4,r4,r5
1000ff60:	00c007c4 	movi	r3,31
1000ff64:	1900160e 	bge	r3,r4,1000ffc0 <__floatsidf+0x98>
1000ff68:	00c104c4 	movi	r3,1043
1000ff6c:	1947c83a 	sub	r3,r3,r5
1000ff70:	88c6983a 	sll	r3,r17,r3
1000ff74:	00800434 	movhi	r2,16
1000ff78:	10bfffc4 	addi	r2,r2,-1
1000ff7c:	1886703a 	and	r3,r3,r2
1000ff80:	2941ffcc 	andi	r5,r5,2047
1000ff84:	800d883a 	mov	r6,r16
1000ff88:	0005883a 	mov	r2,zero
1000ff8c:	280a953a 	slli	r5,r5,20
1000ff90:	31803fcc 	andi	r6,r6,255
1000ff94:	01000434 	movhi	r4,16
1000ff98:	300c97fa 	slli	r6,r6,31
1000ff9c:	213fffc4 	addi	r4,r4,-1
1000ffa0:	1906703a 	and	r3,r3,r4
1000ffa4:	1946b03a 	or	r3,r3,r5
1000ffa8:	1986b03a 	or	r3,r3,r6
1000ffac:	dfc00217 	ldw	ra,8(sp)
1000ffb0:	dc400117 	ldw	r17,4(sp)
1000ffb4:	dc000017 	ldw	r16,0(sp)
1000ffb8:	dec00304 	addi	sp,sp,12
1000ffbc:	f800283a 	ret
1000ffc0:	00c002c4 	movi	r3,11
1000ffc4:	1887c83a 	sub	r3,r3,r2
1000ffc8:	88c6d83a 	srl	r3,r17,r3
1000ffcc:	8904983a 	sll	r2,r17,r4
1000ffd0:	01000434 	movhi	r4,16
1000ffd4:	213fffc4 	addi	r4,r4,-1
1000ffd8:	2941ffcc 	andi	r5,r5,2047
1000ffdc:	1906703a 	and	r3,r3,r4
1000ffe0:	800d883a 	mov	r6,r16
1000ffe4:	003fe906 	br	1000ff8c <__alt_data_end+0xf800ff8c>
1000ffe8:	000d883a 	mov	r6,zero
1000ffec:	000b883a 	mov	r5,zero
1000fff0:	0007883a 	mov	r3,zero
1000fff4:	0005883a 	mov	r2,zero
1000fff8:	003fe406 	br	1000ff8c <__alt_data_end+0xf800ff8c>
1000fffc:	0123c83a 	sub	r17,zero,r4
10010000:	003fd106 	br	1000ff48 <__alt_data_end+0xf800ff48>

10010004 <__floatunsidf>:
10010004:	defffe04 	addi	sp,sp,-8
10010008:	dc000015 	stw	r16,0(sp)
1001000c:	dfc00115 	stw	ra,4(sp)
10010010:	2021883a 	mov	r16,r4
10010014:	20002226 	beq	r4,zero,100100a0 <__floatunsidf+0x9c>
10010018:	00100ac0 	call	100100ac <__clzsi2>
1001001c:	01010784 	movi	r4,1054
10010020:	2089c83a 	sub	r4,r4,r2
10010024:	01810cc4 	movi	r6,1075
10010028:	310dc83a 	sub	r6,r6,r4
1001002c:	00c007c4 	movi	r3,31
10010030:	1980120e 	bge	r3,r6,1001007c <__floatunsidf+0x78>
10010034:	00c104c4 	movi	r3,1043
10010038:	1907c83a 	sub	r3,r3,r4
1001003c:	80ca983a 	sll	r5,r16,r3
10010040:	00800434 	movhi	r2,16
10010044:	10bfffc4 	addi	r2,r2,-1
10010048:	2101ffcc 	andi	r4,r4,2047
1001004c:	0021883a 	mov	r16,zero
10010050:	288a703a 	and	r5,r5,r2
10010054:	2008953a 	slli	r4,r4,20
10010058:	00c00434 	movhi	r3,16
1001005c:	18ffffc4 	addi	r3,r3,-1
10010060:	28c6703a 	and	r3,r5,r3
10010064:	8005883a 	mov	r2,r16
10010068:	1906b03a 	or	r3,r3,r4
1001006c:	dfc00117 	ldw	ra,4(sp)
10010070:	dc000017 	ldw	r16,0(sp)
10010074:	dec00204 	addi	sp,sp,8
10010078:	f800283a 	ret
1001007c:	00c002c4 	movi	r3,11
10010080:	188bc83a 	sub	r5,r3,r2
10010084:	814ad83a 	srl	r5,r16,r5
10010088:	00c00434 	movhi	r3,16
1001008c:	18ffffc4 	addi	r3,r3,-1
10010090:	81a0983a 	sll	r16,r16,r6
10010094:	2101ffcc 	andi	r4,r4,2047
10010098:	28ca703a 	and	r5,r5,r3
1001009c:	003fed06 	br	10010054 <__alt_data_end+0xf8010054>
100100a0:	0009883a 	mov	r4,zero
100100a4:	000b883a 	mov	r5,zero
100100a8:	003fea06 	br	10010054 <__alt_data_end+0xf8010054>

100100ac <__clzsi2>:
100100ac:	00bfffd4 	movui	r2,65535
100100b0:	11000536 	bltu	r2,r4,100100c8 <__clzsi2+0x1c>
100100b4:	00803fc4 	movi	r2,255
100100b8:	11000f36 	bltu	r2,r4,100100f8 <__clzsi2+0x4c>
100100bc:	00800804 	movi	r2,32
100100c0:	0007883a 	mov	r3,zero
100100c4:	00000506 	br	100100dc <__clzsi2+0x30>
100100c8:	00804034 	movhi	r2,256
100100cc:	10bfffc4 	addi	r2,r2,-1
100100d0:	11000c2e 	bgeu	r2,r4,10010104 <__clzsi2+0x58>
100100d4:	00800204 	movi	r2,8
100100d8:	00c00604 	movi	r3,24
100100dc:	20c8d83a 	srl	r4,r4,r3
100100e0:	00c40074 	movhi	r3,4097
100100e4:	18ccac04 	addi	r3,r3,12976
100100e8:	1909883a 	add	r4,r3,r4
100100ec:	20c00003 	ldbu	r3,0(r4)
100100f0:	10c5c83a 	sub	r2,r2,r3
100100f4:	f800283a 	ret
100100f8:	00800604 	movi	r2,24
100100fc:	00c00204 	movi	r3,8
10010100:	003ff606 	br	100100dc <__alt_data_end+0xf80100dc>
10010104:	00800404 	movi	r2,16
10010108:	1007883a 	mov	r3,r2
1001010c:	003ff306 	br	100100dc <__alt_data_end+0xf80100dc>

10010110 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010110:	defffe04 	addi	sp,sp,-8
10010114:	dfc00115 	stw	ra,4(sp)
10010118:	df000015 	stw	fp,0(sp)
1001011c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010120:	d0a00b17 	ldw	r2,-32724(gp)
10010124:	10000326 	beq	r2,zero,10010134 <alt_get_errno+0x24>
10010128:	d0a00b17 	ldw	r2,-32724(gp)
1001012c:	103ee83a 	callr	r2
10010130:	00000106 	br	10010138 <alt_get_errno+0x28>
10010134:	d0a6d204 	addi	r2,gp,-25784
}
10010138:	e037883a 	mov	sp,fp
1001013c:	dfc00117 	ldw	ra,4(sp)
10010140:	df000017 	ldw	fp,0(sp)
10010144:	dec00204 	addi	sp,sp,8
10010148:	f800283a 	ret

1001014c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1001014c:	defffb04 	addi	sp,sp,-20
10010150:	dfc00415 	stw	ra,16(sp)
10010154:	df000315 	stw	fp,12(sp)
10010158:	df000304 	addi	fp,sp,12
1001015c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10010160:	e0bfff17 	ldw	r2,-4(fp)
10010164:	10000816 	blt	r2,zero,10010188 <close+0x3c>
10010168:	01400304 	movi	r5,12
1001016c:	e13fff17 	ldw	r4,-4(fp)
10010170:	000d8440 	call	1000d844 <__mulsi3>
10010174:	1007883a 	mov	r3,r2
10010178:	00840074 	movhi	r2,4097
1001017c:	108f2c04 	addi	r2,r2,15536
10010180:	1885883a 	add	r2,r3,r2
10010184:	00000106 	br	1001018c <close+0x40>
10010188:	0005883a 	mov	r2,zero
1001018c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10010190:	e0bffd17 	ldw	r2,-12(fp)
10010194:	10001926 	beq	r2,zero,100101fc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10010198:	e0bffd17 	ldw	r2,-12(fp)
1001019c:	10800017 	ldw	r2,0(r2)
100101a0:	10800417 	ldw	r2,16(r2)
100101a4:	10000626 	beq	r2,zero,100101c0 <close+0x74>
100101a8:	e0bffd17 	ldw	r2,-12(fp)
100101ac:	10800017 	ldw	r2,0(r2)
100101b0:	10800417 	ldw	r2,16(r2)
100101b4:	e13ffd17 	ldw	r4,-12(fp)
100101b8:	103ee83a 	callr	r2
100101bc:	00000106 	br	100101c4 <close+0x78>
100101c0:	0005883a 	mov	r2,zero
100101c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100101c8:	e13fff17 	ldw	r4,-4(fp)
100101cc:	00108340 	call	10010834 <alt_release_fd>
    if (rval < 0)
100101d0:	e0bffe17 	ldw	r2,-8(fp)
100101d4:	1000070e 	bge	r2,zero,100101f4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
100101d8:	00101100 	call	10010110 <alt_get_errno>
100101dc:	1007883a 	mov	r3,r2
100101e0:	e0bffe17 	ldw	r2,-8(fp)
100101e4:	0085c83a 	sub	r2,zero,r2
100101e8:	18800015 	stw	r2,0(r3)
      return -1;
100101ec:	00bfffc4 	movi	r2,-1
100101f0:	00000706 	br	10010210 <close+0xc4>
    }
    return 0;
100101f4:	0005883a 	mov	r2,zero
100101f8:	00000506 	br	10010210 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100101fc:	00101100 	call	10010110 <alt_get_errno>
10010200:	1007883a 	mov	r3,r2
10010204:	00801444 	movi	r2,81
10010208:	18800015 	stw	r2,0(r3)
    return -1;
1001020c:	00bfffc4 	movi	r2,-1
  }
}
10010210:	e037883a 	mov	sp,fp
10010214:	dfc00117 	ldw	ra,4(sp)
10010218:	df000017 	ldw	fp,0(sp)
1001021c:	dec00204 	addi	sp,sp,8
10010220:	f800283a 	ret

10010224 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10010224:	defffc04 	addi	sp,sp,-16
10010228:	df000315 	stw	fp,12(sp)
1001022c:	df000304 	addi	fp,sp,12
10010230:	e13ffd15 	stw	r4,-12(fp)
10010234:	e17ffe15 	stw	r5,-8(fp)
10010238:	e1bfff15 	stw	r6,-4(fp)
  return len;
1001023c:	e0bfff17 	ldw	r2,-4(fp)
}
10010240:	e037883a 	mov	sp,fp
10010244:	df000017 	ldw	fp,0(sp)
10010248:	dec00104 	addi	sp,sp,4
1001024c:	f800283a 	ret

10010250 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010250:	defffe04 	addi	sp,sp,-8
10010254:	dfc00115 	stw	ra,4(sp)
10010258:	df000015 	stw	fp,0(sp)
1001025c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010260:	d0a00b17 	ldw	r2,-32724(gp)
10010264:	10000326 	beq	r2,zero,10010274 <alt_get_errno+0x24>
10010268:	d0a00b17 	ldw	r2,-32724(gp)
1001026c:	103ee83a 	callr	r2
10010270:	00000106 	br	10010278 <alt_get_errno+0x28>
10010274:	d0a6d204 	addi	r2,gp,-25784
}
10010278:	e037883a 	mov	sp,fp
1001027c:	dfc00117 	ldw	ra,4(sp)
10010280:	df000017 	ldw	fp,0(sp)
10010284:	dec00204 	addi	sp,sp,8
10010288:	f800283a 	ret

1001028c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1001028c:	defffb04 	addi	sp,sp,-20
10010290:	dfc00415 	stw	ra,16(sp)
10010294:	df000315 	stw	fp,12(sp)
10010298:	df000304 	addi	fp,sp,12
1001029c:	e13ffe15 	stw	r4,-8(fp)
100102a0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100102a4:	e0bffe17 	ldw	r2,-8(fp)
100102a8:	10000816 	blt	r2,zero,100102cc <fstat+0x40>
100102ac:	01400304 	movi	r5,12
100102b0:	e13ffe17 	ldw	r4,-8(fp)
100102b4:	000d8440 	call	1000d844 <__mulsi3>
100102b8:	1007883a 	mov	r3,r2
100102bc:	00840074 	movhi	r2,4097
100102c0:	108f2c04 	addi	r2,r2,15536
100102c4:	1885883a 	add	r2,r3,r2
100102c8:	00000106 	br	100102d0 <fstat+0x44>
100102cc:	0005883a 	mov	r2,zero
100102d0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
100102d4:	e0bffd17 	ldw	r2,-12(fp)
100102d8:	10001026 	beq	r2,zero,1001031c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
100102dc:	e0bffd17 	ldw	r2,-12(fp)
100102e0:	10800017 	ldw	r2,0(r2)
100102e4:	10800817 	ldw	r2,32(r2)
100102e8:	10000726 	beq	r2,zero,10010308 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
100102ec:	e0bffd17 	ldw	r2,-12(fp)
100102f0:	10800017 	ldw	r2,0(r2)
100102f4:	10800817 	ldw	r2,32(r2)
100102f8:	e17fff17 	ldw	r5,-4(fp)
100102fc:	e13ffd17 	ldw	r4,-12(fp)
10010300:	103ee83a 	callr	r2
10010304:	00000a06 	br	10010330 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10010308:	e0bfff17 	ldw	r2,-4(fp)
1001030c:	00c80004 	movi	r3,8192
10010310:	10c00115 	stw	r3,4(r2)
      return 0;
10010314:	0005883a 	mov	r2,zero
10010318:	00000506 	br	10010330 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001031c:	00102500 	call	10010250 <alt_get_errno>
10010320:	1007883a 	mov	r3,r2
10010324:	00801444 	movi	r2,81
10010328:	18800015 	stw	r2,0(r3)
    return -1;
1001032c:	00bfffc4 	movi	r2,-1
  }
}
10010330:	e037883a 	mov	sp,fp
10010334:	dfc00117 	ldw	ra,4(sp)
10010338:	df000017 	ldw	fp,0(sp)
1001033c:	dec00204 	addi	sp,sp,8
10010340:	f800283a 	ret

10010344 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010344:	defffe04 	addi	sp,sp,-8
10010348:	dfc00115 	stw	ra,4(sp)
1001034c:	df000015 	stw	fp,0(sp)
10010350:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010354:	d0a00b17 	ldw	r2,-32724(gp)
10010358:	10000326 	beq	r2,zero,10010368 <alt_get_errno+0x24>
1001035c:	d0a00b17 	ldw	r2,-32724(gp)
10010360:	103ee83a 	callr	r2
10010364:	00000106 	br	1001036c <alt_get_errno+0x28>
10010368:	d0a6d204 	addi	r2,gp,-25784
}
1001036c:	e037883a 	mov	sp,fp
10010370:	dfc00117 	ldw	ra,4(sp)
10010374:	df000017 	ldw	fp,0(sp)
10010378:	dec00204 	addi	sp,sp,8
1001037c:	f800283a 	ret

10010380 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10010380:	deffed04 	addi	sp,sp,-76
10010384:	dfc01215 	stw	ra,72(sp)
10010388:	df001115 	stw	fp,68(sp)
1001038c:	df001104 	addi	fp,sp,68
10010390:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010394:	e0bfff17 	ldw	r2,-4(fp)
10010398:	10000816 	blt	r2,zero,100103bc <isatty+0x3c>
1001039c:	01400304 	movi	r5,12
100103a0:	e13fff17 	ldw	r4,-4(fp)
100103a4:	000d8440 	call	1000d844 <__mulsi3>
100103a8:	1007883a 	mov	r3,r2
100103ac:	00840074 	movhi	r2,4097
100103b0:	108f2c04 	addi	r2,r2,15536
100103b4:	1885883a 	add	r2,r3,r2
100103b8:	00000106 	br	100103c0 <isatty+0x40>
100103bc:	0005883a 	mov	r2,zero
100103c0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
100103c4:	e0bfef17 	ldw	r2,-68(fp)
100103c8:	10000e26 	beq	r2,zero,10010404 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100103cc:	e0bfef17 	ldw	r2,-68(fp)
100103d0:	10800017 	ldw	r2,0(r2)
100103d4:	10800817 	ldw	r2,32(r2)
100103d8:	1000021e 	bne	r2,zero,100103e4 <isatty+0x64>
    {
      return 1;
100103dc:	00800044 	movi	r2,1
100103e0:	00000d06 	br	10010418 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100103e4:	e0bff004 	addi	r2,fp,-64
100103e8:	100b883a 	mov	r5,r2
100103ec:	e13fff17 	ldw	r4,-4(fp)
100103f0:	001028c0 	call	1001028c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100103f4:	e0bff117 	ldw	r2,-60(fp)
100103f8:	10880020 	cmpeqi	r2,r2,8192
100103fc:	10803fcc 	andi	r2,r2,255
10010400:	00000506 	br	10010418 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010404:	00103440 	call	10010344 <alt_get_errno>
10010408:	1007883a 	mov	r3,r2
1001040c:	00801444 	movi	r2,81
10010410:	18800015 	stw	r2,0(r3)
    return 0;
10010414:	0005883a 	mov	r2,zero
  }
}
10010418:	e037883a 	mov	sp,fp
1001041c:	dfc00117 	ldw	ra,4(sp)
10010420:	df000017 	ldw	fp,0(sp)
10010424:	dec00204 	addi	sp,sp,8
10010428:	f800283a 	ret

1001042c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1001042c:	defffc04 	addi	sp,sp,-16
10010430:	df000315 	stw	fp,12(sp)
10010434:	df000304 	addi	fp,sp,12
10010438:	e13ffd15 	stw	r4,-12(fp)
1001043c:	e17ffe15 	stw	r5,-8(fp)
10010440:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10010444:	e0fffe17 	ldw	r3,-8(fp)
10010448:	e0bffd17 	ldw	r2,-12(fp)
1001044c:	18800c26 	beq	r3,r2,10010480 <alt_load_section+0x54>
  {
    while( to != end )
10010450:	00000806 	br	10010474 <alt_load_section+0x48>
    {
      *to++ = *from++;
10010454:	e0bffe17 	ldw	r2,-8(fp)
10010458:	10c00104 	addi	r3,r2,4
1001045c:	e0fffe15 	stw	r3,-8(fp)
10010460:	e0fffd17 	ldw	r3,-12(fp)
10010464:	19000104 	addi	r4,r3,4
10010468:	e13ffd15 	stw	r4,-12(fp)
1001046c:	18c00017 	ldw	r3,0(r3)
10010470:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10010474:	e0fffe17 	ldw	r3,-8(fp)
10010478:	e0bfff17 	ldw	r2,-4(fp)
1001047c:	18bff51e 	bne	r3,r2,10010454 <__alt_data_end+0xf8010454>
    {
      *to++ = *from++;
    }
  }
}
10010480:	0001883a 	nop
10010484:	e037883a 	mov	sp,fp
10010488:	df000017 	ldw	fp,0(sp)
1001048c:	dec00104 	addi	sp,sp,4
10010490:	f800283a 	ret

10010494 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10010494:	defffe04 	addi	sp,sp,-8
10010498:	dfc00115 	stw	ra,4(sp)
1001049c:	df000015 	stw	fp,0(sp)
100104a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
100104a4:	01840074 	movhi	r6,4097
100104a8:	3193b404 	addi	r6,r6,20176
100104ac:	01440074 	movhi	r5,4097
100104b0:	294cf904 	addi	r5,r5,13284
100104b4:	01040074 	movhi	r4,4097
100104b8:	2113b404 	addi	r4,r4,20176
100104bc:	001042c0 	call	1001042c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
100104c0:	01840034 	movhi	r6,4096
100104c4:	31808c04 	addi	r6,r6,560
100104c8:	01440034 	movhi	r5,4096
100104cc:	29400804 	addi	r5,r5,32
100104d0:	01040034 	movhi	r4,4096
100104d4:	21000804 	addi	r4,r4,32
100104d8:	001042c0 	call	1001042c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100104dc:	01840074 	movhi	r6,4097
100104e0:	318cf904 	addi	r6,r6,13284
100104e4:	01440074 	movhi	r5,4097
100104e8:	294a8e04 	addi	r5,r5,10808
100104ec:	01040074 	movhi	r4,4097
100104f0:	210a8e04 	addi	r4,r4,10808
100104f4:	001042c0 	call	1001042c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100104f8:	00119800 	call	10011980 <alt_dcache_flush_all>
  alt_icache_flush_all();
100104fc:	0011b400 	call	10011b40 <alt_icache_flush_all>
}
10010500:	0001883a 	nop
10010504:	e037883a 	mov	sp,fp
10010508:	dfc00117 	ldw	ra,4(sp)
1001050c:	df000017 	ldw	fp,0(sp)
10010510:	dec00204 	addi	sp,sp,8
10010514:	f800283a 	ret

10010518 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010518:	defffe04 	addi	sp,sp,-8
1001051c:	dfc00115 	stw	ra,4(sp)
10010520:	df000015 	stw	fp,0(sp)
10010524:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010528:	d0a00b17 	ldw	r2,-32724(gp)
1001052c:	10000326 	beq	r2,zero,1001053c <alt_get_errno+0x24>
10010530:	d0a00b17 	ldw	r2,-32724(gp)
10010534:	103ee83a 	callr	r2
10010538:	00000106 	br	10010540 <alt_get_errno+0x28>
1001053c:	d0a6d204 	addi	r2,gp,-25784
}
10010540:	e037883a 	mov	sp,fp
10010544:	dfc00117 	ldw	ra,4(sp)
10010548:	df000017 	ldw	fp,0(sp)
1001054c:	dec00204 	addi	sp,sp,8
10010550:	f800283a 	ret

10010554 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10010554:	defff904 	addi	sp,sp,-28
10010558:	dfc00615 	stw	ra,24(sp)
1001055c:	df000515 	stw	fp,20(sp)
10010560:	df000504 	addi	fp,sp,20
10010564:	e13ffd15 	stw	r4,-12(fp)
10010568:	e17ffe15 	stw	r5,-8(fp)
1001056c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10010570:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010574:	e0bffd17 	ldw	r2,-12(fp)
10010578:	10000816 	blt	r2,zero,1001059c <lseek+0x48>
1001057c:	01400304 	movi	r5,12
10010580:	e13ffd17 	ldw	r4,-12(fp)
10010584:	000d8440 	call	1000d844 <__mulsi3>
10010588:	1007883a 	mov	r3,r2
1001058c:	00840074 	movhi	r2,4097
10010590:	108f2c04 	addi	r2,r2,15536
10010594:	1885883a 	add	r2,r3,r2
10010598:	00000106 	br	100105a0 <lseek+0x4c>
1001059c:	0005883a 	mov	r2,zero
100105a0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
100105a4:	e0bffc17 	ldw	r2,-16(fp)
100105a8:	10001026 	beq	r2,zero,100105ec <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100105ac:	e0bffc17 	ldw	r2,-16(fp)
100105b0:	10800017 	ldw	r2,0(r2)
100105b4:	10800717 	ldw	r2,28(r2)
100105b8:	10000926 	beq	r2,zero,100105e0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100105bc:	e0bffc17 	ldw	r2,-16(fp)
100105c0:	10800017 	ldw	r2,0(r2)
100105c4:	10800717 	ldw	r2,28(r2)
100105c8:	e1bfff17 	ldw	r6,-4(fp)
100105cc:	e17ffe17 	ldw	r5,-8(fp)
100105d0:	e13ffc17 	ldw	r4,-16(fp)
100105d4:	103ee83a 	callr	r2
100105d8:	e0bffb15 	stw	r2,-20(fp)
100105dc:	00000506 	br	100105f4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100105e0:	00bfde84 	movi	r2,-134
100105e4:	e0bffb15 	stw	r2,-20(fp)
100105e8:	00000206 	br	100105f4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100105ec:	00bfebc4 	movi	r2,-81
100105f0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100105f4:	e0bffb17 	ldw	r2,-20(fp)
100105f8:	1000070e 	bge	r2,zero,10010618 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
100105fc:	00105180 	call	10010518 <alt_get_errno>
10010600:	1007883a 	mov	r3,r2
10010604:	e0bffb17 	ldw	r2,-20(fp)
10010608:	0085c83a 	sub	r2,zero,r2
1001060c:	18800015 	stw	r2,0(r3)
    rc = -1;
10010610:	00bfffc4 	movi	r2,-1
10010614:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10010618:	e0bffb17 	ldw	r2,-20(fp)
}
1001061c:	e037883a 	mov	sp,fp
10010620:	dfc00117 	ldw	ra,4(sp)
10010624:	df000017 	ldw	fp,0(sp)
10010628:	dec00204 	addi	sp,sp,8
1001062c:	f800283a 	ret

10010630 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10010630:	defffd04 	addi	sp,sp,-12
10010634:	dfc00215 	stw	ra,8(sp)
10010638:	df000115 	stw	fp,4(sp)
1001063c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10010640:	0009883a 	mov	r4,zero
10010644:	0010b080 	call	10010b08 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10010648:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1001064c:	0010b400 	call	10010b40 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10010650:	01840074 	movhi	r6,4097
10010654:	318cef04 	addi	r6,r6,13244
10010658:	01440074 	movhi	r5,4097
1001065c:	294cef04 	addi	r5,r5,13244
10010660:	01040074 	movhi	r4,4097
10010664:	210cef04 	addi	r4,r4,13244
10010668:	0011ee40 	call	10011ee4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1001066c:	0011a800 	call	10011a80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10010670:	01040074 	movhi	r4,4097
10010674:	2106b804 	addi	r4,r4,6880
10010678:	00126a40 	call	100126a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1001067c:	d0a6d317 	ldw	r2,-25780(gp)
10010680:	d0e6d417 	ldw	r3,-25776(gp)
10010684:	d126d517 	ldw	r4,-25772(gp)
10010688:	200d883a 	mov	r6,r4
1001068c:	180b883a 	mov	r5,r3
10010690:	1009883a 	mov	r4,r2
10010694:	00003f40 	call	100003f4 <main>
10010698:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1001069c:	01000044 	movi	r4,1
100106a0:	001014c0 	call	1001014c <close>
  exit (result);
100106a4:	e13fff17 	ldw	r4,-4(fp)
100106a8:	00126b80 	call	100126b8 <exit>

100106ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
100106ac:	defffe04 	addi	sp,sp,-8
100106b0:	df000115 	stw	fp,4(sp)
100106b4:	df000104 	addi	fp,sp,4
100106b8:	e13fff15 	stw	r4,-4(fp)
}
100106bc:	0001883a 	nop
100106c0:	e037883a 	mov	sp,fp
100106c4:	df000017 	ldw	fp,0(sp)
100106c8:	dec00104 	addi	sp,sp,4
100106cc:	f800283a 	ret

100106d0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100106d0:	defffe04 	addi	sp,sp,-8
100106d4:	df000115 	stw	fp,4(sp)
100106d8:	df000104 	addi	fp,sp,4
100106dc:	e13fff15 	stw	r4,-4(fp)
}
100106e0:	0001883a 	nop
100106e4:	e037883a 	mov	sp,fp
100106e8:	df000017 	ldw	fp,0(sp)
100106ec:	dec00104 	addi	sp,sp,4
100106f0:	f800283a 	ret

100106f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100106f4:	defffe04 	addi	sp,sp,-8
100106f8:	dfc00115 	stw	ra,4(sp)
100106fc:	df000015 	stw	fp,0(sp)
10010700:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010704:	d0a00b17 	ldw	r2,-32724(gp)
10010708:	10000326 	beq	r2,zero,10010718 <alt_get_errno+0x24>
1001070c:	d0a00b17 	ldw	r2,-32724(gp)
10010710:	103ee83a 	callr	r2
10010714:	00000106 	br	1001071c <alt_get_errno+0x28>
10010718:	d0a6d204 	addi	r2,gp,-25784
}
1001071c:	e037883a 	mov	sp,fp
10010720:	dfc00117 	ldw	ra,4(sp)
10010724:	df000017 	ldw	fp,0(sp)
10010728:	dec00204 	addi	sp,sp,8
1001072c:	f800283a 	ret

10010730 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10010730:	defff904 	addi	sp,sp,-28
10010734:	dfc00615 	stw	ra,24(sp)
10010738:	df000515 	stw	fp,20(sp)
1001073c:	df000504 	addi	fp,sp,20
10010740:	e13ffd15 	stw	r4,-12(fp)
10010744:	e17ffe15 	stw	r5,-8(fp)
10010748:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001074c:	e0bffd17 	ldw	r2,-12(fp)
10010750:	10000816 	blt	r2,zero,10010774 <read+0x44>
10010754:	01400304 	movi	r5,12
10010758:	e13ffd17 	ldw	r4,-12(fp)
1001075c:	000d8440 	call	1000d844 <__mulsi3>
10010760:	1007883a 	mov	r3,r2
10010764:	00840074 	movhi	r2,4097
10010768:	108f2c04 	addi	r2,r2,15536
1001076c:	1885883a 	add	r2,r3,r2
10010770:	00000106 	br	10010778 <read+0x48>
10010774:	0005883a 	mov	r2,zero
10010778:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1001077c:	e0bffb17 	ldw	r2,-20(fp)
10010780:	10002226 	beq	r2,zero,1001080c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10010784:	e0bffb17 	ldw	r2,-20(fp)
10010788:	10800217 	ldw	r2,8(r2)
1001078c:	108000cc 	andi	r2,r2,3
10010790:	10800060 	cmpeqi	r2,r2,1
10010794:	1000181e 	bne	r2,zero,100107f8 <read+0xc8>
        (fd->dev->read))
10010798:	e0bffb17 	ldw	r2,-20(fp)
1001079c:	10800017 	ldw	r2,0(r2)
100107a0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100107a4:	10001426 	beq	r2,zero,100107f8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
100107a8:	e0bffb17 	ldw	r2,-20(fp)
100107ac:	10800017 	ldw	r2,0(r2)
100107b0:	10800517 	ldw	r2,20(r2)
100107b4:	e0ffff17 	ldw	r3,-4(fp)
100107b8:	180d883a 	mov	r6,r3
100107bc:	e17ffe17 	ldw	r5,-8(fp)
100107c0:	e13ffb17 	ldw	r4,-20(fp)
100107c4:	103ee83a 	callr	r2
100107c8:	e0bffc15 	stw	r2,-16(fp)
100107cc:	e0bffc17 	ldw	r2,-16(fp)
100107d0:	1000070e 	bge	r2,zero,100107f0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100107d4:	00106f40 	call	100106f4 <alt_get_errno>
100107d8:	1007883a 	mov	r3,r2
100107dc:	e0bffc17 	ldw	r2,-16(fp)
100107e0:	0085c83a 	sub	r2,zero,r2
100107e4:	18800015 	stw	r2,0(r3)
          return -1;
100107e8:	00bfffc4 	movi	r2,-1
100107ec:	00000c06 	br	10010820 <read+0xf0>
        }
        return rval;
100107f0:	e0bffc17 	ldw	r2,-16(fp)
100107f4:	00000a06 	br	10010820 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
100107f8:	00106f40 	call	100106f4 <alt_get_errno>
100107fc:	1007883a 	mov	r3,r2
10010800:	00800344 	movi	r2,13
10010804:	18800015 	stw	r2,0(r3)
10010808:	00000406 	br	1001081c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1001080c:	00106f40 	call	100106f4 <alt_get_errno>
10010810:	1007883a 	mov	r3,r2
10010814:	00801444 	movi	r2,81
10010818:	18800015 	stw	r2,0(r3)
  }
  return -1;
1001081c:	00bfffc4 	movi	r2,-1
}
10010820:	e037883a 	mov	sp,fp
10010824:	dfc00117 	ldw	ra,4(sp)
10010828:	df000017 	ldw	fp,0(sp)
1001082c:	dec00204 	addi	sp,sp,8
10010830:	f800283a 	ret

10010834 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10010834:	defffc04 	addi	sp,sp,-16
10010838:	dfc00315 	stw	ra,12(sp)
1001083c:	df000215 	stw	fp,8(sp)
10010840:	dc000115 	stw	r16,4(sp)
10010844:	df000204 	addi	fp,sp,8
10010848:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1001084c:	e0bffe17 	ldw	r2,-8(fp)
10010850:	108000d0 	cmplti	r2,r2,3
10010854:	1000111e 	bne	r2,zero,1001089c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10010858:	04040074 	movhi	r16,4097
1001085c:	840f2c04 	addi	r16,r16,15536
10010860:	e0bffe17 	ldw	r2,-8(fp)
10010864:	01400304 	movi	r5,12
10010868:	1009883a 	mov	r4,r2
1001086c:	000d8440 	call	1000d844 <__mulsi3>
10010870:	8085883a 	add	r2,r16,r2
10010874:	10800204 	addi	r2,r2,8
10010878:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1001087c:	04040074 	movhi	r16,4097
10010880:	840f2c04 	addi	r16,r16,15536
10010884:	e0bffe17 	ldw	r2,-8(fp)
10010888:	01400304 	movi	r5,12
1001088c:	1009883a 	mov	r4,r2
10010890:	000d8440 	call	1000d844 <__mulsi3>
10010894:	8085883a 	add	r2,r16,r2
10010898:	10000015 	stw	zero,0(r2)
  }
}
1001089c:	0001883a 	nop
100108a0:	e6ffff04 	addi	sp,fp,-4
100108a4:	dfc00217 	ldw	ra,8(sp)
100108a8:	df000117 	ldw	fp,4(sp)
100108ac:	dc000017 	ldw	r16,0(sp)
100108b0:	dec00304 	addi	sp,sp,12
100108b4:	f800283a 	ret

100108b8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100108b8:	defff904 	addi	sp,sp,-28
100108bc:	df000615 	stw	fp,24(sp)
100108c0:	df000604 	addi	fp,sp,24
100108c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100108c8:	0005303a 	rdctl	r2,status
100108cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100108d0:	e0fffe17 	ldw	r3,-8(fp)
100108d4:	00bfff84 	movi	r2,-2
100108d8:	1884703a 	and	r2,r3,r2
100108dc:	1001703a 	wrctl	status,r2
  
  return context;
100108e0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100108e4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100108e8:	d0a00c17 	ldw	r2,-32720(gp)
100108ec:	10c000c4 	addi	r3,r2,3
100108f0:	00bfff04 	movi	r2,-4
100108f4:	1884703a 	and	r2,r3,r2
100108f8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100108fc:	d0e00c17 	ldw	r3,-32720(gp)
10010900:	e0bfff17 	ldw	r2,-4(fp)
10010904:	1887883a 	add	r3,r3,r2
10010908:	00860034 	movhi	r2,6144
1001090c:	10800004 	addi	r2,r2,0
10010910:	10c0062e 	bgeu	r2,r3,1001092c <sbrk+0x74>
10010914:	e0bffb17 	ldw	r2,-20(fp)
10010918:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001091c:	e0bffa17 	ldw	r2,-24(fp)
10010920:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10010924:	00bfffc4 	movi	r2,-1
10010928:	00000b06 	br	10010958 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1001092c:	d0a00c17 	ldw	r2,-32720(gp)
10010930:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10010934:	d0e00c17 	ldw	r3,-32720(gp)
10010938:	e0bfff17 	ldw	r2,-4(fp)
1001093c:	1885883a 	add	r2,r3,r2
10010940:	d0a00c15 	stw	r2,-32720(gp)
10010944:	e0bffb17 	ldw	r2,-20(fp)
10010948:	e0bffc15 	stw	r2,-16(fp)
1001094c:	e0bffc17 	ldw	r2,-16(fp)
10010950:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10010954:	e0bffd17 	ldw	r2,-12(fp)
} 
10010958:	e037883a 	mov	sp,fp
1001095c:	df000017 	ldw	fp,0(sp)
10010960:	dec00104 	addi	sp,sp,4
10010964:	f800283a 	ret

10010968 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10010968:	defffd04 	addi	sp,sp,-12
1001096c:	dfc00215 	stw	ra,8(sp)
10010970:	df000115 	stw	fp,4(sp)
10010974:	df000104 	addi	fp,sp,4
10010978:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1001097c:	e13fff17 	ldw	r4,-4(fp)
10010980:	00118280 	call	10011828 <alt_busy_sleep>
}
10010984:	e037883a 	mov	sp,fp
10010988:	dfc00117 	ldw	ra,4(sp)
1001098c:	df000017 	ldw	fp,0(sp)
10010990:	dec00204 	addi	sp,sp,8
10010994:	f800283a 	ret

10010998 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010998:	defffe04 	addi	sp,sp,-8
1001099c:	dfc00115 	stw	ra,4(sp)
100109a0:	df000015 	stw	fp,0(sp)
100109a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100109a8:	d0a00b17 	ldw	r2,-32724(gp)
100109ac:	10000326 	beq	r2,zero,100109bc <alt_get_errno+0x24>
100109b0:	d0a00b17 	ldw	r2,-32724(gp)
100109b4:	103ee83a 	callr	r2
100109b8:	00000106 	br	100109c0 <alt_get_errno+0x28>
100109bc:	d0a6d204 	addi	r2,gp,-25784
}
100109c0:	e037883a 	mov	sp,fp
100109c4:	dfc00117 	ldw	ra,4(sp)
100109c8:	df000017 	ldw	fp,0(sp)
100109cc:	dec00204 	addi	sp,sp,8
100109d0:	f800283a 	ret

100109d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100109d4:	defff904 	addi	sp,sp,-28
100109d8:	dfc00615 	stw	ra,24(sp)
100109dc:	df000515 	stw	fp,20(sp)
100109e0:	df000504 	addi	fp,sp,20
100109e4:	e13ffd15 	stw	r4,-12(fp)
100109e8:	e17ffe15 	stw	r5,-8(fp)
100109ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100109f0:	e0bffd17 	ldw	r2,-12(fp)
100109f4:	10000816 	blt	r2,zero,10010a18 <write+0x44>
100109f8:	01400304 	movi	r5,12
100109fc:	e13ffd17 	ldw	r4,-12(fp)
10010a00:	000d8440 	call	1000d844 <__mulsi3>
10010a04:	1007883a 	mov	r3,r2
10010a08:	00840074 	movhi	r2,4097
10010a0c:	108f2c04 	addi	r2,r2,15536
10010a10:	1885883a 	add	r2,r3,r2
10010a14:	00000106 	br	10010a1c <write+0x48>
10010a18:	0005883a 	mov	r2,zero
10010a1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010a20:	e0bffb17 	ldw	r2,-20(fp)
10010a24:	10002126 	beq	r2,zero,10010aac <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010a28:	e0bffb17 	ldw	r2,-20(fp)
10010a2c:	10800217 	ldw	r2,8(r2)
10010a30:	108000cc 	andi	r2,r2,3
10010a34:	10001826 	beq	r2,zero,10010a98 <write+0xc4>
10010a38:	e0bffb17 	ldw	r2,-20(fp)
10010a3c:	10800017 	ldw	r2,0(r2)
10010a40:	10800617 	ldw	r2,24(r2)
10010a44:	10001426 	beq	r2,zero,10010a98 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010a48:	e0bffb17 	ldw	r2,-20(fp)
10010a4c:	10800017 	ldw	r2,0(r2)
10010a50:	10800617 	ldw	r2,24(r2)
10010a54:	e0ffff17 	ldw	r3,-4(fp)
10010a58:	180d883a 	mov	r6,r3
10010a5c:	e17ffe17 	ldw	r5,-8(fp)
10010a60:	e13ffb17 	ldw	r4,-20(fp)
10010a64:	103ee83a 	callr	r2
10010a68:	e0bffc15 	stw	r2,-16(fp)
10010a6c:	e0bffc17 	ldw	r2,-16(fp)
10010a70:	1000070e 	bge	r2,zero,10010a90 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10010a74:	00109980 	call	10010998 <alt_get_errno>
10010a78:	1007883a 	mov	r3,r2
10010a7c:	e0bffc17 	ldw	r2,-16(fp)
10010a80:	0085c83a 	sub	r2,zero,r2
10010a84:	18800015 	stw	r2,0(r3)
        return -1;
10010a88:	00bfffc4 	movi	r2,-1
10010a8c:	00000c06 	br	10010ac0 <write+0xec>
      }
      return rval;
10010a90:	e0bffc17 	ldw	r2,-16(fp)
10010a94:	00000a06 	br	10010ac0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10010a98:	00109980 	call	10010998 <alt_get_errno>
10010a9c:	1007883a 	mov	r3,r2
10010aa0:	00800344 	movi	r2,13
10010aa4:	18800015 	stw	r2,0(r3)
10010aa8:	00000406 	br	10010abc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10010aac:	00109980 	call	10010998 <alt_get_errno>
10010ab0:	1007883a 	mov	r3,r2
10010ab4:	00801444 	movi	r2,81
10010ab8:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010abc:	00bfffc4 	movi	r2,-1
}
10010ac0:	e037883a 	mov	sp,fp
10010ac4:	dfc00117 	ldw	ra,4(sp)
10010ac8:	df000017 	ldw	fp,0(sp)
10010acc:	dec00204 	addi	sp,sp,8
10010ad0:	f800283a 	ret

10010ad4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010ad4:	defffd04 	addi	sp,sp,-12
10010ad8:	dfc00215 	stw	ra,8(sp)
10010adc:	df000115 	stw	fp,4(sp)
10010ae0:	df000104 	addi	fp,sp,4
10010ae4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10010ae8:	d1600804 	addi	r5,gp,-32736
10010aec:	e13fff17 	ldw	r4,-4(fp)
10010af0:	00119dc0 	call	100119dc <alt_dev_llist_insert>
}
10010af4:	e037883a 	mov	sp,fp
10010af8:	dfc00117 	ldw	ra,4(sp)
10010afc:	df000017 	ldw	fp,0(sp)
10010b00:	dec00204 	addi	sp,sp,8
10010b04:	f800283a 	ret

10010b08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10010b08:	defffd04 	addi	sp,sp,-12
10010b0c:	dfc00215 	stw	ra,8(sp)
10010b10:	df000115 	stw	fp,4(sp)
10010b14:	df000104 	addi	fp,sp,4
10010b18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10010b1c:	00123880 	call	10012388 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010b20:	00800044 	movi	r2,1
10010b24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010b28:	0001883a 	nop
10010b2c:	e037883a 	mov	sp,fp
10010b30:	dfc00117 	ldw	ra,4(sp)
10010b34:	df000017 	ldw	fp,0(sp)
10010b38:	dec00204 	addi	sp,sp,8
10010b3c:	f800283a 	ret

10010b40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010b40:	defffe04 	addi	sp,sp,-8
10010b44:	dfc00115 	stw	ra,4(sp)
10010b48:	df000015 	stw	fp,0(sp)
10010b4c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
10010b50:	01c0fa04 	movi	r7,1000
10010b54:	000d883a 	mov	r6,zero
10010b58:	000b883a 	mov	r5,zero
10010b5c:	01001004 	movi	r4,64
10010b60:	00116800 	call	10011680 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010b64:	01800144 	movi	r6,5
10010b68:	000b883a 	mov	r5,zero
10010b6c:	01040074 	movhi	r4,4097
10010b70:	210f9604 	addi	r4,r4,15960
10010b74:	0010d040 	call	10010d04 <altera_avalon_jtag_uart_init>
10010b78:	01040074 	movhi	r4,4097
10010b7c:	210f8c04 	addi	r4,r4,15920
10010b80:	0010ad40 	call	10010ad4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010b84:	0001883a 	nop
}
10010b88:	0001883a 	nop
10010b8c:	e037883a 	mov	sp,fp
10010b90:	dfc00117 	ldw	ra,4(sp)
10010b94:	df000017 	ldw	fp,0(sp)
10010b98:	dec00204 	addi	sp,sp,8
10010b9c:	f800283a 	ret

10010ba0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10010ba0:	defffa04 	addi	sp,sp,-24
10010ba4:	dfc00515 	stw	ra,20(sp)
10010ba8:	df000415 	stw	fp,16(sp)
10010bac:	df000404 	addi	fp,sp,16
10010bb0:	e13ffd15 	stw	r4,-12(fp)
10010bb4:	e17ffe15 	stw	r5,-8(fp)
10010bb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010bbc:	e0bffd17 	ldw	r2,-12(fp)
10010bc0:	10800017 	ldw	r2,0(r2)
10010bc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010bc8:	e0bffc17 	ldw	r2,-16(fp)
10010bcc:	10c00a04 	addi	r3,r2,40
10010bd0:	e0bffd17 	ldw	r2,-12(fp)
10010bd4:	10800217 	ldw	r2,8(r2)
10010bd8:	100f883a 	mov	r7,r2
10010bdc:	e1bfff17 	ldw	r6,-4(fp)
10010be0:	e17ffe17 	ldw	r5,-8(fp)
10010be4:	1809883a 	mov	r4,r3
10010be8:	00111c80 	call	100111c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010bec:	e037883a 	mov	sp,fp
10010bf0:	dfc00117 	ldw	ra,4(sp)
10010bf4:	df000017 	ldw	fp,0(sp)
10010bf8:	dec00204 	addi	sp,sp,8
10010bfc:	f800283a 	ret

10010c00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10010c00:	defffa04 	addi	sp,sp,-24
10010c04:	dfc00515 	stw	ra,20(sp)
10010c08:	df000415 	stw	fp,16(sp)
10010c0c:	df000404 	addi	fp,sp,16
10010c10:	e13ffd15 	stw	r4,-12(fp)
10010c14:	e17ffe15 	stw	r5,-8(fp)
10010c18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010c1c:	e0bffd17 	ldw	r2,-12(fp)
10010c20:	10800017 	ldw	r2,0(r2)
10010c24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010c28:	e0bffc17 	ldw	r2,-16(fp)
10010c2c:	10c00a04 	addi	r3,r2,40
10010c30:	e0bffd17 	ldw	r2,-12(fp)
10010c34:	10800217 	ldw	r2,8(r2)
10010c38:	100f883a 	mov	r7,r2
10010c3c:	e1bfff17 	ldw	r6,-4(fp)
10010c40:	e17ffe17 	ldw	r5,-8(fp)
10010c44:	1809883a 	mov	r4,r3
10010c48:	00113e40 	call	100113e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010c4c:	e037883a 	mov	sp,fp
10010c50:	dfc00117 	ldw	ra,4(sp)
10010c54:	df000017 	ldw	fp,0(sp)
10010c58:	dec00204 	addi	sp,sp,8
10010c5c:	f800283a 	ret

10010c60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010c60:	defffc04 	addi	sp,sp,-16
10010c64:	dfc00315 	stw	ra,12(sp)
10010c68:	df000215 	stw	fp,8(sp)
10010c6c:	df000204 	addi	fp,sp,8
10010c70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010c74:	e0bfff17 	ldw	r2,-4(fp)
10010c78:	10800017 	ldw	r2,0(r2)
10010c7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10010c80:	e0bffe17 	ldw	r2,-8(fp)
10010c84:	10c00a04 	addi	r3,r2,40
10010c88:	e0bfff17 	ldw	r2,-4(fp)
10010c8c:	10800217 	ldw	r2,8(r2)
10010c90:	100b883a 	mov	r5,r2
10010c94:	1809883a 	mov	r4,r3
10010c98:	00110700 	call	10011070 <altera_avalon_jtag_uart_close>
}
10010c9c:	e037883a 	mov	sp,fp
10010ca0:	dfc00117 	ldw	ra,4(sp)
10010ca4:	df000017 	ldw	fp,0(sp)
10010ca8:	dec00204 	addi	sp,sp,8
10010cac:	f800283a 	ret

10010cb0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10010cb0:	defffa04 	addi	sp,sp,-24
10010cb4:	dfc00515 	stw	ra,20(sp)
10010cb8:	df000415 	stw	fp,16(sp)
10010cbc:	df000404 	addi	fp,sp,16
10010cc0:	e13ffd15 	stw	r4,-12(fp)
10010cc4:	e17ffe15 	stw	r5,-8(fp)
10010cc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10010ccc:	e0bffd17 	ldw	r2,-12(fp)
10010cd0:	10800017 	ldw	r2,0(r2)
10010cd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10010cd8:	e0bffc17 	ldw	r2,-16(fp)
10010cdc:	10800a04 	addi	r2,r2,40
10010ce0:	e1bfff17 	ldw	r6,-4(fp)
10010ce4:	e17ffe17 	ldw	r5,-8(fp)
10010ce8:	1009883a 	mov	r4,r2
10010cec:	00110d80 	call	100110d8 <altera_avalon_jtag_uart_ioctl>
}
10010cf0:	e037883a 	mov	sp,fp
10010cf4:	dfc00117 	ldw	ra,4(sp)
10010cf8:	df000017 	ldw	fp,0(sp)
10010cfc:	dec00204 	addi	sp,sp,8
10010d00:	f800283a 	ret

10010d04 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010d04:	defffa04 	addi	sp,sp,-24
10010d08:	dfc00515 	stw	ra,20(sp)
10010d0c:	df000415 	stw	fp,16(sp)
10010d10:	df000404 	addi	fp,sp,16
10010d14:	e13ffd15 	stw	r4,-12(fp)
10010d18:	e17ffe15 	stw	r5,-8(fp)
10010d1c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010d20:	e0bffd17 	ldw	r2,-12(fp)
10010d24:	00c00044 	movi	r3,1
10010d28:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010d2c:	e0bffd17 	ldw	r2,-12(fp)
10010d30:	10800017 	ldw	r2,0(r2)
10010d34:	10800104 	addi	r2,r2,4
10010d38:	1007883a 	mov	r3,r2
10010d3c:	e0bffd17 	ldw	r2,-12(fp)
10010d40:	10800817 	ldw	r2,32(r2)
10010d44:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010d48:	e0bffe17 	ldw	r2,-8(fp)
10010d4c:	e0ffff17 	ldw	r3,-4(fp)
10010d50:	d8000015 	stw	zero,0(sp)
10010d54:	e1fffd17 	ldw	r7,-12(fp)
10010d58:	01840074 	movhi	r6,4097
10010d5c:	31837104 	addi	r6,r6,3524
10010d60:	180b883a 	mov	r5,r3
10010d64:	1009883a 	mov	r4,r2
10010d68:	0011b600 	call	10011b60 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010d6c:	e0bffd17 	ldw	r2,-12(fp)
10010d70:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010d74:	e0bffd17 	ldw	r2,-12(fp)
10010d78:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010d7c:	d0e6d717 	ldw	r3,-25764(gp)
10010d80:	e1fffd17 	ldw	r7,-12(fp)
10010d84:	01840074 	movhi	r6,4097
10010d88:	3183f404 	addi	r6,r6,4048
10010d8c:	180b883a 	mov	r5,r3
10010d90:	1009883a 	mov	r4,r2
10010d94:	00116fc0 	call	100116fc <alt_alarm_start>
10010d98:	1000040e 	bge	r2,zero,10010dac <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010d9c:	e0fffd17 	ldw	r3,-12(fp)
10010da0:	00a00034 	movhi	r2,32768
10010da4:	10bfffc4 	addi	r2,r2,-1
10010da8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010dac:	0001883a 	nop
10010db0:	e037883a 	mov	sp,fp
10010db4:	dfc00117 	ldw	ra,4(sp)
10010db8:	df000017 	ldw	fp,0(sp)
10010dbc:	dec00204 	addi	sp,sp,8
10010dc0:	f800283a 	ret

10010dc4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010dc4:	defff804 	addi	sp,sp,-32
10010dc8:	df000715 	stw	fp,28(sp)
10010dcc:	df000704 	addi	fp,sp,28
10010dd0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010dd4:	e0bfff17 	ldw	r2,-4(fp)
10010dd8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10010ddc:	e0bffb17 	ldw	r2,-20(fp)
10010de0:	10800017 	ldw	r2,0(r2)
10010de4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010de8:	e0bffc17 	ldw	r2,-16(fp)
10010dec:	10800104 	addi	r2,r2,4
10010df0:	10800037 	ldwio	r2,0(r2)
10010df4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010df8:	e0bffd17 	ldw	r2,-12(fp)
10010dfc:	1080c00c 	andi	r2,r2,768
10010e00:	10006d26 	beq	r2,zero,10010fb8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010e04:	e0bffd17 	ldw	r2,-12(fp)
10010e08:	1080400c 	andi	r2,r2,256
10010e0c:	10003526 	beq	r2,zero,10010ee4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10010e10:	00800074 	movhi	r2,1
10010e14:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010e18:	e0bffb17 	ldw	r2,-20(fp)
10010e1c:	10800a17 	ldw	r2,40(r2)
10010e20:	10800044 	addi	r2,r2,1
10010e24:	1081ffcc 	andi	r2,r2,2047
10010e28:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10010e2c:	e0bffb17 	ldw	r2,-20(fp)
10010e30:	10c00b17 	ldw	r3,44(r2)
10010e34:	e0bffe17 	ldw	r2,-8(fp)
10010e38:	18801526 	beq	r3,r2,10010e90 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010e3c:	e0bffc17 	ldw	r2,-16(fp)
10010e40:	10800037 	ldwio	r2,0(r2)
10010e44:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010e48:	e0bff917 	ldw	r2,-28(fp)
10010e4c:	10a0000c 	andi	r2,r2,32768
10010e50:	10001126 	beq	r2,zero,10010e98 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010e54:	e0bffb17 	ldw	r2,-20(fp)
10010e58:	10800a17 	ldw	r2,40(r2)
10010e5c:	e0fff917 	ldw	r3,-28(fp)
10010e60:	1809883a 	mov	r4,r3
10010e64:	e0fffb17 	ldw	r3,-20(fp)
10010e68:	1885883a 	add	r2,r3,r2
10010e6c:	10800e04 	addi	r2,r2,56
10010e70:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010e74:	e0bffb17 	ldw	r2,-20(fp)
10010e78:	10800a17 	ldw	r2,40(r2)
10010e7c:	10800044 	addi	r2,r2,1
10010e80:	10c1ffcc 	andi	r3,r2,2047
10010e84:	e0bffb17 	ldw	r2,-20(fp)
10010e88:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010e8c:	003fe206 	br	10010e18 <__alt_data_end+0xf8010e18>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10010e90:	0001883a 	nop
10010e94:	00000106 	br	10010e9c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10010e98:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010e9c:	e0bff917 	ldw	r2,-28(fp)
10010ea0:	10bfffec 	andhi	r2,r2,65535
10010ea4:	10000f26 	beq	r2,zero,10010ee4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010ea8:	e0bffb17 	ldw	r2,-20(fp)
10010eac:	10c00817 	ldw	r3,32(r2)
10010eb0:	00bfff84 	movi	r2,-2
10010eb4:	1886703a 	and	r3,r3,r2
10010eb8:	e0bffb17 	ldw	r2,-20(fp)
10010ebc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10010ec0:	e0bffc17 	ldw	r2,-16(fp)
10010ec4:	10800104 	addi	r2,r2,4
10010ec8:	1007883a 	mov	r3,r2
10010ecc:	e0bffb17 	ldw	r2,-20(fp)
10010ed0:	10800817 	ldw	r2,32(r2)
10010ed4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010ed8:	e0bffc17 	ldw	r2,-16(fp)
10010edc:	10800104 	addi	r2,r2,4
10010ee0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10010ee4:	e0bffd17 	ldw	r2,-12(fp)
10010ee8:	1080800c 	andi	r2,r2,512
10010eec:	103fbe26 	beq	r2,zero,10010de8 <__alt_data_end+0xf8010de8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10010ef0:	e0bffd17 	ldw	r2,-12(fp)
10010ef4:	1004d43a 	srli	r2,r2,16
10010ef8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010efc:	00001406 	br	10010f50 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10010f00:	e0bffc17 	ldw	r2,-16(fp)
10010f04:	e0fffb17 	ldw	r3,-20(fp)
10010f08:	18c00d17 	ldw	r3,52(r3)
10010f0c:	e13ffb17 	ldw	r4,-20(fp)
10010f10:	20c7883a 	add	r3,r4,r3
10010f14:	18c20e04 	addi	r3,r3,2104
10010f18:	18c00003 	ldbu	r3,0(r3)
10010f1c:	18c03fcc 	andi	r3,r3,255
10010f20:	18c0201c 	xori	r3,r3,128
10010f24:	18ffe004 	addi	r3,r3,-128
10010f28:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010f2c:	e0bffb17 	ldw	r2,-20(fp)
10010f30:	10800d17 	ldw	r2,52(r2)
10010f34:	10800044 	addi	r2,r2,1
10010f38:	10c1ffcc 	andi	r3,r2,2047
10010f3c:	e0bffb17 	ldw	r2,-20(fp)
10010f40:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010f44:	e0bffa17 	ldw	r2,-24(fp)
10010f48:	10bfffc4 	addi	r2,r2,-1
10010f4c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010f50:	e0bffa17 	ldw	r2,-24(fp)
10010f54:	10000526 	beq	r2,zero,10010f6c <altera_avalon_jtag_uart_irq+0x1a8>
10010f58:	e0bffb17 	ldw	r2,-20(fp)
10010f5c:	10c00d17 	ldw	r3,52(r2)
10010f60:	e0bffb17 	ldw	r2,-20(fp)
10010f64:	10800c17 	ldw	r2,48(r2)
10010f68:	18bfe51e 	bne	r3,r2,10010f00 <__alt_data_end+0xf8010f00>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010f6c:	e0bffa17 	ldw	r2,-24(fp)
10010f70:	103f9d26 	beq	r2,zero,10010de8 <__alt_data_end+0xf8010de8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010f74:	e0bffb17 	ldw	r2,-20(fp)
10010f78:	10c00817 	ldw	r3,32(r2)
10010f7c:	00bfff44 	movi	r2,-3
10010f80:	1886703a 	and	r3,r3,r2
10010f84:	e0bffb17 	ldw	r2,-20(fp)
10010f88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010f8c:	e0bffb17 	ldw	r2,-20(fp)
10010f90:	10800017 	ldw	r2,0(r2)
10010f94:	10800104 	addi	r2,r2,4
10010f98:	1007883a 	mov	r3,r2
10010f9c:	e0bffb17 	ldw	r2,-20(fp)
10010fa0:	10800817 	ldw	r2,32(r2)
10010fa4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010fa8:	e0bffc17 	ldw	r2,-16(fp)
10010fac:	10800104 	addi	r2,r2,4
10010fb0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010fb4:	003f8c06 	br	10010de8 <__alt_data_end+0xf8010de8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10010fb8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10010fbc:	0001883a 	nop
10010fc0:	e037883a 	mov	sp,fp
10010fc4:	df000017 	ldw	fp,0(sp)
10010fc8:	dec00104 	addi	sp,sp,4
10010fcc:	f800283a 	ret

10010fd0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010fd0:	defff804 	addi	sp,sp,-32
10010fd4:	df000715 	stw	fp,28(sp)
10010fd8:	df000704 	addi	fp,sp,28
10010fdc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10010fe0:	e0bffb17 	ldw	r2,-20(fp)
10010fe4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010fe8:	e0bff917 	ldw	r2,-28(fp)
10010fec:	10800017 	ldw	r2,0(r2)
10010ff0:	10800104 	addi	r2,r2,4
10010ff4:	10800037 	ldwio	r2,0(r2)
10010ff8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10010ffc:	e0bffa17 	ldw	r2,-24(fp)
10011000:	1081000c 	andi	r2,r2,1024
10011004:	10000b26 	beq	r2,zero,10011034 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10011008:	e0bff917 	ldw	r2,-28(fp)
1001100c:	10800017 	ldw	r2,0(r2)
10011010:	10800104 	addi	r2,r2,4
10011014:	1007883a 	mov	r3,r2
10011018:	e0bff917 	ldw	r2,-28(fp)
1001101c:	10800817 	ldw	r2,32(r2)
10011020:	10810014 	ori	r2,r2,1024
10011024:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10011028:	e0bff917 	ldw	r2,-28(fp)
1001102c:	10000915 	stw	zero,36(r2)
10011030:	00000a06 	br	1001105c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10011034:	e0bff917 	ldw	r2,-28(fp)
10011038:	10c00917 	ldw	r3,36(r2)
1001103c:	00a00034 	movhi	r2,32768
10011040:	10bfff04 	addi	r2,r2,-4
10011044:	10c00536 	bltu	r2,r3,1001105c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10011048:	e0bff917 	ldw	r2,-28(fp)
1001104c:	10800917 	ldw	r2,36(r2)
10011050:	10c00044 	addi	r3,r2,1
10011054:	e0bff917 	ldw	r2,-28(fp)
10011058:	10c00915 	stw	r3,36(r2)
1001105c:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10011060:	e037883a 	mov	sp,fp
10011064:	df000017 	ldw	fp,0(sp)
10011068:	dec00104 	addi	sp,sp,4
1001106c:	f800283a 	ret

10011070 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10011070:	defffd04 	addi	sp,sp,-12
10011074:	df000215 	stw	fp,8(sp)
10011078:	df000204 	addi	fp,sp,8
1001107c:	e13ffe15 	stw	r4,-8(fp)
10011080:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10011084:	00000506 	br	1001109c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10011088:	e0bfff17 	ldw	r2,-4(fp)
1001108c:	1090000c 	andi	r2,r2,16384
10011090:	10000226 	beq	r2,zero,1001109c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10011094:	00bffd44 	movi	r2,-11
10011098:	00000b06 	br	100110c8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1001109c:	e0bffe17 	ldw	r2,-8(fp)
100110a0:	10c00d17 	ldw	r3,52(r2)
100110a4:	e0bffe17 	ldw	r2,-8(fp)
100110a8:	10800c17 	ldw	r2,48(r2)
100110ac:	18800526 	beq	r3,r2,100110c4 <altera_avalon_jtag_uart_close+0x54>
100110b0:	e0bffe17 	ldw	r2,-8(fp)
100110b4:	10c00917 	ldw	r3,36(r2)
100110b8:	e0bffe17 	ldw	r2,-8(fp)
100110bc:	10800117 	ldw	r2,4(r2)
100110c0:	18bff136 	bltu	r3,r2,10011088 <__alt_data_end+0xf8011088>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100110c4:	0005883a 	mov	r2,zero
}
100110c8:	e037883a 	mov	sp,fp
100110cc:	df000017 	ldw	fp,0(sp)
100110d0:	dec00104 	addi	sp,sp,4
100110d4:	f800283a 	ret

100110d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100110d8:	defffa04 	addi	sp,sp,-24
100110dc:	df000515 	stw	fp,20(sp)
100110e0:	df000504 	addi	fp,sp,20
100110e4:	e13ffd15 	stw	r4,-12(fp)
100110e8:	e17ffe15 	stw	r5,-8(fp)
100110ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100110f0:	00bff9c4 	movi	r2,-25
100110f4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100110f8:	e0bffe17 	ldw	r2,-8(fp)
100110fc:	10da8060 	cmpeqi	r3,r2,27137
10011100:	1800031e 	bne	r3,zero,10011110 <altera_avalon_jtag_uart_ioctl+0x38>
10011104:	109a80a0 	cmpeqi	r2,r2,27138
10011108:	1000181e 	bne	r2,zero,1001116c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1001110c:	00002906 	br	100111b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10011110:	e0bffd17 	ldw	r2,-12(fp)
10011114:	10c00117 	ldw	r3,4(r2)
10011118:	00a00034 	movhi	r2,32768
1001111c:	10bfffc4 	addi	r2,r2,-1
10011120:	18802126 	beq	r3,r2,100111a8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10011124:	e0bfff17 	ldw	r2,-4(fp)
10011128:	10800017 	ldw	r2,0(r2)
1001112c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10011130:	e0bffc17 	ldw	r2,-16(fp)
10011134:	10800090 	cmplti	r2,r2,2
10011138:	1000061e 	bne	r2,zero,10011154 <altera_avalon_jtag_uart_ioctl+0x7c>
1001113c:	e0fffc17 	ldw	r3,-16(fp)
10011140:	00a00034 	movhi	r2,32768
10011144:	10bfffc4 	addi	r2,r2,-1
10011148:	18800226 	beq	r3,r2,10011154 <altera_avalon_jtag_uart_ioctl+0x7c>
1001114c:	e0bffc17 	ldw	r2,-16(fp)
10011150:	00000206 	br	1001115c <altera_avalon_jtag_uart_ioctl+0x84>
10011154:	00a00034 	movhi	r2,32768
10011158:	10bfff84 	addi	r2,r2,-2
1001115c:	e0fffd17 	ldw	r3,-12(fp)
10011160:	18800115 	stw	r2,4(r3)
      rc = 0;
10011164:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10011168:	00000f06 	br	100111a8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1001116c:	e0bffd17 	ldw	r2,-12(fp)
10011170:	10c00117 	ldw	r3,4(r2)
10011174:	00a00034 	movhi	r2,32768
10011178:	10bfffc4 	addi	r2,r2,-1
1001117c:	18800c26 	beq	r3,r2,100111b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10011180:	e0bffd17 	ldw	r2,-12(fp)
10011184:	10c00917 	ldw	r3,36(r2)
10011188:	e0bffd17 	ldw	r2,-12(fp)
1001118c:	10800117 	ldw	r2,4(r2)
10011190:	1885803a 	cmpltu	r2,r3,r2
10011194:	10c03fcc 	andi	r3,r2,255
10011198:	e0bfff17 	ldw	r2,-4(fp)
1001119c:	10c00015 	stw	r3,0(r2)
      rc = 0;
100111a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100111a4:	00000206 	br	100111b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
100111a8:	0001883a 	nop
100111ac:	00000106 	br	100111b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
100111b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
100111b4:	e0bffb17 	ldw	r2,-20(fp)
}
100111b8:	e037883a 	mov	sp,fp
100111bc:	df000017 	ldw	fp,0(sp)
100111c0:	dec00104 	addi	sp,sp,4
100111c4:	f800283a 	ret

100111c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100111c8:	defff304 	addi	sp,sp,-52
100111cc:	dfc00c15 	stw	ra,48(sp)
100111d0:	df000b15 	stw	fp,44(sp)
100111d4:	df000b04 	addi	fp,sp,44
100111d8:	e13ffc15 	stw	r4,-16(fp)
100111dc:	e17ffd15 	stw	r5,-12(fp)
100111e0:	e1bffe15 	stw	r6,-8(fp)
100111e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100111e8:	e0bffd17 	ldw	r2,-12(fp)
100111ec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100111f0:	00004706 	br	10011310 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100111f4:	e0bffc17 	ldw	r2,-16(fp)
100111f8:	10800a17 	ldw	r2,40(r2)
100111fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10011200:	e0bffc17 	ldw	r2,-16(fp)
10011204:	10800b17 	ldw	r2,44(r2)
10011208:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1001120c:	e0fff717 	ldw	r3,-36(fp)
10011210:	e0bff817 	ldw	r2,-32(fp)
10011214:	18800536 	bltu	r3,r2,1001122c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10011218:	e0fff717 	ldw	r3,-36(fp)
1001121c:	e0bff817 	ldw	r2,-32(fp)
10011220:	1885c83a 	sub	r2,r3,r2
10011224:	e0bff615 	stw	r2,-40(fp)
10011228:	00000406 	br	1001123c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1001122c:	00c20004 	movi	r3,2048
10011230:	e0bff817 	ldw	r2,-32(fp)
10011234:	1885c83a 	sub	r2,r3,r2
10011238:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1001123c:	e0bff617 	ldw	r2,-40(fp)
10011240:	10001e26 	beq	r2,zero,100112bc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10011244:	e0fffe17 	ldw	r3,-8(fp)
10011248:	e0bff617 	ldw	r2,-40(fp)
1001124c:	1880022e 	bgeu	r3,r2,10011258 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10011250:	e0bffe17 	ldw	r2,-8(fp)
10011254:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10011258:	e0bffc17 	ldw	r2,-16(fp)
1001125c:	10c00e04 	addi	r3,r2,56
10011260:	e0bff817 	ldw	r2,-32(fp)
10011264:	1885883a 	add	r2,r3,r2
10011268:	e1bff617 	ldw	r6,-40(fp)
1001126c:	100b883a 	mov	r5,r2
10011270:	e13ff517 	ldw	r4,-44(fp)
10011274:	0008dc40 	call	10008dc4 <memcpy>
      ptr   += n;
10011278:	e0fff517 	ldw	r3,-44(fp)
1001127c:	e0bff617 	ldw	r2,-40(fp)
10011280:	1885883a 	add	r2,r3,r2
10011284:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10011288:	e0fffe17 	ldw	r3,-8(fp)
1001128c:	e0bff617 	ldw	r2,-40(fp)
10011290:	1885c83a 	sub	r2,r3,r2
10011294:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011298:	e0fff817 	ldw	r3,-32(fp)
1001129c:	e0bff617 	ldw	r2,-40(fp)
100112a0:	1885883a 	add	r2,r3,r2
100112a4:	10c1ffcc 	andi	r3,r2,2047
100112a8:	e0bffc17 	ldw	r2,-16(fp)
100112ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
100112b0:	e0bffe17 	ldw	r2,-8(fp)
100112b4:	00bfcf16 	blt	zero,r2,100111f4 <__alt_data_end+0xf80111f4>
100112b8:	00000106 	br	100112c0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
100112bc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
100112c0:	e0fff517 	ldw	r3,-44(fp)
100112c4:	e0bffd17 	ldw	r2,-12(fp)
100112c8:	1880141e 	bne	r3,r2,1001131c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100112cc:	e0bfff17 	ldw	r2,-4(fp)
100112d0:	1090000c 	andi	r2,r2,16384
100112d4:	1000131e 	bne	r2,zero,10011324 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100112d8:	0001883a 	nop
100112dc:	e0bffc17 	ldw	r2,-16(fp)
100112e0:	10c00a17 	ldw	r3,40(r2)
100112e4:	e0bff717 	ldw	r2,-36(fp)
100112e8:	1880051e 	bne	r3,r2,10011300 <altera_avalon_jtag_uart_read+0x138>
100112ec:	e0bffc17 	ldw	r2,-16(fp)
100112f0:	10c00917 	ldw	r3,36(r2)
100112f4:	e0bffc17 	ldw	r2,-16(fp)
100112f8:	10800117 	ldw	r2,4(r2)
100112fc:	18bff736 	bltu	r3,r2,100112dc <__alt_data_end+0xf80112dc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10011300:	e0bffc17 	ldw	r2,-16(fp)
10011304:	10c00a17 	ldw	r3,40(r2)
10011308:	e0bff717 	ldw	r2,-36(fp)
1001130c:	18800726 	beq	r3,r2,1001132c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10011310:	e0bffe17 	ldw	r2,-8(fp)
10011314:	00bfb716 	blt	zero,r2,100111f4 <__alt_data_end+0xf80111f4>
10011318:	00000506 	br	10011330 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1001131c:	0001883a 	nop
10011320:	00000306 	br	10011330 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10011324:	0001883a 	nop
10011328:	00000106 	br	10011330 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1001132c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10011330:	e0fff517 	ldw	r3,-44(fp)
10011334:	e0bffd17 	ldw	r2,-12(fp)
10011338:	18801826 	beq	r3,r2,1001139c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001133c:	0005303a 	rdctl	r2,status
10011340:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011344:	e0fffb17 	ldw	r3,-20(fp)
10011348:	00bfff84 	movi	r2,-2
1001134c:	1884703a 	and	r2,r3,r2
10011350:	1001703a 	wrctl	status,r2
  
  return context;
10011354:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10011358:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001135c:	e0bffc17 	ldw	r2,-16(fp)
10011360:	10800817 	ldw	r2,32(r2)
10011364:	10c00054 	ori	r3,r2,1
10011368:	e0bffc17 	ldw	r2,-16(fp)
1001136c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011370:	e0bffc17 	ldw	r2,-16(fp)
10011374:	10800017 	ldw	r2,0(r2)
10011378:	10800104 	addi	r2,r2,4
1001137c:	1007883a 	mov	r3,r2
10011380:	e0bffc17 	ldw	r2,-16(fp)
10011384:	10800817 	ldw	r2,32(r2)
10011388:	18800035 	stwio	r2,0(r3)
1001138c:	e0bffa17 	ldw	r2,-24(fp)
10011390:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011394:	e0bff917 	ldw	r2,-28(fp)
10011398:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1001139c:	e0fff517 	ldw	r3,-44(fp)
100113a0:	e0bffd17 	ldw	r2,-12(fp)
100113a4:	18800426 	beq	r3,r2,100113b8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
100113a8:	e0fff517 	ldw	r3,-44(fp)
100113ac:	e0bffd17 	ldw	r2,-12(fp)
100113b0:	1885c83a 	sub	r2,r3,r2
100113b4:	00000606 	br	100113d0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
100113b8:	e0bfff17 	ldw	r2,-4(fp)
100113bc:	1090000c 	andi	r2,r2,16384
100113c0:	10000226 	beq	r2,zero,100113cc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
100113c4:	00bffd44 	movi	r2,-11
100113c8:	00000106 	br	100113d0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
100113cc:	00bffec4 	movi	r2,-5
}
100113d0:	e037883a 	mov	sp,fp
100113d4:	dfc00117 	ldw	ra,4(sp)
100113d8:	df000017 	ldw	fp,0(sp)
100113dc:	dec00204 	addi	sp,sp,8
100113e0:	f800283a 	ret

100113e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100113e4:	defff304 	addi	sp,sp,-52
100113e8:	dfc00c15 	stw	ra,48(sp)
100113ec:	df000b15 	stw	fp,44(sp)
100113f0:	df000b04 	addi	fp,sp,44
100113f4:	e13ffc15 	stw	r4,-16(fp)
100113f8:	e17ffd15 	stw	r5,-12(fp)
100113fc:	e1bffe15 	stw	r6,-8(fp)
10011400:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10011404:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10011408:	e0bffd17 	ldw	r2,-12(fp)
1001140c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10011410:	00003706 	br	100114f0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10011414:	e0bffc17 	ldw	r2,-16(fp)
10011418:	10800c17 	ldw	r2,48(r2)
1001141c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10011420:	e0bffc17 	ldw	r2,-16(fp)
10011424:	10800d17 	ldw	r2,52(r2)
10011428:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1001142c:	e0fff917 	ldw	r3,-28(fp)
10011430:	e0bff517 	ldw	r2,-44(fp)
10011434:	1880062e 	bgeu	r3,r2,10011450 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10011438:	e0fff517 	ldw	r3,-44(fp)
1001143c:	e0bff917 	ldw	r2,-28(fp)
10011440:	1885c83a 	sub	r2,r3,r2
10011444:	10bfffc4 	addi	r2,r2,-1
10011448:	e0bff615 	stw	r2,-40(fp)
1001144c:	00000b06 	br	1001147c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10011450:	e0bff517 	ldw	r2,-44(fp)
10011454:	10000526 	beq	r2,zero,1001146c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10011458:	00c20004 	movi	r3,2048
1001145c:	e0bff917 	ldw	r2,-28(fp)
10011460:	1885c83a 	sub	r2,r3,r2
10011464:	e0bff615 	stw	r2,-40(fp)
10011468:	00000406 	br	1001147c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1001146c:	00c1ffc4 	movi	r3,2047
10011470:	e0bff917 	ldw	r2,-28(fp)
10011474:	1885c83a 	sub	r2,r3,r2
10011478:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1001147c:	e0bff617 	ldw	r2,-40(fp)
10011480:	10001e26 	beq	r2,zero,100114fc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10011484:	e0fffe17 	ldw	r3,-8(fp)
10011488:	e0bff617 	ldw	r2,-40(fp)
1001148c:	1880022e 	bgeu	r3,r2,10011498 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10011490:	e0bffe17 	ldw	r2,-8(fp)
10011494:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10011498:	e0bffc17 	ldw	r2,-16(fp)
1001149c:	10c20e04 	addi	r3,r2,2104
100114a0:	e0bff917 	ldw	r2,-28(fp)
100114a4:	1885883a 	add	r2,r3,r2
100114a8:	e1bff617 	ldw	r6,-40(fp)
100114ac:	e17ffd17 	ldw	r5,-12(fp)
100114b0:	1009883a 	mov	r4,r2
100114b4:	0008dc40 	call	10008dc4 <memcpy>
      ptr   += n;
100114b8:	e0fffd17 	ldw	r3,-12(fp)
100114bc:	e0bff617 	ldw	r2,-40(fp)
100114c0:	1885883a 	add	r2,r3,r2
100114c4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
100114c8:	e0fffe17 	ldw	r3,-8(fp)
100114cc:	e0bff617 	ldw	r2,-40(fp)
100114d0:	1885c83a 	sub	r2,r3,r2
100114d4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100114d8:	e0fff917 	ldw	r3,-28(fp)
100114dc:	e0bff617 	ldw	r2,-40(fp)
100114e0:	1885883a 	add	r2,r3,r2
100114e4:	10c1ffcc 	andi	r3,r2,2047
100114e8:	e0bffc17 	ldw	r2,-16(fp)
100114ec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100114f0:	e0bffe17 	ldw	r2,-8(fp)
100114f4:	00bfc716 	blt	zero,r2,10011414 <__alt_data_end+0xf8011414>
100114f8:	00000106 	br	10011500 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
100114fc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011500:	0005303a 	rdctl	r2,status
10011504:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011508:	e0fffb17 	ldw	r3,-20(fp)
1001150c:	00bfff84 	movi	r2,-2
10011510:	1884703a 	and	r2,r3,r2
10011514:	1001703a 	wrctl	status,r2
  
  return context;
10011518:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1001151c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10011520:	e0bffc17 	ldw	r2,-16(fp)
10011524:	10800817 	ldw	r2,32(r2)
10011528:	10c00094 	ori	r3,r2,2
1001152c:	e0bffc17 	ldw	r2,-16(fp)
10011530:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011534:	e0bffc17 	ldw	r2,-16(fp)
10011538:	10800017 	ldw	r2,0(r2)
1001153c:	10800104 	addi	r2,r2,4
10011540:	1007883a 	mov	r3,r2
10011544:	e0bffc17 	ldw	r2,-16(fp)
10011548:	10800817 	ldw	r2,32(r2)
1001154c:	18800035 	stwio	r2,0(r3)
10011550:	e0bffa17 	ldw	r2,-24(fp)
10011554:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011558:	e0bff817 	ldw	r2,-32(fp)
1001155c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10011560:	e0bffe17 	ldw	r2,-8(fp)
10011564:	0080100e 	bge	zero,r2,100115a8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10011568:	e0bfff17 	ldw	r2,-4(fp)
1001156c:	1090000c 	andi	r2,r2,16384
10011570:	1000101e 	bne	r2,zero,100115b4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10011574:	0001883a 	nop
10011578:	e0bffc17 	ldw	r2,-16(fp)
1001157c:	10c00d17 	ldw	r3,52(r2)
10011580:	e0bff517 	ldw	r2,-44(fp)
10011584:	1880051e 	bne	r3,r2,1001159c <altera_avalon_jtag_uart_write+0x1b8>
10011588:	e0bffc17 	ldw	r2,-16(fp)
1001158c:	10c00917 	ldw	r3,36(r2)
10011590:	e0bffc17 	ldw	r2,-16(fp)
10011594:	10800117 	ldw	r2,4(r2)
10011598:	18bff736 	bltu	r3,r2,10011578 <__alt_data_end+0xf8011578>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1001159c:	e0bffc17 	ldw	r2,-16(fp)
100115a0:	10800917 	ldw	r2,36(r2)
100115a4:	1000051e 	bne	r2,zero,100115bc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
100115a8:	e0bffe17 	ldw	r2,-8(fp)
100115ac:	00bfd016 	blt	zero,r2,100114f0 <__alt_data_end+0xf80114f0>
100115b0:	00000306 	br	100115c0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
100115b4:	0001883a 	nop
100115b8:	00000106 	br	100115c0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
100115bc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100115c0:	e0fffd17 	ldw	r3,-12(fp)
100115c4:	e0bff717 	ldw	r2,-36(fp)
100115c8:	18800426 	beq	r3,r2,100115dc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
100115cc:	e0fffd17 	ldw	r3,-12(fp)
100115d0:	e0bff717 	ldw	r2,-36(fp)
100115d4:	1885c83a 	sub	r2,r3,r2
100115d8:	00000606 	br	100115f4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
100115dc:	e0bfff17 	ldw	r2,-4(fp)
100115e0:	1090000c 	andi	r2,r2,16384
100115e4:	10000226 	beq	r2,zero,100115f0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
100115e8:	00bffd44 	movi	r2,-11
100115ec:	00000106 	br	100115f4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100115f0:	00bffec4 	movi	r2,-5
}
100115f4:	e037883a 	mov	sp,fp
100115f8:	dfc00117 	ldw	ra,4(sp)
100115fc:	df000017 	ldw	fp,0(sp)
10011600:	dec00204 	addi	sp,sp,8
10011604:	f800283a 	ret

10011608 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
10011608:	defffa04 	addi	sp,sp,-24
1001160c:	dfc00515 	stw	ra,20(sp)
10011610:	df000415 	stw	fp,16(sp)
10011614:	df000404 	addi	fp,sp,16
10011618:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
1001161c:	0007883a 	mov	r3,zero
10011620:	e0bfff17 	ldw	r2,-4(fp)
10011624:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
10011628:	e0bfff17 	ldw	r2,-4(fp)
1001162c:	10800104 	addi	r2,r2,4
10011630:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011634:	0005303a 	rdctl	r2,status
10011638:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001163c:	e0fffd17 	ldw	r3,-12(fp)
10011640:	00bfff84 	movi	r2,-2
10011644:	1884703a 	and	r2,r3,r2
10011648:	1001703a 	wrctl	status,r2
  
  return context;
1001164c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
10011650:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
10011654:	00122800 	call	10012280 <alt_tick>
10011658:	e0bffc17 	ldw	r2,-16(fp)
1001165c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011660:	e0bffe17 	ldw	r2,-8(fp)
10011664:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
10011668:	0001883a 	nop
1001166c:	e037883a 	mov	sp,fp
10011670:	dfc00117 	ldw	ra,4(sp)
10011674:	df000017 	ldw	fp,0(sp)
10011678:	dec00204 	addi	sp,sp,8
1001167c:	f800283a 	ret

10011680 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
10011680:	defff804 	addi	sp,sp,-32
10011684:	dfc00715 	stw	ra,28(sp)
10011688:	df000615 	stw	fp,24(sp)
1001168c:	df000604 	addi	fp,sp,24
10011690:	e13ffc15 	stw	r4,-16(fp)
10011694:	e17ffd15 	stw	r5,-12(fp)
10011698:	e1bffe15 	stw	r6,-8(fp)
1001169c:	e1ffff15 	stw	r7,-4(fp)
100116a0:	e0bfff17 	ldw	r2,-4(fp)
100116a4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
100116a8:	d0a6d717 	ldw	r2,-25764(gp)
100116ac:	1000021e 	bne	r2,zero,100116b8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
100116b0:	e0bffb17 	ldw	r2,-20(fp)
100116b4:	d0a6d715 	stw	r2,-25764(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
100116b8:	e0bffc17 	ldw	r2,-16(fp)
100116bc:	10800104 	addi	r2,r2,4
100116c0:	00c001c4 	movi	r3,7
100116c4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
100116c8:	d8000015 	stw	zero,0(sp)
100116cc:	e1fffc17 	ldw	r7,-16(fp)
100116d0:	01840074 	movhi	r6,4097
100116d4:	31858204 	addi	r6,r6,5640
100116d8:	e17ffe17 	ldw	r5,-8(fp)
100116dc:	e13ffd17 	ldw	r4,-12(fp)
100116e0:	0011b600 	call	10011b60 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
100116e4:	0001883a 	nop
100116e8:	e037883a 	mov	sp,fp
100116ec:	dfc00117 	ldw	ra,4(sp)
100116f0:	df000017 	ldw	fp,0(sp)
100116f4:	dec00204 	addi	sp,sp,8
100116f8:	f800283a 	ret

100116fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100116fc:	defff504 	addi	sp,sp,-44
10011700:	df000a15 	stw	fp,40(sp)
10011704:	df000a04 	addi	fp,sp,40
10011708:	e13ffc15 	stw	r4,-16(fp)
1001170c:	e17ffd15 	stw	r5,-12(fp)
10011710:	e1bffe15 	stw	r6,-8(fp)
10011714:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10011718:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1001171c:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
10011720:	10003c26 	beq	r2,zero,10011814 <alt_alarm_start+0x118>
  {
    if (alarm)
10011724:	e0bffc17 	ldw	r2,-16(fp)
10011728:	10003826 	beq	r2,zero,1001180c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1001172c:	e0bffc17 	ldw	r2,-16(fp)
10011730:	e0fffe17 	ldw	r3,-8(fp)
10011734:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10011738:	e0bffc17 	ldw	r2,-16(fp)
1001173c:	e0ffff17 	ldw	r3,-4(fp)
10011740:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011744:	0005303a 	rdctl	r2,status
10011748:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001174c:	e0fff917 	ldw	r3,-28(fp)
10011750:	00bfff84 	movi	r2,-2
10011754:	1884703a 	and	r2,r3,r2
10011758:	1001703a 	wrctl	status,r2
  
  return context;
1001175c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10011760:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10011764:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
10011768:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1001176c:	e0fffd17 	ldw	r3,-12(fp)
10011770:	e0bff617 	ldw	r2,-40(fp)
10011774:	1885883a 	add	r2,r3,r2
10011778:	10c00044 	addi	r3,r2,1
1001177c:	e0bffc17 	ldw	r2,-16(fp)
10011780:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10011784:	e0bffc17 	ldw	r2,-16(fp)
10011788:	10c00217 	ldw	r3,8(r2)
1001178c:	e0bff617 	ldw	r2,-40(fp)
10011790:	1880042e 	bgeu	r3,r2,100117a4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10011794:	e0bffc17 	ldw	r2,-16(fp)
10011798:	00c00044 	movi	r3,1
1001179c:	10c00405 	stb	r3,16(r2)
100117a0:	00000206 	br	100117ac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
100117a4:	e0bffc17 	ldw	r2,-16(fp)
100117a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100117ac:	e0bffc17 	ldw	r2,-16(fp)
100117b0:	d0e00e04 	addi	r3,gp,-32712
100117b4:	e0fffa15 	stw	r3,-24(fp)
100117b8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100117bc:	e0bffb17 	ldw	r2,-20(fp)
100117c0:	e0fffa17 	ldw	r3,-24(fp)
100117c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100117c8:	e0bffa17 	ldw	r2,-24(fp)
100117cc:	10c00017 	ldw	r3,0(r2)
100117d0:	e0bffb17 	ldw	r2,-20(fp)
100117d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100117d8:	e0bffa17 	ldw	r2,-24(fp)
100117dc:	10800017 	ldw	r2,0(r2)
100117e0:	e0fffb17 	ldw	r3,-20(fp)
100117e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100117e8:	e0bffa17 	ldw	r2,-24(fp)
100117ec:	e0fffb17 	ldw	r3,-20(fp)
100117f0:	10c00015 	stw	r3,0(r2)
100117f4:	e0bff817 	ldw	r2,-32(fp)
100117f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100117fc:	e0bff717 	ldw	r2,-36(fp)
10011800:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10011804:	0005883a 	mov	r2,zero
10011808:	00000306 	br	10011818 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1001180c:	00bffa84 	movi	r2,-22
10011810:	00000106 	br	10011818 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10011814:	00bfde84 	movi	r2,-134
  }
}
10011818:	e037883a 	mov	sp,fp
1001181c:	df000017 	ldw	fp,0(sp)
10011820:	dec00104 	addi	sp,sp,4
10011824:	f800283a 	ret

10011828 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10011828:	defffa04 	addi	sp,sp,-24
1001182c:	dfc00515 	stw	ra,20(sp)
10011830:	df000415 	stw	fp,16(sp)
10011834:	df000404 	addi	fp,sp,16
10011838:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1001183c:	00800244 	movi	r2,9
10011840:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10011844:	014003f4 	movhi	r5,15
10011848:	29509004 	addi	r5,r5,16960
1001184c:	e13ffd17 	ldw	r4,-12(fp)
10011850:	000d8440 	call	1000d844 <__mulsi3>
10011854:	100b883a 	mov	r5,r2
10011858:	0100bef4 	movhi	r4,763
1001185c:	213c2004 	addi	r4,r4,-3968
10011860:	000d7880 	call	1000d788 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10011864:	100b883a 	mov	r5,r2
10011868:	01200034 	movhi	r4,32768
1001186c:	213fffc4 	addi	r4,r4,-1
10011870:	000d7880 	call	1000d788 <__udivsi3>
10011874:	100b883a 	mov	r5,r2
10011878:	e13fff17 	ldw	r4,-4(fp)
1001187c:	000d7880 	call	1000d788 <__udivsi3>
10011880:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10011884:	e0bffe17 	ldw	r2,-8(fp)
10011888:	10002a26 	beq	r2,zero,10011934 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1001188c:	e03ffc15 	stw	zero,-16(fp)
10011890:	00001706 	br	100118f0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10011894:	00a00034 	movhi	r2,32768
10011898:	10bfffc4 	addi	r2,r2,-1
1001189c:	10bfffc4 	addi	r2,r2,-1
100118a0:	103ffe1e 	bne	r2,zero,1001189c <__alt_data_end+0xf801189c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
100118a4:	014003f4 	movhi	r5,15
100118a8:	29509004 	addi	r5,r5,16960
100118ac:	e13ffd17 	ldw	r4,-12(fp)
100118b0:	000d8440 	call	1000d844 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
100118b4:	100b883a 	mov	r5,r2
100118b8:	0100bef4 	movhi	r4,763
100118bc:	213c2004 	addi	r4,r4,-3968
100118c0:	000d7880 	call	1000d788 <__udivsi3>
100118c4:	100b883a 	mov	r5,r2
100118c8:	01200034 	movhi	r4,32768
100118cc:	213fffc4 	addi	r4,r4,-1
100118d0:	000d7880 	call	1000d788 <__udivsi3>
100118d4:	1007883a 	mov	r3,r2
100118d8:	e0bfff17 	ldw	r2,-4(fp)
100118dc:	10c5c83a 	sub	r2,r2,r3
100118e0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
100118e4:	e0bffc17 	ldw	r2,-16(fp)
100118e8:	10800044 	addi	r2,r2,1
100118ec:	e0bffc15 	stw	r2,-16(fp)
100118f0:	e0fffc17 	ldw	r3,-16(fp)
100118f4:	e0bffe17 	ldw	r2,-8(fp)
100118f8:	18bfe616 	blt	r3,r2,10011894 <__alt_data_end+0xf8011894>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100118fc:	014003f4 	movhi	r5,15
10011900:	29509004 	addi	r5,r5,16960
10011904:	e13ffd17 	ldw	r4,-12(fp)
10011908:	000d8440 	call	1000d844 <__mulsi3>
1001190c:	100b883a 	mov	r5,r2
10011910:	0100bef4 	movhi	r4,763
10011914:	213c2004 	addi	r4,r4,-3968
10011918:	000d7880 	call	1000d788 <__udivsi3>
1001191c:	e17fff17 	ldw	r5,-4(fp)
10011920:	1009883a 	mov	r4,r2
10011924:	000d8440 	call	1000d844 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10011928:	10bfffc4 	addi	r2,r2,-1
1001192c:	103ffe1e 	bne	r2,zero,10011928 <__alt_data_end+0xf8011928>
10011930:	00000d06 	br	10011968 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10011934:	014003f4 	movhi	r5,15
10011938:	29509004 	addi	r5,r5,16960
1001193c:	e13ffd17 	ldw	r4,-12(fp)
10011940:	000d8440 	call	1000d844 <__mulsi3>
10011944:	100b883a 	mov	r5,r2
10011948:	0100bef4 	movhi	r4,763
1001194c:	213c2004 	addi	r4,r4,-3968
10011950:	000d7880 	call	1000d788 <__udivsi3>
10011954:	e17fff17 	ldw	r5,-4(fp)
10011958:	1009883a 	mov	r4,r2
1001195c:	000d8440 	call	1000d844 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10011960:	10bfffc4 	addi	r2,r2,-1
10011964:	00bffe16 	blt	zero,r2,10011960 <__alt_data_end+0xf8011960>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10011968:	0005883a 	mov	r2,zero
}
1001196c:	e037883a 	mov	sp,fp
10011970:	dfc00117 	ldw	ra,4(sp)
10011974:	df000017 	ldw	fp,0(sp)
10011978:	dec00204 	addi	sp,sp,8
1001197c:	f800283a 	ret

10011980 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10011980:	deffff04 	addi	sp,sp,-4
10011984:	df000015 	stw	fp,0(sp)
10011988:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1001198c:	0001883a 	nop
10011990:	e037883a 	mov	sp,fp
10011994:	df000017 	ldw	fp,0(sp)
10011998:	dec00104 	addi	sp,sp,4
1001199c:	f800283a 	ret

100119a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100119a0:	defffe04 	addi	sp,sp,-8
100119a4:	dfc00115 	stw	ra,4(sp)
100119a8:	df000015 	stw	fp,0(sp)
100119ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100119b0:	d0a00b17 	ldw	r2,-32724(gp)
100119b4:	10000326 	beq	r2,zero,100119c4 <alt_get_errno+0x24>
100119b8:	d0a00b17 	ldw	r2,-32724(gp)
100119bc:	103ee83a 	callr	r2
100119c0:	00000106 	br	100119c8 <alt_get_errno+0x28>
100119c4:	d0a6d204 	addi	r2,gp,-25784
}
100119c8:	e037883a 	mov	sp,fp
100119cc:	dfc00117 	ldw	ra,4(sp)
100119d0:	df000017 	ldw	fp,0(sp)
100119d4:	dec00204 	addi	sp,sp,8
100119d8:	f800283a 	ret

100119dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100119dc:	defffa04 	addi	sp,sp,-24
100119e0:	dfc00515 	stw	ra,20(sp)
100119e4:	df000415 	stw	fp,16(sp)
100119e8:	df000404 	addi	fp,sp,16
100119ec:	e13ffe15 	stw	r4,-8(fp)
100119f0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100119f4:	e0bffe17 	ldw	r2,-8(fp)
100119f8:	10000326 	beq	r2,zero,10011a08 <alt_dev_llist_insert+0x2c>
100119fc:	e0bffe17 	ldw	r2,-8(fp)
10011a00:	10800217 	ldw	r2,8(r2)
10011a04:	1000061e 	bne	r2,zero,10011a20 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10011a08:	00119a00 	call	100119a0 <alt_get_errno>
10011a0c:	1007883a 	mov	r3,r2
10011a10:	00800584 	movi	r2,22
10011a14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10011a18:	00bffa84 	movi	r2,-22
10011a1c:	00001306 	br	10011a6c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10011a20:	e0bffe17 	ldw	r2,-8(fp)
10011a24:	e0ffff17 	ldw	r3,-4(fp)
10011a28:	e0fffc15 	stw	r3,-16(fp)
10011a2c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011a30:	e0bffd17 	ldw	r2,-12(fp)
10011a34:	e0fffc17 	ldw	r3,-16(fp)
10011a38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011a3c:	e0bffc17 	ldw	r2,-16(fp)
10011a40:	10c00017 	ldw	r3,0(r2)
10011a44:	e0bffd17 	ldw	r2,-12(fp)
10011a48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011a4c:	e0bffc17 	ldw	r2,-16(fp)
10011a50:	10800017 	ldw	r2,0(r2)
10011a54:	e0fffd17 	ldw	r3,-12(fp)
10011a58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011a5c:	e0bffc17 	ldw	r2,-16(fp)
10011a60:	e0fffd17 	ldw	r3,-12(fp)
10011a64:	10c00015 	stw	r3,0(r2)

  return 0;  
10011a68:	0005883a 	mov	r2,zero
}
10011a6c:	e037883a 	mov	sp,fp
10011a70:	dfc00117 	ldw	ra,4(sp)
10011a74:	df000017 	ldw	fp,0(sp)
10011a78:	dec00204 	addi	sp,sp,8
10011a7c:	f800283a 	ret

10011a80 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10011a80:	defffd04 	addi	sp,sp,-12
10011a84:	dfc00215 	stw	ra,8(sp)
10011a88:	df000115 	stw	fp,4(sp)
10011a8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011a90:	00840074 	movhi	r2,4097
10011a94:	108a8d04 	addi	r2,r2,10804
10011a98:	e0bfff15 	stw	r2,-4(fp)
10011a9c:	00000606 	br	10011ab8 <_do_ctors+0x38>
        (*ctor) (); 
10011aa0:	e0bfff17 	ldw	r2,-4(fp)
10011aa4:	10800017 	ldw	r2,0(r2)
10011aa8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011aac:	e0bfff17 	ldw	r2,-4(fp)
10011ab0:	10bfff04 	addi	r2,r2,-4
10011ab4:	e0bfff15 	stw	r2,-4(fp)
10011ab8:	e0ffff17 	ldw	r3,-4(fp)
10011abc:	00840074 	movhi	r2,4097
10011ac0:	108a8e04 	addi	r2,r2,10808
10011ac4:	18bff62e 	bgeu	r3,r2,10011aa0 <__alt_data_end+0xf8011aa0>
        (*ctor) (); 
}
10011ac8:	0001883a 	nop
10011acc:	e037883a 	mov	sp,fp
10011ad0:	dfc00117 	ldw	ra,4(sp)
10011ad4:	df000017 	ldw	fp,0(sp)
10011ad8:	dec00204 	addi	sp,sp,8
10011adc:	f800283a 	ret

10011ae0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10011ae0:	defffd04 	addi	sp,sp,-12
10011ae4:	dfc00215 	stw	ra,8(sp)
10011ae8:	df000115 	stw	fp,4(sp)
10011aec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011af0:	00840074 	movhi	r2,4097
10011af4:	108a8d04 	addi	r2,r2,10804
10011af8:	e0bfff15 	stw	r2,-4(fp)
10011afc:	00000606 	br	10011b18 <_do_dtors+0x38>
        (*dtor) (); 
10011b00:	e0bfff17 	ldw	r2,-4(fp)
10011b04:	10800017 	ldw	r2,0(r2)
10011b08:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011b0c:	e0bfff17 	ldw	r2,-4(fp)
10011b10:	10bfff04 	addi	r2,r2,-4
10011b14:	e0bfff15 	stw	r2,-4(fp)
10011b18:	e0ffff17 	ldw	r3,-4(fp)
10011b1c:	00840074 	movhi	r2,4097
10011b20:	108a8e04 	addi	r2,r2,10808
10011b24:	18bff62e 	bgeu	r3,r2,10011b00 <__alt_data_end+0xf8011b00>
        (*dtor) (); 
}
10011b28:	0001883a 	nop
10011b2c:	e037883a 	mov	sp,fp
10011b30:	dfc00117 	ldw	ra,4(sp)
10011b34:	df000017 	ldw	fp,0(sp)
10011b38:	dec00204 	addi	sp,sp,8
10011b3c:	f800283a 	ret

10011b40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011b40:	deffff04 	addi	sp,sp,-4
10011b44:	df000015 	stw	fp,0(sp)
10011b48:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10011b4c:	0001883a 	nop
10011b50:	e037883a 	mov	sp,fp
10011b54:	df000017 	ldw	fp,0(sp)
10011b58:	dec00104 	addi	sp,sp,4
10011b5c:	f800283a 	ret

10011b60 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011b60:	defff904 	addi	sp,sp,-28
10011b64:	dfc00615 	stw	ra,24(sp)
10011b68:	df000515 	stw	fp,20(sp)
10011b6c:	df000504 	addi	fp,sp,20
10011b70:	e13ffc15 	stw	r4,-16(fp)
10011b74:	e17ffd15 	stw	r5,-12(fp)
10011b78:	e1bffe15 	stw	r6,-8(fp)
10011b7c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011b80:	e0800217 	ldw	r2,8(fp)
10011b84:	d8800015 	stw	r2,0(sp)
10011b88:	e1ffff17 	ldw	r7,-4(fp)
10011b8c:	e1bffe17 	ldw	r6,-8(fp)
10011b90:	e17ffd17 	ldw	r5,-12(fp)
10011b94:	e13ffc17 	ldw	r4,-16(fp)
10011b98:	0011d100 	call	10011d10 <alt_iic_isr_register>
}  
10011b9c:	e037883a 	mov	sp,fp
10011ba0:	dfc00117 	ldw	ra,4(sp)
10011ba4:	df000017 	ldw	fp,0(sp)
10011ba8:	dec00204 	addi	sp,sp,8
10011bac:	f800283a 	ret

10011bb0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011bb0:	defff904 	addi	sp,sp,-28
10011bb4:	df000615 	stw	fp,24(sp)
10011bb8:	df000604 	addi	fp,sp,24
10011bbc:	e13ffe15 	stw	r4,-8(fp)
10011bc0:	e17fff15 	stw	r5,-4(fp)
10011bc4:	e0bfff17 	ldw	r2,-4(fp)
10011bc8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011bcc:	0005303a 	rdctl	r2,status
10011bd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011bd4:	e0fffb17 	ldw	r3,-20(fp)
10011bd8:	00bfff84 	movi	r2,-2
10011bdc:	1884703a 	and	r2,r3,r2
10011be0:	1001703a 	wrctl	status,r2
  
  return context;
10011be4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011be8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10011bec:	00c00044 	movi	r3,1
10011bf0:	e0bffa17 	ldw	r2,-24(fp)
10011bf4:	1884983a 	sll	r2,r3,r2
10011bf8:	1007883a 	mov	r3,r2
10011bfc:	d0a6d617 	ldw	r2,-25768(gp)
10011c00:	1884b03a 	or	r2,r3,r2
10011c04:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011c08:	d0a6d617 	ldw	r2,-25768(gp)
10011c0c:	100170fa 	wrctl	ienable,r2
10011c10:	e0bffc17 	ldw	r2,-16(fp)
10011c14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011c18:	e0bffd17 	ldw	r2,-12(fp)
10011c1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011c20:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10011c24:	0001883a 	nop
}
10011c28:	e037883a 	mov	sp,fp
10011c2c:	df000017 	ldw	fp,0(sp)
10011c30:	dec00104 	addi	sp,sp,4
10011c34:	f800283a 	ret

10011c38 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011c38:	defff904 	addi	sp,sp,-28
10011c3c:	df000615 	stw	fp,24(sp)
10011c40:	df000604 	addi	fp,sp,24
10011c44:	e13ffe15 	stw	r4,-8(fp)
10011c48:	e17fff15 	stw	r5,-4(fp)
10011c4c:	e0bfff17 	ldw	r2,-4(fp)
10011c50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011c54:	0005303a 	rdctl	r2,status
10011c58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011c5c:	e0fffb17 	ldw	r3,-20(fp)
10011c60:	00bfff84 	movi	r2,-2
10011c64:	1884703a 	and	r2,r3,r2
10011c68:	1001703a 	wrctl	status,r2
  
  return context;
10011c6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011c70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10011c74:	00c00044 	movi	r3,1
10011c78:	e0bffa17 	ldw	r2,-24(fp)
10011c7c:	1884983a 	sll	r2,r3,r2
10011c80:	0084303a 	nor	r2,zero,r2
10011c84:	1007883a 	mov	r3,r2
10011c88:	d0a6d617 	ldw	r2,-25768(gp)
10011c8c:	1884703a 	and	r2,r3,r2
10011c90:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011c94:	d0a6d617 	ldw	r2,-25768(gp)
10011c98:	100170fa 	wrctl	ienable,r2
10011c9c:	e0bffc17 	ldw	r2,-16(fp)
10011ca0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011ca4:	e0bffd17 	ldw	r2,-12(fp)
10011ca8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011cac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10011cb0:	0001883a 	nop
}
10011cb4:	e037883a 	mov	sp,fp
10011cb8:	df000017 	ldw	fp,0(sp)
10011cbc:	dec00104 	addi	sp,sp,4
10011cc0:	f800283a 	ret

10011cc4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011cc4:	defffc04 	addi	sp,sp,-16
10011cc8:	df000315 	stw	fp,12(sp)
10011ccc:	df000304 	addi	fp,sp,12
10011cd0:	e13ffe15 	stw	r4,-8(fp)
10011cd4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011cd8:	000530fa 	rdctl	r2,ienable
10011cdc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10011ce0:	00c00044 	movi	r3,1
10011ce4:	e0bfff17 	ldw	r2,-4(fp)
10011ce8:	1884983a 	sll	r2,r3,r2
10011cec:	1007883a 	mov	r3,r2
10011cf0:	e0bffd17 	ldw	r2,-12(fp)
10011cf4:	1884703a 	and	r2,r3,r2
10011cf8:	1004c03a 	cmpne	r2,r2,zero
10011cfc:	10803fcc 	andi	r2,r2,255
}
10011d00:	e037883a 	mov	sp,fp
10011d04:	df000017 	ldw	fp,0(sp)
10011d08:	dec00104 	addi	sp,sp,4
10011d0c:	f800283a 	ret

10011d10 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011d10:	defff504 	addi	sp,sp,-44
10011d14:	dfc00a15 	stw	ra,40(sp)
10011d18:	df000915 	stw	fp,36(sp)
10011d1c:	df000904 	addi	fp,sp,36
10011d20:	e13ffc15 	stw	r4,-16(fp)
10011d24:	e17ffd15 	stw	r5,-12(fp)
10011d28:	e1bffe15 	stw	r6,-8(fp)
10011d2c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10011d30:	00bffa84 	movi	r2,-22
10011d34:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011d38:	e0bffd17 	ldw	r2,-12(fp)
10011d3c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011d40:	e0bff817 	ldw	r2,-32(fp)
10011d44:	10800808 	cmpgei	r2,r2,32
10011d48:	1000271e 	bne	r2,zero,10011de8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011d4c:	0005303a 	rdctl	r2,status
10011d50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011d54:	e0fffb17 	ldw	r3,-20(fp)
10011d58:	00bfff84 	movi	r2,-2
10011d5c:	1884703a 	and	r2,r3,r2
10011d60:	1001703a 	wrctl	status,r2
  
  return context;
10011d64:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011d68:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10011d6c:	00840074 	movhi	r2,4097
10011d70:	109a8804 	addi	r2,r2,27168
10011d74:	e0fff817 	ldw	r3,-32(fp)
10011d78:	180690fa 	slli	r3,r3,3
10011d7c:	10c5883a 	add	r2,r2,r3
10011d80:	e0fffe17 	ldw	r3,-8(fp)
10011d84:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011d88:	00840074 	movhi	r2,4097
10011d8c:	109a8804 	addi	r2,r2,27168
10011d90:	e0fff817 	ldw	r3,-32(fp)
10011d94:	180690fa 	slli	r3,r3,3
10011d98:	10c5883a 	add	r2,r2,r3
10011d9c:	10800104 	addi	r2,r2,4
10011da0:	e0ffff17 	ldw	r3,-4(fp)
10011da4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10011da8:	e0bffe17 	ldw	r2,-8(fp)
10011dac:	10000526 	beq	r2,zero,10011dc4 <alt_iic_isr_register+0xb4>
10011db0:	e0bff817 	ldw	r2,-32(fp)
10011db4:	100b883a 	mov	r5,r2
10011db8:	e13ffc17 	ldw	r4,-16(fp)
10011dbc:	0011bb00 	call	10011bb0 <alt_ic_irq_enable>
10011dc0:	00000406 	br	10011dd4 <alt_iic_isr_register+0xc4>
10011dc4:	e0bff817 	ldw	r2,-32(fp)
10011dc8:	100b883a 	mov	r5,r2
10011dcc:	e13ffc17 	ldw	r4,-16(fp)
10011dd0:	0011c380 	call	10011c38 <alt_ic_irq_disable>
10011dd4:	e0bff715 	stw	r2,-36(fp)
10011dd8:	e0bffa17 	ldw	r2,-24(fp)
10011ddc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011de0:	e0bff917 	ldw	r2,-28(fp)
10011de4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10011de8:	e0bff717 	ldw	r2,-36(fp)
}
10011dec:	e037883a 	mov	sp,fp
10011df0:	dfc00117 	ldw	ra,4(sp)
10011df4:	df000017 	ldw	fp,0(sp)
10011df8:	dec00204 	addi	sp,sp,8
10011dfc:	f800283a 	ret

10011e00 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011e00:	defff804 	addi	sp,sp,-32
10011e04:	dfc00715 	stw	ra,28(sp)
10011e08:	df000615 	stw	fp,24(sp)
10011e0c:	dc000515 	stw	r16,20(sp)
10011e10:	df000604 	addi	fp,sp,24
10011e14:	e13ffb15 	stw	r4,-20(fp)
10011e18:	e17ffc15 	stw	r5,-16(fp)
10011e1c:	e1bffd15 	stw	r6,-12(fp)
10011e20:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10011e24:	e1bffe17 	ldw	r6,-8(fp)
10011e28:	e17ffd17 	ldw	r5,-12(fp)
10011e2c:	e13ffc17 	ldw	r4,-16(fp)
10011e30:	00120880 	call	10012088 <open>
10011e34:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10011e38:	e0bffa17 	ldw	r2,-24(fp)
10011e3c:	10002216 	blt	r2,zero,10011ec8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011e40:	04040074 	movhi	r16,4097
10011e44:	840f2c04 	addi	r16,r16,15536
10011e48:	e0bffa17 	ldw	r2,-24(fp)
10011e4c:	01400304 	movi	r5,12
10011e50:	1009883a 	mov	r4,r2
10011e54:	000d8440 	call	1000d844 <__mulsi3>
10011e58:	8085883a 	add	r2,r16,r2
10011e5c:	10c00017 	ldw	r3,0(r2)
10011e60:	e0bffb17 	ldw	r2,-20(fp)
10011e64:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011e68:	04040074 	movhi	r16,4097
10011e6c:	840f2c04 	addi	r16,r16,15536
10011e70:	e0bffa17 	ldw	r2,-24(fp)
10011e74:	01400304 	movi	r5,12
10011e78:	1009883a 	mov	r4,r2
10011e7c:	000d8440 	call	1000d844 <__mulsi3>
10011e80:	8085883a 	add	r2,r16,r2
10011e84:	10800104 	addi	r2,r2,4
10011e88:	10c00017 	ldw	r3,0(r2)
10011e8c:	e0bffb17 	ldw	r2,-20(fp)
10011e90:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011e94:	04040074 	movhi	r16,4097
10011e98:	840f2c04 	addi	r16,r16,15536
10011e9c:	e0bffa17 	ldw	r2,-24(fp)
10011ea0:	01400304 	movi	r5,12
10011ea4:	1009883a 	mov	r4,r2
10011ea8:	000d8440 	call	1000d844 <__mulsi3>
10011eac:	8085883a 	add	r2,r16,r2
10011eb0:	10800204 	addi	r2,r2,8
10011eb4:	10c00017 	ldw	r3,0(r2)
10011eb8:	e0bffb17 	ldw	r2,-20(fp)
10011ebc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011ec0:	e13ffa17 	ldw	r4,-24(fp)
10011ec4:	00108340 	call	10010834 <alt_release_fd>
  }
} 
10011ec8:	0001883a 	nop
10011ecc:	e6ffff04 	addi	sp,fp,-4
10011ed0:	dfc00217 	ldw	ra,8(sp)
10011ed4:	df000117 	ldw	fp,4(sp)
10011ed8:	dc000017 	ldw	r16,0(sp)
10011edc:	dec00304 	addi	sp,sp,12
10011ee0:	f800283a 	ret

10011ee4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10011ee4:	defffb04 	addi	sp,sp,-20
10011ee8:	dfc00415 	stw	ra,16(sp)
10011eec:	df000315 	stw	fp,12(sp)
10011ef0:	df000304 	addi	fp,sp,12
10011ef4:	e13ffd15 	stw	r4,-12(fp)
10011ef8:	e17ffe15 	stw	r5,-8(fp)
10011efc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10011f00:	01c07fc4 	movi	r7,511
10011f04:	01800044 	movi	r6,1
10011f08:	e17ffd17 	ldw	r5,-12(fp)
10011f0c:	01040074 	movhi	r4,4097
10011f10:	210f2f04 	addi	r4,r4,15548
10011f14:	0011e000 	call	10011e00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10011f18:	01c07fc4 	movi	r7,511
10011f1c:	000d883a 	mov	r6,zero
10011f20:	e17ffe17 	ldw	r5,-8(fp)
10011f24:	01040074 	movhi	r4,4097
10011f28:	210f2c04 	addi	r4,r4,15536
10011f2c:	0011e000 	call	10011e00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011f30:	01c07fc4 	movi	r7,511
10011f34:	01800044 	movi	r6,1
10011f38:	e17fff17 	ldw	r5,-4(fp)
10011f3c:	01040074 	movhi	r4,4097
10011f40:	210f3204 	addi	r4,r4,15560
10011f44:	0011e000 	call	10011e00 <alt_open_fd>
}  
10011f48:	0001883a 	nop
10011f4c:	e037883a 	mov	sp,fp
10011f50:	dfc00117 	ldw	ra,4(sp)
10011f54:	df000017 	ldw	fp,0(sp)
10011f58:	dec00204 	addi	sp,sp,8
10011f5c:	f800283a 	ret

10011f60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011f60:	defffe04 	addi	sp,sp,-8
10011f64:	dfc00115 	stw	ra,4(sp)
10011f68:	df000015 	stw	fp,0(sp)
10011f6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011f70:	d0a00b17 	ldw	r2,-32724(gp)
10011f74:	10000326 	beq	r2,zero,10011f84 <alt_get_errno+0x24>
10011f78:	d0a00b17 	ldw	r2,-32724(gp)
10011f7c:	103ee83a 	callr	r2
10011f80:	00000106 	br	10011f88 <alt_get_errno+0x28>
10011f84:	d0a6d204 	addi	r2,gp,-25784
}
10011f88:	e037883a 	mov	sp,fp
10011f8c:	dfc00117 	ldw	ra,4(sp)
10011f90:	df000017 	ldw	fp,0(sp)
10011f94:	dec00204 	addi	sp,sp,8
10011f98:	f800283a 	ret

10011f9c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10011f9c:	defffb04 	addi	sp,sp,-20
10011fa0:	dfc00415 	stw	ra,16(sp)
10011fa4:	df000315 	stw	fp,12(sp)
10011fa8:	dc000215 	stw	r16,8(sp)
10011fac:	df000304 	addi	fp,sp,12
10011fb0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10011fb4:	e0bffe17 	ldw	r2,-8(fp)
10011fb8:	10800217 	ldw	r2,8(r2)
10011fbc:	10d00034 	orhi	r3,r2,16384
10011fc0:	e0bffe17 	ldw	r2,-8(fp)
10011fc4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011fc8:	e03ffd15 	stw	zero,-12(fp)
10011fcc:	00002306 	br	1001205c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011fd0:	04040074 	movhi	r16,4097
10011fd4:	840f2c04 	addi	r16,r16,15536
10011fd8:	e0bffd17 	ldw	r2,-12(fp)
10011fdc:	01400304 	movi	r5,12
10011fe0:	1009883a 	mov	r4,r2
10011fe4:	000d8440 	call	1000d844 <__mulsi3>
10011fe8:	8085883a 	add	r2,r16,r2
10011fec:	10c00017 	ldw	r3,0(r2)
10011ff0:	e0bffe17 	ldw	r2,-8(fp)
10011ff4:	10800017 	ldw	r2,0(r2)
10011ff8:	1880151e 	bne	r3,r2,10012050 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011ffc:	04040074 	movhi	r16,4097
10012000:	840f2c04 	addi	r16,r16,15536
10012004:	e0bffd17 	ldw	r2,-12(fp)
10012008:	01400304 	movi	r5,12
1001200c:	1009883a 	mov	r4,r2
10012010:	000d8440 	call	1000d844 <__mulsi3>
10012014:	8085883a 	add	r2,r16,r2
10012018:	10800204 	addi	r2,r2,8
1001201c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10012020:	10000b0e 	bge	r2,zero,10012050 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10012024:	01400304 	movi	r5,12
10012028:	e13ffd17 	ldw	r4,-12(fp)
1001202c:	000d8440 	call	1000d844 <__mulsi3>
10012030:	1007883a 	mov	r3,r2
10012034:	00840074 	movhi	r2,4097
10012038:	108f2c04 	addi	r2,r2,15536
1001203c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10012040:	e0bffe17 	ldw	r2,-8(fp)
10012044:	18800226 	beq	r3,r2,10012050 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10012048:	00bffcc4 	movi	r2,-13
1001204c:	00000806 	br	10012070 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10012050:	e0bffd17 	ldw	r2,-12(fp)
10012054:	10800044 	addi	r2,r2,1
10012058:	e0bffd15 	stw	r2,-12(fp)
1001205c:	d0a00a17 	ldw	r2,-32728(gp)
10012060:	1007883a 	mov	r3,r2
10012064:	e0bffd17 	ldw	r2,-12(fp)
10012068:	18bfd92e 	bgeu	r3,r2,10011fd0 <__alt_data_end+0xf8011fd0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1001206c:	0005883a 	mov	r2,zero
}
10012070:	e6ffff04 	addi	sp,fp,-4
10012074:	dfc00217 	ldw	ra,8(sp)
10012078:	df000117 	ldw	fp,4(sp)
1001207c:	dc000017 	ldw	r16,0(sp)
10012080:	dec00304 	addi	sp,sp,12
10012084:	f800283a 	ret

10012088 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10012088:	defff604 	addi	sp,sp,-40
1001208c:	dfc00915 	stw	ra,36(sp)
10012090:	df000815 	stw	fp,32(sp)
10012094:	df000804 	addi	fp,sp,32
10012098:	e13ffd15 	stw	r4,-12(fp)
1001209c:	e17ffe15 	stw	r5,-8(fp)
100120a0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100120a4:	00bfffc4 	movi	r2,-1
100120a8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100120ac:	00bffb44 	movi	r2,-19
100120b0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100120b4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100120b8:	d1600804 	addi	r5,gp,-32736
100120bc:	e13ffd17 	ldw	r4,-12(fp)
100120c0:	00123ac0 	call	100123ac <alt_find_dev>
100120c4:	e0bff815 	stw	r2,-32(fp)
100120c8:	e0bff817 	ldw	r2,-32(fp)
100120cc:	1000051e 	bne	r2,zero,100120e4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100120d0:	e13ffd17 	ldw	r4,-12(fp)
100120d4:	001243c0 	call	1001243c <alt_find_file>
100120d8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100120dc:	00800044 	movi	r2,1
100120e0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100120e4:	e0bff817 	ldw	r2,-32(fp)
100120e8:	10002b26 	beq	r2,zero,10012198 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
100120ec:	e13ff817 	ldw	r4,-32(fp)
100120f0:	00125440 	call	10012544 <alt_get_fd>
100120f4:	e0bff915 	stw	r2,-28(fp)
100120f8:	e0bff917 	ldw	r2,-28(fp)
100120fc:	1000030e 	bge	r2,zero,1001210c <open+0x84>
    {
      status = index;
10012100:	e0bff917 	ldw	r2,-28(fp)
10012104:	e0bffa15 	stw	r2,-24(fp)
10012108:	00002506 	br	100121a0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1001210c:	01400304 	movi	r5,12
10012110:	e13ff917 	ldw	r4,-28(fp)
10012114:	000d8440 	call	1000d844 <__mulsi3>
10012118:	1007883a 	mov	r3,r2
1001211c:	00840074 	movhi	r2,4097
10012120:	108f2c04 	addi	r2,r2,15536
10012124:	1885883a 	add	r2,r3,r2
10012128:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1001212c:	e0fffe17 	ldw	r3,-8(fp)
10012130:	00900034 	movhi	r2,16384
10012134:	10bfffc4 	addi	r2,r2,-1
10012138:	1886703a 	and	r3,r3,r2
1001213c:	e0bffc17 	ldw	r2,-16(fp)
10012140:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10012144:	e0bffb17 	ldw	r2,-20(fp)
10012148:	1000051e 	bne	r2,zero,10012160 <open+0xd8>
1001214c:	e13ffc17 	ldw	r4,-16(fp)
10012150:	0011f9c0 	call	10011f9c <alt_file_locked>
10012154:	e0bffa15 	stw	r2,-24(fp)
10012158:	e0bffa17 	ldw	r2,-24(fp)
1001215c:	10001016 	blt	r2,zero,100121a0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10012160:	e0bff817 	ldw	r2,-32(fp)
10012164:	10800317 	ldw	r2,12(r2)
10012168:	10000826 	beq	r2,zero,1001218c <open+0x104>
1001216c:	e0bff817 	ldw	r2,-32(fp)
10012170:	10800317 	ldw	r2,12(r2)
10012174:	e1ffff17 	ldw	r7,-4(fp)
10012178:	e1bffe17 	ldw	r6,-8(fp)
1001217c:	e17ffd17 	ldw	r5,-12(fp)
10012180:	e13ffc17 	ldw	r4,-16(fp)
10012184:	103ee83a 	callr	r2
10012188:	00000106 	br	10012190 <open+0x108>
1001218c:	0005883a 	mov	r2,zero
10012190:	e0bffa15 	stw	r2,-24(fp)
10012194:	00000206 	br	100121a0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10012198:	00bffb44 	movi	r2,-19
1001219c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100121a0:	e0bffa17 	ldw	r2,-24(fp)
100121a4:	1000090e 	bge	r2,zero,100121cc <open+0x144>
  {
    alt_release_fd (index);  
100121a8:	e13ff917 	ldw	r4,-28(fp)
100121ac:	00108340 	call	10010834 <alt_release_fd>
    ALT_ERRNO = -status;
100121b0:	0011f600 	call	10011f60 <alt_get_errno>
100121b4:	1007883a 	mov	r3,r2
100121b8:	e0bffa17 	ldw	r2,-24(fp)
100121bc:	0085c83a 	sub	r2,zero,r2
100121c0:	18800015 	stw	r2,0(r3)
    return -1;
100121c4:	00bfffc4 	movi	r2,-1
100121c8:	00000106 	br	100121d0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
100121cc:	e0bff917 	ldw	r2,-28(fp)
}
100121d0:	e037883a 	mov	sp,fp
100121d4:	dfc00117 	ldw	ra,4(sp)
100121d8:	df000017 	ldw	fp,0(sp)
100121dc:	dec00204 	addi	sp,sp,8
100121e0:	f800283a 	ret

100121e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100121e4:	defffa04 	addi	sp,sp,-24
100121e8:	df000515 	stw	fp,20(sp)
100121ec:	df000504 	addi	fp,sp,20
100121f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100121f4:	0005303a 	rdctl	r2,status
100121f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100121fc:	e0fffc17 	ldw	r3,-16(fp)
10012200:	00bfff84 	movi	r2,-2
10012204:	1884703a 	and	r2,r3,r2
10012208:	1001703a 	wrctl	status,r2
  
  return context;
1001220c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10012210:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10012214:	e0bfff17 	ldw	r2,-4(fp)
10012218:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1001221c:	e0bffd17 	ldw	r2,-12(fp)
10012220:	10800017 	ldw	r2,0(r2)
10012224:	e0fffd17 	ldw	r3,-12(fp)
10012228:	18c00117 	ldw	r3,4(r3)
1001222c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10012230:	e0bffd17 	ldw	r2,-12(fp)
10012234:	10800117 	ldw	r2,4(r2)
10012238:	e0fffd17 	ldw	r3,-12(fp)
1001223c:	18c00017 	ldw	r3,0(r3)
10012240:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10012244:	e0bffd17 	ldw	r2,-12(fp)
10012248:	e0fffd17 	ldw	r3,-12(fp)
1001224c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10012250:	e0bffd17 	ldw	r2,-12(fp)
10012254:	e0fffd17 	ldw	r3,-12(fp)
10012258:	10c00015 	stw	r3,0(r2)
1001225c:	e0bffb17 	ldw	r2,-20(fp)
10012260:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012264:	e0bffe17 	ldw	r2,-8(fp)
10012268:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1001226c:	0001883a 	nop
10012270:	e037883a 	mov	sp,fp
10012274:	df000017 	ldw	fp,0(sp)
10012278:	dec00104 	addi	sp,sp,4
1001227c:	f800283a 	ret

10012280 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10012280:	defffb04 	addi	sp,sp,-20
10012284:	dfc00415 	stw	ra,16(sp)
10012288:	df000315 	stw	fp,12(sp)
1001228c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10012290:	d0a00e17 	ldw	r2,-32712(gp)
10012294:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10012298:	d0a6d817 	ldw	r2,-25760(gp)
1001229c:	10800044 	addi	r2,r2,1
100122a0:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100122a4:	00002e06 	br	10012360 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100122a8:	e0bffd17 	ldw	r2,-12(fp)
100122ac:	10800017 	ldw	r2,0(r2)
100122b0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100122b4:	e0bffd17 	ldw	r2,-12(fp)
100122b8:	10800403 	ldbu	r2,16(r2)
100122bc:	10803fcc 	andi	r2,r2,255
100122c0:	10000426 	beq	r2,zero,100122d4 <alt_tick+0x54>
100122c4:	d0a6d817 	ldw	r2,-25760(gp)
100122c8:	1000021e 	bne	r2,zero,100122d4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
100122cc:	e0bffd17 	ldw	r2,-12(fp)
100122d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100122d4:	e0bffd17 	ldw	r2,-12(fp)
100122d8:	10800217 	ldw	r2,8(r2)
100122dc:	d0e6d817 	ldw	r3,-25760(gp)
100122e0:	18801d36 	bltu	r3,r2,10012358 <alt_tick+0xd8>
100122e4:	e0bffd17 	ldw	r2,-12(fp)
100122e8:	10800403 	ldbu	r2,16(r2)
100122ec:	10803fcc 	andi	r2,r2,255
100122f0:	1000191e 	bne	r2,zero,10012358 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100122f4:	e0bffd17 	ldw	r2,-12(fp)
100122f8:	10800317 	ldw	r2,12(r2)
100122fc:	e0fffd17 	ldw	r3,-12(fp)
10012300:	18c00517 	ldw	r3,20(r3)
10012304:	1809883a 	mov	r4,r3
10012308:	103ee83a 	callr	r2
1001230c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10012310:	e0bfff17 	ldw	r2,-4(fp)
10012314:	1000031e 	bne	r2,zero,10012324 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10012318:	e13ffd17 	ldw	r4,-12(fp)
1001231c:	00121e40 	call	100121e4 <alt_alarm_stop>
10012320:	00000d06 	br	10012358 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10012324:	e0bffd17 	ldw	r2,-12(fp)
10012328:	10c00217 	ldw	r3,8(r2)
1001232c:	e0bfff17 	ldw	r2,-4(fp)
10012330:	1887883a 	add	r3,r3,r2
10012334:	e0bffd17 	ldw	r2,-12(fp)
10012338:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1001233c:	e0bffd17 	ldw	r2,-12(fp)
10012340:	10c00217 	ldw	r3,8(r2)
10012344:	d0a6d817 	ldw	r2,-25760(gp)
10012348:	1880032e 	bgeu	r3,r2,10012358 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1001234c:	e0bffd17 	ldw	r2,-12(fp)
10012350:	00c00044 	movi	r3,1
10012354:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10012358:	e0bffe17 	ldw	r2,-8(fp)
1001235c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10012360:	e0fffd17 	ldw	r3,-12(fp)
10012364:	d0a00e04 	addi	r2,gp,-32712
10012368:	18bfcf1e 	bne	r3,r2,100122a8 <__alt_data_end+0xf80122a8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1001236c:	0001883a 	nop
}
10012370:	0001883a 	nop
10012374:	e037883a 	mov	sp,fp
10012378:	dfc00117 	ldw	ra,4(sp)
1001237c:	df000017 	ldw	fp,0(sp)
10012380:	dec00204 	addi	sp,sp,8
10012384:	f800283a 	ret

10012388 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10012388:	deffff04 	addi	sp,sp,-4
1001238c:	df000015 	stw	fp,0(sp)
10012390:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10012394:	000170fa 	wrctl	ienable,zero
}
10012398:	0001883a 	nop
1001239c:	e037883a 	mov	sp,fp
100123a0:	df000017 	ldw	fp,0(sp)
100123a4:	dec00104 	addi	sp,sp,4
100123a8:	f800283a 	ret

100123ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100123ac:	defffa04 	addi	sp,sp,-24
100123b0:	dfc00515 	stw	ra,20(sp)
100123b4:	df000415 	stw	fp,16(sp)
100123b8:	df000404 	addi	fp,sp,16
100123bc:	e13ffe15 	stw	r4,-8(fp)
100123c0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100123c4:	e0bfff17 	ldw	r2,-4(fp)
100123c8:	10800017 	ldw	r2,0(r2)
100123cc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100123d0:	e13ffe17 	ldw	r4,-8(fp)
100123d4:	00033100 	call	10003310 <strlen>
100123d8:	10800044 	addi	r2,r2,1
100123dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100123e0:	00000d06 	br	10012418 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100123e4:	e0bffc17 	ldw	r2,-16(fp)
100123e8:	10800217 	ldw	r2,8(r2)
100123ec:	e0fffd17 	ldw	r3,-12(fp)
100123f0:	180d883a 	mov	r6,r3
100123f4:	e17ffe17 	ldw	r5,-8(fp)
100123f8:	1009883a 	mov	r4,r2
100123fc:	00126f00 	call	100126f0 <memcmp>
10012400:	1000021e 	bne	r2,zero,1001240c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10012404:	e0bffc17 	ldw	r2,-16(fp)
10012408:	00000706 	br	10012428 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1001240c:	e0bffc17 	ldw	r2,-16(fp)
10012410:	10800017 	ldw	r2,0(r2)
10012414:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10012418:	e0fffc17 	ldw	r3,-16(fp)
1001241c:	e0bfff17 	ldw	r2,-4(fp)
10012420:	18bff01e 	bne	r3,r2,100123e4 <__alt_data_end+0xf80123e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10012424:	0005883a 	mov	r2,zero
}
10012428:	e037883a 	mov	sp,fp
1001242c:	dfc00117 	ldw	ra,4(sp)
10012430:	df000017 	ldw	fp,0(sp)
10012434:	dec00204 	addi	sp,sp,8
10012438:	f800283a 	ret

1001243c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1001243c:	defffb04 	addi	sp,sp,-20
10012440:	dfc00415 	stw	ra,16(sp)
10012444:	df000315 	stw	fp,12(sp)
10012448:	df000304 	addi	fp,sp,12
1001244c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10012450:	d0a00617 	ldw	r2,-32744(gp)
10012454:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10012458:	00003106 	br	10012520 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1001245c:	e0bffd17 	ldw	r2,-12(fp)
10012460:	10800217 	ldw	r2,8(r2)
10012464:	1009883a 	mov	r4,r2
10012468:	00033100 	call	10003310 <strlen>
1001246c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10012470:	e0bffd17 	ldw	r2,-12(fp)
10012474:	10c00217 	ldw	r3,8(r2)
10012478:	e0bffe17 	ldw	r2,-8(fp)
1001247c:	10bfffc4 	addi	r2,r2,-1
10012480:	1885883a 	add	r2,r3,r2
10012484:	10800003 	ldbu	r2,0(r2)
10012488:	10803fcc 	andi	r2,r2,255
1001248c:	1080201c 	xori	r2,r2,128
10012490:	10bfe004 	addi	r2,r2,-128
10012494:	10800bd8 	cmpnei	r2,r2,47
10012498:	1000031e 	bne	r2,zero,100124a8 <alt_find_file+0x6c>
    {
      len -= 1;
1001249c:	e0bffe17 	ldw	r2,-8(fp)
100124a0:	10bfffc4 	addi	r2,r2,-1
100124a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100124a8:	e0bffe17 	ldw	r2,-8(fp)
100124ac:	e0ffff17 	ldw	r3,-4(fp)
100124b0:	1885883a 	add	r2,r3,r2
100124b4:	10800003 	ldbu	r2,0(r2)
100124b8:	10803fcc 	andi	r2,r2,255
100124bc:	1080201c 	xori	r2,r2,128
100124c0:	10bfe004 	addi	r2,r2,-128
100124c4:	10800be0 	cmpeqi	r2,r2,47
100124c8:	1000081e 	bne	r2,zero,100124ec <alt_find_file+0xb0>
100124cc:	e0bffe17 	ldw	r2,-8(fp)
100124d0:	e0ffff17 	ldw	r3,-4(fp)
100124d4:	1885883a 	add	r2,r3,r2
100124d8:	10800003 	ldbu	r2,0(r2)
100124dc:	10803fcc 	andi	r2,r2,255
100124e0:	1080201c 	xori	r2,r2,128
100124e4:	10bfe004 	addi	r2,r2,-128
100124e8:	10000a1e 	bne	r2,zero,10012514 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
100124ec:	e0bffd17 	ldw	r2,-12(fp)
100124f0:	10800217 	ldw	r2,8(r2)
100124f4:	e0fffe17 	ldw	r3,-8(fp)
100124f8:	180d883a 	mov	r6,r3
100124fc:	e17fff17 	ldw	r5,-4(fp)
10012500:	1009883a 	mov	r4,r2
10012504:	00126f00 	call	100126f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10012508:	1000021e 	bne	r2,zero,10012514 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1001250c:	e0bffd17 	ldw	r2,-12(fp)
10012510:	00000706 	br	10012530 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10012514:	e0bffd17 	ldw	r2,-12(fp)
10012518:	10800017 	ldw	r2,0(r2)
1001251c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10012520:	e0fffd17 	ldw	r3,-12(fp)
10012524:	d0a00604 	addi	r2,gp,-32744
10012528:	18bfcc1e 	bne	r3,r2,1001245c <__alt_data_end+0xf801245c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1001252c:	0005883a 	mov	r2,zero
}
10012530:	e037883a 	mov	sp,fp
10012534:	dfc00117 	ldw	ra,4(sp)
10012538:	df000017 	ldw	fp,0(sp)
1001253c:	dec00204 	addi	sp,sp,8
10012540:	f800283a 	ret

10012544 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10012544:	defffa04 	addi	sp,sp,-24
10012548:	dfc00515 	stw	ra,20(sp)
1001254c:	df000415 	stw	fp,16(sp)
10012550:	dc000315 	stw	r16,12(sp)
10012554:	df000404 	addi	fp,sp,16
10012558:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1001255c:	00bffa04 	movi	r2,-24
10012560:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10012564:	e03ffc15 	stw	zero,-16(fp)
10012568:	00001d06 	br	100125e0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
1001256c:	04040074 	movhi	r16,4097
10012570:	840f2c04 	addi	r16,r16,15536
10012574:	e0bffc17 	ldw	r2,-16(fp)
10012578:	01400304 	movi	r5,12
1001257c:	1009883a 	mov	r4,r2
10012580:	000d8440 	call	1000d844 <__mulsi3>
10012584:	8085883a 	add	r2,r16,r2
10012588:	10800017 	ldw	r2,0(r2)
1001258c:	1000111e 	bne	r2,zero,100125d4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10012590:	04040074 	movhi	r16,4097
10012594:	840f2c04 	addi	r16,r16,15536
10012598:	e0bffc17 	ldw	r2,-16(fp)
1001259c:	01400304 	movi	r5,12
100125a0:	1009883a 	mov	r4,r2
100125a4:	000d8440 	call	1000d844 <__mulsi3>
100125a8:	8085883a 	add	r2,r16,r2
100125ac:	e0fffe17 	ldw	r3,-8(fp)
100125b0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100125b4:	d0e00a17 	ldw	r3,-32728(gp)
100125b8:	e0bffc17 	ldw	r2,-16(fp)
100125bc:	1880020e 	bge	r3,r2,100125c8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
100125c0:	e0bffc17 	ldw	r2,-16(fp)
100125c4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
100125c8:	e0bffc17 	ldw	r2,-16(fp)
100125cc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100125d0:	00000606 	br	100125ec <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100125d4:	e0bffc17 	ldw	r2,-16(fp)
100125d8:	10800044 	addi	r2,r2,1
100125dc:	e0bffc15 	stw	r2,-16(fp)
100125e0:	e0bffc17 	ldw	r2,-16(fp)
100125e4:	10800810 	cmplti	r2,r2,32
100125e8:	103fe01e 	bne	r2,zero,1001256c <__alt_data_end+0xf801256c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100125ec:	e0bffd17 	ldw	r2,-12(fp)
}
100125f0:	e6ffff04 	addi	sp,fp,-4
100125f4:	dfc00217 	ldw	ra,8(sp)
100125f8:	df000117 	ldw	fp,4(sp)
100125fc:	dc000017 	ldw	r16,0(sp)
10012600:	dec00304 	addi	sp,sp,12
10012604:	f800283a 	ret

10012608 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10012608:	defffe04 	addi	sp,sp,-8
1001260c:	df000115 	stw	fp,4(sp)
10012610:	df000104 	addi	fp,sp,4
10012614:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10012618:	e0bfff17 	ldw	r2,-4(fp)
1001261c:	10bffe84 	addi	r2,r2,-6
10012620:	10c00428 	cmpgeui	r3,r2,16
10012624:	18001a1e 	bne	r3,zero,10012690 <alt_exception_cause_generated_bad_addr+0x88>
10012628:	100690ba 	slli	r3,r2,2
1001262c:	00840074 	movhi	r2,4097
10012630:	10899004 	addi	r2,r2,9792
10012634:	1885883a 	add	r2,r3,r2
10012638:	10800017 	ldw	r2,0(r2)
1001263c:	1000683a 	jmp	r2
10012640:	10012680 	call	11001268 <_gp+0xfe43d8>
10012644:	10012680 	call	11001268 <_gp+0xfe43d8>
10012648:	10012690 	cmplti	zero,r2,1178
1001264c:	10012690 	cmplti	zero,r2,1178
10012650:	10012690 	cmplti	zero,r2,1178
10012654:	10012680 	call	11001268 <_gp+0xfe43d8>
10012658:	10012688 	cmpgei	zero,r2,1178
1001265c:	10012690 	cmplti	zero,r2,1178
10012660:	10012680 	call	11001268 <_gp+0xfe43d8>
10012664:	10012680 	call	11001268 <_gp+0xfe43d8>
10012668:	10012690 	cmplti	zero,r2,1178
1001266c:	10012680 	call	11001268 <_gp+0xfe43d8>
10012670:	10012688 	cmpgei	zero,r2,1178
10012674:	10012690 	cmplti	zero,r2,1178
10012678:	10012690 	cmplti	zero,r2,1178
1001267c:	10012680 	call	11001268 <_gp+0xfe43d8>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10012680:	00800044 	movi	r2,1
10012684:	00000306 	br	10012694 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10012688:	0005883a 	mov	r2,zero
1001268c:	00000106 	br	10012694 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10012690:	0005883a 	mov	r2,zero
  }
}
10012694:	e037883a 	mov	sp,fp
10012698:	df000017 	ldw	fp,0(sp)
1001269c:	dec00104 	addi	sp,sp,4
100126a0:	f800283a 	ret

100126a4 <atexit>:
100126a4:	200b883a 	mov	r5,r4
100126a8:	000f883a 	mov	r7,zero
100126ac:	000d883a 	mov	r6,zero
100126b0:	0009883a 	mov	r4,zero
100126b4:	001276c1 	jmpi	1001276c <__register_exitproc>

100126b8 <exit>:
100126b8:	defffe04 	addi	sp,sp,-8
100126bc:	000b883a 	mov	r5,zero
100126c0:	dc000015 	stw	r16,0(sp)
100126c4:	dfc00115 	stw	ra,4(sp)
100126c8:	2021883a 	mov	r16,r4
100126cc:	00128840 	call	10012884 <__call_exitprocs>
100126d0:	00840074 	movhi	r2,4097
100126d4:	1093a404 	addi	r2,r2,20112
100126d8:	11000017 	ldw	r4,0(r2)
100126dc:	20800f17 	ldw	r2,60(r4)
100126e0:	10000126 	beq	r2,zero,100126e8 <exit+0x30>
100126e4:	103ee83a 	callr	r2
100126e8:	8009883a 	mov	r4,r16
100126ec:	0012a040 	call	10012a04 <_exit>

100126f0 <memcmp>:
100126f0:	01c000c4 	movi	r7,3
100126f4:	3980192e 	bgeu	r7,r6,1001275c <memcmp+0x6c>
100126f8:	2144b03a 	or	r2,r4,r5
100126fc:	11c4703a 	and	r2,r2,r7
10012700:	10000f26 	beq	r2,zero,10012740 <memcmp+0x50>
10012704:	20800003 	ldbu	r2,0(r4)
10012708:	28c00003 	ldbu	r3,0(r5)
1001270c:	10c0151e 	bne	r2,r3,10012764 <memcmp+0x74>
10012710:	31bfff84 	addi	r6,r6,-2
10012714:	01ffffc4 	movi	r7,-1
10012718:	00000406 	br	1001272c <memcmp+0x3c>
1001271c:	20800003 	ldbu	r2,0(r4)
10012720:	28c00003 	ldbu	r3,0(r5)
10012724:	31bfffc4 	addi	r6,r6,-1
10012728:	10c00e1e 	bne	r2,r3,10012764 <memcmp+0x74>
1001272c:	21000044 	addi	r4,r4,1
10012730:	29400044 	addi	r5,r5,1
10012734:	31fff91e 	bne	r6,r7,1001271c <__alt_data_end+0xf801271c>
10012738:	0005883a 	mov	r2,zero
1001273c:	f800283a 	ret
10012740:	20c00017 	ldw	r3,0(r4)
10012744:	28800017 	ldw	r2,0(r5)
10012748:	18bfee1e 	bne	r3,r2,10012704 <__alt_data_end+0xf8012704>
1001274c:	31bfff04 	addi	r6,r6,-4
10012750:	21000104 	addi	r4,r4,4
10012754:	29400104 	addi	r5,r5,4
10012758:	39bff936 	bltu	r7,r6,10012740 <__alt_data_end+0xf8012740>
1001275c:	303fe91e 	bne	r6,zero,10012704 <__alt_data_end+0xf8012704>
10012760:	003ff506 	br	10012738 <__alt_data_end+0xf8012738>
10012764:	10c5c83a 	sub	r2,r2,r3
10012768:	f800283a 	ret

1001276c <__register_exitproc>:
1001276c:	defffa04 	addi	sp,sp,-24
10012770:	dc000315 	stw	r16,12(sp)
10012774:	04040074 	movhi	r16,4097
10012778:	8413a404 	addi	r16,r16,20112
1001277c:	80c00017 	ldw	r3,0(r16)
10012780:	dc400415 	stw	r17,16(sp)
10012784:	dfc00515 	stw	ra,20(sp)
10012788:	18805217 	ldw	r2,328(r3)
1001278c:	2023883a 	mov	r17,r4
10012790:	10003726 	beq	r2,zero,10012870 <__register_exitproc+0x104>
10012794:	10c00117 	ldw	r3,4(r2)
10012798:	010007c4 	movi	r4,31
1001279c:	20c00e16 	blt	r4,r3,100127d8 <__register_exitproc+0x6c>
100127a0:	1a000044 	addi	r8,r3,1
100127a4:	8800221e 	bne	r17,zero,10012830 <__register_exitproc+0xc4>
100127a8:	18c00084 	addi	r3,r3,2
100127ac:	18c7883a 	add	r3,r3,r3
100127b0:	18c7883a 	add	r3,r3,r3
100127b4:	12000115 	stw	r8,4(r2)
100127b8:	10c7883a 	add	r3,r2,r3
100127bc:	19400015 	stw	r5,0(r3)
100127c0:	0005883a 	mov	r2,zero
100127c4:	dfc00517 	ldw	ra,20(sp)
100127c8:	dc400417 	ldw	r17,16(sp)
100127cc:	dc000317 	ldw	r16,12(sp)
100127d0:	dec00604 	addi	sp,sp,24
100127d4:	f800283a 	ret
100127d8:	00800034 	movhi	r2,0
100127dc:	10800004 	addi	r2,r2,0
100127e0:	10002626 	beq	r2,zero,1001287c <__register_exitproc+0x110>
100127e4:	01006404 	movi	r4,400
100127e8:	d9400015 	stw	r5,0(sp)
100127ec:	d9800115 	stw	r6,4(sp)
100127f0:	d9c00215 	stw	r7,8(sp)
100127f4:	00000000 	call	10000000 <__alt_mem_sdram>
100127f8:	d9400017 	ldw	r5,0(sp)
100127fc:	d9800117 	ldw	r6,4(sp)
10012800:	d9c00217 	ldw	r7,8(sp)
10012804:	10001d26 	beq	r2,zero,1001287c <__register_exitproc+0x110>
10012808:	81000017 	ldw	r4,0(r16)
1001280c:	10000115 	stw	zero,4(r2)
10012810:	02000044 	movi	r8,1
10012814:	22405217 	ldw	r9,328(r4)
10012818:	0007883a 	mov	r3,zero
1001281c:	12400015 	stw	r9,0(r2)
10012820:	20805215 	stw	r2,328(r4)
10012824:	10006215 	stw	zero,392(r2)
10012828:	10006315 	stw	zero,396(r2)
1001282c:	883fde26 	beq	r17,zero,100127a8 <__alt_data_end+0xf80127a8>
10012830:	18c9883a 	add	r4,r3,r3
10012834:	2109883a 	add	r4,r4,r4
10012838:	1109883a 	add	r4,r2,r4
1001283c:	21802215 	stw	r6,136(r4)
10012840:	01800044 	movi	r6,1
10012844:	12406217 	ldw	r9,392(r2)
10012848:	30cc983a 	sll	r6,r6,r3
1001284c:	4992b03a 	or	r9,r9,r6
10012850:	12406215 	stw	r9,392(r2)
10012854:	21c04215 	stw	r7,264(r4)
10012858:	01000084 	movi	r4,2
1001285c:	893fd21e 	bne	r17,r4,100127a8 <__alt_data_end+0xf80127a8>
10012860:	11006317 	ldw	r4,396(r2)
10012864:	218cb03a 	or	r6,r4,r6
10012868:	11806315 	stw	r6,396(r2)
1001286c:	003fce06 	br	100127a8 <__alt_data_end+0xf80127a8>
10012870:	18805304 	addi	r2,r3,332
10012874:	18805215 	stw	r2,328(r3)
10012878:	003fc606 	br	10012794 <__alt_data_end+0xf8012794>
1001287c:	00bfffc4 	movi	r2,-1
10012880:	003fd006 	br	100127c4 <__alt_data_end+0xf80127c4>

10012884 <__call_exitprocs>:
10012884:	defff504 	addi	sp,sp,-44
10012888:	df000915 	stw	fp,36(sp)
1001288c:	dd400615 	stw	r21,24(sp)
10012890:	dc800315 	stw	r18,12(sp)
10012894:	dfc00a15 	stw	ra,40(sp)
10012898:	ddc00815 	stw	r23,32(sp)
1001289c:	dd800715 	stw	r22,28(sp)
100128a0:	dd000515 	stw	r20,20(sp)
100128a4:	dcc00415 	stw	r19,16(sp)
100128a8:	dc400215 	stw	r17,8(sp)
100128ac:	dc000115 	stw	r16,4(sp)
100128b0:	d9000015 	stw	r4,0(sp)
100128b4:	2839883a 	mov	fp,r5
100128b8:	04800044 	movi	r18,1
100128bc:	057fffc4 	movi	r21,-1
100128c0:	00840074 	movhi	r2,4097
100128c4:	1093a404 	addi	r2,r2,20112
100128c8:	12000017 	ldw	r8,0(r2)
100128cc:	45005217 	ldw	r20,328(r8)
100128d0:	44c05204 	addi	r19,r8,328
100128d4:	a0001c26 	beq	r20,zero,10012948 <__call_exitprocs+0xc4>
100128d8:	a0800117 	ldw	r2,4(r20)
100128dc:	15ffffc4 	addi	r23,r2,-1
100128e0:	b8000d16 	blt	r23,zero,10012918 <__call_exitprocs+0x94>
100128e4:	14000044 	addi	r16,r2,1
100128e8:	8421883a 	add	r16,r16,r16
100128ec:	8421883a 	add	r16,r16,r16
100128f0:	84402004 	addi	r17,r16,128
100128f4:	a463883a 	add	r17,r20,r17
100128f8:	a421883a 	add	r16,r20,r16
100128fc:	e0001e26 	beq	fp,zero,10012978 <__call_exitprocs+0xf4>
10012900:	80804017 	ldw	r2,256(r16)
10012904:	e0801c26 	beq	fp,r2,10012978 <__call_exitprocs+0xf4>
10012908:	bdffffc4 	addi	r23,r23,-1
1001290c:	843fff04 	addi	r16,r16,-4
10012910:	8c7fff04 	addi	r17,r17,-4
10012914:	bd7ff91e 	bne	r23,r21,100128fc <__alt_data_end+0xf80128fc>
10012918:	00800034 	movhi	r2,0
1001291c:	10800004 	addi	r2,r2,0
10012920:	10000926 	beq	r2,zero,10012948 <__call_exitprocs+0xc4>
10012924:	a0800117 	ldw	r2,4(r20)
10012928:	1000301e 	bne	r2,zero,100129ec <__call_exitprocs+0x168>
1001292c:	a0800017 	ldw	r2,0(r20)
10012930:	10003226 	beq	r2,zero,100129fc <__call_exitprocs+0x178>
10012934:	a009883a 	mov	r4,r20
10012938:	98800015 	stw	r2,0(r19)
1001293c:	00000000 	call	10000000 <__alt_mem_sdram>
10012940:	9d000017 	ldw	r20,0(r19)
10012944:	a03fe41e 	bne	r20,zero,100128d8 <__alt_data_end+0xf80128d8>
10012948:	dfc00a17 	ldw	ra,40(sp)
1001294c:	df000917 	ldw	fp,36(sp)
10012950:	ddc00817 	ldw	r23,32(sp)
10012954:	dd800717 	ldw	r22,28(sp)
10012958:	dd400617 	ldw	r21,24(sp)
1001295c:	dd000517 	ldw	r20,20(sp)
10012960:	dcc00417 	ldw	r19,16(sp)
10012964:	dc800317 	ldw	r18,12(sp)
10012968:	dc400217 	ldw	r17,8(sp)
1001296c:	dc000117 	ldw	r16,4(sp)
10012970:	dec00b04 	addi	sp,sp,44
10012974:	f800283a 	ret
10012978:	a0800117 	ldw	r2,4(r20)
1001297c:	80c00017 	ldw	r3,0(r16)
10012980:	10bfffc4 	addi	r2,r2,-1
10012984:	15c01426 	beq	r2,r23,100129d8 <__call_exitprocs+0x154>
10012988:	80000015 	stw	zero,0(r16)
1001298c:	183fde26 	beq	r3,zero,10012908 <__alt_data_end+0xf8012908>
10012990:	95c8983a 	sll	r4,r18,r23
10012994:	a0806217 	ldw	r2,392(r20)
10012998:	a5800117 	ldw	r22,4(r20)
1001299c:	2084703a 	and	r2,r4,r2
100129a0:	10000b26 	beq	r2,zero,100129d0 <__call_exitprocs+0x14c>
100129a4:	a0806317 	ldw	r2,396(r20)
100129a8:	2088703a 	and	r4,r4,r2
100129ac:	20000c1e 	bne	r4,zero,100129e0 <__call_exitprocs+0x15c>
100129b0:	89400017 	ldw	r5,0(r17)
100129b4:	d9000017 	ldw	r4,0(sp)
100129b8:	183ee83a 	callr	r3
100129bc:	a0800117 	ldw	r2,4(r20)
100129c0:	15bfbf1e 	bne	r2,r22,100128c0 <__alt_data_end+0xf80128c0>
100129c4:	98800017 	ldw	r2,0(r19)
100129c8:	153fcf26 	beq	r2,r20,10012908 <__alt_data_end+0xf8012908>
100129cc:	003fbc06 	br	100128c0 <__alt_data_end+0xf80128c0>
100129d0:	183ee83a 	callr	r3
100129d4:	003ff906 	br	100129bc <__alt_data_end+0xf80129bc>
100129d8:	a5c00115 	stw	r23,4(r20)
100129dc:	003feb06 	br	1001298c <__alt_data_end+0xf801298c>
100129e0:	89000017 	ldw	r4,0(r17)
100129e4:	183ee83a 	callr	r3
100129e8:	003ff406 	br	100129bc <__alt_data_end+0xf80129bc>
100129ec:	a0800017 	ldw	r2,0(r20)
100129f0:	a027883a 	mov	r19,r20
100129f4:	1029883a 	mov	r20,r2
100129f8:	003fb606 	br	100128d4 <__alt_data_end+0xf80128d4>
100129fc:	0005883a 	mov	r2,zero
10012a00:	003ffb06 	br	100129f0 <__alt_data_end+0xf80129f0>

10012a04 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10012a04:	defffd04 	addi	sp,sp,-12
10012a08:	df000215 	stw	fp,8(sp)
10012a0c:	df000204 	addi	fp,sp,8
10012a10:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10012a14:	0001883a 	nop
10012a18:	e0bfff17 	ldw	r2,-4(fp)
10012a1c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10012a20:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10012a24:	10000226 	beq	r2,zero,10012a30 <_exit+0x2c>
    ALT_SIM_FAIL();
10012a28:	002af070 	cmpltui	zero,zero,43969
10012a2c:	00000106 	br	10012a34 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10012a30:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10012a34:	003fff06 	br	10012a34 <__alt_data_end+0xf8012a34>
