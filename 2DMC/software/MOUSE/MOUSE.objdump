
MOUSE.elf:     file format elf32-littlenios2
MOUSE.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0001340c memsz 0x0001340c flags r-x
    LOAD off    0x0001442c vaddr 0x1001342c paddr 0x10014f18 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00016a04 vaddr 0x10016a04 paddr 0x10016a04 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001282c  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009d0  10012a5c  10012a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  1001342c  10014f18  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  10016a04  10016a04  00016a04  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  10016b68  10016b68  00015f18  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015f18  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ef8  00000000  00000000  00015f40  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002377c  00000000  00000000  00016e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000090ff  00000000  00000000  0003a5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bafd  00000000  00000000  000436b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002194  00000000  00000000  0004f1b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003a07  00000000  00000000  00051344  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001786c  00000000  00000000  00054d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006c5b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d0  00000000  00000000  0006c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00071086  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00071089  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00071095  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00071096  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00071097  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007109b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007109f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000710a3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000710ae  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000710b9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  000710c4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  000710cc  2**0
                  CONTENTS, READONLY
 29 .jdi          00004f1a  00000000  00000000  000710ff  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00061939  00000000  00000000  00076019  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10012a5c l    d  .rodata	00000000 .rodata
1001342c l    d  .rwdata	00000000 .rwdata
10016a04 l    d  .bss	00000000 .bss
10016b68 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MOUSE_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
10016a04 l     O .bss	00000002 ctl_reg.3584
10016a06 l     O .bss	00000002 no_device.3585
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10013172 l     O .rodata	00000010 zeroes.4404
100056c4 l     F .text	000000bc __sbprintf
10013182 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100058d4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000742c l     F .text	00000008 __fp_unlock
10007440 l     F .text	0000019c __sinit.part.1
100075dc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1001342c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10013870 l     O .rwdata	00000020 lc_ctype_charset
10013850 l     O .rwdata	00000020 lc_message_charset
10013890 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100131b4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000aab0 l     F .text	000000fc __sprint_r.part.0
100132d8 l     O .rodata	00000010 zeroes.4349
1000c0ec l     F .text	000000bc __sbprintf
100132e8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10010134 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10010248 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10010274 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10010368 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10010450 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1001053c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10010718 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10014f08 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
100109bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010af8 l     F .text	00000034 alt_dev_reg
10013e78 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010de8 l     F .text	0000020c altera_avalon_jtag_uart_irq
10010ff4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
1001162c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100119c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011e24 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011f84 l     F .text	0000003c alt_get_errno
10011fc0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10016a3c g     O .bss	00000004 alt_instruction_exception_handler
1000a0f4 g     F .text	00000074 _mprec_log10
1000a1e0 g     F .text	0000008c __any_on
1000c6a0 g     F .text	00000054 _isatty_r
100131c0 g     O .rodata	00000028 __mprec_tinytens
10010654 g     F .text	0000007c alt_main
10003260 g     F .text	000000c0 _puts_r
10016a68 g     O .bss	00000100 alt_irq
1000c6f4 g     F .text	00000060 _lseek_r
10014f18 g       *ABS*	00000000 __flash_rwdata_start
1000eb0c g     F .text	00000088 .hidden __eqdf2
10016b68 g       *ABS*	00000000 __alt_heap_start
10003224 g     F .text	0000003c printf
1000c90c g     F .text	0000009c _wcrtomb_r
1000a970 g     F .text	0000005c __sseek
1000778c g     F .text	00000010 __sinit
1000c7b4 g     F .text	00000140 __swbuf_r
10008260 g     F .text	0000007c _setlocale_r
100075e4 g     F .text	00000078 __sfmoreglue
100106f4 g     F .text	00000024 __malloc_unlock
10008f30 g     F .text	0000015c memmove
10007774 g     F .text	00000018 _cleanup
100091b4 g     F .text	000000a8 _Balloc
1000eb94 g     F .text	000000dc .hidden __gtdf2
100123ac g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000c644 g     F .text	0000005c _fstat_r
10016a20 g     O .bss	00000004 errno
1000a8ec g     F .text	00000008 __seofread
10016a28 g     O .bss	00000004 alt_argv
1001ced8 g       *ABS*	00000000 _gp
1001098c g     F .text	00000030 usleep
10013cf8 g     O .rwdata	00000180 alt_fd_list
100123d0 g     F .text	00000090 alt_find_dev
10008de8 g     F .text	00000148 memcpy
10007434 g     F .text	0000000c _cleanup_r
1000ff4c g     F .text	000000dc .hidden __floatsidf
10011f08 g     F .text	0000007c alt_io_redirect
1000ec70 g     F .text	000000f4 .hidden __ltdf2
10012a5c g       *ABS*	00000000 __DTOR_END__
10003320 g     F .text	00000014 puts
1001262c g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000a7d0 g     F .text	00000074 __fpclassifyd
1000a050 g     F .text	000000a4 __ratio
1000c0d0 g     F .text	0000001c __vfiprintf_internal
100111ec g     F .text	0000021c altera_avalon_jtag_uart_read
100031f4 g     F .text	00000030 _printf_r
1000d7ac g     F .text	00000064 .hidden __udivsi3
100103a4 g     F .text	000000ac isatty
10013210 g     O .rodata	000000c8 __mprec_tens
100082dc g     F .text	0000000c __locale_charset
10016a1c g     O .bss	00000004 __malloc_top_pad
10014ee0 g     O .rwdata	00000004 __mb_cur_max
1000830c g     F .text	0000000c _localeconv_r
100095e8 g     F .text	0000003c __i2b
10007c10 g     F .text	000004c8 __sfvwrite_r
1000a844 g     F .text	00000054 _sbrk_r
1000c754 g     F .text	00000060 _read_r
10014f00 g     O .rwdata	00000004 alt_max_fd
1000c338 g     F .text	000000f0 _fclose_r
100073fc g     F .text	00000030 fflush
10016a18 g     O .bss	00000004 __malloc_max_sbrked_mem
1000d890 g     F .text	000008ac .hidden __adddf3
10009df8 g     F .text	0000010c __b2d
1000d0f0 g     F .text	000005c4 .hidden __umoddi3
10010578 g     F .text	000000dc lseek
10014ed8 g     O .rwdata	00000004 _global_impure_ptr
1000a26c g     F .text	00000564 _realloc_r
10016b68 g       *ABS*	00000000 __bss_end
10011d34 g     F .text	000000f0 alt_iic_isr_register
100122a4 g     F .text	00000108 alt_tick
1000caf4 g     F .text	000005fc .hidden __udivdi3
1000c5a0 g     F .text	00000024 _fputwc_r
100131e8 g     O .rodata	00000028 __mprec_bigtens
100093cc g     F .text	00000104 __s2b
10010028 g     F .text	000000a8 .hidden __floatunsidf
10009b38 g     F .text	00000060 __mcmp
100077ac g     F .text	00000018 __fp_lock_all
10011ce8 g     F .text	0000004c alt_ic_irq_enabled
10012208 g     F .text	0000009c alt_alarm_stop
10016a30 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10013cd0 g     O .rwdata	00000028 alt_dev_null
100119a4 g     F .text	00000020 alt_dcache_flush_all
100094d0 g     F .text	00000068 __hi0bits
1000fecc g     F .text	00000080 .hidden __fixdfsi
10014f18 g       *ABS*	00000000 __ram_rwdata_end
10014ef8 g     O .rwdata	00000008 alt_dev_list
100109f8 g     F .text	00000100 write
1001342c g       *ABS*	00000000 __ram_rodata_end
100102b0 g     F .text	000000b8 fstat
1000ec70 g     F .text	000000f4 .hidden __ledf2
100098b0 g     F .text	00000140 __pow5mult
1000abc4 g     F .text	0000150c ___vfiprintf_internal_r
10016a10 g     O .bss	00000004 __nlocale_changed
1000d810 g     F .text	00000058 .hidden __umodsi3
10016b68 g       *ABS*	00000000 end
10010d28 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10012a5c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100116a4 g     F .text	0000007c alt_avalon_timer_sc_init
100100d0 g     F .text	00000064 .hidden __clzsi2
10011408 g     F .text	00000224 altera_avalon_jtag_uart_write
1000779c g     F .text	00000004 __sfp_lock_acquire
10008d04 g     F .text	000000e4 memchr
100033cc g     F .text	000022dc ___vfprintf_internal_r
10007900 g     F .text	00000310 _free_r
100082e8 g     F .text	00000010 __locale_mb_cur_max
100128a8 g     F .text	00000180 __call_exitprocs
10016a0c g     O .bss	00000004 __mlocale_changed
10014ee4 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10016a34 g     O .bss	00000004 _alt_tick_rate
100099f0 g     F .text	00000148 __lshift
10016a38 g     O .bss	00000004 _alt_nticks
10010754 g     F .text	00000104 read
10010b64 g     F .text	00000060 alt_sys_init
10012790 g     F .text	00000118 __register_exitproc
10009624 g     F .text	0000028c __multiply
10011094 g     F .text	00000068 altera_avalon_jtag_uart_close
1000d868 g     F .text	00000028 .hidden __mulsi3
1001342c g       *ABS*	00000000 __ram_rwdata_start
10012a5c g       *ABS*	00000000 __ram_rodata_start
10016a40 g     O .bss	00000028 __malloc_current_mallinfo
10009f04 g     F .text	0000014c __d2b
10010bc4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10012568 g     F .text	000000c4 alt_get_fd
1001184c g     F .text	00000158 alt_busy_sleep
1000c208 g     F .text	00000054 _close_r
10012714 g     F .text	0000007c memcmp
10010c84 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10016b68 g       *ABS*	00000000 __alt_stack_base
10010cd4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10005780 g     F .text	00000154 __swsetup_r
1000e13c g     F .text	000009d0 .hidden __divdf3
1000765c g     F .text	00000118 __sfp
1000a168 g     F .text	00000078 __copybits
100138c8 g     O .rwdata	00000408 __malloc_av_
100077a8 g     F .text	00000004 __sinit_lock_release
1000ed64 g     F .text	0000086c .hidden __muldf3
1000a898 g     F .text	00000054 __sread
10012460 g     F .text	00000108 alt_find_file
10011a00 g     F .text	000000a4 alt_dev_llist_insert
100106d0 g     F .text	00000024 __malloc_lock
100108dc g     F .text	000000b0 sbrk
100073a0 g     F .text	0000005c _fflush_r
1000c25c g     F .text	000000dc _calloc_r
10016a04 g       *ABS*	00000000 __bss_start
1000908c g     F .text	00000128 memset
100003f4 g     F .text	00002e00 main
10016a2c g     O .bss	00000004 alt_envp
10016a14 g     O .bss	00000004 __malloc_max_total_mem
10010c24 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000c8f4 g     F .text	00000018 __swbuf
1000a9cc g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000c428 g     F .text	00000014 fclose
10005afc g     F .text	00001688 _dtoa_r
100084f8 g     F .text	0000080c _malloc_r
1000ca68 g     F .text	00000030 __ascii_wctomb
10014f04 g     O .rwdata	00000004 alt_errno
100080d8 g     F .text	000000c4 _fwalk
1000d6b4 g     F .text	00000084 .hidden __divsi3
100077dc g     F .text	00000124 _malloc_trim_r
10012a5c g       *ABS*	00000000 __CTOR_END__
1000a9d4 g     F .text	000000dc strcmp
10012a5c g       *ABS*	00000000 __flash_rodata_start
10012a5c g       *ABS*	00000000 __DTOR_LIST__
1000eb0c g     F .text	00000088 .hidden __nedf2
10000308 g     F .text	00000038 UsbRead
10010b2c g     F .text	00000038 alt_irq_init
10010858 g     F .text	00000084 alt_release_fd
1000026c g     F .text	00000054 maxmin
100132f8 g     O .rodata	00000100 .hidden __clz_tab
10016a08 g     O .bss	00000004 _PathLocale
100126c8 g     F .text	00000014 atexit
1000c1a8 g     F .text	00000060 _write_r
10008318 g     F .text	00000018 setlocale
10014edc g     O .rwdata	00000004 _impure_ptr
10016a24 g     O .bss	00000004 alt_argc
10007184 g     F .text	0000021c __sflush_r
10011b04 g     F .text	00000060 _do_dtors
10008304 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10009d94 g     F .text	00000064 __ulp
100077c4 g     F .text	00000018 __fp_unlock_all
10014ef0 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10008330 g     F .text	0000000c localeconv
10011b84 g     F .text	00000050 alt_ic_isr_register
10014f18 g       *ABS*	00000000 _edata
10016b68 g       *ABS*	00000000 _end
100002c0 g     F .text	00000048 UsbWrite
1000c43c g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
100110fc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10011c5c g     F .text	0000008c alt_ic_irq_disable
1000a8f4 g     F .text	0000007c __swrite
10014ee8 g     O .rwdata	00000004 __malloc_trim_threshold
100082f8 g     F .text	0000000c __locale_msgcharset
100126dc g     F .text	00000038 exit
1000819c g     F .text	000000c4 _fwalk_reent
10009b98 g     F .text	000001fc __mdiff
1000d738 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100077a0 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10012a28 g     F .text	00000034 _exit
10011720 g     F .text	0000012c alt_alarm_start
1000833c g     F .text	000001bc __smakebuf_r
10003334 g     F .text	00000098 strlen
100120ac g     F .text	0000015c open
1000eb94 g     F .text	000000dc .hidden __gedf2
10014eec g     O .rwdata	00000004 __wctomb
1000abac g     F .text	00000018 __sprint_r
10011b64 g     F .text	00000020 alt_icache_flush_all
10014f0c g     O .rwdata	00000004 alt_priority_mask
10011bd4 g     F .text	00000088 alt_ic_irq_enable
100056a8 g     F .text	0000001c __vfprintf_internal
1000ca98 g     F .text	0000005c _wctomb_r
1000f5d0 g     F .text	000008fc .hidden __subdf3
10009538 g     F .text	000000b0 __lo0bits
10014f10 g     O .rwdata	00000008 alt_alarm_list
10011aa4 g     F .text	00000060 _do_ctors
10000340 g     F .text	000000b4 UsbSoftReset
1000c9a8 g     F .text	000000c0 wcrtomb
10010170 g     F .text	000000d8 close
100104b8 g     F .text	00000084 alt_load
1000c5c4 g     F .text	00000080 fputwc
100077a4 g     F .text	00000004 __sinit_lock_acquire
10009284 g     F .text	00000148 __multadd
1000925c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	109a9a04 	addi	r2,r2,27240
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	109a9a04 	addi	r2,r2,27240
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6d917 	ldw	r2,-25756(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6d917 	ldw	r2,-25756(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b3b614 	ori	gp,gp,52952
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	109a8114 	ori	r2,r2,27140

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18dada14 	ori	r3,r3,27496

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	00104b80 	call	100104b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00106540 	call	10010654 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <maxmin>:
*
******************************************************************************/
void UsbSoftReset();
//--------------------------------------
int maxmin(int no, int max, int min)
{
1000026c:	defffc04 	addi	sp,sp,-16
10000270:	df000315 	stw	fp,12(sp)
10000274:	df000304 	addi	fp,sp,12
10000278:	e13ffd15 	stw	r4,-12(fp)
1000027c:	e17ffe15 	stw	r5,-8(fp)
10000280:	e1bfff15 	stw	r6,-4(fp)
    if (no > max)
10000284:	e0bffd17 	ldw	r2,-12(fp)
10000288:	e0fffe17 	ldw	r3,-8(fp)
1000028c:	1880020e 	bge	r3,r2,10000298 <maxmin+0x2c>
    {
        no = max;
10000290:	e0bffe17 	ldw	r2,-8(fp)
10000294:	e0bffd15 	stw	r2,-12(fp)
    }
    if (no < min)
10000298:	e0fffd17 	ldw	r3,-12(fp)
1000029c:	e0bfff17 	ldw	r2,-4(fp)
100002a0:	1880020e 	bge	r3,r2,100002ac <maxmin+0x40>
    {
        no = min;
100002a4:	e0bfff17 	ldw	r2,-4(fp)
100002a8:	e0bffd15 	stw	r2,-12(fp)
    }

    return (no);
100002ac:	e0bffd17 	ldw	r2,-12(fp)
}
100002b0:	e037883a 	mov	sp,fp
100002b4:	df000017 	ldw	fp,0(sp)
100002b8:	dec00104 	addi	sp,sp,4
100002bc:	f800283a 	ret

100002c0 <UsbWrite>:
*
* @note     None
*
******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
100002c0:	defffd04 	addi	sp,sp,-12
100002c4:	df000215 	stw	fp,8(sp)
100002c8:	df000204 	addi	fp,sp,8
100002cc:	2007883a 	mov	r3,r4
100002d0:	2805883a 	mov	r2,r5
100002d4:	e0fffe0d 	sth	r3,-8(fp)
100002d8:	e0bfff0d 	sth	r2,-4(fp)
    //XIo_Out16(USB_ADDRESS, Address);
    IOWR(CY7C67200_BASE, HPI_ADDR, Address);
100002dc:	e0fffe0b 	ldhu	r3,-8(fp)
100002e0:	00803a04 	movi	r2,232
100002e4:	10c00035 	stwio	r3,0(r2)
    //usleep(10);

    //XIo_Out16(USB_DATA, Data);
    IOWR(CY7C67200_BASE, HPI_DATA, Data);
100002e8:	e0ffff0b 	ldhu	r3,-4(fp)
100002ec:	00803804 	movi	r2,224
100002f0:	10c00035 	stwio	r3,0(r2)
}
100002f4:	0001883a 	nop
100002f8:	e037883a 	mov	sp,fp
100002fc:	df000017 	ldw	fp,0(sp)
10000300:	dec00104 	addi	sp,sp,4
10000304:	f800283a 	ret

10000308 <UsbRead>:
*
* @note     None
*
******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10000308:	defffe04 	addi	sp,sp,-8
1000030c:	df000115 	stw	fp,4(sp)
10000310:	df000104 	addi	fp,sp,4
10000314:	2005883a 	mov	r2,r4
10000318:	e0bfff0d 	sth	r2,-4(fp)
    //XIo_Out16(HPI_ADDR, Address);
    IOWR(CY7C67200_BASE, HPI_ADDR, Address);
1000031c:	e0ffff0b 	ldhu	r3,-4(fp)
10000320:	00803a04 	movi	r2,232
10000324:	10c00035 	stwio	r3,0(r2)
    //usleep(20);
    return IORD(CY7C67200_BASE, HPI_DATA);
10000328:	00803804 	movi	r2,224
1000032c:	10800037 	ldwio	r2,0(r2)
}
10000330:	e037883a 	mov	sp,fp
10000334:	df000017 	ldw	fp,0(sp)
10000338:	dec00104 	addi	sp,sp,4
1000033c:	f800283a 	ret

10000340 <UsbSoftReset>:
*
* @note     None
*
******************************************************************************/
void UsbSoftReset()
{
10000340:	defffe04 	addi	sp,sp,-8
10000344:	dfc00115 	stw	ra,4(sp)
10000348:	df000015 	stw	fp,0(sp)
1000034c:	d839883a 	mov	fp,sp
    //XIo_Out16(USB_MAILBOX, COMM_RESET);
    IOWR(CY7C67200_BASE, HPI_MAILBOX, COMM_RESET); //COMM_JUMP2CODE
10000350:	00fe9414 	movui	r3,64080
10000354:	00803904 	movi	r2,228
10000358:	10c00035 	stwio	r3,0(r2)
    usleep(100000);
1000035c:	010000b4 	movhi	r4,2
10000360:	2121a804 	addi	r4,r4,-31072
10000364:	001098c0 	call	1001098c <usleep>
    printf("[USB INIT]:reset finished!\n");
10000368:	01040074 	movhi	r4,4097
1000036c:	210a9704 	addi	r4,r4,10844
10000370:	00033200 	call	10003320 <puts>

    usleep(500000);
10000374:	01000234 	movhi	r4,8
10000378:	21284804 	addi	r4,r4,-24288
1000037c:	001098c0 	call	1001098c <usleep>
    printf("[USB INIT]:Clear up the interrupt\r\n");
10000380:	01040074 	movhi	r4,4097
10000384:	210a9e04 	addi	r4,r4,10872
10000388:	00033200 	call	10003320 <puts>
    IORD(CY7C67200_BASE, HPI_MAILBOX);
1000038c:	00803904 	movi	r2,228
10000390:	10800037 	ldwio	r2,0(r2)
    IORD(CY7C67200_BASE, HPI_STATUS);
10000394:	00803b04 	movi	r2,236
10000398:	10800037 	ldwio	r2,0(r2)

    // Had to add the write due to a bug in BIOS where they overwrite
    // the mailbox after initialization with garbage.  The read clears
    // any pending interrupts.
    UsbRead(HPI_SIE1_MSG_ADR);
1000039c:	01005104 	movi	r4,324
100003a0:	00003080 	call	10000308 <UsbRead>
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
100003a4:	000b883a 	mov	r5,zero
100003a8:	01005104 	movi	r4,324
100003ac:	00002c00 	call	100002c0 <UsbWrite>
    UsbRead(HPI_SIE2_MSG_ADR);
100003b0:	01005204 	movi	r4,328
100003b4:	00003080 	call	10000308 <UsbRead>
    UsbWrite(HPI_SIE2_MSG_ADR, 0);
100003b8:	000b883a 	mov	r5,zero
100003bc:	01005204 	movi	r4,328
100003c0:	00002c00 	call	100002c0 <UsbWrite>

    UsbWrite(HOST1_STAT_REG, 0xFFFF);
100003c4:	017fffd4 	movui	r5,65535
100003c8:	01302414 	movui	r4,49296
100003cc:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(HOST2_STAT_REG, 0xFFFF);
100003d0:	017fffd4 	movui	r5,65535
100003d4:	01302c14 	movui	r4,49328
100003d8:	00002c00 	call	100002c0 <UsbWrite>
}
100003dc:	0001883a 	nop
100003e0:	e037883a 	mov	sp,fp
100003e4:	dfc00117 	ldw	ra,4(sp)
100003e8:	df000017 	ldw	fp,0(sp)
100003ec:	dec00204 	addi	sp,sp,8
100003f0:	f800283a 	ret

100003f4 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100003f4:	defff504 	addi	sp,sp,-44
100003f8:	dfc00a15 	stw	ra,40(sp)
100003fc:	df000915 	stw	fp,36(sp)
10000400:	df000904 	addi	fp,sp,36
    alt_u16 intStat;
    alt_u16 usb_ctl_val;
    static alt_u16 ctl_reg = 0;
    static alt_u16 no_device = 0;
    alt_u16 fs_device = 0;
10000404:	e03ffd0d 	sth	zero,-12(fp)
    signed char button_value;
    int px = 320;
10000408:	00805004 	movi	r2,320
1000040c:	e0bff915 	stw	r2,-28(fp)
    int py = 240;
10000410:	00803c04 	movi	r2,240
10000414:	e0bffa15 	stw	r2,-24(fp)
    signed char dx = 0;
10000418:	e03ffb05 	stb	zero,-20(fp)
    signed char dy = 0;
1000041c:	e03ffb45 	stb	zero,-19(fp)
    alt_u8 pbutton = 0;
10000420:	e03ffb85 	stb	zero,-18(fp)
    alt_u8 toggle = 0;
10000424:	e03ffbc5 	stb	zero,-17(fp)
    alt_u8 data_size;
    signed short read;
    signed char dx_prev1 = 0;
10000428:	e03ffc05 	stb	zero,-16(fp)
    signed char dx_prev2 = 0;
1000042c:	e03ffc45 	stb	zero,-15(fp)
    signed char dx_prev3 = 0;
10000430:	e03ffd85 	stb	zero,-10(fp)
    signed char dy_prev1 = 0;
10000434:	e03ffc85 	stb	zero,-14(fp)
    signed char dy_prev2 = 0;
10000438:	e03ffcc5 	stb	zero,-13(fp)
    signed char dy_prev3 = 0;
1000043c:	e03ffdc5 	stb	zero,-9(fp)

    //----------------------------------------SIE1 initial---------------------------------------------------//
USB_HOT_PLUG:
    UsbSoftReset();
10000440:	00003400 	call	10000340 <UsbSoftReset>
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10000444:	000b883a 	mov	r5,zero
10000448:	01005104 	movi	r4,324
1000044c:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(HOST1_STAT_REG, 0xFFFF);
10000450:	017fffd4 	movui	r5,65535
10000454:	01302414 	movui	r4,49296
10000458:	00002c00 	call	100002c0 <UsbWrite>

    /* Set HUSB_pEOT time */
    UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
1000045c:	01409604 	movi	r5,600
10000460:	01006d04 	movi	r4,436
10000464:	00002c00 	call	100002c0 <UsbWrite>

    usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN; // | SOFEOP1_TO_HPI_EN;
10000468:	00811004 	movi	r2,1088
1000046c:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000470:	e0bff80b 	ldhu	r2,-32(fp)
10000474:	100b883a 	mov	r5,r2
10000478:	01005084 	movi	r4,322
1000047c:	00002c00 	call	100002c0 <UsbWrite>

    intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN;
10000480:	00808404 	movi	r2,528
10000484:	e0bffe0d 	sth	r2,-8(fp)
    UsbWrite(HOST1_IRQ_EN_REG, intStat);
10000488:	e0bffe0b 	ldhu	r2,-8(fp)
1000048c:	100b883a 	mov	r5,r2
10000490:	01302314 	movui	r4,49292
10000494:	00002c00 	call	100002c0 <UsbWrite>

    UsbWrite(COMM_R0, 0x0000);                  //reset time
10000498:	000b883a 	mov	r5,zero
1000049c:	01007104 	movi	r4,452
100004a0:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R1, 0x0000);                  //port number
100004a4:	000b883a 	mov	r5,zero
100004a8:	01007184 	movi	r4,454
100004ac:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R2, 0x0000);                  //r1
100004b0:	000b883a 	mov	r5,zero
100004b4:	01007204 	movi	r4,456
100004b8:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R3, 0x0000);                  //r1
100004bc:	000b883a 	mov	r5,zero
100004c0:	01007284 	movi	r4,458
100004c4:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R4, 0x0000);                  //r1
100004c8:	000b883a 	mov	r5,zero
100004cc:	01007304 	movi	r4,460
100004d0:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R5, 0x0000);                  //r1
100004d4:	000b883a 	mov	r5,zero
100004d8:	01007384 	movi	r4,462
100004dc:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R6, 0x0000);                  //r1
100004e0:	000b883a 	mov	r5,zero
100004e4:	01007404 	movi	r4,464
100004e8:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R7, 0x0000);                  //r1
100004ec:	000b883a 	mov	r5,zero
100004f0:	01007484 	movi	r4,466
100004f4:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R8, 0x0000);                  //r1
100004f8:	000b883a 	mov	r5,zero
100004fc:	01007504 	movi	r4,468
10000500:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R9, 0x0000);                  //r1
10000504:	000b883a 	mov	r5,zero
10000508:	01007584 	movi	r4,470
1000050c:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R10, 0x0000);                 //r1
10000510:	000b883a 	mov	r5,zero
10000514:	01007604 	movi	r4,472
10000518:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R11, 0x0000);                 //r1
1000051c:	000b883a 	mov	r5,zero
10000520:	01007684 	movi	r4,474
10000524:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R12, 0x0000);                 //r1
10000528:	000b883a 	mov	r5,zero
1000052c:	01007704 	movi	r4,476
10000530:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R13, 0x0000);                 //r1
10000534:	000b883a 	mov	r5,zero
10000538:	01007784 	movi	r4,478
1000053c:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_INT_NUM, HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10000540:	01401c84 	movi	r5,114
10000544:	01007084 	movi	r4,450
10000548:	00002c00 	call	100002c0 <UsbWrite>
    IOWR(CY7C67200_BASE, HPI_MAILBOX, 0xCE01);
1000054c:	00f38054 	movui	r3,52737
10000550:	00803904 	movi	r2,228
10000554:	10c00035 	stwio	r3,0(r2)

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & 0xFFFF)) //read sie1 msg register
10000558:	0001883a 	nop
1000055c:	00803b04 	movi	r2,236
10000560:	10800037 	ldwio	r2,0(r2)
10000564:	10bfffcc 	andi	r2,r2,65535
10000568:	103ffc26 	beq	r2,zero,1000055c <__alt_data_end+0xf800055c>
    {
    }
    while (IORD(CY7C67200_BASE, HPI_MAILBOX) != COMM_ACK)
1000056c:	00000706 	br	1000058c <main+0x198>
    {
        printf("[ERROR]:routine mailbox data is %x\n", IORD(CY7C67200_BASE, HPI_MAILBOX));
10000570:	00803904 	movi	r2,228
10000574:	10800037 	ldwio	r2,0(r2)
10000578:	100b883a 	mov	r5,r2
1000057c:	01040074 	movhi	r4,4097
10000580:	210aa704 	addi	r4,r4,10908
10000584:	00032240 	call	10003224 <printf>
        goto USB_HOT_PLUG;
10000588:	003fad06 	br	10000440 <__alt_data_end+0xf8000440>
    IOWR(CY7C67200_BASE, HPI_MAILBOX, 0xCE01);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & 0xFFFF)) //read sie1 msg register
    {
    }
    while (IORD(CY7C67200_BASE, HPI_MAILBOX) != COMM_ACK)
1000058c:	00803904 	movi	r2,228
10000590:	10800037 	ldwio	r2,0(r2)
10000594:	1083fb58 	cmpnei	r2,r2,4077
10000598:	103ff51e 	bne	r2,zero,10000570 <__alt_data_end+0xf8000570>
        printf("[ERROR]:routine mailbox data is %x\n", IORD(CY7C67200_BASE, HPI_MAILBOX));
        goto USB_HOT_PLUG;
    }

    //usleep(30*1000);
    UsbWrite(COMM_INT_NUM, HUSB_RESET_INT); //husb reset
1000059c:	01401d04 	movi	r5,116
100005a0:	01007084 	movi	r4,450
100005a4:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R0, 0x003c);              //reset time
100005a8:	01400f04 	movi	r5,60
100005ac:	01007104 	movi	r4,452
100005b0:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R1, 0x0000);              //port number
100005b4:	000b883a 	mov	r5,zero
100005b8:	01007184 	movi	r4,454
100005bc:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R2, 0x0000);              //r1
100005c0:	000b883a 	mov	r5,zero
100005c4:	01007204 	movi	r4,456
100005c8:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R3, 0x0000);              //r1
100005cc:	000b883a 	mov	r5,zero
100005d0:	01007284 	movi	r4,458
100005d4:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R4, 0x0000);              //r1
100005d8:	000b883a 	mov	r5,zero
100005dc:	01007304 	movi	r4,460
100005e0:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R5, 0x0000);              //r1
100005e4:	000b883a 	mov	r5,zero
100005e8:	01007384 	movi	r4,462
100005ec:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R6, 0x0000);              //r1
100005f0:	000b883a 	mov	r5,zero
100005f4:	01007404 	movi	r4,464
100005f8:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R7, 0x0000);              //r1
100005fc:	000b883a 	mov	r5,zero
10000600:	01007484 	movi	r4,466
10000604:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R8, 0x0000);              //r1
10000608:	000b883a 	mov	r5,zero
1000060c:	01007504 	movi	r4,468
10000610:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R9, 0x0000);              //r1
10000614:	000b883a 	mov	r5,zero
10000618:	01007584 	movi	r4,470
1000061c:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R10, 0x0000);             //r1
10000620:	000b883a 	mov	r5,zero
10000624:	01007604 	movi	r4,472
10000628:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R11, 0x0000);             //r1
1000062c:	000b883a 	mov	r5,zero
10000630:	01007684 	movi	r4,474
10000634:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R12, 0x0000);             //r1
10000638:	000b883a 	mov	r5,zero
1000063c:	01007704 	movi	r4,476
10000640:	00002c00 	call	100002c0 <UsbWrite>
    UsbWrite(COMM_R13, 0x0000);             //r1
10000644:	000b883a 	mov	r5,zero
10000648:	01007784 	movi	r4,478
1000064c:	00002c00 	call	100002c0 <UsbWrite>

    IOWR(CY7C67200_BASE, HPI_MAILBOX, 0xCE01);
10000650:	00f38054 	movui	r3,52737
10000654:	00803904 	movi	r2,228
10000658:	10c00035 	stwio	r3,0(r2)

    while (IORD(CY7C67200_BASE, HPI_MAILBOX) != COMM_ACK)
1000065c:	0001883a 	nop
10000660:	00803904 	movi	r2,228
10000664:	10800037 	ldwio	r2,0(r2)
10000668:	1083fb58 	cmpnei	r2,r2,4077
1000066c:	10000726 	beq	r2,zero,1000068c <main+0x298>
    {
        printf("[ERROR]:routine mailbox data is %x\n", IORD(CY7C67200_BASE, HPI_MAILBOX));
10000670:	00803904 	movi	r2,228
10000674:	10800037 	ldwio	r2,0(r2)
10000678:	100b883a 	mov	r5,r2
1000067c:	01040074 	movhi	r4,4097
10000680:	210aa704 	addi	r4,r4,10908
10000684:	00032240 	call	10003224 <printf>
        goto USB_HOT_PLUG;
10000688:	003f6d06 	br	10000440 <__alt_data_end+0xf8000440>
    }

    //usleep(30*1000);
    ctl_reg = USB1_CTL_REG;
1000068c:	00b02284 	movi	r2,-16246
10000690:	d0a6cb0d 	sth	r2,-25812(gp)
    no_device = (A_DP_STAT | A_DM_STAT);
10000694:	008c0004 	movi	r2,12288
10000698:	d0a6cb8d 	sth	r2,-25810(gp)
    fs_device = A_DP_STAT;
1000069c:	00880004 	movi	r2,8192
100006a0:	e0bffd0d 	sth	r2,-12(fp)

    usb_ctl_val = UsbRead(ctl_reg);
100006a4:	d0a6cb0b 	ldhu	r2,-25812(gp)
100006a8:	10bfffcc 	andi	r2,r2,65535
100006ac:	1009883a 	mov	r4,r2
100006b0:	00003080 	call	10000308 <UsbRead>
100006b4:	e0bff80d 	sth	r2,-32(fp)

    //printf("[SIE1 INIT]:USB 1 Control Register reg is %x\n",UsbRead(0xC08A));

    //------------------------------------------------------set address -----------------------------------------------------------------
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
100006b8:	00c14004 	movi	r3,1280
100006bc:	00803a04 	movi	r2,232
100006c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100006c4:	00c14304 	movi	r3,1292
100006c8:	00803804 	movi	r2,224
100006cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100006d0:	00c00204 	movi	r3,8
100006d4:	00803804 	movi	r2,224
100006d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x00D0);
100006dc:	00c03404 	movi	r3,208
100006e0:	00803804 	movi	r2,224
100006e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
100006e8:	00c00044 	movi	r3,1
100006ec:	00803804 	movi	r2,224
100006f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
100006f4:	00c004c4 	movi	r3,19
100006f8:	00803804 	movi	r2,224
100006fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10000700:	00c14504 	movi	r3,1300
10000704:	00803804 	movi	r2,224
10000708:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0500);
1000070c:	00c14004 	movi	r3,1280
10000710:	00803804 	movi	r2,224
10000714:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0002); //device address
10000718:	00c00084 	movi	r3,2
1000071c:	00803804 	movi	r2,224
10000720:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000724:	0007883a 	mov	r3,zero
10000728:	00803804 	movi	r2,224
1000072c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000730:	0007883a 	mov	r3,zero
10000734:	00803804 	movi	r2,224
10000738:	10c00035 	stwio	r3,0(r2)

    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
1000073c:	0007883a 	mov	r3,zero
10000740:	00803804 	movi	r2,224
10000744:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
10000748:	0007883a 	mov	r3,zero
1000074c:	00803804 	movi	r2,224
10000750:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0090); //device address
10000754:	00c02404 	movi	r3,144
10000758:	00803804 	movi	r2,224
1000075c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041);
10000760:	00c01044 	movi	r3,65
10000764:	00803804 	movi	r2,224
10000768:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
1000076c:	00c004c4 	movi	r3,19
10000770:	00803804 	movi	r2,224
10000774:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000778:	0007883a 	mov	r3,zero
1000077c:	00803804 	movi	r2,224
10000780:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10000784:	01414004 	movi	r5,1280
10000788:	01006c04 	movi	r4,432
1000078c:	00002c00 	call	100002c0 <UsbWrite>

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000790:	00003806 	br	10000874 <main+0x480>
    {
        //the starting address
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10000794:	00c14004 	movi	r3,1280
10000798:	00803a04 	movi	r2,232
1000079c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100007a0:	00c14304 	movi	r3,1292
100007a4:	00803804 	movi	r2,224
100007a8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100007ac:	00c00204 	movi	r3,8
100007b0:	00803804 	movi	r2,224
100007b4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x00D0);
100007b8:	00c03404 	movi	r3,208
100007bc:	00803804 	movi	r2,224
100007c0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
100007c4:	00c00044 	movi	r3,1
100007c8:	00803804 	movi	r2,224
100007cc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
100007d0:	00c004c4 	movi	r3,19
100007d4:	00803804 	movi	r2,224
100007d8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
100007dc:	00c14504 	movi	r3,1300
100007e0:	00803804 	movi	r2,224
100007e4:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0500);
100007e8:	00c14004 	movi	r3,1280
100007ec:	00803804 	movi	r2,224
100007f0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0002); //device address
100007f4:	00c00084 	movi	r3,2
100007f8:	00803804 	movi	r2,224
100007fc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000800:	0007883a 	mov	r3,zero
10000804:	00803804 	movi	r2,224
10000808:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
1000080c:	0007883a 	mov	r3,zero
10000810:	00803804 	movi	r2,224
10000814:	10c00035 	stwio	r3,0(r2)
        //IN
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10000818:	0007883a 	mov	r3,zero
1000081c:	00803804 	movi	r2,224
10000820:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
10000824:	0007883a 	mov	r3,zero
10000828:	00803804 	movi	r2,224
1000082c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0090); //device address
10000830:	00c02404 	movi	r3,144
10000834:	00803804 	movi	r2,224
10000838:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041);
1000083c:	00c01044 	movi	r3,65
10000840:	00803804 	movi	r2,224
10000844:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000848:	00c004c4 	movi	r3,19
1000084c:	00803804 	movi	r2,224
10000850:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000854:	0007883a 	mov	r3,zero
10000858:	00803804 	movi	r2,224
1000085c:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10000860:	01414004 	movi	r5,1280
10000864:	01006c04 	movi	r4,432
10000868:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
1000086c:	0109c404 	movi	r4,10000
10000870:	001098c0 	call	1001098c <usleep>
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000874:	00803b04 	movi	r2,236
10000878:	10800037 	ldwio	r2,0(r2)
1000087c:	1080040c 	andi	r2,r2,16
10000880:	103fc426 	beq	r2,zero,10000794 <__alt_data_end+0xf8000794>
        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10000884:	01005104 	movi	r4,324
10000888:	00003080 	call	10000308 <UsbRead>
1000088c:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10000890:	000b883a 	mov	r5,zero
10000894:	01005104 	movi	r4,324
10000898:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
1000089c:	00000d06 	br	100008d4 <main+0x4e0>
    {
        if (usb_ctl_val == 0x000)
100008a0:	e0bff80b 	ldhu	r2,-32(fp)
100008a4:	10000526 	beq	r2,zero,100008bc <main+0x4c8>
        {
        }
        else
        {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
100008a8:	e0bff80b 	ldhu	r2,-32(fp)
100008ac:	100b883a 	mov	r5,r2
100008b0:	01040074 	movhi	r4,4097
100008b4:	210ab004 	addi	r4,r4,10944
100008b8:	00032240 	call	10003224 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100008bc:	01005104 	movi	r4,324
100008c0:	00003080 	call	10000308 <UsbRead>
100008c4:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
100008c8:	000b883a 	mov	r5,zero
100008cc:	01005104 	movi	r4,324
100008d0:	00002c00 	call	100002c0 <UsbWrite>
    }

    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100008d4:	e0bff80b 	ldhu	r2,-32(fp)
100008d8:	10840018 	cmpnei	r2,r2,4096
100008dc:	103ff01e 	bne	r2,zero,100008a0 <__alt_data_end+0xf80008a0>
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
        //goto USB_HOT_PLUG;
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
100008e0:	00c14184 	movi	r3,1286
100008e4:	00803a04 	movi	r2,232
100008e8:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
100008ec:	00803804 	movi	r2,224
100008f0:	10800037 	ldwio	r2,0(r2)
100008f4:	100b883a 	mov	r5,r2
100008f8:	01040074 	movhi	r4,4097
100008fc:	210ab804 	addi	r4,r4,10976
10000900:	00032240 	call	10003224 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10000904:	00c14204 	movi	r3,1288
10000908:	00803a04 	movi	r2,232
1000090c:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10000910:	00803804 	movi	r2,224
10000914:	10800037 	ldwio	r2,0(r2)
10000918:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n", usb_ctl_val);
1000091c:	e0bff80b 	ldhu	r2,-32(fp)
10000920:	100b883a 	mov	r5,r2
10000924:	01040074 	movhi	r4,4097
10000928:	210ac304 	addi	r4,r4,11020
1000092c:	00032240 	call	10003224 <printf>
    while (usb_ctl_val != 0x03)
10000930:	e0bff80b 	ldhu	r2,-32(fp)
10000934:	108000e0 	cmpeqi	r2,r2,3
10000938:	1000161e 	bne	r2,zero,10000994 <main+0x5a0>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
1000093c:	00803b04 	movi	r2,236
10000940:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10000944:	01005104 	movi	r4,324
10000948:	00003080 	call	10000308 <UsbRead>
1000094c:	10bfffcc 	andi	r2,r2,65535
10000950:	10840018 	cmpnei	r2,r2,4096
10000954:	1000081e 	bne	r2,zero,10000978 <main+0x584>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10000958:	000b883a 	mov	r5,zero
1000095c:	01005104 	movi	r4,324
10000960:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000964:	0001883a 	nop
10000968:	00803b04 	movi	r2,236
1000096c:	10800037 	ldwio	r2,0(r2)
10000970:	1080040c 	andi	r2,r2,16
10000974:	103ffc26 	beq	r2,zero,10000968 <__alt_data_end+0xf8000968>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10000978:	00c14204 	movi	r3,1288
1000097c:	00803a04 	movi	r2,232
10000980:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10000984:	00803804 	movi	r2,224
10000988:	10800037 	ldwio	r2,0(r2)
1000098c:	e0bff80d 	sth	r2,-32(fp)

        goto USB_HOT_PLUG;
10000990:	003eab06 	br	10000440 <__alt_data_end+0xf8000440>
    }

    printf("------------[ENUM PROCESS]:set address pass!---------------\n");
10000994:	01040074 	movhi	r4,4097
10000998:	210acf04 	addi	r4,r4,11068
1000099c:	00033200 	call	10003320 <puts>

    //-------------------------------get device descriptor-1 -----------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
100009a0:	00c14004 	movi	r3,1280
100009a4:	00803a04 	movi	r2,232
100009a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100009ac:	00c14304 	movi	r3,1292
100009b0:	00803804 	movi	r2,224
100009b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100009b8:	00c00204 	movi	r3,8
100009bc:	00803804 	movi	r2,224
100009c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
100009c4:	00c0b404 	movi	r3,720
100009c8:	00803804 	movi	r2,224
100009cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
100009d0:	00c00044 	movi	r3,1
100009d4:	00803804 	movi	r2,224
100009d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
100009dc:	00c004c4 	movi	r3,19
100009e0:	00803804 	movi	r2,224
100009e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
100009e8:	00c14504 	movi	r3,1300
100009ec:	00803804 	movi	r2,224
100009f0:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
100009f4:	00c1a004 	movi	r3,1664
100009f8:	00803804 	movi	r2,224
100009fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0100);
10000a00:	00c04004 	movi	r3,256
10000a04:	00803804 	movi	r2,224
10000a08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000a0c:	0007883a 	mov	r3,zero
10000a10:	00803804 	movi	r2,224
10000a14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008);
10000a18:	00c00204 	movi	r3,8
10000a1c:	00803804 	movi	r2,224
10000a20:	10c00035 	stwio	r3,0(r2)

    //data phase IN
    IOWR(CY7C67200_BASE, HPI_DATA, 0x052C); //
10000a24:	00c14b04 	movi	r3,1324
10000a28:	00803804 	movi	r2,224
10000a2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //
10000a30:	00c00204 	movi	r3,8
10000a34:	00803804 	movi	r2,224
10000a38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //
10000a3c:	00c0a404 	movi	r3,656
10000a40:	00803804 	movi	r2,224
10000a44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041);
10000a48:	00c01044 	movi	r3,65
10000a4c:	00803804 	movi	r2,224
10000a50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000a54:	00c004c4 	movi	r3,19
10000a58:	00803804 	movi	r2,224
10000a5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0520);
10000a60:	00c14804 	movi	r3,1312
10000a64:	00803804 	movi	r2,224
10000a68:	10c00035 	stwio	r3,0(r2)

    //    //status phase
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10000a6c:	0007883a 	mov	r3,zero
10000a70:	00803804 	movi	r2,224
10000a74:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
10000a78:	0007883a 	mov	r3,zero
10000a7c:	00803804 	movi	r2,224
10000a80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //device address
10000a84:	00c08404 	movi	r3,528
10000a88:	00803804 	movi	r2,224
10000a8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041);
10000a90:	00c01044 	movi	r3,65
10000a94:	00803804 	movi	r2,224
10000a98:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000a9c:	00c004c4 	movi	r3,19
10000aa0:	00803804 	movi	r2,224
10000aa4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000aa8:	0007883a 	mov	r3,zero
10000aac:	00803804 	movi	r2,224
10000ab0:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10000ab4:	01414004 	movi	r5,1280
10000ab8:	01006c04 	movi	r4,432
10000abc:	00002c00 	call	100002c0 <UsbWrite>

    //usleep(10*1000);
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000ac0:	00004a06 	br	10000bec <main+0x7f8>
    {
        //the starting address
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10000ac4:	00c14004 	movi	r3,1280
10000ac8:	00803a04 	movi	r2,232
10000acc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10000ad0:	00c14304 	movi	r3,1292
10000ad4:	00803804 	movi	r2,224
10000ad8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10000adc:	00c00204 	movi	r3,8
10000ae0:	00803804 	movi	r2,224
10000ae4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
10000ae8:	00c0b404 	movi	r3,720
10000aec:	00803804 	movi	r2,224
10000af0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10000af4:	00c00044 	movi	r3,1
10000af8:	00803804 	movi	r2,224
10000afc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000b00:	00c004c4 	movi	r3,19
10000b04:	00803804 	movi	r2,224
10000b08:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10000b0c:	00c14504 	movi	r3,1300
10000b10:	00803804 	movi	r2,224
10000b14:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0680);
10000b18:	00c1a004 	movi	r3,1664
10000b1c:	00803804 	movi	r2,224
10000b20:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0100);
10000b24:	00c04004 	movi	r3,256
10000b28:	00803804 	movi	r2,224
10000b2c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000b30:	0007883a 	mov	r3,zero
10000b34:	00803804 	movi	r2,224
10000b38:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008);
10000b3c:	00c00204 	movi	r3,8
10000b40:	00803804 	movi	r2,224
10000b44:	10c00035 	stwio	r3,0(r2)

        //data phase IN
        IOWR(CY7C67200_BASE, HPI_DATA, 0x052C); //
10000b48:	00c14b04 	movi	r3,1324
10000b4c:	00803804 	movi	r2,224
10000b50:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //
10000b54:	00c00204 	movi	r3,8
10000b58:	00803804 	movi	r2,224
10000b5c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //
10000b60:	00c0a404 	movi	r3,656
10000b64:	00803804 	movi	r2,224
10000b68:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041);
10000b6c:	00c01044 	movi	r3,65
10000b70:	00803804 	movi	r2,224
10000b74:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000b78:	00c004c4 	movi	r3,19
10000b7c:	00803804 	movi	r2,224
10000b80:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0520);
10000b84:	00c14804 	movi	r3,1312
10000b88:	00803804 	movi	r2,224
10000b8c:	10c00035 	stwio	r3,0(r2)

        //    //status phase
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10000b90:	0007883a 	mov	r3,zero
10000b94:	00803804 	movi	r2,224
10000b98:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
10000b9c:	0007883a 	mov	r3,zero
10000ba0:	00803804 	movi	r2,224
10000ba4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //device address
10000ba8:	00c08404 	movi	r3,528
10000bac:	00803804 	movi	r2,224
10000bb0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041);
10000bb4:	00c01044 	movi	r3,65
10000bb8:	00803804 	movi	r2,224
10000bbc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000bc0:	00c004c4 	movi	r3,19
10000bc4:	00803804 	movi	r2,224
10000bc8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10000bcc:	0007883a 	mov	r3,zero
10000bd0:	00803804 	movi	r2,224
10000bd4:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10000bd8:	01414004 	movi	r5,1280
10000bdc:	01006c04 	movi	r4,432
10000be0:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
10000be4:	0109c404 	movi	r4,10000
10000be8:	001098c0 	call	1001098c <usleep>
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr

    //usleep(10*1000);
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000bec:	00803b04 	movi	r2,236
10000bf0:	10800037 	ldwio	r2,0(r2)
10000bf4:	1080040c 	andi	r2,r2,16
10000bf8:	103fb226 	beq	r2,zero,10000ac4 <__alt_data_end+0xf8000ac4>
        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10000bfc:	01005104 	movi	r4,324
10000c00:	00003080 	call	10000308 <UsbRead>
10000c04:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10000c08:	000b883a 	mov	r5,zero
10000c0c:	01005104 	movi	r4,324
10000c10:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10000c14:	00000d06 	br	10000c4c <main+0x858>
    {
        if (usb_ctl_val == 0x000)
10000c18:	e0bff80b 	ldhu	r2,-32(fp)
10000c1c:	10000526 	beq	r2,zero,10000c34 <main+0x840>
        {
        }
        else
        {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
10000c20:	e0bff80b 	ldhu	r2,-32(fp)
10000c24:	100b883a 	mov	r5,r2
10000c28:	01040074 	movhi	r4,4097
10000c2c:	210ab004 	addi	r4,r4,10944
10000c30:	00032240 	call	10003224 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10000c34:	01005104 	movi	r4,324
10000c38:	00003080 	call	10000308 <UsbRead>
10000c3c:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
10000c40:	000b883a 	mov	r5,zero
10000c44:	01005104 	movi	r4,324
10000c48:	00002c00 	call	100002c0 <UsbWrite>
    }

    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10000c4c:	e0bff80b 	ldhu	r2,-32(fp)
10000c50:	10840018 	cmpnei	r2,r2,4096
10000c54:	103ff01e 	bne	r2,zero,10000c18 <__alt_data_end+0xf8000c18>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
10000c58:	00c14184 	movi	r3,1286
10000c5c:	00803a04 	movi	r2,232
10000c60:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
10000c64:	00803804 	movi	r2,224
10000c68:	10800037 	ldwio	r2,0(r2)
10000c6c:	100b883a 	mov	r5,r2
10000c70:	01040074 	movhi	r4,4097
10000c74:	210ade04 	addi	r4,r4,11128
10000c78:	00032240 	call	10003224 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10000c7c:	00c14204 	movi	r3,1288
10000c80:	00803a04 	movi	r2,232
10000c84:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10000c88:	00803804 	movi	r2,224
10000c8c:	10800037 	ldwio	r2,0(r2)
10000c90:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
10000c94:	e0bff80b 	ldhu	r2,-32(fp)
10000c98:	100b883a 	mov	r5,r2
10000c9c:	01040074 	movhi	r4,4097
10000ca0:	210ae904 	addi	r4,r4,11172
10000ca4:	00032240 	call	10003224 <printf>
    while (usb_ctl_val != 0x03)
10000ca8:	00001506 	br	10000d00 <main+0x90c>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
10000cac:	00803b04 	movi	r2,236
10000cb0:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10000cb4:	01005104 	movi	r4,324
10000cb8:	00003080 	call	10000308 <UsbRead>
10000cbc:	10bfffcc 	andi	r2,r2,65535
10000cc0:	10840018 	cmpnei	r2,r2,4096
10000cc4:	1000081e 	bne	r2,zero,10000ce8 <main+0x8f4>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10000cc8:	000b883a 	mov	r5,zero
10000ccc:	01005104 	movi	r4,324
10000cd0:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000cd4:	0001883a 	nop
10000cd8:	00803b04 	movi	r2,236
10000cdc:	10800037 	ldwio	r2,0(r2)
10000ce0:	1080040c 	andi	r2,r2,16
10000ce4:	103ffc26 	beq	r2,zero,10000cd8 <__alt_data_end+0xf8000cd8>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10000ce8:	00c14204 	movi	r3,1288
10000cec:	00803a04 	movi	r2,232
10000cf0:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10000cf4:	00803804 	movi	r2,224
10000cf8:	10800037 	ldwio	r2,0(r2)
10000cfc:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
10000d00:	e0bff80b 	ldhu	r2,-32(fp)
10000d04:	108000d8 	cmpnei	r2,r2,3
10000d08:	103fe81e 	bne	r2,zero,10000cac <__alt_data_end+0xf8000cac>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("---------------[ENUM PROCESS]:get device descriptor-1 pass!-----------------\n");
10000d0c:	01040074 	movhi	r4,4097
10000d10:	210af504 	addi	r4,r4,11220
10000d14:	00033200 	call	10003320 <puts>

    //--------------------------------get device descriptor-1---------------------------------------------//
    //get device descriptor
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10000d18:	00c14004 	movi	r3,1280
10000d1c:	00803a04 	movi	r2,232
10000d20:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10000d24:	00c14304 	movi	r3,1292
10000d28:	00803804 	movi	r2,224
10000d2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10000d30:	00c00204 	movi	r3,8
10000d34:	00803804 	movi	r2,224
10000d38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
10000d3c:	00c0b404 	movi	r3,720
10000d40:	00803804 	movi	r2,224
10000d44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10000d48:	00c00044 	movi	r3,1
10000d4c:	00803804 	movi	r2,224
10000d50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000d54:	00c004c4 	movi	r3,19
10000d58:	00803804 	movi	r2,224
10000d5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10000d60:	00c14504 	movi	r3,1300
10000d64:	00803804 	movi	r2,224
10000d68:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
10000d6c:	00c1a004 	movi	r3,1664
10000d70:	00803804 	movi	r2,224
10000d74:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0100); //e
10000d78:	00c04004 	movi	r3,256
10000d7c:	00803804 	movi	r2,224
10000d80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10000d84:	0007883a 	mov	r3,zero
10000d88:	00803804 	movi	r2,224
10000d8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0012); //2
10000d90:	00c00484 	movi	r3,18
10000d94:	00803804 	movi	r2,224
10000d98:	10c00035 	stwio	r3,0(r2)

    //data phase IN-1
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //514
10000d9c:	00c15104 	movi	r3,1348
10000da0:	00803804 	movi	r2,224
10000da4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
10000da8:	00c00204 	movi	r3,8
10000dac:	00803804 	movi	r2,224
10000db0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10000db4:	00c0a404 	movi	r3,656
10000db8:	00803804 	movi	r2,224
10000dbc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10000dc0:	00c01044 	movi	r3,65
10000dc4:	00803804 	movi	r2,224
10000dc8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10000dcc:	00c004c4 	movi	r3,19
10000dd0:	00803804 	movi	r2,224
10000dd4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
10000dd8:	00c14804 	movi	r3,1312
10000ddc:	00803804 	movi	r2,224
10000de0:	10c00035 	stwio	r3,0(r2)

    //data phase IN-2
    IOWR(CY7C67200_BASE, HPI_DATA, 0x054c); //520
10000de4:	00c15304 	movi	r3,1356
10000de8:	00803804 	movi	r2,224
10000dec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10000df0:	00c00204 	movi	r3,8
10000df4:	00803804 	movi	r2,224
10000df8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10000dfc:	00c0a404 	movi	r3,656
10000e00:	00803804 	movi	r2,224
10000e04:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
10000e08:	00c00044 	movi	r3,1
10000e0c:	00803804 	movi	r2,224
10000e10:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10000e14:	00c004c4 	movi	r3,19
10000e18:	00803804 	movi	r2,224
10000e1c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
10000e20:	00c14b04 	movi	r3,1324
10000e24:	00803804 	movi	r2,224
10000e28:	10c00035 	stwio	r3,0(r2)

    //data phase IN-3
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0554); //c
10000e2c:	00c15504 	movi	r3,1364
10000e30:	00803804 	movi	r2,224
10000e34:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0002); //e
10000e38:	00c00084 	movi	r3,2
10000e3c:	00803804 	movi	r2,224
10000e40:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //530
10000e44:	00c0a404 	movi	r3,656
10000e48:	00803804 	movi	r2,224
10000e4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
10000e50:	00c01044 	movi	r3,65
10000e54:	00803804 	movi	r2,224
10000e58:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10000e5c:	00c004c4 	movi	r3,19
10000e60:	00803804 	movi	r2,224
10000e64:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0538); //6
10000e68:	00c14e04 	movi	r3,1336
10000e6c:	00803804 	movi	r2,224
10000e70:	10c00035 	stwio	r3,0(r2)

    //status phase
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //538
10000e74:	0007883a 	mov	r3,zero
10000e78:	00803804 	movi	r2,224
10000e7c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //a
10000e80:	0007883a 	mov	r3,zero
10000e84:	00803804 	movi	r2,224
10000e88:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //c
10000e8c:	00c08404 	movi	r3,528
10000e90:	00803804 	movi	r2,224
10000e94:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //e
10000e98:	00c01044 	movi	r3,65
10000e9c:	00803804 	movi	r2,224
10000ea0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //540
10000ea4:	00c004c4 	movi	r3,19
10000ea8:	00803804 	movi	r2,224
10000eac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //2
10000eb0:	0007883a 	mov	r3,zero
10000eb4:	00803804 	movi	r2,224
10000eb8:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10000ebc:	01414004 	movi	r5,1280
10000ec0:	01006c04 	movi	r4,432
10000ec4:	00002c00 	call	100002c0 <UsbWrite>

    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10000ec8:	00006e06 	br	10001084 <main+0xc90>
    {
        //resend the get device descriptor
        //get device descriptor

        //the starting address
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10000ecc:	00c14004 	movi	r3,1280
10000ed0:	00803a04 	movi	r2,232
10000ed4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10000ed8:	00c14304 	movi	r3,1292
10000edc:	00803804 	movi	r2,224
10000ee0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10000ee4:	00c00204 	movi	r3,8
10000ee8:	00803804 	movi	r2,224
10000eec:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
10000ef0:	00c0b404 	movi	r3,720
10000ef4:	00803804 	movi	r2,224
10000ef8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10000efc:	00c00044 	movi	r3,1
10000f00:	00803804 	movi	r2,224
10000f04:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10000f08:	00c004c4 	movi	r3,19
10000f0c:	00803804 	movi	r2,224
10000f10:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10000f14:	00c14504 	movi	r3,1300
10000f18:	00803804 	movi	r2,224
10000f1c:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
10000f20:	00c1a004 	movi	r3,1664
10000f24:	00803804 	movi	r2,224
10000f28:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0100); //e
10000f2c:	00c04004 	movi	r3,256
10000f30:	00803804 	movi	r2,224
10000f34:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10000f38:	0007883a 	mov	r3,zero
10000f3c:	00803804 	movi	r2,224
10000f40:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0012); //2
10000f44:	00c00484 	movi	r3,18
10000f48:	00803804 	movi	r2,224
10000f4c:	10c00035 	stwio	r3,0(r2)

        //data phase IN-1
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //514
10000f50:	00c15104 	movi	r3,1348
10000f54:	00803804 	movi	r2,224
10000f58:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
10000f5c:	00c00204 	movi	r3,8
10000f60:	00803804 	movi	r2,224
10000f64:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10000f68:	00c0a404 	movi	r3,656
10000f6c:	00803804 	movi	r2,224
10000f70:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10000f74:	00c01044 	movi	r3,65
10000f78:	00803804 	movi	r2,224
10000f7c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10000f80:	00c004c4 	movi	r3,19
10000f84:	00803804 	movi	r2,224
10000f88:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
10000f8c:	00c14804 	movi	r3,1312
10000f90:	00803804 	movi	r2,224
10000f94:	10c00035 	stwio	r3,0(r2)

        //data phase IN-2
        IOWR(CY7C67200_BASE, HPI_DATA, 0x054c); //520
10000f98:	00c15304 	movi	r3,1356
10000f9c:	00803804 	movi	r2,224
10000fa0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10000fa4:	00c00204 	movi	r3,8
10000fa8:	00803804 	movi	r2,224
10000fac:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10000fb0:	00c0a404 	movi	r3,656
10000fb4:	00803804 	movi	r2,224
10000fb8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6
10000fbc:	00c00044 	movi	r3,1
10000fc0:	00803804 	movi	r2,224
10000fc4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10000fc8:	00c004c4 	movi	r3,19
10000fcc:	00803804 	movi	r2,224
10000fd0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
10000fd4:	00c14b04 	movi	r3,1324
10000fd8:	00803804 	movi	r2,224
10000fdc:	10c00035 	stwio	r3,0(r2)

        //data phase IN-3
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0554); //c
10000fe0:	00c15504 	movi	r3,1364
10000fe4:	00803804 	movi	r2,224
10000fe8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0002); //e
10000fec:	00c00084 	movi	r3,2
10000ff0:	00803804 	movi	r2,224
10000ff4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //530
10000ff8:	00c0a404 	movi	r3,656
10000ffc:	00803804 	movi	r2,224
10001000:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
10001004:	00c01044 	movi	r3,65
10001008:	00803804 	movi	r2,224
1000100c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10001010:	00c004c4 	movi	r3,19
10001014:	00803804 	movi	r2,224
10001018:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0538); //6
1000101c:	00c14e04 	movi	r3,1336
10001020:	00803804 	movi	r2,224
10001024:	10c00035 	stwio	r3,0(r2)

        //status phase
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //538
10001028:	0007883a 	mov	r3,zero
1000102c:	00803804 	movi	r2,224
10001030:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //a
10001034:	0007883a 	mov	r3,zero
10001038:	00803804 	movi	r2,224
1000103c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //c
10001040:	00c08404 	movi	r3,528
10001044:	00803804 	movi	r2,224
10001048:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //e
1000104c:	00c01044 	movi	r3,65
10001050:	00803804 	movi	r2,224
10001054:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //540
10001058:	00c004c4 	movi	r3,19
1000105c:	00803804 	movi	r2,224
10001060:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //2
10001064:	0007883a 	mov	r3,zero
10001068:	00803804 	movi	r2,224
1000106c:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001070:	01414004 	movi	r5,1280
10001074:	01006c04 	movi	r4,432
10001078:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
1000107c:	0109c404 	movi	r4,10000
10001080:	001098c0 	call	1001098c <usleep>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr

    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001084:	00803b04 	movi	r2,236
10001088:	10800037 	ldwio	r2,0(r2)
1000108c:	1080040c 	andi	r2,r2,16
10001090:	103f8e26 	beq	r2,zero,10000ecc <__alt_data_end+0xf8000ecc>
        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10001094:	01005104 	movi	r4,324
10001098:	00003080 	call	10000308 <UsbRead>
1000109c:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
100010a0:	000b883a 	mov	r5,zero
100010a4:	01005104 	movi	r4,324
100010a8:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100010ac:	00000d06 	br	100010e4 <main+0xcf0>
    {
        if (usb_ctl_val == 0x000)
100010b0:	e0bff80b 	ldhu	r2,-32(fp)
100010b4:	10000526 	beq	r2,zero,100010cc <main+0xcd8>
        {
        }
        else
        {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
100010b8:	e0bff80b 	ldhu	r2,-32(fp)
100010bc:	100b883a 	mov	r5,r2
100010c0:	01040074 	movhi	r4,4097
100010c4:	210ab004 	addi	r4,r4,10944
100010c8:	00032240 	call	10003224 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100010cc:	01005104 	movi	r4,324
100010d0:	00003080 	call	10000308 <UsbRead>
100010d4:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
100010d8:	000b883a 	mov	r5,zero
100010dc:	01005104 	movi	r4,324
100010e0:	00002c00 	call	100002c0 <UsbWrite>
    }

    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100010e4:	e0bff80b 	ldhu	r2,-32(fp)
100010e8:	10840018 	cmpnei	r2,r2,4096
100010ec:	103ff01e 	bne	r2,zero,100010b0 <__alt_data_end+0xf80010b0>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
100010f0:	00c14184 	movi	r3,1286
100010f4:	00803a04 	movi	r2,232
100010f8:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
100010fc:	00803804 	movi	r2,224
10001100:	10800037 	ldwio	r2,0(r2)
10001104:	100b883a 	mov	r5,r2
10001108:	01040074 	movhi	r4,4097
1000110c:	210ade04 	addi	r4,r4,11128
10001110:	00032240 	call	10003224 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001114:	00c14204 	movi	r3,1288
10001118:	00803a04 	movi	r2,232
1000111c:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001120:	00803804 	movi	r2,224
10001124:	10800037 	ldwio	r2,0(r2)
10001128:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
1000112c:	e0bff80b 	ldhu	r2,-32(fp)
10001130:	100b883a 	mov	r5,r2
10001134:	01040074 	movhi	r4,4097
10001138:	210ae904 	addi	r4,r4,11172
1000113c:	00032240 	call	10003224 <printf>
    while (usb_ctl_val != 0x03)
10001140:	00001506 	br	10001198 <main+0xda4>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
10001144:	00803b04 	movi	r2,236
10001148:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
1000114c:	01005104 	movi	r4,324
10001150:	00003080 	call	10000308 <UsbRead>
10001154:	10bfffcc 	andi	r2,r2,65535
10001158:	10840018 	cmpnei	r2,r2,4096
1000115c:	1000081e 	bne	r2,zero,10001180 <main+0xd8c>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001160:	000b883a 	mov	r5,zero
10001164:	01005104 	movi	r4,324
10001168:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
1000116c:	0001883a 	nop
10001170:	00803b04 	movi	r2,236
10001174:	10800037 	ldwio	r2,0(r2)
10001178:	1080040c 	andi	r2,r2,16
1000117c:	103ffc26 	beq	r2,zero,10001170 <__alt_data_end+0xf8001170>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001180:	00c14204 	movi	r3,1288
10001184:	00803a04 	movi	r2,232
10001188:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
1000118c:	00803804 	movi	r2,224
10001190:	10800037 	ldwio	r2,0(r2)
10001194:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
10001198:	e0bff80b 	ldhu	r2,-32(fp)
1000119c:	108000d8 	cmpnei	r2,r2,3
100011a0:	103fe81e 	bne	r2,zero,10001144 <__alt_data_end+0xf8001144>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("------------[ENUM PROCESS]:get device descriptor-2 pass!--------------\n");
100011a4:	01040074 	movhi	r4,4097
100011a8:	210b0904 	addi	r4,r4,11300
100011ac:	00033200 	call	10003320 <puts>
    //    printf("\n[ENUM PROCESS]:TD rec data8 is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

    //-----------------------------------get configuration descriptor -1 ----------------------------------//
    //usleep(1000);
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
100011b0:	00c14004 	movi	r3,1280
100011b4:	00803a04 	movi	r2,232
100011b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100011bc:	00c14304 	movi	r3,1292
100011c0:	00803804 	movi	r2,224
100011c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100011c8:	00c00204 	movi	r3,8
100011cc:	00803804 	movi	r2,224
100011d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
100011d4:	00c0b404 	movi	r3,720
100011d8:	00803804 	movi	r2,224
100011dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
100011e0:	00c00044 	movi	r3,1
100011e4:	00803804 	movi	r2,224
100011e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
100011ec:	00c004c4 	movi	r3,19
100011f0:	00803804 	movi	r2,224
100011f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
100011f8:	00c14504 	movi	r3,1300
100011fc:	00803804 	movi	r2,224
10001200:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
10001204:	00c1a004 	movi	r3,1664
10001208:	00803804 	movi	r2,224
1000120c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0200); //e
10001210:	00c08004 	movi	r3,512
10001214:	00803804 	movi	r2,224
10001218:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
1000121c:	0007883a 	mov	r3,zero
10001220:	00803804 	movi	r2,224
10001224:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0009); //2
10001228:	00c00244 	movi	r3,9
1000122c:	00803804 	movi	r2,224
10001230:	10c00035 	stwio	r3,0(r2)

    //data phase IN-1
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //514
10001234:	00c15104 	movi	r3,1348
10001238:	00803804 	movi	r2,224
1000123c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
10001240:	00c00204 	movi	r3,8
10001244:	00803804 	movi	r2,224
10001248:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
1000124c:	00c0a404 	movi	r3,656
10001250:	00803804 	movi	r2,224
10001254:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10001258:	00c01044 	movi	r3,65
1000125c:	00803804 	movi	r2,224
10001260:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10001264:	00c004c4 	movi	r3,19
10001268:	00803804 	movi	r2,224
1000126c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
10001270:	00c14804 	movi	r3,1312
10001274:	00803804 	movi	r2,224
10001278:	10c00035 	stwio	r3,0(r2)

    //data phase IN-2
    IOWR(CY7C67200_BASE, HPI_DATA, 0x054c); //520
1000127c:	00c15304 	movi	r3,1356
10001280:	00803804 	movi	r2,224
10001284:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //2
10001288:	00c00044 	movi	r3,1
1000128c:	00803804 	movi	r2,224
10001290:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10001294:	00c0a404 	movi	r3,656
10001298:	00803804 	movi	r2,224
1000129c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
100012a0:	00c00044 	movi	r3,1
100012a4:	00803804 	movi	r2,224
100012a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
100012ac:	00c004c4 	movi	r3,19
100012b0:	00803804 	movi	r2,224
100012b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
100012b8:	00c14b04 	movi	r3,1324
100012bc:	00803804 	movi	r2,224
100012c0:	10c00035 	stwio	r3,0(r2)

    //status phase
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //52c
100012c4:	0007883a 	mov	r3,zero
100012c8:	00803804 	movi	r2,224
100012cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //e
100012d0:	0007883a 	mov	r3,zero
100012d4:	00803804 	movi	r2,224
100012d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //530
100012dc:	00c08404 	movi	r3,528
100012e0:	00803804 	movi	r2,224
100012e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
100012e8:	00c01044 	movi	r3,65
100012ec:	00803804 	movi	r2,224
100012f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
100012f4:	00c004c4 	movi	r3,19
100012f8:	00803804 	movi	r2,224
100012fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6
10001300:	0007883a 	mov	r3,zero
10001304:	00803804 	movi	r2,224
10001308:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
1000130c:	01414004 	movi	r5,1280
10001310:	01006c04 	movi	r4,432
10001314:	00002c00 	call	100002c0 <UsbWrite>

    //usleep(10*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001318:	00005c06 	br	1000148c <main+0x1098>
    {
        //resend the get device descriptor
        //get device descriptor

        //the starting address
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
1000131c:	00c14004 	movi	r3,1280
10001320:	00803a04 	movi	r2,232
10001324:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10001328:	00c14304 	movi	r3,1292
1000132c:	00803804 	movi	r2,224
10001330:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10001334:	00c00204 	movi	r3,8
10001338:	00803804 	movi	r2,224
1000133c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
10001340:	00c0b404 	movi	r3,720
10001344:	00803804 	movi	r2,224
10001348:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
1000134c:	00c00044 	movi	r3,1
10001350:	00803804 	movi	r2,224
10001354:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001358:	00c004c4 	movi	r3,19
1000135c:	00803804 	movi	r2,224
10001360:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001364:	00c14504 	movi	r3,1300
10001368:	00803804 	movi	r2,224
1000136c:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
10001370:	00c1a004 	movi	r3,1664
10001374:	00803804 	movi	r2,224
10001378:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0200); //e
1000137c:	00c08004 	movi	r3,512
10001380:	00803804 	movi	r2,224
10001384:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10001388:	0007883a 	mov	r3,zero
1000138c:	00803804 	movi	r2,224
10001390:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0009); //2
10001394:	00c00244 	movi	r3,9
10001398:	00803804 	movi	r2,224
1000139c:	10c00035 	stwio	r3,0(r2)

        //data phase IN-1
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //514
100013a0:	00c15104 	movi	r3,1348
100013a4:	00803804 	movi	r2,224
100013a8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
100013ac:	00c00204 	movi	r3,8
100013b0:	00803804 	movi	r2,224
100013b4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
100013b8:	00c0a404 	movi	r3,656
100013bc:	00803804 	movi	r2,224
100013c0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
100013c4:	00c01044 	movi	r3,65
100013c8:	00803804 	movi	r2,224
100013cc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
100013d0:	00c004c4 	movi	r3,19
100013d4:	00803804 	movi	r2,224
100013d8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
100013dc:	00c14804 	movi	r3,1312
100013e0:	00803804 	movi	r2,224
100013e4:	10c00035 	stwio	r3,0(r2)

        //data phase IN-2
        IOWR(CY7C67200_BASE, HPI_DATA, 0x054c); //520
100013e8:	00c15304 	movi	r3,1356
100013ec:	00803804 	movi	r2,224
100013f0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //2
100013f4:	00c00044 	movi	r3,1
100013f8:	00803804 	movi	r2,224
100013fc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10001400:	00c0a404 	movi	r3,656
10001404:	00803804 	movi	r2,224
10001408:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
1000140c:	00c00044 	movi	r3,1
10001410:	00803804 	movi	r2,224
10001414:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10001418:	00c004c4 	movi	r3,19
1000141c:	00803804 	movi	r2,224
10001420:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
10001424:	00c14b04 	movi	r3,1324
10001428:	00803804 	movi	r2,224
1000142c:	10c00035 	stwio	r3,0(r2)

        //status phase
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //52c
10001430:	0007883a 	mov	r3,zero
10001434:	00803804 	movi	r2,224
10001438:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //e
1000143c:	0007883a 	mov	r3,zero
10001440:	00803804 	movi	r2,224
10001444:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //530
10001448:	00c08404 	movi	r3,528
1000144c:	00803804 	movi	r2,224
10001450:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
10001454:	00c01044 	movi	r3,65
10001458:	00803804 	movi	r2,224
1000145c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10001460:	00c004c4 	movi	r3,19
10001464:	00803804 	movi	r2,224
10001468:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6
1000146c:	0007883a 	mov	r3,zero
10001470:	00803804 	movi	r2,224
10001474:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001478:	01414004 	movi	r5,1280
1000147c:	01006c04 	movi	r4,432
10001480:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
10001484:	0109c404 	movi	r4,10000
10001488:	001098c0 	call	1001098c <usleep>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr

    //usleep(10*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
1000148c:	00803b04 	movi	r2,236
10001490:	10800037 	ldwio	r2,0(r2)
10001494:	1080040c 	andi	r2,r2,16
10001498:	103fa026 	beq	r2,zero,1000131c <__alt_data_end+0xf800131c>

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
1000149c:	01005104 	movi	r4,324
100014a0:	00003080 	call	10000308 <UsbRead>
100014a4:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
100014a8:	000b883a 	mov	r5,zero
100014ac:	01005104 	movi	r4,324
100014b0:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100014b4:	00000d06 	br	100014ec <main+0x10f8>
    {
        if (usb_ctl_val == 0x000)
100014b8:	e0bff80b 	ldhu	r2,-32(fp)
100014bc:	10000526 	beq	r2,zero,100014d4 <main+0x10e0>
        {
        }
        else
        {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
100014c0:	e0bff80b 	ldhu	r2,-32(fp)
100014c4:	100b883a 	mov	r5,r2
100014c8:	01040074 	movhi	r4,4097
100014cc:	210ab004 	addi	r4,r4,10944
100014d0:	00032240 	call	10003224 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100014d4:	01005104 	movi	r4,324
100014d8:	00003080 	call	10000308 <UsbRead>
100014dc:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
100014e0:	000b883a 	mov	r5,zero
100014e4:	01005104 	movi	r4,324
100014e8:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100014ec:	e0bff80b 	ldhu	r2,-32(fp)
100014f0:	10840018 	cmpnei	r2,r2,4096
100014f4:	103ff01e 	bne	r2,zero,100014b8 <__alt_data_end+0xf80014b8>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
100014f8:	00c14184 	movi	r3,1286
100014fc:	00803a04 	movi	r2,232
10001500:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
10001504:	00803804 	movi	r2,224
10001508:	10800037 	ldwio	r2,0(r2)
1000150c:	100b883a 	mov	r5,r2
10001510:	01040074 	movhi	r4,4097
10001514:	210b1b04 	addi	r4,r4,11372
10001518:	00032240 	call	10003224 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
1000151c:	00c14204 	movi	r3,1288
10001520:	00803a04 	movi	r2,232
10001524:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001528:	00803804 	movi	r2,224
1000152c:	10800037 	ldwio	r2,0(r2)
10001530:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n", usb_ctl_val);
10001534:	e0bff80b 	ldhu	r2,-32(fp)
10001538:	100b883a 	mov	r5,r2
1000153c:	01040074 	movhi	r4,4097
10001540:	210b2604 	addi	r4,r4,11416
10001544:	00032240 	call	10003224 <printf>
    while (usb_ctl_val != 0x03)
10001548:	00001506 	br	100015a0 <main+0x11ac>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
1000154c:	00803b04 	movi	r2,236
10001550:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10001554:	01005104 	movi	r4,324
10001558:	00003080 	call	10000308 <UsbRead>
1000155c:	10bfffcc 	andi	r2,r2,65535
10001560:	10840018 	cmpnei	r2,r2,4096
10001564:	1000081e 	bne	r2,zero,10001588 <main+0x1194>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001568:	000b883a 	mov	r5,zero
1000156c:	01005104 	movi	r4,324
10001570:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001574:	0001883a 	nop
10001578:	00803b04 	movi	r2,236
1000157c:	10800037 	ldwio	r2,0(r2)
10001580:	1080040c 	andi	r2,r2,16
10001584:	103ffc26 	beq	r2,zero,10001578 <__alt_data_end+0xf8001578>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001588:	00c14204 	movi	r3,1288
1000158c:	00803a04 	movi	r2,232
10001590:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001594:	00803804 	movi	r2,224
10001598:	10800037 	ldwio	r2,0(r2)
1000159c:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
100015a0:	e0bff80b 	ldhu	r2,-32(fp)
100015a4:	108000d8 	cmpnei	r2,r2,3
100015a8:	103fe81e 	bne	r2,zero,1000154c <__alt_data_end+0xf800154c>
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }
    printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
100015ac:	01040074 	movhi	r4,4097
100015b0:	210b3204 	addi	r4,r4,11464
100015b4:	00033200 	call	10003320 <puts>

    //-----------------------------------get configuration descriptor-2------------------------------------//
    //get device descriptor
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
100015b8:	00c14004 	movi	r3,1280
100015bc:	00803a04 	movi	r2,232
100015c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100015c4:	00c14304 	movi	r3,1292
100015c8:	00803804 	movi	r2,224
100015cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100015d0:	00c00204 	movi	r3,8
100015d4:	00803804 	movi	r2,224
100015d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
100015dc:	00c0b404 	movi	r3,720
100015e0:	00803804 	movi	r2,224
100015e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
100015e8:	00c00044 	movi	r3,1
100015ec:	00803804 	movi	r2,224
100015f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
100015f4:	00c004c4 	movi	r3,19
100015f8:	00803804 	movi	r2,224
100015fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001600:	00c14504 	movi	r3,1300
10001604:	00803804 	movi	r2,224
10001608:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
1000160c:	00c1a004 	movi	r3,1664
10001610:	00803804 	movi	r2,224
10001614:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0200); //e //config
10001618:	00c08004 	movi	r3,512
1000161c:	00803804 	movi	r2,224
10001620:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10001624:	0007883a 	mov	r3,zero
10001628:	00803804 	movi	r2,224
1000162c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x00FF); //2
10001630:	00c03fc4 	movi	r3,255
10001634:	00803804 	movi	r2,224
10001638:	10c00035 	stwio	r3,0(r2)

    //data phase IN-1
    IOWR(CY7C67200_BASE, HPI_DATA, 0x055c); //514
1000163c:	00c15704 	movi	r3,1372
10001640:	00803804 	movi	r2,224
10001644:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
10001648:	00c00204 	movi	r3,8
1000164c:	00803804 	movi	r2,224
10001650:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10001654:	00c0a404 	movi	r3,656
10001658:	00803804 	movi	r2,224
1000165c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10001660:	00c01044 	movi	r3,65
10001664:	00803804 	movi	r2,224
10001668:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
1000166c:	00c004c4 	movi	r3,19
10001670:	00803804 	movi	r2,224
10001674:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
10001678:	00c14804 	movi	r3,1312
1000167c:	00803804 	movi	r2,224
10001680:	10c00035 	stwio	r3,0(r2)

    //data phase IN-2
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0564); //520
10001684:	00c15904 	movi	r3,1380
10001688:	00803804 	movi	r2,224
1000168c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10001690:	00c00204 	movi	r3,8
10001694:	00803804 	movi	r2,224
10001698:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
1000169c:	00c0a404 	movi	r3,656
100016a0:	00803804 	movi	r2,224
100016a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
100016a8:	00c00044 	movi	r3,1
100016ac:	00803804 	movi	r2,224
100016b0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
100016b4:	00c004c4 	movi	r3,19
100016b8:	00803804 	movi	r2,224
100016bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
100016c0:	00c14b04 	movi	r3,1324
100016c4:	00803804 	movi	r2,224
100016c8:	10c00035 	stwio	r3,0(r2)

    //data phase IN-3
    IOWR(CY7C67200_BASE, HPI_DATA, 0x056c); //52c
100016cc:	00c15b04 	movi	r3,1388
100016d0:	00803804 	movi	r2,224
100016d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //e
100016d8:	00c00204 	movi	r3,8
100016dc:	00803804 	movi	r2,224
100016e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //530
100016e4:	00c0a404 	movi	r3,656
100016e8:	00803804 	movi	r2,224
100016ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
100016f0:	00c01044 	movi	r3,65
100016f4:	00803804 	movi	r2,224
100016f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
100016fc:	00c004c4 	movi	r3,19
10001700:	00803804 	movi	r2,224
10001704:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0538); //6
10001708:	00c14e04 	movi	r3,1336
1000170c:	00803804 	movi	r2,224
10001710:	10c00035 	stwio	r3,0(r2)

    //data phase IN-4
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0574); //538
10001714:	00c15d04 	movi	r3,1396
10001718:	00803804 	movi	r2,224
1000171c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //a
10001720:	00c00204 	movi	r3,8
10001724:	00803804 	movi	r2,224
10001728:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //c
1000172c:	00c0a404 	movi	r3,656
10001730:	00803804 	movi	r2,224
10001734:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //e //data0
10001738:	00c00044 	movi	r3,1
1000173c:	00803804 	movi	r2,224
10001740:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //540
10001744:	00c004c4 	movi	r3,19
10001748:	00803804 	movi	r2,224
1000174c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //2
10001750:	00c15104 	movi	r3,1348
10001754:	00803804 	movi	r2,224
10001758:	10c00035 	stwio	r3,0(r2)

    //data phase IN-5
    IOWR(CY7C67200_BASE, HPI_DATA, 0x057c); //544
1000175c:	00c15f04 	movi	r3,1404
10001760:	00803804 	movi	r2,224
10001764:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0002); //6
10001768:	00c00084 	movi	r3,2
1000176c:	00803804 	movi	r2,224
10001770:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10001774:	00c0a404 	movi	r3,656
10001778:	00803804 	movi	r2,224
1000177c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a //data1
10001780:	00c01044 	movi	r3,65
10001784:	00803804 	movi	r2,224
10001788:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
1000178c:	00c004c4 	movi	r3,19
10001790:	00803804 	movi	r2,224
10001794:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0550); //e
10001798:	00c15404 	movi	r3,1360
1000179c:	00803804 	movi	r2,224
100017a0:	10c00035 	stwio	r3,0(r2)

    //status phase
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //550
100017a4:	0007883a 	mov	r3,zero
100017a8:	00803804 	movi	r2,224
100017ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //2
100017b0:	0007883a 	mov	r3,zero
100017b4:	00803804 	movi	r2,224
100017b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //4
100017bc:	00c08404 	movi	r3,528
100017c0:	00803804 	movi	r2,224
100017c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //6
100017c8:	00c01044 	movi	r3,65
100017cc:	00803804 	movi	r2,224
100017d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
100017d4:	00c004c4 	movi	r3,19
100017d8:	00803804 	movi	r2,224
100017dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //a
100017e0:	0007883a 	mov	r3,zero
100017e4:	00803804 	movi	r2,224
100017e8:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100017ec:	01414004 	movi	r5,1280
100017f0:	01006c04 	movi	r4,432
100017f4:	00002c00 	call	100002c0 <UsbWrite>

    usleep(100 * 1000);
100017f8:	010000b4 	movhi	r4,2
100017fc:	2121a804 	addi	r4,r4,-31072
10001800:	001098c0 	call	1001098c <usleep>
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001804:	00009206 	br	10001a50 <main+0x165c>
    {
        //the starting address
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10001808:	00c14004 	movi	r3,1280
1000180c:	00803a04 	movi	r2,232
10001810:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10001814:	00c14304 	movi	r3,1292
10001818:	00803804 	movi	r2,224
1000181c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10001820:	00c00204 	movi	r3,8
10001824:	00803804 	movi	r2,224
10001828:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
1000182c:	00c0b404 	movi	r3,720
10001830:	00803804 	movi	r2,224
10001834:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10001838:	00c00044 	movi	r3,1
1000183c:	00803804 	movi	r2,224
10001840:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001844:	00c004c4 	movi	r3,19
10001848:	00803804 	movi	r2,224
1000184c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001850:	00c14504 	movi	r3,1300
10001854:	00803804 	movi	r2,224
10001858:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0680); //c
1000185c:	00c1a004 	movi	r3,1664
10001860:	00803804 	movi	r2,224
10001864:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0200); //e //config
10001868:	00c08004 	movi	r3,512
1000186c:	00803804 	movi	r2,224
10001870:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10001874:	0007883a 	mov	r3,zero
10001878:	00803804 	movi	r2,224
1000187c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x00FF); //2
10001880:	00c03fc4 	movi	r3,255
10001884:	00803804 	movi	r2,224
10001888:	10c00035 	stwio	r3,0(r2)

        //data phase IN-1
        IOWR(CY7C67200_BASE, HPI_DATA, 0x055c); //514
1000188c:	00c15704 	movi	r3,1372
10001890:	00803804 	movi	r2,224
10001894:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
10001898:	00c00204 	movi	r3,8
1000189c:	00803804 	movi	r2,224
100018a0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
100018a4:	00c0a404 	movi	r3,656
100018a8:	00803804 	movi	r2,224
100018ac:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
100018b0:	00c01044 	movi	r3,65
100018b4:	00803804 	movi	r2,224
100018b8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
100018bc:	00c004c4 	movi	r3,19
100018c0:	00803804 	movi	r2,224
100018c4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
100018c8:	00c14804 	movi	r3,1312
100018cc:	00803804 	movi	r2,224
100018d0:	10c00035 	stwio	r3,0(r2)

        //data phase IN-2
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0564); //520
100018d4:	00c15904 	movi	r3,1380
100018d8:	00803804 	movi	r2,224
100018dc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
100018e0:	00c00204 	movi	r3,8
100018e4:	00803804 	movi	r2,224
100018e8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
100018ec:	00c0a404 	movi	r3,656
100018f0:	00803804 	movi	r2,224
100018f4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
100018f8:	00c00044 	movi	r3,1
100018fc:	00803804 	movi	r2,224
10001900:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10001904:	00c004c4 	movi	r3,19
10001908:	00803804 	movi	r2,224
1000190c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
10001910:	00c14b04 	movi	r3,1324
10001914:	00803804 	movi	r2,224
10001918:	10c00035 	stwio	r3,0(r2)

        //data phase IN-3
        IOWR(CY7C67200_BASE, HPI_DATA, 0x056c); //52c
1000191c:	00c15b04 	movi	r3,1388
10001920:	00803804 	movi	r2,224
10001924:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //e
10001928:	00c00204 	movi	r3,8
1000192c:	00803804 	movi	r2,224
10001930:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //530
10001934:	00c0a404 	movi	r3,656
10001938:	00803804 	movi	r2,224
1000193c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
10001940:	00c01044 	movi	r3,65
10001944:	00803804 	movi	r2,224
10001948:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
1000194c:	00c004c4 	movi	r3,19
10001950:	00803804 	movi	r2,224
10001954:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0538); //6
10001958:	00c14e04 	movi	r3,1336
1000195c:	00803804 	movi	r2,224
10001960:	10c00035 	stwio	r3,0(r2)

        //data phase IN-4
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0574); //538
10001964:	00c15d04 	movi	r3,1396
10001968:	00803804 	movi	r2,224
1000196c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //a
10001970:	00c00204 	movi	r3,8
10001974:	00803804 	movi	r2,224
10001978:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //c
1000197c:	00c0a404 	movi	r3,656
10001980:	00803804 	movi	r2,224
10001984:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //e //data0
10001988:	00c00044 	movi	r3,1
1000198c:	00803804 	movi	r2,224
10001990:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //540
10001994:	00c004c4 	movi	r3,19
10001998:	00803804 	movi	r2,224
1000199c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //2
100019a0:	00c15104 	movi	r3,1348
100019a4:	00803804 	movi	r2,224
100019a8:	10c00035 	stwio	r3,0(r2)

        //data phase IN-5
        IOWR(CY7C67200_BASE, HPI_DATA, 0x057c); //544
100019ac:	00c15f04 	movi	r3,1404
100019b0:	00803804 	movi	r2,224
100019b4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0002); //6
100019b8:	00c00084 	movi	r3,2
100019bc:	00803804 	movi	r2,224
100019c0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
100019c4:	00c0a404 	movi	r3,656
100019c8:	00803804 	movi	r2,224
100019cc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a //data1
100019d0:	00c01044 	movi	r3,65
100019d4:	00803804 	movi	r2,224
100019d8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
100019dc:	00c004c4 	movi	r3,19
100019e0:	00803804 	movi	r2,224
100019e4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0550); //e
100019e8:	00c15404 	movi	r3,1360
100019ec:	00803804 	movi	r2,224
100019f0:	10c00035 	stwio	r3,0(r2)

        //status phase
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //550
100019f4:	0007883a 	mov	r3,zero
100019f8:	00803804 	movi	r2,224
100019fc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //2
10001a00:	0007883a 	mov	r3,zero
10001a04:	00803804 	movi	r2,224
10001a08:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //4
10001a0c:	00c08404 	movi	r3,528
10001a10:	00803804 	movi	r2,224
10001a14:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //6
10001a18:	00c01044 	movi	r3,65
10001a1c:	00803804 	movi	r2,224
10001a20:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10001a24:	00c004c4 	movi	r3,19
10001a28:	00803804 	movi	r2,224
10001a2c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //a
10001a30:	0007883a 	mov	r3,zero
10001a34:	00803804 	movi	r2,224
10001a38:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a3c:	01414004 	movi	r5,1280
10001a40:	01006c04 	movi	r4,432
10001a44:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
10001a48:	0109c404 	movi	r4,10000
10001a4c:	001098c0 	call	1001098c <usleep>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr

    usleep(100 * 1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001a50:	00803b04 	movi	r2,236
10001a54:	10800037 	ldwio	r2,0(r2)
10001a58:	1080040c 	andi	r2,r2,16
10001a5c:	103f6a26 	beq	r2,zero,10001808 <__alt_data_end+0xf8001808>

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10001a60:	01005104 	movi	r4,324
10001a64:	00003080 	call	10000308 <UsbRead>
10001a68:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001a6c:	000b883a 	mov	r5,zero
10001a70:	01005104 	movi	r4,324
10001a74:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10001a78:	00000d06 	br	10001ab0 <main+0x16bc>
    {
        if (usb_ctl_val == 0x000)
10001a7c:	e0bff80b 	ldhu	r2,-32(fp)
10001a80:	10000526 	beq	r2,zero,10001a98 <main+0x16a4>
        {
        }
        else
        {
            printf("[SIE MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
10001a84:	e0bff80b 	ldhu	r2,-32(fp)
10001a88:	100b883a 	mov	r5,r2
10001a8c:	01040074 	movhi	r4,4097
10001a90:	210b4504 	addi	r4,r4,11540
10001a94:	00032240 	call	10003224 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10001a98:	01005104 	movi	r4,324
10001a9c:	00003080 	call	10000308 <UsbRead>
10001aa0:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001aa4:	000b883a 	mov	r5,zero
10001aa8:	01005104 	movi	r4,324
10001aac:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
    }
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10001ab0:	e0bff80b 	ldhu	r2,-32(fp)
10001ab4:	10840018 	cmpnei	r2,r2,4096
10001ab8:	103ff01e 	bne	r2,zero,10001a7c <__alt_data_end+0xf8001a7c>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
10001abc:	00c14184 	movi	r3,1286
10001ac0:	00803a04 	movi	r2,232
10001ac4:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
10001ac8:	00803804 	movi	r2,224
10001acc:	10800037 	ldwio	r2,0(r2)
10001ad0:	100b883a 	mov	r5,r2
10001ad4:	01040074 	movhi	r4,4097
10001ad8:	210b4d04 	addi	r4,r4,11572
10001adc:	00032240 	call	10003224 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001ae0:	00c14204 	movi	r3,1288
10001ae4:	00803a04 	movi	r2,232
10001ae8:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001aec:	00803804 	movi	r2,224
10001af0:	10800037 	ldwio	r2,0(r2)
10001af4:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n", usb_ctl_val);
10001af8:	e0bff80b 	ldhu	r2,-32(fp)
10001afc:	100b883a 	mov	r5,r2
10001b00:	01040074 	movhi	r4,4097
10001b04:	210b5804 	addi	r4,r4,11616
10001b08:	00032240 	call	10003224 <printf>
    while (usb_ctl_val != 0x03)
10001b0c:	00001506 	br	10001b64 <main+0x1770>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
10001b10:	00803b04 	movi	r2,236
10001b14:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10001b18:	01005104 	movi	r4,324
10001b1c:	00003080 	call	10000308 <UsbRead>
10001b20:	10bfffcc 	andi	r2,r2,65535
10001b24:	10840018 	cmpnei	r2,r2,4096
10001b28:	1000081e 	bne	r2,zero,10001b4c <main+0x1758>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001b2c:	000b883a 	mov	r5,zero
10001b30:	01005104 	movi	r4,324
10001b34:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001b38:	0001883a 	nop
10001b3c:	00803b04 	movi	r2,236
10001b40:	10800037 	ldwio	r2,0(r2)
10001b44:	1080040c 	andi	r2,r2,16
10001b48:	103ffc26 	beq	r2,zero,10001b3c <__alt_data_end+0xf8001b3c>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001b4c:	00c14204 	movi	r3,1288
10001b50:	00803a04 	movi	r2,232
10001b54:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001b58:	00803804 	movi	r2,224
10001b5c:	10800037 	ldwio	r2,0(r2)
10001b60:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
10001b64:	e0bff80b 	ldhu	r2,-32(fp)
10001b68:	108000d8 	cmpnei	r2,r2,3
10001b6c:	103fe81e 	bne	r2,zero,10001b10 <__alt_data_end+0xf8001b10>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("-----------[ENUM PROCESS]:get configuration descriptor-2 pass!------------\n");
10001b70:	01040074 	movhi	r4,4097
10001b74:	210b6404 	addi	r4,r4,11664
10001b78:	00033200 	call	10003320 <puts>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x056c); //the start address
10001b7c:	00c15b04 	movi	r3,1388
10001b80:	00803a04 	movi	r2,232
10001b84:	10c00035 	stwio	r3,0(r2)

    if ((IORD(CY7C67200_BASE, HPI_DATA) & 0x0ff) == 0x02)
10001b88:	00803804 	movi	r2,224
10001b8c:	10800037 	ldwio	r2,0(r2)
10001b90:	10803fcc 	andi	r2,r2,255
10001b94:	10800098 	cmpnei	r2,r2,2
10001b98:	1000041e 	bne	r2,zero,10001bac <main+0x17b8>
    {
        printf("\n[INFO]:check TD rec data7 \n[INFO]:Mouse Detected!!!\n\n");
10001b9c:	01040074 	movhi	r4,4097
10001ba0:	210b7704 	addi	r4,r4,11740
10001ba4:	00033200 	call	10003320 <puts>
10001ba8:	00000306 	br	10001bb8 <main+0x17c4>
    }
    else
    {
        printf("\n[INFO]:Mouse Not Detected!!! \n\n");
10001bac:	01040074 	movhi	r4,4097
10001bb0:	210b8504 	addi	r4,r4,11796
10001bb4:	00033200 	call	10003320 <puts>
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x057a); //the start address
10001bb8:	00c15e84 	movi	r3,1402
10001bbc:	00803a04 	movi	r2,232
10001bc0:	10c00035 	stwio	r3,0(r2)

    data_size = (IORD(CY7C67200_BASE, HPI_DATA) >> 8) & 0x0ff;
10001bc4:	00803804 	movi	r2,224
10001bc8:	10800037 	ldwio	r2,0(r2)
10001bcc:	1005d23a 	srai	r2,r2,8
10001bd0:	e0bffe85 	stb	r2,-6(fp)
    printf("[ENUM PROCESS]:data packet size is %d\n", data_size);
10001bd4:	e0bffe83 	ldbu	r2,-6(fp)
10001bd8:	100b883a 	mov	r5,r2
10001bdc:	01040074 	movhi	r4,4097
10001be0:	210b8d04 	addi	r4,r4,11828
10001be4:	00032240 	call	10003224 <printf>

    //------------------------------------set configuration -----------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10001be8:	00c14004 	movi	r3,1280
10001bec:	00803a04 	movi	r2,232
10001bf0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10001bf4:	00c14304 	movi	r3,1292
10001bf8:	00803804 	movi	r2,224
10001bfc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10001c00:	00c00204 	movi	r3,8
10001c04:	00803804 	movi	r2,224
10001c08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //port address
10001c0c:	00c0b404 	movi	r3,720
10001c10:	00803804 	movi	r2,224
10001c14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10001c18:	00c00044 	movi	r3,1
10001c1c:	00803804 	movi	r2,224
10001c20:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001c24:	00c004c4 	movi	r3,19
10001c28:	00803804 	movi	r2,224
10001c2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001c30:	00c14504 	movi	r3,1300
10001c34:	00803804 	movi	r2,224
10001c38:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0900);
10001c3c:	00c24004 	movi	r3,2304
10001c40:	00803804 	movi	r2,224
10001c44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //device address
10001c48:	00c00044 	movi	r3,1
10001c4c:	00803804 	movi	r2,224
10001c50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001c54:	0007883a 	mov	r3,zero
10001c58:	00803804 	movi	r2,224
10001c5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001c60:	0007883a 	mov	r3,zero
10001c64:	00803804 	movi	r2,224
10001c68:	10c00035 	stwio	r3,0(r2)
    //in packet
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10001c6c:	0007883a 	mov	r3,zero
10001c70:	00803804 	movi	r2,224
10001c74:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
10001c78:	0007883a 	mov	r3,zero
10001c7c:	00803804 	movi	r2,224
10001c80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //device address
10001c84:	00c0a404 	movi	r3,656
10001c88:	00803804 	movi	r2,224
10001c8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //data 1
10001c90:	00c01044 	movi	r3,65
10001c94:	00803804 	movi	r2,224
10001c98:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001c9c:	00c004c4 	movi	r3,19
10001ca0:	00803804 	movi	r2,224
10001ca4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001ca8:	0007883a 	mov	r3,zero
10001cac:	00803804 	movi	r2,224
10001cb0:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001cb4:	01414004 	movi	r5,1280
10001cb8:	01006c04 	movi	r4,432
10001cbc:	00002c00 	call	100002c0 <UsbWrite>
    //usleep(10*1000);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001cc0:	00003806 	br	10001da4 <main+0x19b0>
    {
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10001cc4:	00c14004 	movi	r3,1280
10001cc8:	00803a04 	movi	r2,232
10001ccc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10001cd0:	00c14304 	movi	r3,1292
10001cd4:	00803804 	movi	r2,224
10001cd8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10001cdc:	00c00204 	movi	r3,8
10001ce0:	00803804 	movi	r2,224
10001ce4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0);
10001ce8:	00c0b404 	movi	r3,720
10001cec:	00803804 	movi	r2,224
10001cf0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10001cf4:	00c00044 	movi	r3,1
10001cf8:	00803804 	movi	r2,224
10001cfc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001d00:	00c004c4 	movi	r3,19
10001d04:	00803804 	movi	r2,224
10001d08:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001d0c:	00c14504 	movi	r3,1300
10001d10:	00803804 	movi	r2,224
10001d14:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0900);
10001d18:	00c24004 	movi	r3,2304
10001d1c:	00803804 	movi	r2,224
10001d20:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //device address
10001d24:	00c00044 	movi	r3,1
10001d28:	00803804 	movi	r2,224
10001d2c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001d30:	0007883a 	mov	r3,zero
10001d34:	00803804 	movi	r2,224
10001d38:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001d3c:	0007883a 	mov	r3,zero
10001d40:	00803804 	movi	r2,224
10001d44:	10c00035 	stwio	r3,0(r2)
        //in packet
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10001d48:	0007883a 	mov	r3,zero
10001d4c:	00803804 	movi	r2,224
10001d50:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
10001d54:	0007883a 	mov	r3,zero
10001d58:	00803804 	movi	r2,224
10001d5c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //device address
10001d60:	00c0a404 	movi	r3,656
10001d64:	00803804 	movi	r2,224
10001d68:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //data 1
10001d6c:	00c01044 	movi	r3,65
10001d70:	00803804 	movi	r2,224
10001d74:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001d78:	00c004c4 	movi	r3,19
10001d7c:	00803804 	movi	r2,224
10001d80:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001d84:	0007883a 	mov	r3,zero
10001d88:	00803804 	movi	r2,224
10001d8c:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d90:	01414004 	movi	r5,1280
10001d94:	01006c04 	movi	r4,432
10001d98:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
10001d9c:	0109c404 	movi	r4,10000
10001da0:	001098c0 	call	1001098c <usleep>
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001da4:	00803b04 	movi	r2,236
10001da8:	10800037 	ldwio	r2,0(r2)
10001dac:	1080040c 	andi	r2,r2,16
10001db0:	103fc426 	beq	r2,zero,10001cc4 <__alt_data_end+0xf8001cc4>

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10001db4:	01005104 	movi	r4,324
10001db8:	00003080 	call	10000308 <UsbRead>
10001dbc:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001dc0:	000b883a 	mov	r5,zero
10001dc4:	01005104 	movi	r4,324
10001dc8:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10001dcc:	00000d06 	br	10001e04 <main+0x1a10>
    {
        if (usb_ctl_val == 0x000)
10001dd0:	e0bff80b 	ldhu	r2,-32(fp)
10001dd4:	10000526 	beq	r2,zero,10001dec <main+0x19f8>
        {
        }
        else
        {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
10001dd8:	e0bff80b 	ldhu	r2,-32(fp)
10001ddc:	100b883a 	mov	r5,r2
10001de0:	01040074 	movhi	r4,4097
10001de4:	210ab004 	addi	r4,r4,10944
10001de8:	00032240 	call	10003224 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10001dec:	01005104 	movi	r4,324
10001df0:	00003080 	call	10000308 <UsbRead>
10001df4:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001df8:	000b883a 	mov	r5,zero
10001dfc:	01005104 	movi	r4,324
10001e00:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10001e04:	e0bff80b 	ldhu	r2,-32(fp)
10001e08:	10840018 	cmpnei	r2,r2,4096
10001e0c:	103ff01e 	bne	r2,zero,10001dd0 <__alt_data_end+0xf8001dd0>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
10001e10:	00c14184 	movi	r3,1286
10001e14:	00803a04 	movi	r2,232
10001e18:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
10001e1c:	00803804 	movi	r2,224
10001e20:	10800037 	ldwio	r2,0(r2)
10001e24:	100b883a 	mov	r5,r2
10001e28:	01040074 	movhi	r4,4097
10001e2c:	210b9704 	addi	r4,r4,11868
10001e30:	00032240 	call	10003224 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001e34:	00c14204 	movi	r3,1288
10001e38:	00803a04 	movi	r2,232
10001e3c:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001e40:	00803804 	movi	r2,224
10001e44:	10800037 	ldwio	r2,0(r2)
10001e48:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n", usb_ctl_val);
10001e4c:	e0bff80b 	ldhu	r2,-32(fp)
10001e50:	100b883a 	mov	r5,r2
10001e54:	01040074 	movhi	r4,4097
10001e58:	210ba204 	addi	r4,r4,11912
10001e5c:	00032240 	call	10003224 <printf>
    while (usb_ctl_val != 0x03)
10001e60:	00001506 	br	10001eb8 <main+0x1ac4>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
10001e64:	00803b04 	movi	r2,236
10001e68:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10001e6c:	01005104 	movi	r4,324
10001e70:	00003080 	call	10000308 <UsbRead>
10001e74:	10bfffcc 	andi	r2,r2,65535
10001e78:	10840018 	cmpnei	r2,r2,4096
10001e7c:	1000081e 	bne	r2,zero,10001ea0 <main+0x1aac>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001e80:	000b883a 	mov	r5,zero
10001e84:	01005104 	movi	r4,324
10001e88:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001e8c:	0001883a 	nop
10001e90:	00803b04 	movi	r2,236
10001e94:	10800037 	ldwio	r2,0(r2)
10001e98:	1080040c 	andi	r2,r2,16
10001e9c:	103ffc26 	beq	r2,zero,10001e90 <__alt_data_end+0xf8001e90>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10001ea0:	00c14204 	movi	r3,1288
10001ea4:	00803a04 	movi	r2,232
10001ea8:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10001eac:	00803804 	movi	r2,224
10001eb0:	10800037 	ldwio	r2,0(r2)
10001eb4:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
10001eb8:	e0bff80b 	ldhu	r2,-32(fp)
10001ebc:	108000d8 	cmpnei	r2,r2,3
10001ec0:	103fe81e 	bne	r2,zero,10001e64 <__alt_data_end+0xf8001e64>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("------------[ENUM PROCESS]:set configuration pass!-------------------\n");
10001ec4:	01040074 	movhi	r4,4097
10001ec8:	210bae04 	addi	r4,r4,11960
10001ecc:	00033200 	call	10003320 <puts>

    //----------------------------------------------classe request out ------------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10001ed0:	00c14004 	movi	r3,1280
10001ed4:	00803a04 	movi	r2,232
10001ed8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10001edc:	00c14304 	movi	r3,1292
10001ee0:	00803804 	movi	r2,224
10001ee4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10001ee8:	00c00204 	movi	r3,8
10001eec:	00803804 	movi	r2,224
10001ef0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //port address
10001ef4:	00c0b404 	movi	r3,720
10001ef8:	00803804 	movi	r2,224
10001efc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10001f00:	00c00044 	movi	r3,1
10001f04:	00803804 	movi	r2,224
10001f08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001f0c:	00c004c4 	movi	r3,19
10001f10:	00803804 	movi	r2,224
10001f14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001f18:	00c14504 	movi	r3,1300
10001f1c:	00803804 	movi	r2,224
10001f20:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0A21);
10001f24:	00c28844 	movi	r3,2593
10001f28:	00803804 	movi	r2,224
10001f2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //device address
10001f30:	0007883a 	mov	r3,zero
10001f34:	00803804 	movi	r2,224
10001f38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001f3c:	0007883a 	mov	r3,zero
10001f40:	00803804 	movi	r2,224
10001f44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001f48:	0007883a 	mov	r3,zero
10001f4c:	00803804 	movi	r2,224
10001f50:	10c00035 	stwio	r3,0(r2)
    //in packet
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10001f54:	0007883a 	mov	r3,zero
10001f58:	00803804 	movi	r2,224
10001f5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number /data length
10001f60:	0007883a 	mov	r3,zero
10001f64:	00803804 	movi	r2,224
10001f68:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //device address
10001f6c:	00c0a404 	movi	r3,656
10001f70:	00803804 	movi	r2,224
10001f74:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //data 1
10001f78:	00c01044 	movi	r3,65
10001f7c:	00803804 	movi	r2,224
10001f80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001f84:	00c004c4 	movi	r3,19
10001f88:	00803804 	movi	r2,224
10001f8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10001f90:	0007883a 	mov	r3,zero
10001f94:	00803804 	movi	r2,224
10001f98:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001f9c:	01414004 	movi	r5,1280
10001fa0:	01006c04 	movi	r4,432
10001fa4:	00002c00 	call	100002c0 <UsbWrite>
    //usleep(10*1000);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10001fa8:	00003806 	br	1000208c <main+0x1c98>
    {
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10001fac:	00c14004 	movi	r3,1280
10001fb0:	00803a04 	movi	r2,232
10001fb4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10001fb8:	00c14304 	movi	r3,1292
10001fbc:	00803804 	movi	r2,224
10001fc0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10001fc4:	00c00204 	movi	r3,8
10001fc8:	00803804 	movi	r2,224
10001fcc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0);
10001fd0:	00c0b404 	movi	r3,720
10001fd4:	00803804 	movi	r2,224
10001fd8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10001fdc:	00c00044 	movi	r3,1
10001fe0:	00803804 	movi	r2,224
10001fe4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10001fe8:	00c004c4 	movi	r3,19
10001fec:	00803804 	movi	r2,224
10001ff0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10001ff4:	00c14504 	movi	r3,1300
10001ff8:	00803804 	movi	r2,224
10001ffc:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0A21);
10002000:	00c28844 	movi	r3,2593
10002004:	00803804 	movi	r2,224
10002008:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //device address
1000200c:	0007883a 	mov	r3,zero
10002010:	00803804 	movi	r2,224
10002014:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10002018:	0007883a 	mov	r3,zero
1000201c:	00803804 	movi	r2,224
10002020:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
10002024:	0007883a 	mov	r3,zero
10002028:	00803804 	movi	r2,224
1000202c:	10c00035 	stwio	r3,0(r2)
        //in packet
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //don't care
10002030:	0007883a 	mov	r3,zero
10002034:	00803804 	movi	r2,224
10002038:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //port number
1000203c:	0007883a 	mov	r3,zero
10002040:	00803804 	movi	r2,224
10002044:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //device address
10002048:	00c0a404 	movi	r3,656
1000204c:	00803804 	movi	r2,224
10002050:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //data 1
10002054:	00c01044 	movi	r3,65
10002058:	00803804 	movi	r2,224
1000205c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10002060:	00c004c4 	movi	r3,19
10002064:	00803804 	movi	r2,224
10002068:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);
1000206c:	0007883a 	mov	r3,zero
10002070:	00803804 	movi	r2,224
10002074:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10002078:	01414004 	movi	r5,1280
1000207c:	01006c04 	movi	r4,432
10002080:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
10002084:	0109c404 	movi	r4,10000
10002088:	001098c0 	call	1001098c <usleep>
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
1000208c:	00803b04 	movi	r2,236
10002090:	10800037 	ldwio	r2,0(r2)
10002094:	1080040c 	andi	r2,r2,16
10002098:	103fc426 	beq	r2,zero,10001fac <__alt_data_end+0xf8001fac>

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
1000209c:	01005104 	movi	r4,324
100020a0:	00003080 	call	10000308 <UsbRead>
100020a4:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
100020a8:	000b883a 	mov	r5,zero
100020ac:	01005104 	movi	r4,324
100020b0:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100020b4:	00000d06 	br	100020ec <main+0x1cf8>
    {
        if (usb_ctl_val == 0x000)
100020b8:	e0bff80b 	ldhu	r2,-32(fp)
100020bc:	10000526 	beq	r2,zero,100020d4 <main+0x1ce0>
        {
        }
        else
        {
            printf("[SIE1 MSG]:SIE 1 msg reg is %x\n", usb_ctl_val);
100020c0:	e0bff80b 	ldhu	r2,-32(fp)
100020c4:	100b883a 	mov	r5,r2
100020c8:	01040074 	movhi	r4,4097
100020cc:	210bc004 	addi	r4,r4,12032
100020d0:	00032240 	call	10003224 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100020d4:	01005104 	movi	r4,324
100020d8:	00003080 	call	10000308 <UsbRead>
100020dc:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
100020e0:	000b883a 	mov	r5,zero
100020e4:	01005104 	movi	r4,324
100020e8:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
100020ec:	e0bff80b 	ldhu	r2,-32(fp)
100020f0:	10840018 	cmpnei	r2,r2,4096
100020f4:	103ff01e 	bne	r2,zero,100020b8 <__alt_data_end+0xf80020b8>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
100020f8:	00c14184 	movi	r3,1286
100020fc:	00803a04 	movi	r2,232
10002100:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
10002104:	00803804 	movi	r2,224
10002108:	10800037 	ldwio	r2,0(r2)
1000210c:	100b883a 	mov	r5,r2
10002110:	01040074 	movhi	r4,4097
10002114:	210bc804 	addi	r4,r4,12064
10002118:	00032240 	call	10003224 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
1000211c:	00c14204 	movi	r3,1288
10002120:	00803a04 	movi	r2,232
10002124:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10002128:	00803804 	movi	r2,224
1000212c:	10800037 	ldwio	r2,0(r2)
10002130:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
10002134:	e0bff80b 	ldhu	r2,-32(fp)
10002138:	100b883a 	mov	r5,r2
1000213c:	01040074 	movhi	r4,4097
10002140:	210bd304 	addi	r4,r4,12108
10002144:	00032240 	call	10003224 <printf>
    while (usb_ctl_val != 0x03)
10002148:	00001506 	br	100021a0 <main+0x1dac>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
1000214c:	00803b04 	movi	r2,236
10002150:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10002154:	01005104 	movi	r4,324
10002158:	00003080 	call	10000308 <UsbRead>
1000215c:	10bfffcc 	andi	r2,r2,65535
10002160:	10840018 	cmpnei	r2,r2,4096
10002164:	1000081e 	bne	r2,zero,10002188 <main+0x1d94>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002168:	000b883a 	mov	r5,zero
1000216c:	01005104 	movi	r4,324
10002170:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002174:	0001883a 	nop
10002178:	00803b04 	movi	r2,236
1000217c:	10800037 	ldwio	r2,0(r2)
10002180:	1080040c 	andi	r2,r2,16
10002184:	103ffc26 	beq	r2,zero,10002178 <__alt_data_end+0xf8002178>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10002188:	00c14204 	movi	r3,1288
1000218c:	00803a04 	movi	r2,232
10002190:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10002194:	00803804 	movi	r2,224
10002198:	10800037 	ldwio	r2,0(r2)
1000219c:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
100021a0:	e0bff80b 	ldhu	r2,-32(fp)
100021a4:	108000d8 	cmpnei	r2,r2,3
100021a8:	103fe81e 	bne	r2,zero,1000214c <__alt_data_end+0xf800214c>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("------------[ENUM PROCESS]:classe request out pass!-------------------\n");
100021ac:	01040074 	movhi	r4,4097
100021b0:	210bdf04 	addi	r4,r4,12156
100021b4:	00033200 	call	10003320 <puts>

    //----------------------------------get descriptor(class 0x21) request out --------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
100021b8:	00c14004 	movi	r3,1280
100021bc:	00803a04 	movi	r2,232
100021c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100021c4:	00c14304 	movi	r3,1292
100021c8:	00803804 	movi	r2,224
100021cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100021d0:	00c00204 	movi	r3,8
100021d4:	00803804 	movi	r2,224
100021d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //port address
100021dc:	00c0b404 	movi	r3,720
100021e0:	00803804 	movi	r2,224
100021e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
100021e8:	00c00044 	movi	r3,1
100021ec:	00803804 	movi	r2,224
100021f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
100021f4:	00c004c4 	movi	r3,19
100021f8:	00803804 	movi	r2,224
100021fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10002200:	00c14504 	movi	r3,1300
10002204:	00803804 	movi	r2,224
10002208:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0681); //c
1000220c:	00c1a044 	movi	r3,1665
10002210:	00803804 	movi	r2,224
10002214:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x2100); //e //config
10002218:	00c84004 	movi	r3,8448
1000221c:	00803804 	movi	r2,224
10002220:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10002224:	0007883a 	mov	r3,zero
10002228:	00803804 	movi	r2,224
1000222c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x007B); //2
10002230:	00c01ec4 	movi	r3,123
10002234:	00803804 	movi	r2,224
10002238:	10c00035 	stwio	r3,0(r2)

    //data phase IN-1
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //514
1000223c:	00c15104 	movi	r3,1348
10002240:	00803804 	movi	r2,224
10002244:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
10002248:	00c00204 	movi	r3,8
1000224c:	00803804 	movi	r2,224
10002250:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10002254:	00c0a404 	movi	r3,656
10002258:	00803804 	movi	r2,224
1000225c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10002260:	00c01044 	movi	r3,65
10002264:	00803804 	movi	r2,224
10002268:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
1000226c:	00c004c4 	movi	r3,19
10002270:	00803804 	movi	r2,224
10002274:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
10002278:	00c14804 	movi	r3,1312
1000227c:	00803804 	movi	r2,224
10002280:	10c00035 	stwio	r3,0(r2)

    //status phase
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //52c
10002284:	0007883a 	mov	r3,zero
10002288:	00803804 	movi	r2,224
1000228c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //e
10002290:	0007883a 	mov	r3,zero
10002294:	00803804 	movi	r2,224
10002298:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //530
1000229c:	00c08404 	movi	r3,528
100022a0:	00803804 	movi	r2,224
100022a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
100022a8:	00c01044 	movi	r3,65
100022ac:	00803804 	movi	r2,224
100022b0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
100022b4:	00c004c4 	movi	r3,19
100022b8:	00803804 	movi	r2,224
100022bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6
100022c0:	0007883a 	mov	r3,zero
100022c4:	00803804 	movi	r2,224
100022c8:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100022cc:	01414004 	movi	r5,1280
100022d0:	01006c04 	movi	r4,432
100022d4:	00002c00 	call	100002c0 <UsbWrite>
    //usleep(10*1000);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
100022d8:	00004a06 	br	10002404 <main+0x2010>
    {
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
100022dc:	00c14004 	movi	r3,1280
100022e0:	00803a04 	movi	r2,232
100022e4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
100022e8:	00c14304 	movi	r3,1292
100022ec:	00803804 	movi	r2,224
100022f0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
100022f4:	00c00204 	movi	r3,8
100022f8:	00803804 	movi	r2,224
100022fc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //port address
10002300:	00c0b404 	movi	r3,720
10002304:	00803804 	movi	r2,224
10002308:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
1000230c:	00c00044 	movi	r3,1
10002310:	00803804 	movi	r2,224
10002314:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10002318:	00c004c4 	movi	r3,19
1000231c:	00803804 	movi	r2,224
10002320:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10002324:	00c14504 	movi	r3,1300
10002328:	00803804 	movi	r2,224
1000232c:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0681); //c
10002330:	00c1a044 	movi	r3,1665
10002334:	00803804 	movi	r2,224
10002338:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x2100); //e //config
1000233c:	00c84004 	movi	r3,8448
10002340:	00803804 	movi	r2,224
10002344:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
10002348:	0007883a 	mov	r3,zero
1000234c:	00803804 	movi	r2,224
10002350:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x007B); //2
10002354:	00c01ec4 	movi	r3,123
10002358:	00803804 	movi	r2,224
1000235c:	10c00035 	stwio	r3,0(r2)

        //data phase IN-1
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //514
10002360:	00c15104 	movi	r3,1348
10002364:	00803804 	movi	r2,224
10002368:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
1000236c:	00c00204 	movi	r3,8
10002370:	00803804 	movi	r2,224
10002374:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10002378:	00c0a404 	movi	r3,656
1000237c:	00803804 	movi	r2,224
10002380:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10002384:	00c01044 	movi	r3,65
10002388:	00803804 	movi	r2,224
1000238c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10002390:	00c004c4 	movi	r3,19
10002394:	00803804 	movi	r2,224
10002398:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
1000239c:	00c14804 	movi	r3,1312
100023a0:	00803804 	movi	r2,224
100023a4:	10c00035 	stwio	r3,0(r2)

        //status phase
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //52c
100023a8:	0007883a 	mov	r3,zero
100023ac:	00803804 	movi	r2,224
100023b0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //e
100023b4:	0007883a 	mov	r3,zero
100023b8:	00803804 	movi	r2,224
100023bc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //530
100023c0:	00c08404 	movi	r3,528
100023c4:	00803804 	movi	r2,224
100023c8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
100023cc:	00c01044 	movi	r3,65
100023d0:	00803804 	movi	r2,224
100023d4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
100023d8:	00c004c4 	movi	r3,19
100023dc:	00803804 	movi	r2,224
100023e0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6
100023e4:	0007883a 	mov	r3,zero
100023e8:	00803804 	movi	r2,224
100023ec:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100023f0:	01414004 	movi	r5,1280
100023f4:	01006c04 	movi	r4,432
100023f8:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
100023fc:	0109c404 	movi	r4,10000
10002400:	001098c0 	call	1001098c <usleep>
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);

    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002404:	00803b04 	movi	r2,236
10002408:	10800037 	ldwio	r2,0(r2)
1000240c:	1080040c 	andi	r2,r2,16
10002410:	103fb226 	beq	r2,zero,100022dc <__alt_data_end+0xf80022dc>

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002414:	01005104 	movi	r4,324
10002418:	00003080 	call	10000308 <UsbRead>
1000241c:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002420:	000b883a 	mov	r5,zero
10002424:	01005104 	movi	r4,324
10002428:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
1000242c:	00000d06 	br	10002464 <main+0x2070>
    {
        if (usb_ctl_val == 0x000)
10002430:	e0bff80b 	ldhu	r2,-32(fp)
10002434:	10000526 	beq	r2,zero,1000244c <main+0x2058>
        {
        }
        else
        {
            printf("[SIE MSG]:SIE 1 msg reg is %x\n", usb_ctl_val);
10002438:	e0bff80b 	ldhu	r2,-32(fp)
1000243c:	100b883a 	mov	r5,r2
10002440:	01040074 	movhi	r4,4097
10002444:	210bf104 	addi	r4,r4,12228
10002448:	00032240 	call	10003224 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
1000244c:	01005104 	movi	r4,324
10002450:	00003080 	call	10000308 <UsbRead>
10002454:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002458:	000b883a 	mov	r5,zero
1000245c:	01005104 	movi	r4,324
10002460:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10002464:	e0bff80b 	ldhu	r2,-32(fp)
10002468:	10840018 	cmpnei	r2,r2,4096
1000246c:	103ff01e 	bne	r2,zero,10002430 <__alt_data_end+0xf8002430>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
10002470:	00c14184 	movi	r3,1286
10002474:	00803a04 	movi	r2,232
10002478:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
1000247c:	00803804 	movi	r2,224
10002480:	10800037 	ldwio	r2,0(r2)
10002484:	100b883a 	mov	r5,r2
10002488:	01040074 	movhi	r4,4097
1000248c:	210bc804 	addi	r4,r4,12064
10002490:	00032240 	call	10003224 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10002494:	00c14204 	movi	r3,1288
10002498:	00803a04 	movi	r2,232
1000249c:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
100024a0:	00803804 	movi	r2,224
100024a4:	10800037 	ldwio	r2,0(r2)
100024a8:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
100024ac:	e0bff80b 	ldhu	r2,-32(fp)
100024b0:	100b883a 	mov	r5,r2
100024b4:	01040074 	movhi	r4,4097
100024b8:	210bd304 	addi	r4,r4,12108
100024bc:	00032240 	call	10003224 <printf>
    while (usb_ctl_val != 0x03)
100024c0:	00001506 	br	10002518 <main+0x2124>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
100024c4:	00803b04 	movi	r2,236
100024c8:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
100024cc:	01005104 	movi	r4,324
100024d0:	00003080 	call	10000308 <UsbRead>
100024d4:	10bfffcc 	andi	r2,r2,65535
100024d8:	10840018 	cmpnei	r2,r2,4096
100024dc:	1000081e 	bne	r2,zero,10002500 <main+0x210c>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
100024e0:	000b883a 	mov	r5,zero
100024e4:	01005104 	movi	r4,324
100024e8:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
100024ec:	0001883a 	nop
100024f0:	00803b04 	movi	r2,236
100024f4:	10800037 	ldwio	r2,0(r2)
100024f8:	1080040c 	andi	r2,r2,16
100024fc:	103ffc26 	beq	r2,zero,100024f0 <__alt_data_end+0xf80024f0>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10002500:	00c14204 	movi	r3,1288
10002504:	00803a04 	movi	r2,232
10002508:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
1000250c:	00803804 	movi	r2,224
10002510:	10800037 	ldwio	r2,0(r2)
10002514:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
10002518:	e0bff80b 	ldhu	r2,-32(fp)
1000251c:	108000d8 	cmpnei	r2,r2,3
10002520:	103fe81e 	bne	r2,zero,100024c4 <__alt_data_end+0xf80024c4>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("------------[ENUM PROCESS]:get descriptor (class 0x21) pass!-------------------\n");
10002524:	01040074 	movhi	r4,4097
10002528:	210bf904 	addi	r4,r4,12260
1000252c:	00033200 	call	10003320 <puts>

    //-------------------------------get descriptor (class 0x22)-------------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10002530:	00c14004 	movi	r3,1280
10002534:	00803a04 	movi	r2,232
10002538:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
1000253c:	00c14304 	movi	r3,1292
10002540:	00803804 	movi	r2,224
10002544:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10002548:	00c00204 	movi	r3,8
1000254c:	00803804 	movi	r2,224
10002550:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
10002554:	00c0b404 	movi	r3,720
10002558:	00803804 	movi	r2,224
1000255c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
10002560:	00c00044 	movi	r3,1
10002564:	00803804 	movi	r2,224
10002568:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
1000256c:	00c004c4 	movi	r3,19
10002570:	00803804 	movi	r2,224
10002574:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10002578:	00c14504 	movi	r3,1300
1000257c:	00803804 	movi	r2,224
10002580:	10c00035 	stwio	r3,0(r2)

    //td content 4 bytes
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0681); //c
10002584:	00c1a044 	movi	r3,1665
10002588:	00803804 	movi	r2,224
1000258c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x2200); //e //config
10002590:	00c88004 	movi	r3,8704
10002594:	00803804 	movi	r2,224
10002598:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
1000259c:	0007883a 	mov	r3,zero
100025a0:	00803804 	movi	r2,224
100025a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x007B); //2
100025a8:	00c01ec4 	movi	r3,123
100025ac:	00803804 	movi	r2,224
100025b0:	10c00035 	stwio	r3,0(r2)

    //data phase IN-1
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0580); //514
100025b4:	00c16004 	movi	r3,1408
100025b8:	00803804 	movi	r2,224
100025bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
100025c0:	00c00204 	movi	r3,8
100025c4:	00803804 	movi	r2,224
100025c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
100025cc:	00c0a404 	movi	r3,656
100025d0:	00803804 	movi	r2,224
100025d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
100025d8:	00c01044 	movi	r3,65
100025dc:	00803804 	movi	r2,224
100025e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
100025e4:	00c004c4 	movi	r3,19
100025e8:	00803804 	movi	r2,224
100025ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
100025f0:	00c14804 	movi	r3,1312
100025f4:	00803804 	movi	r2,224
100025f8:	10c00035 	stwio	r3,0(r2)

    //data phase IN-2
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0588); //520
100025fc:	00c16204 	movi	r3,1416
10002600:	00803804 	movi	r2,224
10002604:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10002608:	00c00204 	movi	r3,8
1000260c:	00803804 	movi	r2,224
10002610:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10002614:	00c0a404 	movi	r3,656
10002618:	00803804 	movi	r2,224
1000261c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
10002620:	00c00044 	movi	r3,1
10002624:	00803804 	movi	r2,224
10002628:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
1000262c:	00c004c4 	movi	r3,19
10002630:	00803804 	movi	r2,224
10002634:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
10002638:	00c14b04 	movi	r3,1324
1000263c:	00803804 	movi	r2,224
10002640:	10c00035 	stwio	r3,0(r2)

    //data phase IN-3
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0590); //52c
10002644:	00c16404 	movi	r3,1424
10002648:	00803804 	movi	r2,224
1000264c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //e
10002650:	00c00204 	movi	r3,8
10002654:	00803804 	movi	r2,224
10002658:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //530
1000265c:	00c0a404 	movi	r3,656
10002660:	00803804 	movi	r2,224
10002664:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
10002668:	00c01044 	movi	r3,65
1000266c:	00803804 	movi	r2,224
10002670:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10002674:	00c004c4 	movi	r3,19
10002678:	00803804 	movi	r2,224
1000267c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0538); //6
10002680:	00c14e04 	movi	r3,1336
10002684:	00803804 	movi	r2,224
10002688:	10c00035 	stwio	r3,0(r2)

    //data phase IN-4
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0598); //538
1000268c:	00c16604 	movi	r3,1432
10002690:	00803804 	movi	r2,224
10002694:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //a
10002698:	00c00204 	movi	r3,8
1000269c:	00803804 	movi	r2,224
100026a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //c
100026a4:	00c0a404 	movi	r3,656
100026a8:	00803804 	movi	r2,224
100026ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //e //data0
100026b0:	00c00044 	movi	r3,1
100026b4:	00803804 	movi	r2,224
100026b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //540
100026bc:	00c004c4 	movi	r3,19
100026c0:	00803804 	movi	r2,224
100026c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //2
100026c8:	00c15104 	movi	r3,1348
100026cc:	00803804 	movi	r2,224
100026d0:	10c00035 	stwio	r3,0(r2)

    //data phase IN-5
    IOWR(CY7C67200_BASE, HPI_DATA, 0x05a0); //544
100026d4:	00c16804 	movi	r3,1440
100026d8:	00803804 	movi	r2,224
100026dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
100026e0:	00c00204 	movi	r3,8
100026e4:	00803804 	movi	r2,224
100026e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
100026ec:	00c0a404 	movi	r3,656
100026f0:	00803804 	movi	r2,224
100026f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a //data1
100026f8:	00c01044 	movi	r3,65
100026fc:	00803804 	movi	r2,224
10002700:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10002704:	00c004c4 	movi	r3,19
10002708:	00803804 	movi	r2,224
1000270c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0550); //e
10002710:	00c15404 	movi	r3,1360
10002714:	00803804 	movi	r2,224
10002718:	10c00035 	stwio	r3,0(r2)

    //data phase IN-6
    IOWR(CY7C67200_BASE, HPI_DATA, 0x05a8); //550
1000271c:	00c16a04 	movi	r3,1448
10002720:	00803804 	movi	r2,224
10002724:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10002728:	00c00204 	movi	r3,8
1000272c:	00803804 	movi	r2,224
10002730:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10002734:	00c0a404 	movi	r3,656
10002738:	00803804 	movi	r2,224
1000273c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
10002740:	00c00044 	movi	r3,1
10002744:	00803804 	movi	r2,224
10002748:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
1000274c:	00c004c4 	movi	r3,19
10002750:	00803804 	movi	r2,224
10002754:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x055c); //a
10002758:	00c15704 	movi	r3,1372
1000275c:	00803804 	movi	r2,224
10002760:	10c00035 	stwio	r3,0(r2)

    //data phase IN-7
    IOWR(CY7C67200_BASE, HPI_DATA, 0x05b0); //c
10002764:	00c16c04 	movi	r3,1456
10002768:	00803804 	movi	r2,224
1000276c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //e
10002770:	00c00204 	movi	r3,8
10002774:	00803804 	movi	r2,224
10002778:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //560
1000277c:	00c0a404 	movi	r3,656
10002780:	00803804 	movi	r2,224
10002784:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2 //data1
10002788:	00c01044 	movi	r3,65
1000278c:	00803804 	movi	r2,224
10002790:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10002794:	00c004c4 	movi	r3,19
10002798:	00803804 	movi	r2,224
1000279c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0568); //6
100027a0:	00c15a04 	movi	r3,1384
100027a4:	00803804 	movi	r2,224
100027a8:	10c00035 	stwio	r3,0(r2)

    //data phase IN-8
    IOWR(CY7C67200_BASE, HPI_DATA, 0x05b8); //8
100027ac:	00c16e04 	movi	r3,1464
100027b0:	00803804 	movi	r2,224
100027b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0003); //a
100027b8:	00c000c4 	movi	r3,3
100027bc:	00803804 	movi	r2,224
100027c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //c
100027c4:	00c0a404 	movi	r3,656
100027c8:	00803804 	movi	r2,224
100027cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //e //data0
100027d0:	00c00044 	movi	r3,1
100027d4:	00803804 	movi	r2,224
100027d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //570
100027dc:	00c004c4 	movi	r3,19
100027e0:	00803804 	movi	r2,224
100027e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0574); //2
100027e8:	00c15d04 	movi	r3,1396
100027ec:	00803804 	movi	r2,224
100027f0:	10c00035 	stwio	r3,0(r2)

    //status phase
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //574
100027f4:	0007883a 	mov	r3,zero
100027f8:	00803804 	movi	r2,224
100027fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6
10002800:	0007883a 	mov	r3,zero
10002804:	00803804 	movi	r2,224
10002808:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //8
1000280c:	00c08404 	movi	r3,528
10002810:	00803804 	movi	r2,224
10002814:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10002818:	00c01044 	movi	r3,65
1000281c:	00803804 	movi	r2,224
10002820:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10002824:	00c004c4 	movi	r3,19
10002828:	00803804 	movi	r2,224
1000282c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //e
10002830:	0007883a 	mov	r3,zero
10002834:	00803804 	movi	r2,224
10002838:	10c00035 	stwio	r3,0(r2)

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
1000283c:	01414004 	movi	r5,1280
10002840:	01006c04 	movi	r4,432
10002844:	00002c00 	call	100002c0 <UsbWrite>

    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002848:	0000c806 	br	10002b6c <main+0x2778>
    {
        //the starting address
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
1000284c:	00c14004 	movi	r3,1280
10002850:	00803a04 	movi	r2,232
10002854:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x050C);
10002858:	00c14304 	movi	r3,1292
1000285c:	00803804 	movi	r2,224
10002860:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //4 port number
10002864:	00c00204 	movi	r3,8
10002868:	00803804 	movi	r2,224
1000286c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x02D0); //device address
10002870:	00c0b404 	movi	r3,720
10002874:	00803804 	movi	r2,224
10002878:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001);
1000287c:	00c00044 	movi	r3,1
10002880:	00803804 	movi	r2,224
10002884:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);
10002888:	00c004c4 	movi	r3,19
1000288c:	00803804 	movi	r2,224
10002890:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0514);
10002894:	00c14504 	movi	r3,1300
10002898:	00803804 	movi	r2,224
1000289c:	10c00035 	stwio	r3,0(r2)

        //td content 4 bytes
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0681); //c
100028a0:	00c1a044 	movi	r3,1665
100028a4:	00803804 	movi	r2,224
100028a8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x2200); //e //config
100028ac:	00c88004 	movi	r3,8704
100028b0:	00803804 	movi	r2,224
100028b4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //0
100028b8:	0007883a 	mov	r3,zero
100028bc:	00803804 	movi	r2,224
100028c0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x007B); //2
100028c4:	00c01ec4 	movi	r3,123
100028c8:	00803804 	movi	r2,224
100028cc:	10c00035 	stwio	r3,0(r2)

        //data phase IN-1
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0580); //514
100028d0:	00c16004 	movi	r3,1408
100028d4:	00803804 	movi	r2,224
100028d8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
100028dc:	00c00204 	movi	r3,8
100028e0:	00803804 	movi	r2,224
100028e4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
100028e8:	00c0a404 	movi	r3,656
100028ec:	00803804 	movi	r2,224
100028f0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
100028f4:	00c01044 	movi	r3,65
100028f8:	00803804 	movi	r2,224
100028fc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10002900:	00c004c4 	movi	r3,19
10002904:	00803804 	movi	r2,224
10002908:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0520); //e
1000290c:	00c14804 	movi	r3,1312
10002910:	00803804 	movi	r2,224
10002914:	10c00035 	stwio	r3,0(r2)

        //data phase IN-2
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0588); //520
10002918:	00c16204 	movi	r3,1416
1000291c:	00803804 	movi	r2,224
10002920:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10002924:	00c00204 	movi	r3,8
10002928:	00803804 	movi	r2,224
1000292c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10002930:	00c0a404 	movi	r3,656
10002934:	00803804 	movi	r2,224
10002938:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
1000293c:	00c00044 	movi	r3,1
10002940:	00803804 	movi	r2,224
10002944:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10002948:	00c004c4 	movi	r3,19
1000294c:	00803804 	movi	r2,224
10002950:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x052c); //a
10002954:	00c14b04 	movi	r3,1324
10002958:	00803804 	movi	r2,224
1000295c:	10c00035 	stwio	r3,0(r2)

        //data phase IN-3
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0590); //52c
10002960:	00c16404 	movi	r3,1424
10002964:	00803804 	movi	r2,224
10002968:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //e
1000296c:	00c00204 	movi	r3,8
10002970:	00803804 	movi	r2,224
10002974:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //530
10002978:	00c0a404 	movi	r3,656
1000297c:	00803804 	movi	r2,224
10002980:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2
10002984:	00c01044 	movi	r3,65
10002988:	00803804 	movi	r2,224
1000298c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10002990:	00c004c4 	movi	r3,19
10002994:	00803804 	movi	r2,224
10002998:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0538); //6
1000299c:	00c14e04 	movi	r3,1336
100029a0:	00803804 	movi	r2,224
100029a4:	10c00035 	stwio	r3,0(r2)

        //data phase IN-4
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0598); //538
100029a8:	00c16604 	movi	r3,1432
100029ac:	00803804 	movi	r2,224
100029b0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //a
100029b4:	00c00204 	movi	r3,8
100029b8:	00803804 	movi	r2,224
100029bc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //c
100029c0:	00c0a404 	movi	r3,656
100029c4:	00803804 	movi	r2,224
100029c8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //e //data0
100029cc:	00c00044 	movi	r3,1
100029d0:	00803804 	movi	r2,224
100029d4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //540
100029d8:	00c004c4 	movi	r3,19
100029dc:	00803804 	movi	r2,224
100029e0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0544); //2
100029e4:	00c15104 	movi	r3,1348
100029e8:	00803804 	movi	r2,224
100029ec:	10c00035 	stwio	r3,0(r2)

        //data phase IN-5
        IOWR(CY7C67200_BASE, HPI_DATA, 0x05a0); //544
100029f0:	00c16804 	movi	r3,1440
100029f4:	00803804 	movi	r2,224
100029f8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //6
100029fc:	00c00204 	movi	r3,8
10002a00:	00803804 	movi	r2,224
10002a04:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //8
10002a08:	00c0a404 	movi	r3,656
10002a0c:	00803804 	movi	r2,224
10002a10:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a //data1
10002a14:	00c01044 	movi	r3,65
10002a18:	00803804 	movi	r2,224
10002a1c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10002a20:	00c004c4 	movi	r3,19
10002a24:	00803804 	movi	r2,224
10002a28:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0550); //e
10002a2c:	00c15404 	movi	r3,1360
10002a30:	00803804 	movi	r2,224
10002a34:	10c00035 	stwio	r3,0(r2)

        //data phase IN-6
        IOWR(CY7C67200_BASE, HPI_DATA, 0x05a8); //550
10002a38:	00c16a04 	movi	r3,1448
10002a3c:	00803804 	movi	r2,224
10002a40:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //2
10002a44:	00c00204 	movi	r3,8
10002a48:	00803804 	movi	r2,224
10002a4c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //4
10002a50:	00c0a404 	movi	r3,656
10002a54:	00803804 	movi	r2,224
10002a58:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data0
10002a5c:	00c00044 	movi	r3,1
10002a60:	00803804 	movi	r2,224
10002a64:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //8
10002a68:	00c004c4 	movi	r3,19
10002a6c:	00803804 	movi	r2,224
10002a70:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x055c); //a
10002a74:	00c15704 	movi	r3,1372
10002a78:	00803804 	movi	r2,224
10002a7c:	10c00035 	stwio	r3,0(r2)

        //data phase IN-7
        IOWR(CY7C67200_BASE, HPI_DATA, 0x05b0); //c
10002a80:	00c16c04 	movi	r3,1456
10002a84:	00803804 	movi	r2,224
10002a88:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0008); //e
10002a8c:	00c00204 	movi	r3,8
10002a90:	00803804 	movi	r2,224
10002a94:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //560
10002a98:	00c0a404 	movi	r3,656
10002a9c:	00803804 	movi	r2,224
10002aa0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //2 //data1
10002aa4:	00c01044 	movi	r3,65
10002aa8:	00803804 	movi	r2,224
10002aac:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //4
10002ab0:	00c004c4 	movi	r3,19
10002ab4:	00803804 	movi	r2,224
10002ab8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0568); //6
10002abc:	00c15a04 	movi	r3,1384
10002ac0:	00803804 	movi	r2,224
10002ac4:	10c00035 	stwio	r3,0(r2)

        //data phase IN-8
        IOWR(CY7C67200_BASE, HPI_DATA, 0x05b8); //8
10002ac8:	00c16e04 	movi	r3,1464
10002acc:	00803804 	movi	r2,224
10002ad0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0003); //a
10002ad4:	00c000c4 	movi	r3,3
10002ad8:	00803804 	movi	r2,224
10002adc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0290); //c
10002ae0:	00c0a404 	movi	r3,656
10002ae4:	00803804 	movi	r2,224
10002ae8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //e //data1
10002aec:	00c00044 	movi	r3,1
10002af0:	00803804 	movi	r2,224
10002af4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //570
10002af8:	00c004c4 	movi	r3,19
10002afc:	00803804 	movi	r2,224
10002b00:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0574); //2
10002b04:	00c15d04 	movi	r3,1396
10002b08:	00803804 	movi	r2,224
10002b0c:	10c00035 	stwio	r3,0(r2)

        //status phase
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //574
10002b10:	0007883a 	mov	r3,zero
10002b14:	00803804 	movi	r2,224
10002b18:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //6
10002b1c:	0007883a 	mov	r3,zero
10002b20:	00803804 	movi	r2,224
10002b24:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0210); //8
10002b28:	00c08404 	movi	r3,528
10002b2c:	00803804 	movi	r2,224
10002b30:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //a
10002b34:	00c01044 	movi	r3,65
10002b38:	00803804 	movi	r2,224
10002b3c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013); //c
10002b40:	00c004c4 	movi	r3,19
10002b44:	00803804 	movi	r2,224
10002b48:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000); //e
10002b4c:	0007883a 	mov	r3,zero
10002b50:	00803804 	movi	r2,224
10002b54:	10c00035 	stwio	r3,0(r2)

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10002b58:	01414004 	movi	r5,1280
10002b5c:	01006c04 	movi	r4,432
10002b60:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
10002b64:	0109c404 	movi	r4,10000
10002b68:	001098c0 	call	1001098c <usleep>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr

    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002b6c:	00803b04 	movi	r2,236
10002b70:	10800037 	ldwio	r2,0(r2)
10002b74:	1080040c 	andi	r2,r2,16
10002b78:	103f3426 	beq	r2,zero,1000284c <__alt_data_end+0xf800284c>

        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002b7c:	01005104 	movi	r4,324
10002b80:	00003080 	call	10000308 <UsbRead>
10002b84:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002b88:	000b883a 	mov	r5,zero
10002b8c:	01005104 	movi	r4,324
10002b90:	00002c00 	call	100002c0 <UsbWrite>
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10002b94:	00000d06 	br	10002bcc <main+0x27d8>
    {
        if (usb_ctl_val == 0x000)
10002b98:	e0bff80b 	ldhu	r2,-32(fp)
10002b9c:	10000526 	beq	r2,zero,10002bb4 <main+0x27c0>
        {
        }
        else
        {
            printf("[SIE1 MSG]: SIE 1 msg reg is %x\n", usb_ctl_val);
10002ba0:	e0bff80b 	ldhu	r2,-32(fp)
10002ba4:	100b883a 	mov	r5,r2
10002ba8:	01040074 	movhi	r4,4097
10002bac:	210c0d04 	addi	r4,r4,12340
10002bb0:	00032240 	call	10003224 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002bb4:	01005104 	movi	r4,324
10002bb8:	00003080 	call	10000308 <UsbRead>
10002bbc:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002bc0:	000b883a 	mov	r5,zero
10002bc4:	01005104 	movi	r4,324
10002bc8:	00002c00 	call	100002c0 <UsbWrite>
        usleep(10 * 1000);
    }

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000) //read sie1 msg register
10002bcc:	e0bff80b 	ldhu	r2,-32(fp)
10002bd0:	10840018 	cmpnei	r2,r2,4096
10002bd4:	103ff01e 	bne	r2,zero,10002b98 <__alt_data_end+0xf8002b98>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0506);
10002bd8:	00c14184 	movi	r3,1286
10002bdc:	00803a04 	movi	r2,232
10002be0:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));
10002be4:	00803804 	movi	r2,224
10002be8:	10800037 	ldwio	r2,0(r2)
10002bec:	100b883a 	mov	r5,r2
10002bf0:	01040074 	movhi	r4,4097
10002bf4:	210c1604 	addi	r4,r4,12376
10002bf8:	00032240 	call	10003224 <printf>

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10002bfc:	00c14204 	movi	r3,1288
10002c00:	00803a04 	movi	r2,232
10002c04:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10002c08:	00803804 	movi	r2,224
10002c0c:	10800037 	ldwio	r2,0(r2)
10002c10:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n", usb_ctl_val);
10002c14:	e0bff80b 	ldhu	r2,-32(fp)
10002c18:	100b883a 	mov	r5,r2
10002c1c:	01040074 	movhi	r4,4097
10002c20:	210c2204 	addi	r4,r4,12424
10002c24:	00032240 	call	10003224 <printf>
    while (usb_ctl_val != 0x03)
10002c28:	00001506 	br	10002c80 <main+0x288c>
    {
        IORD(CY7C67200_BASE, HPI_STATUS);
10002c2c:	00803b04 	movi	r2,236
10002c30:	10800037 	ldwio	r2,0(r2)
        if (UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
10002c34:	01005104 	movi	r4,324
10002c38:	00003080 	call	10000308 <UsbRead>
10002c3c:	10bfffcc 	andi	r2,r2,65535
10002c40:	10840018 	cmpnei	r2,r2,4096
10002c44:	1000081e 	bne	r2,zero,10002c68 <main+0x2874>
        {
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002c48:	000b883a 	mov	r5,zero
10002c4c:	01005104 	movi	r4,324
10002c50:	00002c00 	call	100002c0 <UsbWrite>

            while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002c54:	0001883a 	nop
10002c58:	00803b04 	movi	r2,236
10002c5c:	10800037 	ldwio	r2,0(r2)
10002c60:	1080040c 	andi	r2,r2,16
10002c64:	103ffc26 	beq	r2,zero,10002c58 <__alt_data_end+0xf8002c58>
            {
            }
        }
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10002c68:	00c14204 	movi	r3,1288
10002c6c:	00803a04 	movi	r2,232
10002c70:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10002c74:	00803804 	movi	r2,224
10002c78:	10800037 	ldwio	r2,0(r2)
10002c7c:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n", IORD(CY7C67200_BASE, HPI_DATA));

    IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03)
10002c80:	e0bff80b 	ldhu	r2,-32(fp)
10002c84:	108000d8 	cmpnei	r2,r2,3
10002c88:	103fe81e 	bne	r2,zero,10002c2c <__alt_data_end+0xf8002c2c>
        //usleep(1000);
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
    }

    printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) pass!----------------\n");
10002c8c:	01040074 	movhi	r4,4097
10002c90:	210c2e04 	addi	r4,r4,12472
10002c94:	00033200 	call	10003320 <puts>

    //-----------------------------------get mouse x y button value------------------------------------------------//
    usleep(10000);
10002c98:	0109c404 	movi	r4,10000
10002c9c:	001098c0 	call	1001098c <usleep>
    while (1)
    {
        toggle++;
10002ca0:	e0bffbc3 	ldbu	r2,-17(fp)
10002ca4:	10800044 	addi	r2,r2,1
10002ca8:	e0bffbc5 	stb	r2,-17(fp)
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10002cac:	00c14004 	movi	r3,1280
10002cb0:	00803a04 	movi	r2,232
10002cb4:	10c00035 	stwio	r3,0(r2)
        //data phase IN-1
        IOWR(CY7C67200_BASE, HPI_DATA, 0x051c); //500
10002cb8:	00c14704 	movi	r3,1308
10002cbc:	00803804 	movi	r2,224
10002cc0:	10c00035 	stwio	r3,0(r2)
        if (data_size == 8)
10002cc4:	e0bffe83 	ldbu	r2,-6(fp)
10002cc8:	10800218 	cmpnei	r2,r2,8
10002ccc:	1000041e 	bne	r2,zero,10002ce0 <main+0x28ec>
        {
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0006); //2 data length
10002cd0:	00c00184 	movi	r3,6
10002cd4:	00803804 	movi	r2,224
10002cd8:	10c00035 	stwio	r3,0(r2)
10002cdc:	00000406 	br	10002cf0 <main+0x28fc>
        }
        else
        {
            IOWR(CY7C67200_BASE, HPI_DATA, 0x000f & data_size); //2 data length
10002ce0:	e0bffe83 	ldbu	r2,-6(fp)
10002ce4:	10c003cc 	andi	r3,r2,15
10002ce8:	00803804 	movi	r2,224
10002cec:	10c00035 	stwio	r3,0(r2)
        }
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0291); //4 //endpoint 1
10002cf0:	00c0a444 	movi	r3,657
10002cf4:	00803804 	movi	r2,224
10002cf8:	10c00035 	stwio	r3,0(r2)
        if (toggle % 2)
10002cfc:	e0bffbc3 	ldbu	r2,-17(fp)
10002d00:	1080004c 	andi	r2,r2,1
10002d04:	10803fcc 	andi	r2,r2,255
10002d08:	10000426 	beq	r2,zero,10002d1c <main+0x2928>
        {
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data 1
10002d0c:	00c00044 	movi	r3,1
10002d10:	00803804 	movi	r2,224
10002d14:	10c00035 	stwio	r3,0(r2)
10002d18:	00000306 	br	10002d28 <main+0x2934>
        }
        else
        {
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //6 //data 1
10002d1c:	00c01044 	movi	r3,65
10002d20:	00803804 	movi	r2,224
10002d24:	10c00035 	stwio	r3,0(r2)
        }
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);    //8
10002d28:	00c004c4 	movi	r3,19
10002d2c:	00803804 	movi	r2,224
10002d30:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);    //a
10002d34:	0007883a 	mov	r3,zero
10002d38:	00803804 	movi	r2,224
10002d3c:	10c00035 	stwio	r3,0(r2)
        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10002d40:	01414004 	movi	r5,1280
10002d44:	01006c04 	movi	r4,432
10002d48:	00002c00 	call	100002c0 <UsbWrite>
        //usleep(10*1000);
        while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002d4c:	00002a06 	br	10002df8 <main+0x2a04>
        {
            IOWR(CY7C67200_BASE, HPI_ADDR, 0x0500); //the start address
10002d50:	00c14004 	movi	r3,1280
10002d54:	00803a04 	movi	r2,232
10002d58:	10c00035 	stwio	r3,0(r2)
            //data phase IN-1
            IOWR(CY7C67200_BASE, HPI_DATA, 0x051c); //500
10002d5c:	00c14704 	movi	r3,1308
10002d60:	00803804 	movi	r2,224
10002d64:	10c00035 	stwio	r3,0(r2)
            if (data_size == 8)
10002d68:	e0bffe83 	ldbu	r2,-6(fp)
10002d6c:	10800218 	cmpnei	r2,r2,8
10002d70:	1000041e 	bne	r2,zero,10002d84 <main+0x2990>
            {
                IOWR(CY7C67200_BASE, HPI_DATA, 0x0006); //2 data length
10002d74:	00c00184 	movi	r3,6
10002d78:	00803804 	movi	r2,224
10002d7c:	10c00035 	stwio	r3,0(r2)
10002d80:	00000406 	br	10002d94 <main+0x29a0>
            }
            else
            {
                IOWR(CY7C67200_BASE, HPI_DATA, 0x000f & data_size); //2 data length
10002d84:	e0bffe83 	ldbu	r2,-6(fp)
10002d88:	10c003cc 	andi	r3,r2,15
10002d8c:	00803804 	movi	r2,224
10002d90:	10c00035 	stwio	r3,0(r2)
            }
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0291); //4 //endpoint 1
10002d94:	00c0a444 	movi	r3,657
10002d98:	00803804 	movi	r2,224
10002d9c:	10c00035 	stwio	r3,0(r2)
            if (toggle % 2)
10002da0:	e0bffbc3 	ldbu	r2,-17(fp)
10002da4:	1080004c 	andi	r2,r2,1
10002da8:	10803fcc 	andi	r2,r2,255
10002dac:	10000426 	beq	r2,zero,10002dc0 <main+0x29cc>
            {
                IOWR(CY7C67200_BASE, HPI_DATA, 0x0001); //6 //data 1
10002db0:	00c00044 	movi	r3,1
10002db4:	00803804 	movi	r2,224
10002db8:	10c00035 	stwio	r3,0(r2)
10002dbc:	00000306 	br	10002dcc <main+0x29d8>
            }
            else
            {
                IOWR(CY7C67200_BASE, HPI_DATA, 0x0041); //6 //data 1
10002dc0:	00c01044 	movi	r3,65
10002dc4:	00803804 	movi	r2,224
10002dc8:	10c00035 	stwio	r3,0(r2)
            }
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);    //8
10002dcc:	00c004c4 	movi	r3,19
10002dd0:	00803804 	movi	r2,224
10002dd4:	10c00035 	stwio	r3,0(r2)
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);    //a
10002dd8:	0007883a 	mov	r3,zero
10002ddc:	00803804 	movi	r2,224
10002de0:	10c00035 	stwio	r3,0(r2)
            UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10002de4:	01414004 	movi	r5,1280
10002de8:	01006c04 	movi	r4,432
10002dec:	00002c00 	call	100002c0 <UsbWrite>
            usleep(10 * 1000);
10002df0:	0109c404 	movi	r4,10000
10002df4:	001098c0 	call	1001098c <usleep>
        }
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);    //8
        IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);    //a
        UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
        //usleep(10*1000);
        while (!(IORD(CY7C67200_BASE, HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG)) //read sie1 msg register
10002df8:	00803b04 	movi	r2,236
10002dfc:	10800037 	ldwio	r2,0(r2)
10002e00:	1080040c 	andi	r2,r2,16
10002e04:	103fd226 	beq	r2,zero,10002d50 <__alt_data_end+0xf8002d50>
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0013);    //8
            IOWR(CY7C67200_BASE, HPI_DATA, 0x0000);    //a
            UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
            usleep(10 * 1000);
        } //end while
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002e08:	01005104 	movi	r4,324
10002e0c:	00003080 	call	10000308 <UsbRead>
10002e10:	e0bff80d 	sth	r2,-32(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002e14:	000b883a 	mov	r5,zero
10002e18:	01005104 	movi	r4,324
10002e1c:	00002c00 	call	100002c0 <UsbWrite>
        while (usb_ctl_val != 0x1000) //read sie1 msg register
10002e20:	00000d06 	br	10002e58 <main+0x2a64>
        {
            if (usb_ctl_val == 0x000)
10002e24:	e0bff80b 	ldhu	r2,-32(fp)
10002e28:	10000526 	beq	r2,zero,10002e40 <main+0x2a4c>
            {
            }
            else
            {
                printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
10002e2c:	e0bff80b 	ldhu	r2,-32(fp)
10002e30:	100b883a 	mov	r5,r2
10002e34:	01040074 	movhi	r4,4097
10002e38:	210ab004 	addi	r4,r4,10944
10002e3c:	00032240 	call	10003224 <printf>
            }
            usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002e40:	01005104 	movi	r4,324
10002e44:	00003080 	call	10000308 <UsbRead>
10002e48:	e0bff80d 	sth	r2,-32(fp)
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002e4c:	000b883a 	mov	r5,zero
10002e50:	01005104 	movi	r4,324
10002e54:	00002c00 	call	100002c0 <UsbWrite>
            UsbWrite(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
            usleep(10 * 1000);
        } //end while
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
        while (usb_ctl_val != 0x1000) //read sie1 msg register
10002e58:	e0bff80b 	ldhu	r2,-32(fp)
10002e5c:	10840018 	cmpnei	r2,r2,4096
10002e60:	103ff01e 	bne	r2,zero,10002e24 <__alt_data_end+0xf8002e24>
                printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
            }
            usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
            UsbWrite(HPI_SIE1_MSG_ADR, 0);
        }
        IOWR(CY7C67200_BASE, HPI_ADDR, 0x0508);
10002e64:	00c14204 	movi	r3,1288
10002e68:	00803a04 	movi	r2,232
10002e6c:	10c00035 	stwio	r3,0(r2)
        usb_ctl_val = IORD(CY7C67200_BASE, HPI_DATA);
10002e70:	00803804 	movi	r2,224
10002e74:	10800037 	ldwio	r2,0(r2)
10002e78:	e0bff80d 	sth	r2,-32(fp)

        if (usb_ctl_val != 0x03)
10002e7c:	e0bff80b 	ldhu	r2,-32(fp)
10002e80:	108000e0 	cmpeqi	r2,r2,3
10002e84:	1000051e 	bne	r2,zero,10002e9c <main+0x2aa8>
        {
            pbutton = 0;
10002e88:	e03ffb85 	stb	zero,-18(fp)
            dx = 0;
10002e8c:	e03ffb05 	stb	zero,-20(fp)
            dy = 0;
10002e90:	e03ffb45 	stb	zero,-19(fp)
            button_value = 0;
10002e94:	e03ffec5 	stb	zero,-5(fp)
10002e98:	0000a506 	br	10003130 <main+0x2d3c>
        }

        else
        {
            if (data_size != 8)
10002e9c:	e0bffe83 	ldbu	r2,-6(fp)
10002ea0:	10800220 	cmpeqi	r2,r2,8
10002ea4:	10006c1e 	bne	r2,zero,10003058 <main+0x2c64>
            {
                //printf("\n----------------\n");
                
                
                IOWR(CY7C67200_BASE, HPI_ADDR, 0x051c); //the start address
10002ea8:	00c14704 	movi	r3,1308
10002eac:	00803a04 	movi	r2,232
10002eb0:	10c00035 	stwio	r3,0(r2)
                read = (signed short) IORD(CY7C67200_BASE, HPI_DATA);
10002eb4:	00803804 	movi	r2,224
10002eb8:	10800037 	ldwio	r2,0(r2)
10002ebc:	e0bfff0d 	sth	r2,-4(fp)
                //printf("the read from 0x051c is: 0x%04x\n",read);
                button_value = (signed char)(read & 0xff);
10002ec0:	e0bfff0b 	ldhu	r2,-4(fp)
10002ec4:	e0bffec5 	stb	r2,-5(fp)
                }
                else
                {
                    pbutton = 0;
                }*/
                pbutton = button_value & 0x07;
10002ec8:	e0bffec3 	ldbu	r2,-5(fp)
10002ecc:	108001cc 	andi	r2,r2,7
10002ed0:	e0bffb85 	stb	r2,-18(fp)
                
                
                

                button_value = (signed char)((read >> 8) & 0xff);
10002ed4:	e0bfff0f 	ldh	r2,-4(fp)
10002ed8:	1005d23a 	srai	r2,r2,8
10002edc:	e0bffec5 	stb	r2,-5(fp)
                    else
                    {
                        dx = (signed char)((button_value) & 0xff);
                    }
                }*/
                dx = button_value;
10002ee0:	e0bffec3 	ldbu	r2,-5(fp)
10002ee4:	e0bffb05 	stb	r2,-20(fp)
                //printf("[dx, dx_prev1, dx_prev2, dx_prev3]:%d, %d, %d, %d\n", dx, dx_prev1, dx_prev2, dx_prev3);
                //if (dx_prev2 < -48 && dx_prev1 < -80 && dx >0){
                if ((dx_prev2 < -4 && dx_prev1 < dx_prev2 && dx > 0) || (dx_prev2 <=0 && dx_prev2 - dx_prev1 > 40 && dx>0)){
10002ee8:	e0bffc47 	ldb	r2,-15(fp)
10002eec:	10bfff08 	cmpgei	r2,r2,-4
10002ef0:	1000051e 	bne	r2,zero,10002f08 <main+0x2b14>
10002ef4:	e0fffc07 	ldb	r3,-16(fp)
10002ef8:	e0bffc47 	ldb	r2,-15(fp)
10002efc:	1880020e 	bge	r3,r2,10002f08 <main+0x2b14>
10002f00:	e0bffb07 	ldb	r2,-20(fp)
10002f04:	00800916 	blt	zero,r2,10002f2c <main+0x2b38>
10002f08:	e0bffc47 	ldb	r2,-15(fp)
10002f0c:	00800a16 	blt	zero,r2,10002f38 <main+0x2b44>
10002f10:	e0fffc47 	ldb	r3,-15(fp)
10002f14:	e0bffc07 	ldb	r2,-16(fp)
10002f18:	1885c83a 	sub	r2,r3,r2
10002f1c:	10800a50 	cmplti	r2,r2,41
10002f20:	1000051e 	bne	r2,zero,10002f38 <main+0x2b44>
10002f24:	e0bffb07 	ldb	r2,-20(fp)
10002f28:	0080030e 	bge	zero,r2,10002f38 <main+0x2b44>
                //if ((dx_prev2 <=0 && dx_prev1 < dx_prev2 && dx > 0) || (dx_prev2 <0 && dx_prev1 <= dx_prev2  && dx>0)){
                //if ((dx_prev3 <=0 && dx_prev1 < dx_prev2 && dx_prev2 < dx_prev3 && dx > 0) || (dx_prev3 <0 && dx_prev2 - dx_prev1 > dx_prev3 - dx_prev2 && dx>0)){
                    dx = -128;
10002f2c:	00bfe004 	movi	r2,-128
10002f30:	e0bffb05 	stb	r2,-20(fp)
10002f34:	00001306 	br	10002f84 <main+0x2b90>
                }
                //else if(dx_prev1 > 48 && dx_prev1 > 80 && dx <0){
                else if((dx_prev2> 4 && dx_prev1 > dx_prev2 && dx <0) || (dx_prev2 >=0 && dx_prev1 - dx_prev2 > 40 && dx<0)){
10002f38:	e0bffc47 	ldb	r2,-15(fp)
10002f3c:	10800150 	cmplti	r2,r2,5
10002f40:	1000051e 	bne	r2,zero,10002f58 <main+0x2b64>
10002f44:	e0bffc07 	ldb	r2,-16(fp)
10002f48:	e0fffc47 	ldb	r3,-15(fp)
10002f4c:	1880020e 	bge	r3,r2,10002f58 <main+0x2b64>
10002f50:	e0bffb07 	ldb	r2,-20(fp)
10002f54:	10000916 	blt	r2,zero,10002f7c <main+0x2b88>
10002f58:	e0bffc47 	ldb	r2,-15(fp)
10002f5c:	10000916 	blt	r2,zero,10002f84 <main+0x2b90>
10002f60:	e0fffc07 	ldb	r3,-16(fp)
10002f64:	e0bffc47 	ldb	r2,-15(fp)
10002f68:	1885c83a 	sub	r2,r3,r2
10002f6c:	10800a50 	cmplti	r2,r2,41
10002f70:	1000041e 	bne	r2,zero,10002f84 <main+0x2b90>
10002f74:	e0bffb07 	ldb	r2,-20(fp)
10002f78:	1000020e 	bge	r2,zero,10002f84 <main+0x2b90>
                //else if((dx_prev2 >=0 && dx_prev1 > dx_prev2 && dx <0) || (dx_prev2 >0 && dx_prev1 >= dx_prev2 && dx<0)){
                //else if ((dx_prev3 >=0 && dx_prev1 > dx_prev2 && dx_prev2 > dx_prev3 && dx < 0) || (dx_prev3 >0 && dx_prev1 - dx_prev2 > dx_prev2 - dx_prev3 && dx<0)){
                    dx = 127;
10002f7c:	00801fc4 	movi	r2,127
10002f80:	e0bffb05 	stb	r2,-20(fp)
                }
                
                
                
                IOWR(CY7C67200_BASE, HPI_ADDR, 0x051e);
10002f84:	00c14784 	movi	r3,1310
10002f88:	00803a04 	movi	r2,232
10002f8c:	10c00035 	stwio	r3,0(r2)
                read = (signed short) IORD(CY7C67200_BASE, HPI_DATA);
10002f90:	00803804 	movi	r2,224
10002f94:	10800037 	ldwio	r2,0(r2)
10002f98:	e0bfff0d 	sth	r2,-4(fp)
                //printf("the read from 0x051e is: 0x%04x\n", read);
                button_value = (signed char)((read / 16));
10002f9c:	e0bfff0f 	ldh	r2,-4(fp)
10002fa0:	1000010e 	bge	r2,zero,10002fa8 <main+0x2bb4>
10002fa4:	108003c4 	addi	r2,r2,15
10002fa8:	1005d13a 	srai	r2,r2,4
10002fac:	e0bffec5 	stb	r2,-5(fp)
                    else
                    {
                        dy = (signed char)(button_value & 0xff);
                    }
                }*/
                dy = button_value;
10002fb0:	e0bffec3 	ldbu	r2,-5(fp)
10002fb4:	e0bffb45 	stb	r2,-19(fp)
                //printf("[dy, dy_prev1, dy_prev2, dy_prev3]:%d, %d, %d, %d\n", dy, dy_prev1, dy_prev2, dy_prev3);
                if ((dy_prev2 < -4 && dy_prev1 < dy_prev2 && dy > 0) || (dy_prev2 <=0 && dy_prev2 - dy_prev1 > 40 && dy>0)){
10002fb8:	e0bffcc7 	ldb	r2,-13(fp)
10002fbc:	10bfff08 	cmpgei	r2,r2,-4
10002fc0:	1000051e 	bne	r2,zero,10002fd8 <main+0x2be4>
10002fc4:	e0fffc87 	ldb	r3,-14(fp)
10002fc8:	e0bffcc7 	ldb	r2,-13(fp)
10002fcc:	1880020e 	bge	r3,r2,10002fd8 <main+0x2be4>
10002fd0:	e0bffb47 	ldb	r2,-19(fp)
10002fd4:	00800916 	blt	zero,r2,10002ffc <main+0x2c08>
10002fd8:	e0bffcc7 	ldb	r2,-13(fp)
10002fdc:	00800a16 	blt	zero,r2,10003008 <main+0x2c14>
10002fe0:	e0fffcc7 	ldb	r3,-13(fp)
10002fe4:	e0bffc87 	ldb	r2,-14(fp)
10002fe8:	1885c83a 	sub	r2,r3,r2
10002fec:	10800a50 	cmplti	r2,r2,41
10002ff0:	1000051e 	bne	r2,zero,10003008 <main+0x2c14>
10002ff4:	e0bffb47 	ldb	r2,-19(fp)
10002ff8:	0080030e 	bge	zero,r2,10003008 <main+0x2c14>
                    dy = -128;
10002ffc:	00bfe004 	movi	r2,-128
10003000:	e0bffb45 	stb	r2,-19(fp)
10003004:	00004a06 	br	10003130 <main+0x2d3c>
                }
                else if((dy_prev2> 4 && dy_prev1 > dy_prev2 && dy <0) || (dy_prev2 >=0 && dy_prev1 - dy_prev2 > 40 && dy<0)){
10003008:	e0bffcc7 	ldb	r2,-13(fp)
1000300c:	10800150 	cmplti	r2,r2,5
10003010:	1000051e 	bne	r2,zero,10003028 <main+0x2c34>
10003014:	e0bffc87 	ldb	r2,-14(fp)
10003018:	e0fffcc7 	ldb	r3,-13(fp)
1000301c:	1880020e 	bge	r3,r2,10003028 <main+0x2c34>
10003020:	e0bffb47 	ldb	r2,-19(fp)
10003024:	10000916 	blt	r2,zero,1000304c <main+0x2c58>
10003028:	e0bffcc7 	ldb	r2,-13(fp)
1000302c:	10004016 	blt	r2,zero,10003130 <main+0x2d3c>
10003030:	e0fffc87 	ldb	r3,-14(fp)
10003034:	e0bffcc7 	ldb	r2,-13(fp)
10003038:	1885c83a 	sub	r2,r3,r2
1000303c:	10800a50 	cmplti	r2,r2,41
10003040:	10003b1e 	bne	r2,zero,10003130 <main+0x2d3c>
10003044:	e0bffb47 	ldb	r2,-19(fp)
10003048:	1000390e 	bge	r2,zero,10003130 <main+0x2d3c>
                    dy = 127;
1000304c:	00801fc4 	movi	r2,127
10003050:	e0bffb45 	stb	r2,-19(fp)
10003054:	00003606 	br	10003130 <main+0x2d3c>
                read = (signed short)IORD(CY7C67200_BASE, HPI_DATA);
                printf("the read from 0x0500 is: 0x%04x\n", read);*/
            }
            else //>8
            {
                IOWR(CY7C67200_BASE, HPI_ADDR, 0x051c); //the start address
10003058:	00c14704 	movi	r3,1308
1000305c:	00803a04 	movi	r2,232
10003060:	10c00035 	stwio	r3,0(r2)
                button_value = IORD(CY7C67200_BASE, HPI_DATA);
10003064:	00803804 	movi	r2,224
10003068:	10800037 	ldwio	r2,0(r2)
1000306c:	e0bffec5 	stb	r2,-5(fp)
                if (((button_value >> 8) & 0x00ff) == 0x0001)
10003070:	e0bffec7 	ldb	r2,-5(fp)
10003074:	1005d23a 	srai	r2,r2,8
10003078:	10803fcc 	andi	r2,r2,255
1000307c:	10800058 	cmpnei	r2,r2,1
10003080:	1000031e 	bne	r2,zero,10003090 <main+0x2c9c>
                {
                    //printf("left button\n");
                    pbutton = 1;
10003084:	00800044 	movi	r2,1
10003088:	e0bffb85 	stb	r2,-18(fp)
1000308c:	00000906 	br	100030b4 <main+0x2cc0>
                }
                else if (((button_value >> 8) & 0x00ff) == 0x0002)
10003090:	e0bffec7 	ldb	r2,-5(fp)
10003094:	1005d23a 	srai	r2,r2,8
10003098:	10803fcc 	andi	r2,r2,255
1000309c:	10800098 	cmpnei	r2,r2,2
100030a0:	1000031e 	bne	r2,zero,100030b0 <main+0x2cbc>
                {
                    //printf("right button\n");
                    pbutton = 2;
100030a4:	00800084 	movi	r2,2
100030a8:	e0bffb85 	stb	r2,-18(fp)
100030ac:	00000106 	br	100030b4 <main+0x2cc0>
                }
                else
                {
                    pbutton = 0;
100030b0:	e03ffb85 	stb	zero,-18(fp)
                }
                button_value = IORD(CY7C67200_BASE, HPI_DATA);
100030b4:	00803804 	movi	r2,224
100030b8:	10800037 	ldwio	r2,0(r2)
100030bc:	e0bffec5 	stb	r2,-5(fp)
                if ((signed char)((button_value >> 8) & 0x00ff) != 0)
100030c0:	e0bffec7 	ldb	r2,-5(fp)
100030c4:	1005d23a 	srai	r2,r2,8
100030c8:	10803fcc 	andi	r2,r2,255
100030cc:	1080201c 	xori	r2,r2,128
100030d0:	10bfe004 	addi	r2,r2,-128
100030d4:	10000c26 	beq	r2,zero,10003108 <main+0x2d14>
                {
                    if ((signed char)((button_value >> 8) & 0x00ff) == dy)
100030d8:	e0bffec7 	ldb	r2,-5(fp)
100030dc:	1005d23a 	srai	r2,r2,8
100030e0:	10c03fcc 	andi	r3,r2,255
100030e4:	18c0201c 	xori	r3,r3,128
100030e8:	18ffe004 	addi	r3,r3,-128
100030ec:	e0bffb47 	ldb	r2,-19(fp)
100030f0:	1880021e 	bne	r3,r2,100030fc <main+0x2d08>
                    {
                        dy = 0;
100030f4:	e03ffb45 	stb	zero,-19(fp)
100030f8:	00000306 	br	10003108 <main+0x2d14>
                    }
                    else
                    {
                        dy = (signed char)((button_value >> 8) & 0xff);
100030fc:	e0bffec7 	ldb	r2,-5(fp)
10003100:	1005d23a 	srai	r2,r2,8
10003104:	e0bffb45 	stb	r2,-19(fp)
                    }
                }

                if (button_value & 0x0ff)
10003108:	e0bffec7 	ldb	r2,-5(fp)
1000310c:	10803fcc 	andi	r2,r2,255
10003110:	10000726 	beq	r2,zero,10003130 <main+0x2d3c>
                {
                    //printf("dy value is %d\n",button_value&0xff);
                    if ((signed char)(button_value & 0x00ff) == dx)
10003114:	e0fffec7 	ldb	r3,-5(fp)
10003118:	e0bffb07 	ldb	r2,-20(fp)
1000311c:	1880021e 	bne	r3,r2,10003128 <main+0x2d34>
                    {
                        dx = 0;
10003120:	e03ffb05 	stb	zero,-20(fp)
10003124:	00000206 	br	10003130 <main+0x2d3c>
                    }
                    else
                    {
                        dx = (signed char)(button_value & 0xff);
10003128:	e0bffec3 	ldbu	r2,-5(fp)
1000312c:	e0bffb05 	stb	r2,-20(fp)
                    }
                }
            }
        }

        dx_prev3 = dx_prev2;
10003130:	e0bffc43 	ldbu	r2,-15(fp)
10003134:	e0bffd85 	stb	r2,-10(fp)
        dx_prev2 = dx_prev1;
10003138:	e0bffc03 	ldbu	r2,-16(fp)
1000313c:	e0bffc45 	stb	r2,-15(fp)
        dx_prev1 = dx;
10003140:	e0bffb03 	ldbu	r2,-20(fp)
10003144:	e0bffc05 	stb	r2,-16(fp)
        dy_prev3 = dy_prev2;
10003148:	e0bffcc3 	ldbu	r2,-13(fp)
1000314c:	e0bffdc5 	stb	r2,-9(fp)
        dy_prev2 = dy_prev1;
10003150:	e0bffc83 	ldbu	r2,-14(fp)
10003154:	e0bffcc5 	stb	r2,-13(fp)
        dy_prev1 = dy;
10003158:	e0bffb43 	ldbu	r2,-19(fp)
1000315c:	e0bffc85 	stb	r2,-14(fp)

        px = px + dx;
10003160:	e0bffb07 	ldb	r2,-20(fp)
10003164:	e0fff917 	ldw	r3,-28(fp)
10003168:	1885883a 	add	r2,r3,r2
1000316c:	e0bff915 	stw	r2,-28(fp)
        py = py + dy;
10003170:	e0bffb47 	ldb	r2,-19(fp)
10003174:	e0fffa17 	ldw	r3,-24(fp)
10003178:	1885883a 	add	r2,r3,r2
1000317c:	e0bffa15 	stw	r2,-24(fp)

        px = maxmin(px, 639, 0);
10003180:	000d883a 	mov	r6,zero
10003184:	01409fc4 	movi	r5,639
10003188:	e13ff917 	ldw	r4,-28(fp)
1000318c:	000026c0 	call	1000026c <maxmin>
10003190:	e0bff915 	stw	r2,-28(fp)
        py = maxmin(py, 479, 0);
10003194:	000d883a 	mov	r6,zero
10003198:	014077c4 	movi	r5,479
1000319c:	e13ffa17 	ldw	r4,-24(fp)
100031a0:	000026c0 	call	1000026c <maxmin>
100031a4:	e0bffa15 	stw	r2,-24(fp)

        *mouse_x = px;
100031a8:	00803004 	movi	r2,192
100031ac:	e0fff917 	ldw	r3,-28(fp)
100031b0:	10c00015 	stw	r3,0(r2)
        *mouse_y = py;
100031b4:	00802c04 	movi	r2,176
100031b8:	e0fffa17 	ldw	r3,-24(fp)
100031bc:	10c00015 	stw	r3,0(r2)
        *mouse_click = pbutton;
100031c0:	00802804 	movi	r2,160
100031c4:	e0fffb83 	ldbu	r3,-18(fp)
100031c8:	10c00005 	stb	r3,0(r2)
       // printf("button value: %x\n",button_value>>8);
        printf("[MOUSE XY, dx, dy]:%d, %d, %d, %d\n", px, py, dx, dy);
100031cc:	e0fffb07 	ldb	r3,-20(fp)
100031d0:	e0bffb47 	ldb	r2,-19(fp)
100031d4:	d8800015 	stw	r2,0(sp)
100031d8:	180f883a 	mov	r7,r3
100031dc:	e1bffa17 	ldw	r6,-24(fp)
100031e0:	e17ff917 	ldw	r5,-28(fp)
100031e4:	01040074 	movhi	r4,4097
100031e8:	210c4204 	addi	r4,r4,12552
100031ec:	00032240 	call	10003224 <printf>

            usleep(200);
        }
        */

    } //end while
100031f0:	003eab06 	br	10002ca0 <__alt_data_end+0xf8002ca0>

100031f4 <_printf_r>:
100031f4:	defffd04 	addi	sp,sp,-12
100031f8:	2805883a 	mov	r2,r5
100031fc:	dfc00015 	stw	ra,0(sp)
10003200:	d9800115 	stw	r6,4(sp)
10003204:	d9c00215 	stw	r7,8(sp)
10003208:	21400217 	ldw	r5,8(r4)
1000320c:	d9c00104 	addi	r7,sp,4
10003210:	100d883a 	mov	r6,r2
10003214:	00033cc0 	call	100033cc <___vfprintf_internal_r>
10003218:	dfc00017 	ldw	ra,0(sp)
1000321c:	dec00304 	addi	sp,sp,12
10003220:	f800283a 	ret

10003224 <printf>:
10003224:	defffc04 	addi	sp,sp,-16
10003228:	dfc00015 	stw	ra,0(sp)
1000322c:	d9400115 	stw	r5,4(sp)
10003230:	d9800215 	stw	r6,8(sp)
10003234:	d9c00315 	stw	r7,12(sp)
10003238:	00840074 	movhi	r2,4097
1000323c:	1093b704 	addi	r2,r2,20188
10003240:	10800017 	ldw	r2,0(r2)
10003244:	200b883a 	mov	r5,r4
10003248:	d9800104 	addi	r6,sp,4
1000324c:	11000217 	ldw	r4,8(r2)
10003250:	00056a80 	call	100056a8 <__vfprintf_internal>
10003254:	dfc00017 	ldw	ra,0(sp)
10003258:	dec00404 	addi	sp,sp,16
1000325c:	f800283a 	ret

10003260 <_puts_r>:
10003260:	defff604 	addi	sp,sp,-40
10003264:	dc000715 	stw	r16,28(sp)
10003268:	2021883a 	mov	r16,r4
1000326c:	2809883a 	mov	r4,r5
10003270:	dc400815 	stw	r17,32(sp)
10003274:	dfc00915 	stw	ra,36(sp)
10003278:	2823883a 	mov	r17,r5
1000327c:	00033340 	call	10003334 <strlen>
10003280:	10c00044 	addi	r3,r2,1
10003284:	d8800115 	stw	r2,4(sp)
10003288:	00840074 	movhi	r2,4097
1000328c:	108c4b04 	addi	r2,r2,12588
10003290:	d8800215 	stw	r2,8(sp)
10003294:	00800044 	movi	r2,1
10003298:	d8800315 	stw	r2,12(sp)
1000329c:	00800084 	movi	r2,2
100032a0:	dc400015 	stw	r17,0(sp)
100032a4:	d8c00615 	stw	r3,24(sp)
100032a8:	dec00415 	stw	sp,16(sp)
100032ac:	d8800515 	stw	r2,20(sp)
100032b0:	80000226 	beq	r16,zero,100032bc <_puts_r+0x5c>
100032b4:	80800e17 	ldw	r2,56(r16)
100032b8:	10001426 	beq	r2,zero,1000330c <_puts_r+0xac>
100032bc:	81400217 	ldw	r5,8(r16)
100032c0:	2880030b 	ldhu	r2,12(r5)
100032c4:	10c8000c 	andi	r3,r2,8192
100032c8:	1800061e 	bne	r3,zero,100032e4 <_puts_r+0x84>
100032cc:	29001917 	ldw	r4,100(r5)
100032d0:	00f7ffc4 	movi	r3,-8193
100032d4:	10880014 	ori	r2,r2,8192
100032d8:	20c6703a 	and	r3,r4,r3
100032dc:	2880030d 	sth	r2,12(r5)
100032e0:	28c01915 	stw	r3,100(r5)
100032e4:	d9800404 	addi	r6,sp,16
100032e8:	8009883a 	mov	r4,r16
100032ec:	0007c100 	call	10007c10 <__sfvwrite_r>
100032f0:	1000091e 	bne	r2,zero,10003318 <_puts_r+0xb8>
100032f4:	00800284 	movi	r2,10
100032f8:	dfc00917 	ldw	ra,36(sp)
100032fc:	dc400817 	ldw	r17,32(sp)
10003300:	dc000717 	ldw	r16,28(sp)
10003304:	dec00a04 	addi	sp,sp,40
10003308:	f800283a 	ret
1000330c:	8009883a 	mov	r4,r16
10003310:	000778c0 	call	1000778c <__sinit>
10003314:	003fe906 	br	100032bc <__alt_data_end+0xf80032bc>
10003318:	00bfffc4 	movi	r2,-1
1000331c:	003ff606 	br	100032f8 <__alt_data_end+0xf80032f8>

10003320 <puts>:
10003320:	00840074 	movhi	r2,4097
10003324:	1093b704 	addi	r2,r2,20188
10003328:	200b883a 	mov	r5,r4
1000332c:	11000017 	ldw	r4,0(r2)
10003330:	00032601 	jmpi	10003260 <_puts_r>

10003334 <strlen>:
10003334:	208000cc 	andi	r2,r4,3
10003338:	10002026 	beq	r2,zero,100033bc <strlen+0x88>
1000333c:	20800007 	ldb	r2,0(r4)
10003340:	10002026 	beq	r2,zero,100033c4 <strlen+0x90>
10003344:	2005883a 	mov	r2,r4
10003348:	00000206 	br	10003354 <strlen+0x20>
1000334c:	10c00007 	ldb	r3,0(r2)
10003350:	18001826 	beq	r3,zero,100033b4 <strlen+0x80>
10003354:	10800044 	addi	r2,r2,1
10003358:	10c000cc 	andi	r3,r2,3
1000335c:	183ffb1e 	bne	r3,zero,1000334c <__alt_data_end+0xf800334c>
10003360:	10c00017 	ldw	r3,0(r2)
10003364:	01ffbff4 	movhi	r7,65279
10003368:	39ffbfc4 	addi	r7,r7,-257
1000336c:	00ca303a 	nor	r5,zero,r3
10003370:	01a02074 	movhi	r6,32897
10003374:	19c7883a 	add	r3,r3,r7
10003378:	31a02004 	addi	r6,r6,-32640
1000337c:	1946703a 	and	r3,r3,r5
10003380:	1986703a 	and	r3,r3,r6
10003384:	1800091e 	bne	r3,zero,100033ac <strlen+0x78>
10003388:	10800104 	addi	r2,r2,4
1000338c:	10c00017 	ldw	r3,0(r2)
10003390:	19cb883a 	add	r5,r3,r7
10003394:	00c6303a 	nor	r3,zero,r3
10003398:	28c6703a 	and	r3,r5,r3
1000339c:	1986703a 	and	r3,r3,r6
100033a0:	183ff926 	beq	r3,zero,10003388 <__alt_data_end+0xf8003388>
100033a4:	00000106 	br	100033ac <strlen+0x78>
100033a8:	10800044 	addi	r2,r2,1
100033ac:	10c00007 	ldb	r3,0(r2)
100033b0:	183ffd1e 	bne	r3,zero,100033a8 <__alt_data_end+0xf80033a8>
100033b4:	1105c83a 	sub	r2,r2,r4
100033b8:	f800283a 	ret
100033bc:	2005883a 	mov	r2,r4
100033c0:	003fe706 	br	10003360 <__alt_data_end+0xf8003360>
100033c4:	0005883a 	mov	r2,zero
100033c8:	f800283a 	ret

100033cc <___vfprintf_internal_r>:
100033cc:	deffb804 	addi	sp,sp,-288
100033d0:	dfc04715 	stw	ra,284(sp)
100033d4:	ddc04515 	stw	r23,276(sp)
100033d8:	dd404315 	stw	r21,268(sp)
100033dc:	d9002d15 	stw	r4,180(sp)
100033e0:	282f883a 	mov	r23,r5
100033e4:	302b883a 	mov	r21,r6
100033e8:	d9c02e15 	stw	r7,184(sp)
100033ec:	df004615 	stw	fp,280(sp)
100033f0:	dd804415 	stw	r22,272(sp)
100033f4:	dd004215 	stw	r20,264(sp)
100033f8:	dcc04115 	stw	r19,260(sp)
100033fc:	dc804015 	stw	r18,256(sp)
10003400:	dc403f15 	stw	r17,252(sp)
10003404:	dc003e15 	stw	r16,248(sp)
10003408:	000830c0 	call	1000830c <_localeconv_r>
1000340c:	10800017 	ldw	r2,0(r2)
10003410:	1009883a 	mov	r4,r2
10003414:	d8803415 	stw	r2,208(sp)
10003418:	00033340 	call	10003334 <strlen>
1000341c:	d8803715 	stw	r2,220(sp)
10003420:	d8802d17 	ldw	r2,180(sp)
10003424:	10000226 	beq	r2,zero,10003430 <___vfprintf_internal_r+0x64>
10003428:	10800e17 	ldw	r2,56(r2)
1000342c:	1000fb26 	beq	r2,zero,1000381c <___vfprintf_internal_r+0x450>
10003430:	b880030b 	ldhu	r2,12(r23)
10003434:	10c8000c 	andi	r3,r2,8192
10003438:	1800061e 	bne	r3,zero,10003454 <___vfprintf_internal_r+0x88>
1000343c:	b9001917 	ldw	r4,100(r23)
10003440:	00f7ffc4 	movi	r3,-8193
10003444:	10880014 	ori	r2,r2,8192
10003448:	20c6703a 	and	r3,r4,r3
1000344c:	b880030d 	sth	r2,12(r23)
10003450:	b8c01915 	stw	r3,100(r23)
10003454:	10c0020c 	andi	r3,r2,8
10003458:	1800c326 	beq	r3,zero,10003768 <___vfprintf_internal_r+0x39c>
1000345c:	b8c00417 	ldw	r3,16(r23)
10003460:	1800c126 	beq	r3,zero,10003768 <___vfprintf_internal_r+0x39c>
10003464:	1080068c 	andi	r2,r2,26
10003468:	00c00284 	movi	r3,10
1000346c:	10c0c626 	beq	r2,r3,10003788 <___vfprintf_internal_r+0x3bc>
10003470:	d8c00404 	addi	r3,sp,16
10003474:	05040074 	movhi	r20,4097
10003478:	d9001e04 	addi	r4,sp,120
1000347c:	a50c5c84 	addi	r20,r20,12658
10003480:	d8c01e15 	stw	r3,120(sp)
10003484:	d8002015 	stw	zero,128(sp)
10003488:	d8001f15 	stw	zero,124(sp)
1000348c:	d8003315 	stw	zero,204(sp)
10003490:	d8003615 	stw	zero,216(sp)
10003494:	d8003815 	stw	zero,224(sp)
10003498:	1811883a 	mov	r8,r3
1000349c:	d8003915 	stw	zero,228(sp)
100034a0:	d8003a15 	stw	zero,232(sp)
100034a4:	d8002f15 	stw	zero,188(sp)
100034a8:	d9002815 	stw	r4,160(sp)
100034ac:	a8800007 	ldb	r2,0(r21)
100034b0:	10028b26 	beq	r2,zero,10003ee0 <___vfprintf_internal_r+0xb14>
100034b4:	00c00944 	movi	r3,37
100034b8:	a823883a 	mov	r17,r21
100034bc:	10c0021e 	bne	r2,r3,100034c8 <___vfprintf_internal_r+0xfc>
100034c0:	00001406 	br	10003514 <___vfprintf_internal_r+0x148>
100034c4:	10c00326 	beq	r2,r3,100034d4 <___vfprintf_internal_r+0x108>
100034c8:	8c400044 	addi	r17,r17,1
100034cc:	88800007 	ldb	r2,0(r17)
100034d0:	103ffc1e 	bne	r2,zero,100034c4 <__alt_data_end+0xf80034c4>
100034d4:	8d61c83a 	sub	r16,r17,r21
100034d8:	80000e26 	beq	r16,zero,10003514 <___vfprintf_internal_r+0x148>
100034dc:	d8c02017 	ldw	r3,128(sp)
100034e0:	d8801f17 	ldw	r2,124(sp)
100034e4:	45400015 	stw	r21,0(r8)
100034e8:	1c07883a 	add	r3,r3,r16
100034ec:	10800044 	addi	r2,r2,1
100034f0:	d8c02015 	stw	r3,128(sp)
100034f4:	44000115 	stw	r16,4(r8)
100034f8:	d8801f15 	stw	r2,124(sp)
100034fc:	00c001c4 	movi	r3,7
10003500:	1880a916 	blt	r3,r2,100037a8 <___vfprintf_internal_r+0x3dc>
10003504:	42000204 	addi	r8,r8,8
10003508:	d9402f17 	ldw	r5,188(sp)
1000350c:	2c0b883a 	add	r5,r5,r16
10003510:	d9402f15 	stw	r5,188(sp)
10003514:	88800007 	ldb	r2,0(r17)
10003518:	1000aa26 	beq	r2,zero,100037c4 <___vfprintf_internal_r+0x3f8>
1000351c:	8d400044 	addi	r21,r17,1
10003520:	8c400047 	ldb	r17,1(r17)
10003524:	0021883a 	mov	r16,zero
10003528:	00bfffc4 	movi	r2,-1
1000352c:	0025883a 	mov	r18,zero
10003530:	dc002905 	stb	r16,164(sp)
10003534:	d8002785 	stb	zero,158(sp)
10003538:	d8002b05 	stb	zero,172(sp)
1000353c:	d8802a15 	stw	r2,168(sp)
10003540:	d8003115 	stw	zero,196(sp)
10003544:	04c01604 	movi	r19,88
10003548:	05800244 	movi	r22,9
1000354c:	9021883a 	mov	r16,r18
10003550:	4039883a 	mov	fp,r8
10003554:	ad400044 	addi	r21,r21,1
10003558:	88bff804 	addi	r2,r17,-32
1000355c:	98833236 	bltu	r19,r2,10004228 <___vfprintf_internal_r+0xe5c>
10003560:	100490ba 	slli	r2,r2,2
10003564:	00c40034 	movhi	r3,4096
10003568:	18cd5e04 	addi	r3,r3,13688
1000356c:	10c5883a 	add	r2,r2,r3
10003570:	10800017 	ldw	r2,0(r2)
10003574:	1000683a 	jmp	r2
10003578:	10004120 	cmpeqi	zero,r2,260
1000357c:	10004228 	cmpgeui	zero,r2,264
10003580:	10004228 	cmpgeui	zero,r2,264
10003584:	10004140 	call	11000414 <_gp+0xfe353c>
10003588:	10004228 	cmpgeui	zero,r2,264
1000358c:	10004228 	cmpgeui	zero,r2,264
10003590:	10004228 	cmpgeui	zero,r2,264
10003594:	10004228 	cmpgeui	zero,r2,264
10003598:	10004228 	cmpgeui	zero,r2,264
1000359c:	10004228 	cmpgeui	zero,r2,264
100035a0:	10003828 	cmpgeui	zero,r2,224
100035a4:	10004030 	cmpltui	zero,r2,256
100035a8:	10004228 	cmpgeui	zero,r2,264
100035ac:	100036ec 	andhi	zero,r2,219
100035b0:	1000384c 	andi	zero,r2,225
100035b4:	10004228 	cmpgeui	zero,r2,264
100035b8:	1000389c 	xori	zero,r2,226
100035bc:	100038a8 	cmpgeui	zero,r2,226
100035c0:	100038a8 	cmpgeui	zero,r2,226
100035c4:	100038a8 	cmpgeui	zero,r2,226
100035c8:	100038a8 	cmpgeui	zero,r2,226
100035cc:	100038a8 	cmpgeui	zero,r2,226
100035d0:	100038a8 	cmpgeui	zero,r2,226
100035d4:	100038a8 	cmpgeui	zero,r2,226
100035d8:	100038a8 	cmpgeui	zero,r2,226
100035dc:	100038a8 	cmpgeui	zero,r2,226
100035e0:	10004228 	cmpgeui	zero,r2,264
100035e4:	10004228 	cmpgeui	zero,r2,264
100035e8:	10004228 	cmpgeui	zero,r2,264
100035ec:	10004228 	cmpgeui	zero,r2,264
100035f0:	10004228 	cmpgeui	zero,r2,264
100035f4:	10004228 	cmpgeui	zero,r2,264
100035f8:	10004228 	cmpgeui	zero,r2,264
100035fc:	10004228 	cmpgeui	zero,r2,264
10003600:	10004228 	cmpgeui	zero,r2,264
10003604:	10004228 	cmpgeui	zero,r2,264
10003608:	100038e4 	muli	zero,r2,227
1000360c:	100039ac 	andhi	zero,r2,230
10003610:	10004228 	cmpgeui	zero,r2,264
10003614:	100039ac 	andhi	zero,r2,230
10003618:	10004228 	cmpgeui	zero,r2,264
1000361c:	10004228 	cmpgeui	zero,r2,264
10003620:	10004228 	cmpgeui	zero,r2,264
10003624:	10004228 	cmpgeui	zero,r2,264
10003628:	10003a58 	cmpnei	zero,r2,233
1000362c:	10004228 	cmpgeui	zero,r2,264
10003630:	10004228 	cmpgeui	zero,r2,264
10003634:	10003a64 	muli	zero,r2,233
10003638:	10004228 	cmpgeui	zero,r2,264
1000363c:	10004228 	cmpgeui	zero,r2,264
10003640:	10004228 	cmpgeui	zero,r2,264
10003644:	10004228 	cmpgeui	zero,r2,264
10003648:	10004228 	cmpgeui	zero,r2,264
1000364c:	10003ee8 	cmpgeui	zero,r2,251
10003650:	10004228 	cmpgeui	zero,r2,264
10003654:	10004228 	cmpgeui	zero,r2,264
10003658:	10003f54 	ori	zero,r2,253
1000365c:	10004228 	cmpgeui	zero,r2,264
10003660:	10004228 	cmpgeui	zero,r2,264
10003664:	10004228 	cmpgeui	zero,r2,264
10003668:	10004228 	cmpgeui	zero,r2,264
1000366c:	10004228 	cmpgeui	zero,r2,264
10003670:	10004228 	cmpgeui	zero,r2,264
10003674:	10004228 	cmpgeui	zero,r2,264
10003678:	10004228 	cmpgeui	zero,r2,264
1000367c:	10004228 	cmpgeui	zero,r2,264
10003680:	10004228 	cmpgeui	zero,r2,264
10003684:	100041cc 	andi	zero,r2,263
10003688:	1000414c 	andi	zero,r2,261
1000368c:	100039ac 	andhi	zero,r2,230
10003690:	100039ac 	andhi	zero,r2,230
10003694:	100039ac 	andhi	zero,r2,230
10003698:	1000416c 	andhi	zero,r2,261
1000369c:	1000414c 	andi	zero,r2,261
100036a0:	10004228 	cmpgeui	zero,r2,264
100036a4:	10004228 	cmpgeui	zero,r2,264
100036a8:	10004178 	rdprs	zero,r2,261
100036ac:	10004228 	cmpgeui	zero,r2,264
100036b0:	1000418c 	andi	zero,r2,262
100036b4:	10004010 	cmplti	zero,r2,256
100036b8:	100036f8 	rdprs	zero,r2,219
100036bc:	10004048 	cmpgei	zero,r2,257
100036c0:	10004228 	cmpgeui	zero,r2,264
100036c4:	10004054 	ori	zero,r2,257
100036c8:	10004228 	cmpgeui	zero,r2,264
100036cc:	100040b8 	rdprs	zero,r2,258
100036d0:	10004228 	cmpgeui	zero,r2,264
100036d4:	10004228 	cmpgeui	zero,r2,264
100036d8:	100040d8 	cmpnei	zero,r2,259
100036dc:	d8c03117 	ldw	r3,196(sp)
100036e0:	d8802e15 	stw	r2,184(sp)
100036e4:	00c7c83a 	sub	r3,zero,r3
100036e8:	d8c03115 	stw	r3,196(sp)
100036ec:	84000114 	ori	r16,r16,4
100036f0:	ac400007 	ldb	r17,0(r21)
100036f4:	003f9706 	br	10003554 <__alt_data_end+0xf8003554>
100036f8:	00800c04 	movi	r2,48
100036fc:	d8802705 	stb	r2,156(sp)
10003700:	00801e04 	movi	r2,120
10003704:	d8802745 	stb	r2,157(sp)
10003708:	d9002a17 	ldw	r4,168(sp)
1000370c:	d8802e17 	ldw	r2,184(sp)
10003710:	d8002785 	stb	zero,158(sp)
10003714:	e011883a 	mov	r8,fp
10003718:	10c00104 	addi	r3,r2,4
1000371c:	14c00017 	ldw	r19,0(r2)
10003720:	002d883a 	mov	r22,zero
10003724:	80800094 	ori	r2,r16,2
10003728:	2002ca16 	blt	r4,zero,10004254 <___vfprintf_internal_r+0xe88>
1000372c:	00bfdfc4 	movi	r2,-129
10003730:	80a4703a 	and	r18,r16,r2
10003734:	d8c02e15 	stw	r3,184(sp)
10003738:	94800094 	ori	r18,r18,2
1000373c:	9802b41e 	bne	r19,zero,10004210 <___vfprintf_internal_r+0xe44>
10003740:	01440074 	movhi	r5,4097
10003744:	294c5504 	addi	r5,r5,12628
10003748:	d9403915 	stw	r5,228(sp)
1000374c:	04401e04 	movi	r17,120
10003750:	d8802a17 	ldw	r2,168(sp)
10003754:	0039883a 	mov	fp,zero
10003758:	1001fa26 	beq	r2,zero,10003f44 <___vfprintf_internal_r+0xb78>
1000375c:	0027883a 	mov	r19,zero
10003760:	002d883a 	mov	r22,zero
10003764:	00021906 	br	10003fcc <___vfprintf_internal_r+0xc00>
10003768:	d9002d17 	ldw	r4,180(sp)
1000376c:	b80b883a 	mov	r5,r23
10003770:	00057800 	call	10005780 <__swsetup_r>
10003774:	1005dc1e 	bne	r2,zero,10004ee8 <___vfprintf_internal_r+0x1b1c>
10003778:	b880030b 	ldhu	r2,12(r23)
1000377c:	00c00284 	movi	r3,10
10003780:	1080068c 	andi	r2,r2,26
10003784:	10ff3a1e 	bne	r2,r3,10003470 <__alt_data_end+0xf8003470>
10003788:	b880038f 	ldh	r2,14(r23)
1000378c:	103f3816 	blt	r2,zero,10003470 <__alt_data_end+0xf8003470>
10003790:	d9c02e17 	ldw	r7,184(sp)
10003794:	d9002d17 	ldw	r4,180(sp)
10003798:	a80d883a 	mov	r6,r21
1000379c:	b80b883a 	mov	r5,r23
100037a0:	00056c40 	call	100056c4 <__sbprintf>
100037a4:	00001106 	br	100037ec <___vfprintf_internal_r+0x420>
100037a8:	d9002d17 	ldw	r4,180(sp)
100037ac:	d9801e04 	addi	r6,sp,120
100037b0:	b80b883a 	mov	r5,r23
100037b4:	000abac0 	call	1000abac <__sprint_r>
100037b8:	1000081e 	bne	r2,zero,100037dc <___vfprintf_internal_r+0x410>
100037bc:	da000404 	addi	r8,sp,16
100037c0:	003f5106 	br	10003508 <__alt_data_end+0xf8003508>
100037c4:	d8802017 	ldw	r2,128(sp)
100037c8:	10000426 	beq	r2,zero,100037dc <___vfprintf_internal_r+0x410>
100037cc:	d9002d17 	ldw	r4,180(sp)
100037d0:	d9801e04 	addi	r6,sp,120
100037d4:	b80b883a 	mov	r5,r23
100037d8:	000abac0 	call	1000abac <__sprint_r>
100037dc:	b880030b 	ldhu	r2,12(r23)
100037e0:	1080100c 	andi	r2,r2,64
100037e4:	1005c01e 	bne	r2,zero,10004ee8 <___vfprintf_internal_r+0x1b1c>
100037e8:	d8802f17 	ldw	r2,188(sp)
100037ec:	dfc04717 	ldw	ra,284(sp)
100037f0:	df004617 	ldw	fp,280(sp)
100037f4:	ddc04517 	ldw	r23,276(sp)
100037f8:	dd804417 	ldw	r22,272(sp)
100037fc:	dd404317 	ldw	r21,268(sp)
10003800:	dd004217 	ldw	r20,264(sp)
10003804:	dcc04117 	ldw	r19,260(sp)
10003808:	dc804017 	ldw	r18,256(sp)
1000380c:	dc403f17 	ldw	r17,252(sp)
10003810:	dc003e17 	ldw	r16,248(sp)
10003814:	dec04804 	addi	sp,sp,288
10003818:	f800283a 	ret
1000381c:	d9002d17 	ldw	r4,180(sp)
10003820:	000778c0 	call	1000778c <__sinit>
10003824:	003f0206 	br	10003430 <__alt_data_end+0xf8003430>
10003828:	d9002e17 	ldw	r4,184(sp)
1000382c:	d9402e17 	ldw	r5,184(sp)
10003830:	21000017 	ldw	r4,0(r4)
10003834:	28800104 	addi	r2,r5,4
10003838:	d9003115 	stw	r4,196(sp)
1000383c:	203fa716 	blt	r4,zero,100036dc <__alt_data_end+0xf80036dc>
10003840:	d8802e15 	stw	r2,184(sp)
10003844:	ac400007 	ldb	r17,0(r21)
10003848:	003f4206 	br	10003554 <__alt_data_end+0xf8003554>
1000384c:	ac400007 	ldb	r17,0(r21)
10003850:	01000a84 	movi	r4,42
10003854:	a8c00044 	addi	r3,r21,1
10003858:	89075826 	beq	r17,r4,100055bc <___vfprintf_internal_r+0x21f0>
1000385c:	8cbff404 	addi	r18,r17,-48
10003860:	b486ae36 	bltu	r22,r18,1000531c <___vfprintf_internal_r+0x1f50>
10003864:	0009883a 	mov	r4,zero
10003868:	1823883a 	mov	r17,r3
1000386c:	01400284 	movi	r5,10
10003870:	000d8680 	call	1000d868 <__mulsi3>
10003874:	88c00007 	ldb	r3,0(r17)
10003878:	1489883a 	add	r4,r2,r18
1000387c:	8d400044 	addi	r21,r17,1
10003880:	1cbff404 	addi	r18,r3,-48
10003884:	a823883a 	mov	r17,r21
10003888:	b4bff82e 	bgeu	r22,r18,1000386c <__alt_data_end+0xf800386c>
1000388c:	1823883a 	mov	r17,r3
10003890:	2005f616 	blt	r4,zero,1000506c <___vfprintf_internal_r+0x1ca0>
10003894:	d9002a15 	stw	r4,168(sp)
10003898:	003f2f06 	br	10003558 <__alt_data_end+0xf8003558>
1000389c:	84002014 	ori	r16,r16,128
100038a0:	ac400007 	ldb	r17,0(r21)
100038a4:	003f2b06 	br	10003554 <__alt_data_end+0xf8003554>
100038a8:	8cbff404 	addi	r18,r17,-48
100038ac:	d8003115 	stw	zero,196(sp)
100038b0:	0009883a 	mov	r4,zero
100038b4:	a823883a 	mov	r17,r21
100038b8:	01400284 	movi	r5,10
100038bc:	000d8680 	call	1000d868 <__mulsi3>
100038c0:	88c00007 	ldb	r3,0(r17)
100038c4:	9089883a 	add	r4,r18,r2
100038c8:	ad400044 	addi	r21,r21,1
100038cc:	1cbff404 	addi	r18,r3,-48
100038d0:	a823883a 	mov	r17,r21
100038d4:	b4bff82e 	bgeu	r22,r18,100038b8 <__alt_data_end+0xf80038b8>
100038d8:	1823883a 	mov	r17,r3
100038dc:	d9003115 	stw	r4,196(sp)
100038e0:	003f1d06 	br	10003558 <__alt_data_end+0xf8003558>
100038e4:	8025883a 	mov	r18,r16
100038e8:	dc002903 	ldbu	r16,164(sp)
100038ec:	e011883a 	mov	r8,fp
100038f0:	84003fcc 	andi	r16,r16,255
100038f4:	8007531e 	bne	r16,zero,10005644 <___vfprintf_internal_r+0x2278>
100038f8:	94800414 	ori	r18,r18,16
100038fc:	9080080c 	andi	r2,r18,32
10003900:	1003a326 	beq	r2,zero,10004790 <___vfprintf_internal_r+0x13c4>
10003904:	d9002e17 	ldw	r4,184(sp)
10003908:	20800117 	ldw	r2,4(r4)
1000390c:	24c00017 	ldw	r19,0(r4)
10003910:	21000204 	addi	r4,r4,8
10003914:	d9002e15 	stw	r4,184(sp)
10003918:	102d883a 	mov	r22,r2
1000391c:	10047316 	blt	r2,zero,10004aec <___vfprintf_internal_r+0x1720>
10003920:	d9002a17 	ldw	r4,168(sp)
10003924:	df002783 	ldbu	fp,158(sp)
10003928:	2003e416 	blt	r4,zero,100048bc <___vfprintf_internal_r+0x14f0>
1000392c:	00ffdfc4 	movi	r3,-129
10003930:	9d84b03a 	or	r2,r19,r22
10003934:	90e4703a 	and	r18,r18,r3
10003938:	10018026 	beq	r2,zero,10003f3c <___vfprintf_internal_r+0xb70>
1000393c:	b003ab26 	beq	r22,zero,100047ec <___vfprintf_internal_r+0x1420>
10003940:	dc402915 	stw	r17,164(sp)
10003944:	dc001e04 	addi	r16,sp,120
10003948:	b023883a 	mov	r17,r22
1000394c:	402d883a 	mov	r22,r8
10003950:	9809883a 	mov	r4,r19
10003954:	880b883a 	mov	r5,r17
10003958:	01800284 	movi	r6,10
1000395c:	000f883a 	mov	r7,zero
10003960:	000d0f00 	call	1000d0f0 <__umoddi3>
10003964:	10800c04 	addi	r2,r2,48
10003968:	843fffc4 	addi	r16,r16,-1
1000396c:	9809883a 	mov	r4,r19
10003970:	880b883a 	mov	r5,r17
10003974:	80800005 	stb	r2,0(r16)
10003978:	01800284 	movi	r6,10
1000397c:	000f883a 	mov	r7,zero
10003980:	000caf40 	call	1000caf4 <__udivdi3>
10003984:	1027883a 	mov	r19,r2
10003988:	10c4b03a 	or	r2,r2,r3
1000398c:	1823883a 	mov	r17,r3
10003990:	103fef1e 	bne	r2,zero,10003950 <__alt_data_end+0xf8003950>
10003994:	d8c02817 	ldw	r3,160(sp)
10003998:	dc402917 	ldw	r17,164(sp)
1000399c:	b011883a 	mov	r8,r22
100039a0:	1c07c83a 	sub	r3,r3,r16
100039a4:	d8c02b15 	stw	r3,172(sp)
100039a8:	00005f06 	br	10003b28 <___vfprintf_internal_r+0x75c>
100039ac:	8025883a 	mov	r18,r16
100039b0:	dc002903 	ldbu	r16,164(sp)
100039b4:	e011883a 	mov	r8,fp
100039b8:	84003fcc 	andi	r16,r16,255
100039bc:	80071e1e 	bne	r16,zero,10005638 <___vfprintf_internal_r+0x226c>
100039c0:	9080020c 	andi	r2,r18,8
100039c4:	1004af26 	beq	r2,zero,10004c84 <___vfprintf_internal_r+0x18b8>
100039c8:	d9002e17 	ldw	r4,184(sp)
100039cc:	d9402e17 	ldw	r5,184(sp)
100039d0:	d8802e17 	ldw	r2,184(sp)
100039d4:	21000017 	ldw	r4,0(r4)
100039d8:	29400117 	ldw	r5,4(r5)
100039dc:	10800204 	addi	r2,r2,8
100039e0:	d9003615 	stw	r4,216(sp)
100039e4:	d9403815 	stw	r5,224(sp)
100039e8:	d8802e15 	stw	r2,184(sp)
100039ec:	d9003617 	ldw	r4,216(sp)
100039f0:	d9403817 	ldw	r5,224(sp)
100039f4:	da003d15 	stw	r8,244(sp)
100039f8:	04000044 	movi	r16,1
100039fc:	000a7d00 	call	1000a7d0 <__fpclassifyd>
10003a00:	da003d17 	ldw	r8,244(sp)
10003a04:	1404441e 	bne	r2,r16,10004b18 <___vfprintf_internal_r+0x174c>
10003a08:	d9003617 	ldw	r4,216(sp)
10003a0c:	d9403817 	ldw	r5,224(sp)
10003a10:	000d883a 	mov	r6,zero
10003a14:	000f883a 	mov	r7,zero
10003a18:	000ec700 	call	1000ec70 <__ledf2>
10003a1c:	da003d17 	ldw	r8,244(sp)
10003a20:	1005e316 	blt	r2,zero,100051b0 <___vfprintf_internal_r+0x1de4>
10003a24:	df002783 	ldbu	fp,158(sp)
10003a28:	008011c4 	movi	r2,71
10003a2c:	1445580e 	bge	r2,r17,10004f90 <___vfprintf_internal_r+0x1bc4>
10003a30:	04040074 	movhi	r16,4097
10003a34:	840c4d04 	addi	r16,r16,12596
10003a38:	00c000c4 	movi	r3,3
10003a3c:	00bfdfc4 	movi	r2,-129
10003a40:	d8c02915 	stw	r3,164(sp)
10003a44:	90a4703a 	and	r18,r18,r2
10003a48:	d8c02b15 	stw	r3,172(sp)
10003a4c:	d8002a15 	stw	zero,168(sp)
10003a50:	d8003215 	stw	zero,200(sp)
10003a54:	00003a06 	br	10003b40 <___vfprintf_internal_r+0x774>
10003a58:	84000214 	ori	r16,r16,8
10003a5c:	ac400007 	ldb	r17,0(r21)
10003a60:	003ebc06 	br	10003554 <__alt_data_end+0xf8003554>
10003a64:	8025883a 	mov	r18,r16
10003a68:	dc002903 	ldbu	r16,164(sp)
10003a6c:	e011883a 	mov	r8,fp
10003a70:	84003fcc 	andi	r16,r16,255
10003a74:	8007001e 	bne	r16,zero,10005678 <___vfprintf_internal_r+0x22ac>
10003a78:	94800414 	ori	r18,r18,16
10003a7c:	9080080c 	andi	r2,r18,32
10003a80:	1002fa26 	beq	r2,zero,1000466c <___vfprintf_internal_r+0x12a0>
10003a84:	d9002e17 	ldw	r4,184(sp)
10003a88:	d9402a17 	ldw	r5,168(sp)
10003a8c:	d8002785 	stb	zero,158(sp)
10003a90:	20800204 	addi	r2,r4,8
10003a94:	24c00017 	ldw	r19,0(r4)
10003a98:	25800117 	ldw	r22,4(r4)
10003a9c:	2804b116 	blt	r5,zero,10004d64 <___vfprintf_internal_r+0x1998>
10003aa0:	013fdfc4 	movi	r4,-129
10003aa4:	9d86b03a 	or	r3,r19,r22
10003aa8:	d8802e15 	stw	r2,184(sp)
10003aac:	9124703a 	and	r18,r18,r4
10003ab0:	1802fb1e 	bne	r3,zero,100046a0 <___vfprintf_internal_r+0x12d4>
10003ab4:	d8c02a17 	ldw	r3,168(sp)
10003ab8:	0039883a 	mov	fp,zero
10003abc:	1805e526 	beq	r3,zero,10005254 <___vfprintf_internal_r+0x1e88>
10003ac0:	0027883a 	mov	r19,zero
10003ac4:	002d883a 	mov	r22,zero
10003ac8:	dc001e04 	addi	r16,sp,120
10003acc:	9806d0fa 	srli	r3,r19,3
10003ad0:	b008977a 	slli	r4,r22,29
10003ad4:	b02cd0fa 	srli	r22,r22,3
10003ad8:	9cc001cc 	andi	r19,r19,7
10003adc:	98800c04 	addi	r2,r19,48
10003ae0:	843fffc4 	addi	r16,r16,-1
10003ae4:	20e6b03a 	or	r19,r4,r3
10003ae8:	80800005 	stb	r2,0(r16)
10003aec:	9d86b03a 	or	r3,r19,r22
10003af0:	183ff61e 	bne	r3,zero,10003acc <__alt_data_end+0xf8003acc>
10003af4:	90c0004c 	andi	r3,r18,1
10003af8:	18014126 	beq	r3,zero,10004000 <___vfprintf_internal_r+0xc34>
10003afc:	10803fcc 	andi	r2,r2,255
10003b00:	1080201c 	xori	r2,r2,128
10003b04:	10bfe004 	addi	r2,r2,-128
10003b08:	00c00c04 	movi	r3,48
10003b0c:	10c13c26 	beq	r2,r3,10004000 <___vfprintf_internal_r+0xc34>
10003b10:	80ffffc5 	stb	r3,-1(r16)
10003b14:	d8c02817 	ldw	r3,160(sp)
10003b18:	80bfffc4 	addi	r2,r16,-1
10003b1c:	1021883a 	mov	r16,r2
10003b20:	1887c83a 	sub	r3,r3,r2
10003b24:	d8c02b15 	stw	r3,172(sp)
10003b28:	d8802b17 	ldw	r2,172(sp)
10003b2c:	d9002a17 	ldw	r4,168(sp)
10003b30:	1100010e 	bge	r2,r4,10003b38 <___vfprintf_internal_r+0x76c>
10003b34:	2005883a 	mov	r2,r4
10003b38:	d8802915 	stw	r2,164(sp)
10003b3c:	d8003215 	stw	zero,200(sp)
10003b40:	e7003fcc 	andi	fp,fp,255
10003b44:	e700201c 	xori	fp,fp,128
10003b48:	e73fe004 	addi	fp,fp,-128
10003b4c:	e0000326 	beq	fp,zero,10003b5c <___vfprintf_internal_r+0x790>
10003b50:	d8c02917 	ldw	r3,164(sp)
10003b54:	18c00044 	addi	r3,r3,1
10003b58:	d8c02915 	stw	r3,164(sp)
10003b5c:	90c0008c 	andi	r3,r18,2
10003b60:	d8c02c15 	stw	r3,176(sp)
10003b64:	18000326 	beq	r3,zero,10003b74 <___vfprintf_internal_r+0x7a8>
10003b68:	d8c02917 	ldw	r3,164(sp)
10003b6c:	18c00084 	addi	r3,r3,2
10003b70:	d8c02915 	stw	r3,164(sp)
10003b74:	90c0210c 	andi	r3,r18,132
10003b78:	d8c03015 	stw	r3,192(sp)
10003b7c:	1801c51e 	bne	r3,zero,10004294 <___vfprintf_internal_r+0xec8>
10003b80:	d9003117 	ldw	r4,196(sp)
10003b84:	d8c02917 	ldw	r3,164(sp)
10003b88:	20e7c83a 	sub	r19,r4,r3
10003b8c:	04c1c10e 	bge	zero,r19,10004294 <___vfprintf_internal_r+0xec8>
10003b90:	02400404 	movi	r9,16
10003b94:	d8c02017 	ldw	r3,128(sp)
10003b98:	d8801f17 	ldw	r2,124(sp)
10003b9c:	4cc52f0e 	bge	r9,r19,1000505c <___vfprintf_internal_r+0x1c90>
10003ba0:	01440074 	movhi	r5,4097
10003ba4:	294c6084 	addi	r5,r5,12674
10003ba8:	dc403b15 	stw	r17,236(sp)
10003bac:	d9403515 	stw	r5,212(sp)
10003bb0:	9823883a 	mov	r17,r19
10003bb4:	482d883a 	mov	r22,r9
10003bb8:	9027883a 	mov	r19,r18
10003bbc:	070001c4 	movi	fp,7
10003bc0:	8025883a 	mov	r18,r16
10003bc4:	dc002d17 	ldw	r16,180(sp)
10003bc8:	00000306 	br	10003bd8 <___vfprintf_internal_r+0x80c>
10003bcc:	8c7ffc04 	addi	r17,r17,-16
10003bd0:	42000204 	addi	r8,r8,8
10003bd4:	b440130e 	bge	r22,r17,10003c24 <___vfprintf_internal_r+0x858>
10003bd8:	01040074 	movhi	r4,4097
10003bdc:	18c00404 	addi	r3,r3,16
10003be0:	10800044 	addi	r2,r2,1
10003be4:	210c6084 	addi	r4,r4,12674
10003be8:	41000015 	stw	r4,0(r8)
10003bec:	45800115 	stw	r22,4(r8)
10003bf0:	d8c02015 	stw	r3,128(sp)
10003bf4:	d8801f15 	stw	r2,124(sp)
10003bf8:	e0bff40e 	bge	fp,r2,10003bcc <__alt_data_end+0xf8003bcc>
10003bfc:	d9801e04 	addi	r6,sp,120
10003c00:	b80b883a 	mov	r5,r23
10003c04:	8009883a 	mov	r4,r16
10003c08:	000abac0 	call	1000abac <__sprint_r>
10003c0c:	103ef31e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10003c10:	8c7ffc04 	addi	r17,r17,-16
10003c14:	d8c02017 	ldw	r3,128(sp)
10003c18:	d8801f17 	ldw	r2,124(sp)
10003c1c:	da000404 	addi	r8,sp,16
10003c20:	b47fed16 	blt	r22,r17,10003bd8 <__alt_data_end+0xf8003bd8>
10003c24:	9021883a 	mov	r16,r18
10003c28:	9825883a 	mov	r18,r19
10003c2c:	8827883a 	mov	r19,r17
10003c30:	dc403b17 	ldw	r17,236(sp)
10003c34:	d9403517 	ldw	r5,212(sp)
10003c38:	98c7883a 	add	r3,r19,r3
10003c3c:	10800044 	addi	r2,r2,1
10003c40:	41400015 	stw	r5,0(r8)
10003c44:	44c00115 	stw	r19,4(r8)
10003c48:	d8c02015 	stw	r3,128(sp)
10003c4c:	d8801f15 	stw	r2,124(sp)
10003c50:	010001c4 	movi	r4,7
10003c54:	2082c516 	blt	r4,r2,1000476c <___vfprintf_internal_r+0x13a0>
10003c58:	df002787 	ldb	fp,158(sp)
10003c5c:	42000204 	addi	r8,r8,8
10003c60:	e0000c26 	beq	fp,zero,10003c94 <___vfprintf_internal_r+0x8c8>
10003c64:	d8801f17 	ldw	r2,124(sp)
10003c68:	d9002784 	addi	r4,sp,158
10003c6c:	18c00044 	addi	r3,r3,1
10003c70:	10800044 	addi	r2,r2,1
10003c74:	41000015 	stw	r4,0(r8)
10003c78:	01000044 	movi	r4,1
10003c7c:	41000115 	stw	r4,4(r8)
10003c80:	d8c02015 	stw	r3,128(sp)
10003c84:	d8801f15 	stw	r2,124(sp)
10003c88:	010001c4 	movi	r4,7
10003c8c:	20825e16 	blt	r4,r2,10004608 <___vfprintf_internal_r+0x123c>
10003c90:	42000204 	addi	r8,r8,8
10003c94:	d8802c17 	ldw	r2,176(sp)
10003c98:	10000c26 	beq	r2,zero,10003ccc <___vfprintf_internal_r+0x900>
10003c9c:	d8801f17 	ldw	r2,124(sp)
10003ca0:	d9002704 	addi	r4,sp,156
10003ca4:	18c00084 	addi	r3,r3,2
10003ca8:	10800044 	addi	r2,r2,1
10003cac:	41000015 	stw	r4,0(r8)
10003cb0:	01000084 	movi	r4,2
10003cb4:	41000115 	stw	r4,4(r8)
10003cb8:	d8c02015 	stw	r3,128(sp)
10003cbc:	d8801f15 	stw	r2,124(sp)
10003cc0:	010001c4 	movi	r4,7
10003cc4:	20825816 	blt	r4,r2,10004628 <___vfprintf_internal_r+0x125c>
10003cc8:	42000204 	addi	r8,r8,8
10003ccc:	d9003017 	ldw	r4,192(sp)
10003cd0:	00802004 	movi	r2,128
10003cd4:	2081bb26 	beq	r4,r2,100043c4 <___vfprintf_internal_r+0xff8>
10003cd8:	d9402a17 	ldw	r5,168(sp)
10003cdc:	d8802b17 	ldw	r2,172(sp)
10003ce0:	28adc83a 	sub	r22,r5,r2
10003ce4:	0580310e 	bge	zero,r22,10003dac <___vfprintf_internal_r+0x9e0>
10003ce8:	07000404 	movi	fp,16
10003cec:	d8801f17 	ldw	r2,124(sp)
10003cf0:	e584360e 	bge	fp,r22,10004dcc <___vfprintf_internal_r+0x1a00>
10003cf4:	01440074 	movhi	r5,4097
10003cf8:	294c5c84 	addi	r5,r5,12658
10003cfc:	dc402a15 	stw	r17,168(sp)
10003d00:	d9402c15 	stw	r5,176(sp)
10003d04:	b023883a 	mov	r17,r22
10003d08:	04c001c4 	movi	r19,7
10003d0c:	a82d883a 	mov	r22,r21
10003d10:	902b883a 	mov	r21,r18
10003d14:	8025883a 	mov	r18,r16
10003d18:	dc002d17 	ldw	r16,180(sp)
10003d1c:	00000306 	br	10003d2c <___vfprintf_internal_r+0x960>
10003d20:	8c7ffc04 	addi	r17,r17,-16
10003d24:	42000204 	addi	r8,r8,8
10003d28:	e440110e 	bge	fp,r17,10003d70 <___vfprintf_internal_r+0x9a4>
10003d2c:	18c00404 	addi	r3,r3,16
10003d30:	10800044 	addi	r2,r2,1
10003d34:	45000015 	stw	r20,0(r8)
10003d38:	47000115 	stw	fp,4(r8)
10003d3c:	d8c02015 	stw	r3,128(sp)
10003d40:	d8801f15 	stw	r2,124(sp)
10003d44:	98bff60e 	bge	r19,r2,10003d20 <__alt_data_end+0xf8003d20>
10003d48:	d9801e04 	addi	r6,sp,120
10003d4c:	b80b883a 	mov	r5,r23
10003d50:	8009883a 	mov	r4,r16
10003d54:	000abac0 	call	1000abac <__sprint_r>
10003d58:	103ea01e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10003d5c:	8c7ffc04 	addi	r17,r17,-16
10003d60:	d8c02017 	ldw	r3,128(sp)
10003d64:	d8801f17 	ldw	r2,124(sp)
10003d68:	da000404 	addi	r8,sp,16
10003d6c:	e47fef16 	blt	fp,r17,10003d2c <__alt_data_end+0xf8003d2c>
10003d70:	9021883a 	mov	r16,r18
10003d74:	a825883a 	mov	r18,r21
10003d78:	b02b883a 	mov	r21,r22
10003d7c:	882d883a 	mov	r22,r17
10003d80:	dc402a17 	ldw	r17,168(sp)
10003d84:	d9002c17 	ldw	r4,176(sp)
10003d88:	1d87883a 	add	r3,r3,r22
10003d8c:	10800044 	addi	r2,r2,1
10003d90:	41000015 	stw	r4,0(r8)
10003d94:	45800115 	stw	r22,4(r8)
10003d98:	d8c02015 	stw	r3,128(sp)
10003d9c:	d8801f15 	stw	r2,124(sp)
10003da0:	010001c4 	movi	r4,7
10003da4:	20821016 	blt	r4,r2,100045e8 <___vfprintf_internal_r+0x121c>
10003da8:	42000204 	addi	r8,r8,8
10003dac:	9080400c 	andi	r2,r18,256
10003db0:	10013a1e 	bne	r2,zero,1000429c <___vfprintf_internal_r+0xed0>
10003db4:	d9402b17 	ldw	r5,172(sp)
10003db8:	d8801f17 	ldw	r2,124(sp)
10003dbc:	44000015 	stw	r16,0(r8)
10003dc0:	1947883a 	add	r3,r3,r5
10003dc4:	10800044 	addi	r2,r2,1
10003dc8:	41400115 	stw	r5,4(r8)
10003dcc:	d8c02015 	stw	r3,128(sp)
10003dd0:	d8801f15 	stw	r2,124(sp)
10003dd4:	010001c4 	movi	r4,7
10003dd8:	2081f516 	blt	r4,r2,100045b0 <___vfprintf_internal_r+0x11e4>
10003ddc:	42000204 	addi	r8,r8,8
10003de0:	9480010c 	andi	r18,r18,4
10003de4:	90003226 	beq	r18,zero,10003eb0 <___vfprintf_internal_r+0xae4>
10003de8:	d9403117 	ldw	r5,196(sp)
10003dec:	d8802917 	ldw	r2,164(sp)
10003df0:	28a1c83a 	sub	r16,r5,r2
10003df4:	04002e0e 	bge	zero,r16,10003eb0 <___vfprintf_internal_r+0xae4>
10003df8:	04400404 	movi	r17,16
10003dfc:	d8801f17 	ldw	r2,124(sp)
10003e00:	8c04c40e 	bge	r17,r16,10005114 <___vfprintf_internal_r+0x1d48>
10003e04:	01440074 	movhi	r5,4097
10003e08:	294c6084 	addi	r5,r5,12674
10003e0c:	d9403515 	stw	r5,212(sp)
10003e10:	048001c4 	movi	r18,7
10003e14:	dcc02d17 	ldw	r19,180(sp)
10003e18:	00000306 	br	10003e28 <___vfprintf_internal_r+0xa5c>
10003e1c:	843ffc04 	addi	r16,r16,-16
10003e20:	42000204 	addi	r8,r8,8
10003e24:	8c00130e 	bge	r17,r16,10003e74 <___vfprintf_internal_r+0xaa8>
10003e28:	01040074 	movhi	r4,4097
10003e2c:	18c00404 	addi	r3,r3,16
10003e30:	10800044 	addi	r2,r2,1
10003e34:	210c6084 	addi	r4,r4,12674
10003e38:	41000015 	stw	r4,0(r8)
10003e3c:	44400115 	stw	r17,4(r8)
10003e40:	d8c02015 	stw	r3,128(sp)
10003e44:	d8801f15 	stw	r2,124(sp)
10003e48:	90bff40e 	bge	r18,r2,10003e1c <__alt_data_end+0xf8003e1c>
10003e4c:	d9801e04 	addi	r6,sp,120
10003e50:	b80b883a 	mov	r5,r23
10003e54:	9809883a 	mov	r4,r19
10003e58:	000abac0 	call	1000abac <__sprint_r>
10003e5c:	103e5f1e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10003e60:	843ffc04 	addi	r16,r16,-16
10003e64:	d8c02017 	ldw	r3,128(sp)
10003e68:	d8801f17 	ldw	r2,124(sp)
10003e6c:	da000404 	addi	r8,sp,16
10003e70:	8c3fed16 	blt	r17,r16,10003e28 <__alt_data_end+0xf8003e28>
10003e74:	d9403517 	ldw	r5,212(sp)
10003e78:	1c07883a 	add	r3,r3,r16
10003e7c:	10800044 	addi	r2,r2,1
10003e80:	41400015 	stw	r5,0(r8)
10003e84:	44000115 	stw	r16,4(r8)
10003e88:	d8c02015 	stw	r3,128(sp)
10003e8c:	d8801f15 	stw	r2,124(sp)
10003e90:	010001c4 	movi	r4,7
10003e94:	2080060e 	bge	r4,r2,10003eb0 <___vfprintf_internal_r+0xae4>
10003e98:	d9002d17 	ldw	r4,180(sp)
10003e9c:	d9801e04 	addi	r6,sp,120
10003ea0:	b80b883a 	mov	r5,r23
10003ea4:	000abac0 	call	1000abac <__sprint_r>
10003ea8:	103e4c1e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10003eac:	d8c02017 	ldw	r3,128(sp)
10003eb0:	d8803117 	ldw	r2,196(sp)
10003eb4:	d9002917 	ldw	r4,164(sp)
10003eb8:	1100010e 	bge	r2,r4,10003ec0 <___vfprintf_internal_r+0xaf4>
10003ebc:	2005883a 	mov	r2,r4
10003ec0:	d9402f17 	ldw	r5,188(sp)
10003ec4:	288b883a 	add	r5,r5,r2
10003ec8:	d9402f15 	stw	r5,188(sp)
10003ecc:	1801c01e 	bne	r3,zero,100045d0 <___vfprintf_internal_r+0x1204>
10003ed0:	a8800007 	ldb	r2,0(r21)
10003ed4:	d8001f15 	stw	zero,124(sp)
10003ed8:	da000404 	addi	r8,sp,16
10003edc:	103d751e 	bne	r2,zero,100034b4 <__alt_data_end+0xf80034b4>
10003ee0:	a823883a 	mov	r17,r21
10003ee4:	003d8b06 	br	10003514 <__alt_data_end+0xf8003514>
10003ee8:	8025883a 	mov	r18,r16
10003eec:	dc002903 	ldbu	r16,164(sp)
10003ef0:	e011883a 	mov	r8,fp
10003ef4:	84003fcc 	andi	r16,r16,255
10003ef8:	8005e51e 	bne	r16,zero,10005690 <___vfprintf_internal_r+0x22c4>
10003efc:	94800414 	ori	r18,r18,16
10003f00:	9080080c 	andi	r2,r18,32
10003f04:	10022b26 	beq	r2,zero,100047b4 <___vfprintf_internal_r+0x13e8>
10003f08:	d9002e17 	ldw	r4,184(sp)
10003f0c:	d9402a17 	ldw	r5,168(sp)
10003f10:	d8002785 	stb	zero,158(sp)
10003f14:	20c00204 	addi	r3,r4,8
10003f18:	24c00017 	ldw	r19,0(r4)
10003f1c:	25800117 	ldw	r22,4(r4)
10003f20:	28042e16 	blt	r5,zero,10004fdc <___vfprintf_internal_r+0x1c10>
10003f24:	013fdfc4 	movi	r4,-129
10003f28:	9d84b03a 	or	r2,r19,r22
10003f2c:	d8c02e15 	stw	r3,184(sp)
10003f30:	9124703a 	and	r18,r18,r4
10003f34:	0039883a 	mov	fp,zero
10003f38:	103e801e 	bne	r2,zero,1000393c <__alt_data_end+0xf800393c>
10003f3c:	d9002a17 	ldw	r4,168(sp)
10003f40:	2002e01e 	bne	r4,zero,10004ac4 <___vfprintf_internal_r+0x16f8>
10003f44:	d8002a15 	stw	zero,168(sp)
10003f48:	d8002b15 	stw	zero,172(sp)
10003f4c:	dc001e04 	addi	r16,sp,120
10003f50:	003ef506 	br	10003b28 <__alt_data_end+0xf8003b28>
10003f54:	8025883a 	mov	r18,r16
10003f58:	dc002903 	ldbu	r16,164(sp)
10003f5c:	e011883a 	mov	r8,fp
10003f60:	84003fcc 	andi	r16,r16,255
10003f64:	8005ba1e 	bne	r16,zero,10005650 <___vfprintf_internal_r+0x2284>
10003f68:	01040074 	movhi	r4,4097
10003f6c:	210c5004 	addi	r4,r4,12608
10003f70:	d9003915 	stw	r4,228(sp)
10003f74:	9080080c 	andi	r2,r18,32
10003f78:	10006126 	beq	r2,zero,10004100 <___vfprintf_internal_r+0xd34>
10003f7c:	d9402e17 	ldw	r5,184(sp)
10003f80:	2cc00017 	ldw	r19,0(r5)
10003f84:	2d800117 	ldw	r22,4(r5)
10003f88:	29400204 	addi	r5,r5,8
10003f8c:	d9402e15 	stw	r5,184(sp)
10003f90:	9080004c 	andi	r2,r18,1
10003f94:	1001ac26 	beq	r2,zero,10004648 <___vfprintf_internal_r+0x127c>
10003f98:	9d84b03a 	or	r2,r19,r22
10003f9c:	10038526 	beq	r2,zero,10004db4 <___vfprintf_internal_r+0x19e8>
10003fa0:	d8c02a17 	ldw	r3,168(sp)
10003fa4:	00800c04 	movi	r2,48
10003fa8:	d8802705 	stb	r2,156(sp)
10003fac:	dc402745 	stb	r17,157(sp)
10003fb0:	d8002785 	stb	zero,158(sp)
10003fb4:	90800094 	ori	r2,r18,2
10003fb8:	18047916 	blt	r3,zero,100051a0 <___vfprintf_internal_r+0x1dd4>
10003fbc:	00bfdfc4 	movi	r2,-129
10003fc0:	90a4703a 	and	r18,r18,r2
10003fc4:	94800094 	ori	r18,r18,2
10003fc8:	0039883a 	mov	fp,zero
10003fcc:	d9003917 	ldw	r4,228(sp)
10003fd0:	dc001e04 	addi	r16,sp,120
10003fd4:	988003cc 	andi	r2,r19,15
10003fd8:	b006973a 	slli	r3,r22,28
10003fdc:	2085883a 	add	r2,r4,r2
10003fe0:	9826d13a 	srli	r19,r19,4
10003fe4:	10800003 	ldbu	r2,0(r2)
10003fe8:	b02cd13a 	srli	r22,r22,4
10003fec:	843fffc4 	addi	r16,r16,-1
10003ff0:	1ce6b03a 	or	r19,r3,r19
10003ff4:	80800005 	stb	r2,0(r16)
10003ff8:	9d84b03a 	or	r2,r19,r22
10003ffc:	103ff51e 	bne	r2,zero,10003fd4 <__alt_data_end+0xf8003fd4>
10004000:	d8c02817 	ldw	r3,160(sp)
10004004:	1c07c83a 	sub	r3,r3,r16
10004008:	d8c02b15 	stw	r3,172(sp)
1000400c:	003ec606 	br	10003b28 <__alt_data_end+0xf8003b28>
10004010:	8025883a 	mov	r18,r16
10004014:	dc002903 	ldbu	r16,164(sp)
10004018:	e011883a 	mov	r8,fp
1000401c:	84003fcc 	andi	r16,r16,255
10004020:	803e9626 	beq	r16,zero,10003a7c <__alt_data_end+0xf8003a7c>
10004024:	d8c02b03 	ldbu	r3,172(sp)
10004028:	d8c02785 	stb	r3,158(sp)
1000402c:	003e9306 	br	10003a7c <__alt_data_end+0xf8003a7c>
10004030:	00c00044 	movi	r3,1
10004034:	d8c02905 	stb	r3,164(sp)
10004038:	00c00ac4 	movi	r3,43
1000403c:	d8c02b05 	stb	r3,172(sp)
10004040:	ac400007 	ldb	r17,0(r21)
10004044:	003d4306 	br	10003554 <__alt_data_end+0xf8003554>
10004048:	84000814 	ori	r16,r16,32
1000404c:	ac400007 	ldb	r17,0(r21)
10004050:	003d4006 	br	10003554 <__alt_data_end+0xf8003554>
10004054:	d8802e17 	ldw	r2,184(sp)
10004058:	8025883a 	mov	r18,r16
1000405c:	d8002785 	stb	zero,158(sp)
10004060:	14000017 	ldw	r16,0(r2)
10004064:	e011883a 	mov	r8,fp
10004068:	14c00104 	addi	r19,r2,4
1000406c:	80042d26 	beq	r16,zero,10005124 <___vfprintf_internal_r+0x1d58>
10004070:	d8c02a17 	ldw	r3,168(sp)
10004074:	1803e416 	blt	r3,zero,10005008 <___vfprintf_internal_r+0x1c3c>
10004078:	180d883a 	mov	r6,r3
1000407c:	000b883a 	mov	r5,zero
10004080:	8009883a 	mov	r4,r16
10004084:	df003d15 	stw	fp,244(sp)
10004088:	0008d040 	call	10008d04 <memchr>
1000408c:	da003d17 	ldw	r8,244(sp)
10004090:	10046826 	beq	r2,zero,10005234 <___vfprintf_internal_r+0x1e68>
10004094:	1405c83a 	sub	r2,r2,r16
10004098:	d8802b15 	stw	r2,172(sp)
1000409c:	1003e016 	blt	r2,zero,10005020 <___vfprintf_internal_r+0x1c54>
100040a0:	df002783 	ldbu	fp,158(sp)
100040a4:	d8802915 	stw	r2,164(sp)
100040a8:	dcc02e15 	stw	r19,184(sp)
100040ac:	d8002a15 	stw	zero,168(sp)
100040b0:	d8003215 	stw	zero,200(sp)
100040b4:	003ea206 	br	10003b40 <__alt_data_end+0xf8003b40>
100040b8:	8025883a 	mov	r18,r16
100040bc:	dc002903 	ldbu	r16,164(sp)
100040c0:	e011883a 	mov	r8,fp
100040c4:	84003fcc 	andi	r16,r16,255
100040c8:	803f8d26 	beq	r16,zero,10003f00 <__alt_data_end+0xf8003f00>
100040cc:	d8c02b03 	ldbu	r3,172(sp)
100040d0:	d8c02785 	stb	r3,158(sp)
100040d4:	003f8a06 	br	10003f00 <__alt_data_end+0xf8003f00>
100040d8:	8025883a 	mov	r18,r16
100040dc:	dc002903 	ldbu	r16,164(sp)
100040e0:	e011883a 	mov	r8,fp
100040e4:	84003fcc 	andi	r16,r16,255
100040e8:	8005661e 	bne	r16,zero,10005684 <___vfprintf_internal_r+0x22b8>
100040ec:	01040074 	movhi	r4,4097
100040f0:	210c5504 	addi	r4,r4,12628
100040f4:	d9003915 	stw	r4,228(sp)
100040f8:	9080080c 	andi	r2,r18,32
100040fc:	103f9f1e 	bne	r2,zero,10003f7c <__alt_data_end+0xf8003f7c>
10004100:	9080040c 	andi	r2,r18,16
10004104:	1002eb26 	beq	r2,zero,10004cb4 <___vfprintf_internal_r+0x18e8>
10004108:	d8802e17 	ldw	r2,184(sp)
1000410c:	002d883a 	mov	r22,zero
10004110:	14c00017 	ldw	r19,0(r2)
10004114:	10800104 	addi	r2,r2,4
10004118:	d8802e15 	stw	r2,184(sp)
1000411c:	003f9c06 	br	10003f90 <__alt_data_end+0xf8003f90>
10004120:	d8802b07 	ldb	r2,172(sp)
10004124:	1002e11e 	bne	r2,zero,10004cac <___vfprintf_internal_r+0x18e0>
10004128:	00c00044 	movi	r3,1
1000412c:	d8c02905 	stb	r3,164(sp)
10004130:	00c00804 	movi	r3,32
10004134:	d8c02b05 	stb	r3,172(sp)
10004138:	ac400007 	ldb	r17,0(r21)
1000413c:	003d0506 	br	10003554 <__alt_data_end+0xf8003554>
10004140:	84000054 	ori	r16,r16,1
10004144:	ac400007 	ldb	r17,0(r21)
10004148:	003d0206 	br	10003554 <__alt_data_end+0xf8003554>
1000414c:	8025883a 	mov	r18,r16
10004150:	dc002903 	ldbu	r16,164(sp)
10004154:	e011883a 	mov	r8,fp
10004158:	84003fcc 	andi	r16,r16,255
1000415c:	803de726 	beq	r16,zero,100038fc <__alt_data_end+0xf80038fc>
10004160:	d8c02b03 	ldbu	r3,172(sp)
10004164:	d8c02785 	stb	r3,158(sp)
10004168:	003de406 	br	100038fc <__alt_data_end+0xf80038fc>
1000416c:	84001014 	ori	r16,r16,64
10004170:	ac400007 	ldb	r17,0(r21)
10004174:	003cf706 	br	10003554 <__alt_data_end+0xf8003554>
10004178:	ac400007 	ldb	r17,0(r21)
1000417c:	00801b04 	movi	r2,108
10004180:	88838f26 	beq	r17,r2,10004fc0 <___vfprintf_internal_r+0x1bf4>
10004184:	84000414 	ori	r16,r16,16
10004188:	003cf206 	br	10003554 <__alt_data_end+0xf8003554>
1000418c:	8025883a 	mov	r18,r16
10004190:	dc002903 	ldbu	r16,164(sp)
10004194:	e011883a 	mov	r8,fp
10004198:	84003fcc 	andi	r16,r16,255
1000419c:	80053f1e 	bne	r16,zero,1000569c <___vfprintf_internal_r+0x22d0>
100041a0:	9080080c 	andi	r2,r18,32
100041a4:	1002d226 	beq	r2,zero,10004cf0 <___vfprintf_internal_r+0x1924>
100041a8:	d9002e17 	ldw	r4,184(sp)
100041ac:	d9402f17 	ldw	r5,188(sp)
100041b0:	20800017 	ldw	r2,0(r4)
100041b4:	2807d7fa 	srai	r3,r5,31
100041b8:	21000104 	addi	r4,r4,4
100041bc:	d9002e15 	stw	r4,184(sp)
100041c0:	11400015 	stw	r5,0(r2)
100041c4:	10c00115 	stw	r3,4(r2)
100041c8:	003cb806 	br	100034ac <__alt_data_end+0xf80034ac>
100041cc:	d8c02e17 	ldw	r3,184(sp)
100041d0:	d9002e17 	ldw	r4,184(sp)
100041d4:	8025883a 	mov	r18,r16
100041d8:	18800017 	ldw	r2,0(r3)
100041dc:	21000104 	addi	r4,r4,4
100041e0:	00c00044 	movi	r3,1
100041e4:	e011883a 	mov	r8,fp
100041e8:	d8c02915 	stw	r3,164(sp)
100041ec:	d8002785 	stb	zero,158(sp)
100041f0:	d8801405 	stb	r2,80(sp)
100041f4:	d9002e15 	stw	r4,184(sp)
100041f8:	d8c02b15 	stw	r3,172(sp)
100041fc:	d8002a15 	stw	zero,168(sp)
10004200:	d8003215 	stw	zero,200(sp)
10004204:	dc001404 	addi	r16,sp,80
10004208:	0039883a 	mov	fp,zero
1000420c:	003e5306 	br	10003b5c <__alt_data_end+0xf8003b5c>
10004210:	01040074 	movhi	r4,4097
10004214:	210c5504 	addi	r4,r4,12628
10004218:	0039883a 	mov	fp,zero
1000421c:	d9003915 	stw	r4,228(sp)
10004220:	04401e04 	movi	r17,120
10004224:	003f6906 	br	10003fcc <__alt_data_end+0xf8003fcc>
10004228:	8025883a 	mov	r18,r16
1000422c:	dc002903 	ldbu	r16,164(sp)
10004230:	e011883a 	mov	r8,fp
10004234:	84003fcc 	andi	r16,r16,255
10004238:	8005081e 	bne	r16,zero,1000565c <___vfprintf_internal_r+0x2290>
1000423c:	883d6126 	beq	r17,zero,100037c4 <__alt_data_end+0xf80037c4>
10004240:	00c00044 	movi	r3,1
10004244:	d8c02915 	stw	r3,164(sp)
10004248:	dc401405 	stb	r17,80(sp)
1000424c:	d8002785 	stb	zero,158(sp)
10004250:	003fe906 	br	100041f8 <__alt_data_end+0xf80041f8>
10004254:	01440074 	movhi	r5,4097
10004258:	294c5504 	addi	r5,r5,12628
1000425c:	d9403915 	stw	r5,228(sp)
10004260:	d8c02e15 	stw	r3,184(sp)
10004264:	1025883a 	mov	r18,r2
10004268:	04401e04 	movi	r17,120
1000426c:	9d84b03a 	or	r2,r19,r22
10004270:	1000fc1e 	bne	r2,zero,10004664 <___vfprintf_internal_r+0x1298>
10004274:	0039883a 	mov	fp,zero
10004278:	00800084 	movi	r2,2
1000427c:	10803fcc 	andi	r2,r2,255
10004280:	00c00044 	movi	r3,1
10004284:	10c20f26 	beq	r2,r3,10004ac4 <___vfprintf_internal_r+0x16f8>
10004288:	00c00084 	movi	r3,2
1000428c:	10fd3326 	beq	r2,r3,1000375c <__alt_data_end+0xf800375c>
10004290:	003e0b06 	br	10003ac0 <__alt_data_end+0xf8003ac0>
10004294:	d8c02017 	ldw	r3,128(sp)
10004298:	003e7106 	br	10003c60 <__alt_data_end+0xf8003c60>
1000429c:	00801944 	movi	r2,101
100042a0:	14407e0e 	bge	r2,r17,1000449c <___vfprintf_internal_r+0x10d0>
100042a4:	d9003617 	ldw	r4,216(sp)
100042a8:	d9403817 	ldw	r5,224(sp)
100042ac:	000d883a 	mov	r6,zero
100042b0:	000f883a 	mov	r7,zero
100042b4:	d8c03c15 	stw	r3,240(sp)
100042b8:	da003d15 	stw	r8,244(sp)
100042bc:	000eb0c0 	call	1000eb0c <__eqdf2>
100042c0:	d8c03c17 	ldw	r3,240(sp)
100042c4:	da003d17 	ldw	r8,244(sp)
100042c8:	1000f71e 	bne	r2,zero,100046a8 <___vfprintf_internal_r+0x12dc>
100042cc:	d8801f17 	ldw	r2,124(sp)
100042d0:	01040074 	movhi	r4,4097
100042d4:	210c5c04 	addi	r4,r4,12656
100042d8:	18c00044 	addi	r3,r3,1
100042dc:	10800044 	addi	r2,r2,1
100042e0:	41000015 	stw	r4,0(r8)
100042e4:	01000044 	movi	r4,1
100042e8:	41000115 	stw	r4,4(r8)
100042ec:	d8c02015 	stw	r3,128(sp)
100042f0:	d8801f15 	stw	r2,124(sp)
100042f4:	010001c4 	movi	r4,7
100042f8:	2082b816 	blt	r4,r2,10004ddc <___vfprintf_internal_r+0x1a10>
100042fc:	42000204 	addi	r8,r8,8
10004300:	d8802617 	ldw	r2,152(sp)
10004304:	d9403317 	ldw	r5,204(sp)
10004308:	11400216 	blt	r2,r5,10004314 <___vfprintf_internal_r+0xf48>
1000430c:	9080004c 	andi	r2,r18,1
10004310:	103eb326 	beq	r2,zero,10003de0 <__alt_data_end+0xf8003de0>
10004314:	d8803717 	ldw	r2,220(sp)
10004318:	d9003417 	ldw	r4,208(sp)
1000431c:	d9403717 	ldw	r5,220(sp)
10004320:	1887883a 	add	r3,r3,r2
10004324:	d8801f17 	ldw	r2,124(sp)
10004328:	41000015 	stw	r4,0(r8)
1000432c:	41400115 	stw	r5,4(r8)
10004330:	10800044 	addi	r2,r2,1
10004334:	d8c02015 	stw	r3,128(sp)
10004338:	d8801f15 	stw	r2,124(sp)
1000433c:	010001c4 	movi	r4,7
10004340:	20832916 	blt	r4,r2,10004fe8 <___vfprintf_internal_r+0x1c1c>
10004344:	42000204 	addi	r8,r8,8
10004348:	d8803317 	ldw	r2,204(sp)
1000434c:	143fffc4 	addi	r16,r2,-1
10004350:	043ea30e 	bge	zero,r16,10003de0 <__alt_data_end+0xf8003de0>
10004354:	04400404 	movi	r17,16
10004358:	d8801f17 	ldw	r2,124(sp)
1000435c:	8c00880e 	bge	r17,r16,10004580 <___vfprintf_internal_r+0x11b4>
10004360:	01440074 	movhi	r5,4097
10004364:	294c5c84 	addi	r5,r5,12658
10004368:	d9402c15 	stw	r5,176(sp)
1000436c:	058001c4 	movi	r22,7
10004370:	dcc02d17 	ldw	r19,180(sp)
10004374:	00000306 	br	10004384 <___vfprintf_internal_r+0xfb8>
10004378:	42000204 	addi	r8,r8,8
1000437c:	843ffc04 	addi	r16,r16,-16
10004380:	8c00820e 	bge	r17,r16,1000458c <___vfprintf_internal_r+0x11c0>
10004384:	18c00404 	addi	r3,r3,16
10004388:	10800044 	addi	r2,r2,1
1000438c:	45000015 	stw	r20,0(r8)
10004390:	44400115 	stw	r17,4(r8)
10004394:	d8c02015 	stw	r3,128(sp)
10004398:	d8801f15 	stw	r2,124(sp)
1000439c:	b0bff60e 	bge	r22,r2,10004378 <__alt_data_end+0xf8004378>
100043a0:	d9801e04 	addi	r6,sp,120
100043a4:	b80b883a 	mov	r5,r23
100043a8:	9809883a 	mov	r4,r19
100043ac:	000abac0 	call	1000abac <__sprint_r>
100043b0:	103d0a1e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
100043b4:	d8c02017 	ldw	r3,128(sp)
100043b8:	d8801f17 	ldw	r2,124(sp)
100043bc:	da000404 	addi	r8,sp,16
100043c0:	003fee06 	br	1000437c <__alt_data_end+0xf800437c>
100043c4:	d9403117 	ldw	r5,196(sp)
100043c8:	d8802917 	ldw	r2,164(sp)
100043cc:	28adc83a 	sub	r22,r5,r2
100043d0:	05be410e 	bge	zero,r22,10003cd8 <__alt_data_end+0xf8003cd8>
100043d4:	07000404 	movi	fp,16
100043d8:	d8801f17 	ldw	r2,124(sp)
100043dc:	e5838f0e 	bge	fp,r22,1000521c <___vfprintf_internal_r+0x1e50>
100043e0:	01440074 	movhi	r5,4097
100043e4:	294c5c84 	addi	r5,r5,12658
100043e8:	dc403015 	stw	r17,192(sp)
100043ec:	d9402c15 	stw	r5,176(sp)
100043f0:	b023883a 	mov	r17,r22
100043f4:	04c001c4 	movi	r19,7
100043f8:	a82d883a 	mov	r22,r21
100043fc:	902b883a 	mov	r21,r18
10004400:	8025883a 	mov	r18,r16
10004404:	dc002d17 	ldw	r16,180(sp)
10004408:	00000306 	br	10004418 <___vfprintf_internal_r+0x104c>
1000440c:	8c7ffc04 	addi	r17,r17,-16
10004410:	42000204 	addi	r8,r8,8
10004414:	e440110e 	bge	fp,r17,1000445c <___vfprintf_internal_r+0x1090>
10004418:	18c00404 	addi	r3,r3,16
1000441c:	10800044 	addi	r2,r2,1
10004420:	45000015 	stw	r20,0(r8)
10004424:	47000115 	stw	fp,4(r8)
10004428:	d8c02015 	stw	r3,128(sp)
1000442c:	d8801f15 	stw	r2,124(sp)
10004430:	98bff60e 	bge	r19,r2,1000440c <__alt_data_end+0xf800440c>
10004434:	d9801e04 	addi	r6,sp,120
10004438:	b80b883a 	mov	r5,r23
1000443c:	8009883a 	mov	r4,r16
10004440:	000abac0 	call	1000abac <__sprint_r>
10004444:	103ce51e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10004448:	8c7ffc04 	addi	r17,r17,-16
1000444c:	d8c02017 	ldw	r3,128(sp)
10004450:	d8801f17 	ldw	r2,124(sp)
10004454:	da000404 	addi	r8,sp,16
10004458:	e47fef16 	blt	fp,r17,10004418 <__alt_data_end+0xf8004418>
1000445c:	9021883a 	mov	r16,r18
10004460:	a825883a 	mov	r18,r21
10004464:	b02b883a 	mov	r21,r22
10004468:	882d883a 	mov	r22,r17
1000446c:	dc403017 	ldw	r17,192(sp)
10004470:	d9002c17 	ldw	r4,176(sp)
10004474:	1d87883a 	add	r3,r3,r22
10004478:	10800044 	addi	r2,r2,1
1000447c:	41000015 	stw	r4,0(r8)
10004480:	45800115 	stw	r22,4(r8)
10004484:	d8c02015 	stw	r3,128(sp)
10004488:	d8801f15 	stw	r2,124(sp)
1000448c:	010001c4 	movi	r4,7
10004490:	20818e16 	blt	r4,r2,10004acc <___vfprintf_internal_r+0x1700>
10004494:	42000204 	addi	r8,r8,8
10004498:	003e0f06 	br	10003cd8 <__alt_data_end+0xf8003cd8>
1000449c:	d9403317 	ldw	r5,204(sp)
100044a0:	00800044 	movi	r2,1
100044a4:	18c00044 	addi	r3,r3,1
100044a8:	1141530e 	bge	r2,r5,100049f8 <___vfprintf_internal_r+0x162c>
100044ac:	dc401f17 	ldw	r17,124(sp)
100044b0:	00800044 	movi	r2,1
100044b4:	40800115 	stw	r2,4(r8)
100044b8:	8c400044 	addi	r17,r17,1
100044bc:	44000015 	stw	r16,0(r8)
100044c0:	d8c02015 	stw	r3,128(sp)
100044c4:	dc401f15 	stw	r17,124(sp)
100044c8:	008001c4 	movi	r2,7
100044cc:	14416b16 	blt	r2,r17,10004a7c <___vfprintf_internal_r+0x16b0>
100044d0:	42000204 	addi	r8,r8,8
100044d4:	d8803717 	ldw	r2,220(sp)
100044d8:	d9003417 	ldw	r4,208(sp)
100044dc:	8c400044 	addi	r17,r17,1
100044e0:	10c7883a 	add	r3,r2,r3
100044e4:	40800115 	stw	r2,4(r8)
100044e8:	41000015 	stw	r4,0(r8)
100044ec:	d8c02015 	stw	r3,128(sp)
100044f0:	dc401f15 	stw	r17,124(sp)
100044f4:	008001c4 	movi	r2,7
100044f8:	14416916 	blt	r2,r17,10004aa0 <___vfprintf_internal_r+0x16d4>
100044fc:	45800204 	addi	r22,r8,8
10004500:	d9003617 	ldw	r4,216(sp)
10004504:	d9403817 	ldw	r5,224(sp)
10004508:	000d883a 	mov	r6,zero
1000450c:	000f883a 	mov	r7,zero
10004510:	d8c03c15 	stw	r3,240(sp)
10004514:	000eb0c0 	call	1000eb0c <__eqdf2>
10004518:	d8c03c17 	ldw	r3,240(sp)
1000451c:	1000bc26 	beq	r2,zero,10004810 <___vfprintf_internal_r+0x1444>
10004520:	d9403317 	ldw	r5,204(sp)
10004524:	84000044 	addi	r16,r16,1
10004528:	8c400044 	addi	r17,r17,1
1000452c:	28bfffc4 	addi	r2,r5,-1
10004530:	1887883a 	add	r3,r3,r2
10004534:	b0800115 	stw	r2,4(r22)
10004538:	b4000015 	stw	r16,0(r22)
1000453c:	d8c02015 	stw	r3,128(sp)
10004540:	dc401f15 	stw	r17,124(sp)
10004544:	008001c4 	movi	r2,7
10004548:	14414316 	blt	r2,r17,10004a58 <___vfprintf_internal_r+0x168c>
1000454c:	b5800204 	addi	r22,r22,8
10004550:	d9003a17 	ldw	r4,232(sp)
10004554:	df0022c4 	addi	fp,sp,139
10004558:	8c400044 	addi	r17,r17,1
1000455c:	20c7883a 	add	r3,r4,r3
10004560:	b7000015 	stw	fp,0(r22)
10004564:	b1000115 	stw	r4,4(r22)
10004568:	d8c02015 	stw	r3,128(sp)
1000456c:	dc401f15 	stw	r17,124(sp)
10004570:	008001c4 	movi	r2,7
10004574:	14400e16 	blt	r2,r17,100045b0 <___vfprintf_internal_r+0x11e4>
10004578:	b2000204 	addi	r8,r22,8
1000457c:	003e1806 	br	10003de0 <__alt_data_end+0xf8003de0>
10004580:	01040074 	movhi	r4,4097
10004584:	210c5c84 	addi	r4,r4,12658
10004588:	d9002c15 	stw	r4,176(sp)
1000458c:	d9002c17 	ldw	r4,176(sp)
10004590:	1c07883a 	add	r3,r3,r16
10004594:	44000115 	stw	r16,4(r8)
10004598:	41000015 	stw	r4,0(r8)
1000459c:	10800044 	addi	r2,r2,1
100045a0:	d8c02015 	stw	r3,128(sp)
100045a4:	d8801f15 	stw	r2,124(sp)
100045a8:	010001c4 	movi	r4,7
100045ac:	20be0b0e 	bge	r4,r2,10003ddc <__alt_data_end+0xf8003ddc>
100045b0:	d9002d17 	ldw	r4,180(sp)
100045b4:	d9801e04 	addi	r6,sp,120
100045b8:	b80b883a 	mov	r5,r23
100045bc:	000abac0 	call	1000abac <__sprint_r>
100045c0:	103c861e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
100045c4:	d8c02017 	ldw	r3,128(sp)
100045c8:	da000404 	addi	r8,sp,16
100045cc:	003e0406 	br	10003de0 <__alt_data_end+0xf8003de0>
100045d0:	d9002d17 	ldw	r4,180(sp)
100045d4:	d9801e04 	addi	r6,sp,120
100045d8:	b80b883a 	mov	r5,r23
100045dc:	000abac0 	call	1000abac <__sprint_r>
100045e0:	103e3b26 	beq	r2,zero,10003ed0 <__alt_data_end+0xf8003ed0>
100045e4:	003c7d06 	br	100037dc <__alt_data_end+0xf80037dc>
100045e8:	d9002d17 	ldw	r4,180(sp)
100045ec:	d9801e04 	addi	r6,sp,120
100045f0:	b80b883a 	mov	r5,r23
100045f4:	000abac0 	call	1000abac <__sprint_r>
100045f8:	103c781e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
100045fc:	d8c02017 	ldw	r3,128(sp)
10004600:	da000404 	addi	r8,sp,16
10004604:	003de906 	br	10003dac <__alt_data_end+0xf8003dac>
10004608:	d9002d17 	ldw	r4,180(sp)
1000460c:	d9801e04 	addi	r6,sp,120
10004610:	b80b883a 	mov	r5,r23
10004614:	000abac0 	call	1000abac <__sprint_r>
10004618:	103c701e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
1000461c:	d8c02017 	ldw	r3,128(sp)
10004620:	da000404 	addi	r8,sp,16
10004624:	003d9b06 	br	10003c94 <__alt_data_end+0xf8003c94>
10004628:	d9002d17 	ldw	r4,180(sp)
1000462c:	d9801e04 	addi	r6,sp,120
10004630:	b80b883a 	mov	r5,r23
10004634:	000abac0 	call	1000abac <__sprint_r>
10004638:	103c681e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
1000463c:	d8c02017 	ldw	r3,128(sp)
10004640:	da000404 	addi	r8,sp,16
10004644:	003da106 	br	10003ccc <__alt_data_end+0xf8003ccc>
10004648:	d9402a17 	ldw	r5,168(sp)
1000464c:	d8002785 	stb	zero,158(sp)
10004650:	283f0616 	blt	r5,zero,1000426c <__alt_data_end+0xf800426c>
10004654:	00ffdfc4 	movi	r3,-129
10004658:	9d84b03a 	or	r2,r19,r22
1000465c:	90e4703a 	and	r18,r18,r3
10004660:	103c3b26 	beq	r2,zero,10003750 <__alt_data_end+0xf8003750>
10004664:	0039883a 	mov	fp,zero
10004668:	003e5806 	br	10003fcc <__alt_data_end+0xf8003fcc>
1000466c:	9080040c 	andi	r2,r18,16
10004670:	1001b326 	beq	r2,zero,10004d40 <___vfprintf_internal_r+0x1974>
10004674:	d8c02e17 	ldw	r3,184(sp)
10004678:	d9002a17 	ldw	r4,168(sp)
1000467c:	d8002785 	stb	zero,158(sp)
10004680:	18800104 	addi	r2,r3,4
10004684:	1cc00017 	ldw	r19,0(r3)
10004688:	002d883a 	mov	r22,zero
1000468c:	2001b516 	blt	r4,zero,10004d64 <___vfprintf_internal_r+0x1998>
10004690:	00ffdfc4 	movi	r3,-129
10004694:	d8802e15 	stw	r2,184(sp)
10004698:	90e4703a 	and	r18,r18,r3
1000469c:	983d0526 	beq	r19,zero,10003ab4 <__alt_data_end+0xf8003ab4>
100046a0:	0039883a 	mov	fp,zero
100046a4:	003d0806 	br	10003ac8 <__alt_data_end+0xf8003ac8>
100046a8:	dc402617 	ldw	r17,152(sp)
100046ac:	0441d30e 	bge	zero,r17,10004dfc <___vfprintf_internal_r+0x1a30>
100046b0:	dc403217 	ldw	r17,200(sp)
100046b4:	d8803317 	ldw	r2,204(sp)
100046b8:	1440010e 	bge	r2,r17,100046c0 <___vfprintf_internal_r+0x12f4>
100046bc:	1023883a 	mov	r17,r2
100046c0:	04400a0e 	bge	zero,r17,100046ec <___vfprintf_internal_r+0x1320>
100046c4:	d8801f17 	ldw	r2,124(sp)
100046c8:	1c47883a 	add	r3,r3,r17
100046cc:	44000015 	stw	r16,0(r8)
100046d0:	10800044 	addi	r2,r2,1
100046d4:	44400115 	stw	r17,4(r8)
100046d8:	d8c02015 	stw	r3,128(sp)
100046dc:	d8801f15 	stw	r2,124(sp)
100046e0:	010001c4 	movi	r4,7
100046e4:	20826516 	blt	r4,r2,1000507c <___vfprintf_internal_r+0x1cb0>
100046e8:	42000204 	addi	r8,r8,8
100046ec:	88026116 	blt	r17,zero,10005074 <___vfprintf_internal_r+0x1ca8>
100046f0:	d9003217 	ldw	r4,200(sp)
100046f4:	2463c83a 	sub	r17,r4,r17
100046f8:	04407b0e 	bge	zero,r17,100048e8 <___vfprintf_internal_r+0x151c>
100046fc:	05800404 	movi	r22,16
10004700:	d8801f17 	ldw	r2,124(sp)
10004704:	b4419d0e 	bge	r22,r17,10004d7c <___vfprintf_internal_r+0x19b0>
10004708:	01040074 	movhi	r4,4097
1000470c:	210c5c84 	addi	r4,r4,12658
10004710:	d9002c15 	stw	r4,176(sp)
10004714:	070001c4 	movi	fp,7
10004718:	dcc02d17 	ldw	r19,180(sp)
1000471c:	00000306 	br	1000472c <___vfprintf_internal_r+0x1360>
10004720:	42000204 	addi	r8,r8,8
10004724:	8c7ffc04 	addi	r17,r17,-16
10004728:	b441970e 	bge	r22,r17,10004d88 <___vfprintf_internal_r+0x19bc>
1000472c:	18c00404 	addi	r3,r3,16
10004730:	10800044 	addi	r2,r2,1
10004734:	45000015 	stw	r20,0(r8)
10004738:	45800115 	stw	r22,4(r8)
1000473c:	d8c02015 	stw	r3,128(sp)
10004740:	d8801f15 	stw	r2,124(sp)
10004744:	e0bff60e 	bge	fp,r2,10004720 <__alt_data_end+0xf8004720>
10004748:	d9801e04 	addi	r6,sp,120
1000474c:	b80b883a 	mov	r5,r23
10004750:	9809883a 	mov	r4,r19
10004754:	000abac0 	call	1000abac <__sprint_r>
10004758:	103c201e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
1000475c:	d8c02017 	ldw	r3,128(sp)
10004760:	d8801f17 	ldw	r2,124(sp)
10004764:	da000404 	addi	r8,sp,16
10004768:	003fee06 	br	10004724 <__alt_data_end+0xf8004724>
1000476c:	d9002d17 	ldw	r4,180(sp)
10004770:	d9801e04 	addi	r6,sp,120
10004774:	b80b883a 	mov	r5,r23
10004778:	000abac0 	call	1000abac <__sprint_r>
1000477c:	103c171e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10004780:	d8c02017 	ldw	r3,128(sp)
10004784:	df002787 	ldb	fp,158(sp)
10004788:	da000404 	addi	r8,sp,16
1000478c:	003d3406 	br	10003c60 <__alt_data_end+0xf8003c60>
10004790:	9080040c 	andi	r2,r18,16
10004794:	10016126 	beq	r2,zero,10004d1c <___vfprintf_internal_r+0x1950>
10004798:	d9402e17 	ldw	r5,184(sp)
1000479c:	2cc00017 	ldw	r19,0(r5)
100047a0:	29400104 	addi	r5,r5,4
100047a4:	d9402e15 	stw	r5,184(sp)
100047a8:	982dd7fa 	srai	r22,r19,31
100047ac:	b005883a 	mov	r2,r22
100047b0:	003c5a06 	br	1000391c <__alt_data_end+0xf800391c>
100047b4:	9080040c 	andi	r2,r18,16
100047b8:	10003526 	beq	r2,zero,10004890 <___vfprintf_internal_r+0x14c4>
100047bc:	d8c02e17 	ldw	r3,184(sp)
100047c0:	d9002a17 	ldw	r4,168(sp)
100047c4:	d8002785 	stb	zero,158(sp)
100047c8:	18800104 	addi	r2,r3,4
100047cc:	1cc00017 	ldw	r19,0(r3)
100047d0:	002d883a 	mov	r22,zero
100047d4:	20003716 	blt	r4,zero,100048b4 <___vfprintf_internal_r+0x14e8>
100047d8:	00ffdfc4 	movi	r3,-129
100047dc:	d8802e15 	stw	r2,184(sp)
100047e0:	90e4703a 	and	r18,r18,r3
100047e4:	0039883a 	mov	fp,zero
100047e8:	983dd426 	beq	r19,zero,10003f3c <__alt_data_end+0xf8003f3c>
100047ec:	00800244 	movi	r2,9
100047f0:	14fc5336 	bltu	r2,r19,10003940 <__alt_data_end+0xf8003940>
100047f4:	d8c02817 	ldw	r3,160(sp)
100047f8:	dc001dc4 	addi	r16,sp,119
100047fc:	9cc00c04 	addi	r19,r19,48
10004800:	1c07c83a 	sub	r3,r3,r16
10004804:	dcc01dc5 	stb	r19,119(sp)
10004808:	d8c02b15 	stw	r3,172(sp)
1000480c:	003cc606 	br	10003b28 <__alt_data_end+0xf8003b28>
10004810:	d8803317 	ldw	r2,204(sp)
10004814:	143fffc4 	addi	r16,r2,-1
10004818:	043f4d0e 	bge	zero,r16,10004550 <__alt_data_end+0xf8004550>
1000481c:	07000404 	movi	fp,16
10004820:	e400810e 	bge	fp,r16,10004a28 <___vfprintf_internal_r+0x165c>
10004824:	01440074 	movhi	r5,4097
10004828:	294c5c84 	addi	r5,r5,12658
1000482c:	d9402c15 	stw	r5,176(sp)
10004830:	01c001c4 	movi	r7,7
10004834:	dcc02d17 	ldw	r19,180(sp)
10004838:	00000306 	br	10004848 <___vfprintf_internal_r+0x147c>
1000483c:	b5800204 	addi	r22,r22,8
10004840:	843ffc04 	addi	r16,r16,-16
10004844:	e4007b0e 	bge	fp,r16,10004a34 <___vfprintf_internal_r+0x1668>
10004848:	18c00404 	addi	r3,r3,16
1000484c:	8c400044 	addi	r17,r17,1
10004850:	b5000015 	stw	r20,0(r22)
10004854:	b7000115 	stw	fp,4(r22)
10004858:	d8c02015 	stw	r3,128(sp)
1000485c:	dc401f15 	stw	r17,124(sp)
10004860:	3c7ff60e 	bge	r7,r17,1000483c <__alt_data_end+0xf800483c>
10004864:	d9801e04 	addi	r6,sp,120
10004868:	b80b883a 	mov	r5,r23
1000486c:	9809883a 	mov	r4,r19
10004870:	d9c03c15 	stw	r7,240(sp)
10004874:	000abac0 	call	1000abac <__sprint_r>
10004878:	d9c03c17 	ldw	r7,240(sp)
1000487c:	103bd71e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10004880:	d8c02017 	ldw	r3,128(sp)
10004884:	dc401f17 	ldw	r17,124(sp)
10004888:	dd800404 	addi	r22,sp,16
1000488c:	003fec06 	br	10004840 <__alt_data_end+0xf8004840>
10004890:	9080100c 	andi	r2,r18,64
10004894:	d8002785 	stb	zero,158(sp)
10004898:	10010e26 	beq	r2,zero,10004cd4 <___vfprintf_internal_r+0x1908>
1000489c:	d9402e17 	ldw	r5,184(sp)
100048a0:	d8c02a17 	ldw	r3,168(sp)
100048a4:	002d883a 	mov	r22,zero
100048a8:	28800104 	addi	r2,r5,4
100048ac:	2cc0000b 	ldhu	r19,0(r5)
100048b0:	183fc90e 	bge	r3,zero,100047d8 <__alt_data_end+0xf80047d8>
100048b4:	d8802e15 	stw	r2,184(sp)
100048b8:	0039883a 	mov	fp,zero
100048bc:	9d84b03a 	or	r2,r19,r22
100048c0:	103c1e1e 	bne	r2,zero,1000393c <__alt_data_end+0xf800393c>
100048c4:	00800044 	movi	r2,1
100048c8:	003e6c06 	br	1000427c <__alt_data_end+0xf800427c>
100048cc:	d9002d17 	ldw	r4,180(sp)
100048d0:	d9801e04 	addi	r6,sp,120
100048d4:	b80b883a 	mov	r5,r23
100048d8:	000abac0 	call	1000abac <__sprint_r>
100048dc:	103bbf1e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
100048e0:	d8c02017 	ldw	r3,128(sp)
100048e4:	da000404 	addi	r8,sp,16
100048e8:	d9003217 	ldw	r4,200(sp)
100048ec:	d8802617 	ldw	r2,152(sp)
100048f0:	d9403317 	ldw	r5,204(sp)
100048f4:	8123883a 	add	r17,r16,r4
100048f8:	11400216 	blt	r2,r5,10004904 <___vfprintf_internal_r+0x1538>
100048fc:	9100004c 	andi	r4,r18,1
10004900:	20000d26 	beq	r4,zero,10004938 <___vfprintf_internal_r+0x156c>
10004904:	d9003717 	ldw	r4,220(sp)
10004908:	d9403417 	ldw	r5,208(sp)
1000490c:	1907883a 	add	r3,r3,r4
10004910:	d9001f17 	ldw	r4,124(sp)
10004914:	41400015 	stw	r5,0(r8)
10004918:	d9403717 	ldw	r5,220(sp)
1000491c:	21000044 	addi	r4,r4,1
10004920:	d8c02015 	stw	r3,128(sp)
10004924:	41400115 	stw	r5,4(r8)
10004928:	d9001f15 	stw	r4,124(sp)
1000492c:	014001c4 	movi	r5,7
10004930:	2901e816 	blt	r5,r4,100050d4 <___vfprintf_internal_r+0x1d08>
10004934:	42000204 	addi	r8,r8,8
10004938:	d9003317 	ldw	r4,204(sp)
1000493c:	8121883a 	add	r16,r16,r4
10004940:	2085c83a 	sub	r2,r4,r2
10004944:	8461c83a 	sub	r16,r16,r17
10004948:	1400010e 	bge	r2,r16,10004950 <___vfprintf_internal_r+0x1584>
1000494c:	1021883a 	mov	r16,r2
10004950:	04000a0e 	bge	zero,r16,1000497c <___vfprintf_internal_r+0x15b0>
10004954:	d9001f17 	ldw	r4,124(sp)
10004958:	1c07883a 	add	r3,r3,r16
1000495c:	44400015 	stw	r17,0(r8)
10004960:	21000044 	addi	r4,r4,1
10004964:	44000115 	stw	r16,4(r8)
10004968:	d8c02015 	stw	r3,128(sp)
1000496c:	d9001f15 	stw	r4,124(sp)
10004970:	014001c4 	movi	r5,7
10004974:	2901fb16 	blt	r5,r4,10005164 <___vfprintf_internal_r+0x1d98>
10004978:	42000204 	addi	r8,r8,8
1000497c:	8001f716 	blt	r16,zero,1000515c <___vfprintf_internal_r+0x1d90>
10004980:	1421c83a 	sub	r16,r2,r16
10004984:	043d160e 	bge	zero,r16,10003de0 <__alt_data_end+0xf8003de0>
10004988:	04400404 	movi	r17,16
1000498c:	d8801f17 	ldw	r2,124(sp)
10004990:	8c3efb0e 	bge	r17,r16,10004580 <__alt_data_end+0xf8004580>
10004994:	01440074 	movhi	r5,4097
10004998:	294c5c84 	addi	r5,r5,12658
1000499c:	d9402c15 	stw	r5,176(sp)
100049a0:	058001c4 	movi	r22,7
100049a4:	dcc02d17 	ldw	r19,180(sp)
100049a8:	00000306 	br	100049b8 <___vfprintf_internal_r+0x15ec>
100049ac:	42000204 	addi	r8,r8,8
100049b0:	843ffc04 	addi	r16,r16,-16
100049b4:	8c3ef50e 	bge	r17,r16,1000458c <__alt_data_end+0xf800458c>
100049b8:	18c00404 	addi	r3,r3,16
100049bc:	10800044 	addi	r2,r2,1
100049c0:	45000015 	stw	r20,0(r8)
100049c4:	44400115 	stw	r17,4(r8)
100049c8:	d8c02015 	stw	r3,128(sp)
100049cc:	d8801f15 	stw	r2,124(sp)
100049d0:	b0bff60e 	bge	r22,r2,100049ac <__alt_data_end+0xf80049ac>
100049d4:	d9801e04 	addi	r6,sp,120
100049d8:	b80b883a 	mov	r5,r23
100049dc:	9809883a 	mov	r4,r19
100049e0:	000abac0 	call	1000abac <__sprint_r>
100049e4:	103b7d1e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
100049e8:	d8c02017 	ldw	r3,128(sp)
100049ec:	d8801f17 	ldw	r2,124(sp)
100049f0:	da000404 	addi	r8,sp,16
100049f4:	003fee06 	br	100049b0 <__alt_data_end+0xf80049b0>
100049f8:	9088703a 	and	r4,r18,r2
100049fc:	203eab1e 	bne	r4,zero,100044ac <__alt_data_end+0xf80044ac>
10004a00:	dc401f17 	ldw	r17,124(sp)
10004a04:	40800115 	stw	r2,4(r8)
10004a08:	44000015 	stw	r16,0(r8)
10004a0c:	8c400044 	addi	r17,r17,1
10004a10:	d8c02015 	stw	r3,128(sp)
10004a14:	dc401f15 	stw	r17,124(sp)
10004a18:	008001c4 	movi	r2,7
10004a1c:	14400e16 	blt	r2,r17,10004a58 <___vfprintf_internal_r+0x168c>
10004a20:	45800204 	addi	r22,r8,8
10004a24:	003eca06 	br	10004550 <__alt_data_end+0xf8004550>
10004a28:	01040074 	movhi	r4,4097
10004a2c:	210c5c84 	addi	r4,r4,12658
10004a30:	d9002c15 	stw	r4,176(sp)
10004a34:	d8802c17 	ldw	r2,176(sp)
10004a38:	1c07883a 	add	r3,r3,r16
10004a3c:	8c400044 	addi	r17,r17,1
10004a40:	b0800015 	stw	r2,0(r22)
10004a44:	b4000115 	stw	r16,4(r22)
10004a48:	d8c02015 	stw	r3,128(sp)
10004a4c:	dc401f15 	stw	r17,124(sp)
10004a50:	008001c4 	movi	r2,7
10004a54:	147ebd0e 	bge	r2,r17,1000454c <__alt_data_end+0xf800454c>
10004a58:	d9002d17 	ldw	r4,180(sp)
10004a5c:	d9801e04 	addi	r6,sp,120
10004a60:	b80b883a 	mov	r5,r23
10004a64:	000abac0 	call	1000abac <__sprint_r>
10004a68:	103b5c1e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10004a6c:	d8c02017 	ldw	r3,128(sp)
10004a70:	dc401f17 	ldw	r17,124(sp)
10004a74:	dd800404 	addi	r22,sp,16
10004a78:	003eb506 	br	10004550 <__alt_data_end+0xf8004550>
10004a7c:	d9002d17 	ldw	r4,180(sp)
10004a80:	d9801e04 	addi	r6,sp,120
10004a84:	b80b883a 	mov	r5,r23
10004a88:	000abac0 	call	1000abac <__sprint_r>
10004a8c:	103b531e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10004a90:	d8c02017 	ldw	r3,128(sp)
10004a94:	dc401f17 	ldw	r17,124(sp)
10004a98:	da000404 	addi	r8,sp,16
10004a9c:	003e8d06 	br	100044d4 <__alt_data_end+0xf80044d4>
10004aa0:	d9002d17 	ldw	r4,180(sp)
10004aa4:	d9801e04 	addi	r6,sp,120
10004aa8:	b80b883a 	mov	r5,r23
10004aac:	000abac0 	call	1000abac <__sprint_r>
10004ab0:	103b4a1e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10004ab4:	d8c02017 	ldw	r3,128(sp)
10004ab8:	dc401f17 	ldw	r17,124(sp)
10004abc:	dd800404 	addi	r22,sp,16
10004ac0:	003e8f06 	br	10004500 <__alt_data_end+0xf8004500>
10004ac4:	0027883a 	mov	r19,zero
10004ac8:	003f4a06 	br	100047f4 <__alt_data_end+0xf80047f4>
10004acc:	d9002d17 	ldw	r4,180(sp)
10004ad0:	d9801e04 	addi	r6,sp,120
10004ad4:	b80b883a 	mov	r5,r23
10004ad8:	000abac0 	call	1000abac <__sprint_r>
10004adc:	103b3f1e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10004ae0:	d8c02017 	ldw	r3,128(sp)
10004ae4:	da000404 	addi	r8,sp,16
10004ae8:	003c7b06 	br	10003cd8 <__alt_data_end+0xf8003cd8>
10004aec:	d9402a17 	ldw	r5,168(sp)
10004af0:	04e7c83a 	sub	r19,zero,r19
10004af4:	07000b44 	movi	fp,45
10004af8:	9804c03a 	cmpne	r2,r19,zero
10004afc:	05adc83a 	sub	r22,zero,r22
10004b00:	df002785 	stb	fp,158(sp)
10004b04:	b0adc83a 	sub	r22,r22,r2
10004b08:	28017b16 	blt	r5,zero,100050f8 <___vfprintf_internal_r+0x1d2c>
10004b0c:	00bfdfc4 	movi	r2,-129
10004b10:	90a4703a 	and	r18,r18,r2
10004b14:	003b8906 	br	1000393c <__alt_data_end+0xf800393c>
10004b18:	d9003617 	ldw	r4,216(sp)
10004b1c:	d9403817 	ldw	r5,224(sp)
10004b20:	da003d15 	stw	r8,244(sp)
10004b24:	000a7d00 	call	1000a7d0 <__fpclassifyd>
10004b28:	da003d17 	ldw	r8,244(sp)
10004b2c:	1000f026 	beq	r2,zero,10004ef0 <___vfprintf_internal_r+0x1b24>
10004b30:	d9002a17 	ldw	r4,168(sp)
10004b34:	05bff7c4 	movi	r22,-33
10004b38:	00bfffc4 	movi	r2,-1
10004b3c:	8dac703a 	and	r22,r17,r22
10004b40:	20820026 	beq	r4,r2,10005344 <___vfprintf_internal_r+0x1f78>
10004b44:	008011c4 	movi	r2,71
10004b48:	b081f726 	beq	r22,r2,10005328 <___vfprintf_internal_r+0x1f5c>
10004b4c:	d9003817 	ldw	r4,224(sp)
10004b50:	90c04014 	ori	r3,r18,256
10004b54:	d8c02c15 	stw	r3,176(sp)
10004b58:	20021516 	blt	r4,zero,100053b0 <___vfprintf_internal_r+0x1fe4>
10004b5c:	dcc03817 	ldw	r19,224(sp)
10004b60:	d8002905 	stb	zero,164(sp)
10004b64:	00801984 	movi	r2,102
10004b68:	8881f926 	beq	r17,r2,10005350 <___vfprintf_internal_r+0x1f84>
10004b6c:	00801184 	movi	r2,70
10004b70:	88821c26 	beq	r17,r2,100053e4 <___vfprintf_internal_r+0x2018>
10004b74:	00801144 	movi	r2,69
10004b78:	b081ef26 	beq	r22,r2,10005338 <___vfprintf_internal_r+0x1f6c>
10004b7c:	d8c02a17 	ldw	r3,168(sp)
10004b80:	d8802104 	addi	r2,sp,132
10004b84:	d8800315 	stw	r2,12(sp)
10004b88:	d9403617 	ldw	r5,216(sp)
10004b8c:	d8802504 	addi	r2,sp,148
10004b90:	d9002d17 	ldw	r4,180(sp)
10004b94:	d8800215 	stw	r2,8(sp)
10004b98:	d8802604 	addi	r2,sp,152
10004b9c:	d8c00015 	stw	r3,0(sp)
10004ba0:	d8800115 	stw	r2,4(sp)
10004ba4:	01c00084 	movi	r7,2
10004ba8:	980d883a 	mov	r6,r19
10004bac:	d8c03c15 	stw	r3,240(sp)
10004bb0:	da003d15 	stw	r8,244(sp)
10004bb4:	0005afc0 	call	10005afc <_dtoa_r>
10004bb8:	1021883a 	mov	r16,r2
10004bbc:	008019c4 	movi	r2,103
10004bc0:	d8c03c17 	ldw	r3,240(sp)
10004bc4:	da003d17 	ldw	r8,244(sp)
10004bc8:	88817126 	beq	r17,r2,10005190 <___vfprintf_internal_r+0x1dc4>
10004bcc:	008011c4 	movi	r2,71
10004bd0:	88829126 	beq	r17,r2,10005618 <___vfprintf_internal_r+0x224c>
10004bd4:	80f9883a 	add	fp,r16,r3
10004bd8:	d9003617 	ldw	r4,216(sp)
10004bdc:	000d883a 	mov	r6,zero
10004be0:	000f883a 	mov	r7,zero
10004be4:	980b883a 	mov	r5,r19
10004be8:	da003d15 	stw	r8,244(sp)
10004bec:	000eb0c0 	call	1000eb0c <__eqdf2>
10004bf0:	da003d17 	ldw	r8,244(sp)
10004bf4:	10018d26 	beq	r2,zero,1000522c <___vfprintf_internal_r+0x1e60>
10004bf8:	d8802117 	ldw	r2,132(sp)
10004bfc:	1700062e 	bgeu	r2,fp,10004c18 <___vfprintf_internal_r+0x184c>
10004c00:	01000c04 	movi	r4,48
10004c04:	10c00044 	addi	r3,r2,1
10004c08:	d8c02115 	stw	r3,132(sp)
10004c0c:	11000005 	stb	r4,0(r2)
10004c10:	d8802117 	ldw	r2,132(sp)
10004c14:	173ffb36 	bltu	r2,fp,10004c04 <__alt_data_end+0xf8004c04>
10004c18:	1405c83a 	sub	r2,r2,r16
10004c1c:	d8803315 	stw	r2,204(sp)
10004c20:	008011c4 	movi	r2,71
10004c24:	b0817626 	beq	r22,r2,10005200 <___vfprintf_internal_r+0x1e34>
10004c28:	00801944 	movi	r2,101
10004c2c:	1442800e 	bge	r2,r17,10005630 <___vfprintf_internal_r+0x2264>
10004c30:	d8c02617 	ldw	r3,152(sp)
10004c34:	00801984 	movi	r2,102
10004c38:	d8c03215 	stw	r3,200(sp)
10004c3c:	8881fe26 	beq	r17,r2,10005438 <___vfprintf_internal_r+0x206c>
10004c40:	d8c03217 	ldw	r3,200(sp)
10004c44:	d9003317 	ldw	r4,204(sp)
10004c48:	1901dd16 	blt	r3,r4,100053c0 <___vfprintf_internal_r+0x1ff4>
10004c4c:	9480004c 	andi	r18,r18,1
10004c50:	90022b1e 	bne	r18,zero,10005500 <___vfprintf_internal_r+0x2134>
10004c54:	1805883a 	mov	r2,r3
10004c58:	18028316 	blt	r3,zero,10005668 <___vfprintf_internal_r+0x229c>
10004c5c:	d8c03217 	ldw	r3,200(sp)
10004c60:	044019c4 	movi	r17,103
10004c64:	d8c02b15 	stw	r3,172(sp)
10004c68:	df002907 	ldb	fp,164(sp)
10004c6c:	e001531e 	bne	fp,zero,100051bc <___vfprintf_internal_r+0x1df0>
10004c70:	df002783 	ldbu	fp,158(sp)
10004c74:	d8802915 	stw	r2,164(sp)
10004c78:	dc802c17 	ldw	r18,176(sp)
10004c7c:	d8002a15 	stw	zero,168(sp)
10004c80:	003baf06 	br	10003b40 <__alt_data_end+0xf8003b40>
10004c84:	d8c02e17 	ldw	r3,184(sp)
10004c88:	d9002e17 	ldw	r4,184(sp)
10004c8c:	d9402e17 	ldw	r5,184(sp)
10004c90:	18c00017 	ldw	r3,0(r3)
10004c94:	21000117 	ldw	r4,4(r4)
10004c98:	29400204 	addi	r5,r5,8
10004c9c:	d8c03615 	stw	r3,216(sp)
10004ca0:	d9003815 	stw	r4,224(sp)
10004ca4:	d9402e15 	stw	r5,184(sp)
10004ca8:	003b5006 	br	100039ec <__alt_data_end+0xf80039ec>
10004cac:	ac400007 	ldb	r17,0(r21)
10004cb0:	003a2806 	br	10003554 <__alt_data_end+0xf8003554>
10004cb4:	9080100c 	andi	r2,r18,64
10004cb8:	1000a826 	beq	r2,zero,10004f5c <___vfprintf_internal_r+0x1b90>
10004cbc:	d8c02e17 	ldw	r3,184(sp)
10004cc0:	002d883a 	mov	r22,zero
10004cc4:	1cc0000b 	ldhu	r19,0(r3)
10004cc8:	18c00104 	addi	r3,r3,4
10004ccc:	d8c02e15 	stw	r3,184(sp)
10004cd0:	003caf06 	br	10003f90 <__alt_data_end+0xf8003f90>
10004cd4:	d9002e17 	ldw	r4,184(sp)
10004cd8:	d9402a17 	ldw	r5,168(sp)
10004cdc:	002d883a 	mov	r22,zero
10004ce0:	20800104 	addi	r2,r4,4
10004ce4:	24c00017 	ldw	r19,0(r4)
10004ce8:	283ebb0e 	bge	r5,zero,100047d8 <__alt_data_end+0xf80047d8>
10004cec:	003ef106 	br	100048b4 <__alt_data_end+0xf80048b4>
10004cf0:	9080040c 	andi	r2,r18,16
10004cf4:	1000921e 	bne	r2,zero,10004f40 <___vfprintf_internal_r+0x1b74>
10004cf8:	9480100c 	andi	r18,r18,64
10004cfc:	90013926 	beq	r18,zero,100051e4 <___vfprintf_internal_r+0x1e18>
10004d00:	d9402e17 	ldw	r5,184(sp)
10004d04:	d8c02f17 	ldw	r3,188(sp)
10004d08:	28800017 	ldw	r2,0(r5)
10004d0c:	29400104 	addi	r5,r5,4
10004d10:	d9402e15 	stw	r5,184(sp)
10004d14:	10c0000d 	sth	r3,0(r2)
10004d18:	0039e406 	br	100034ac <__alt_data_end+0xf80034ac>
10004d1c:	9080100c 	andi	r2,r18,64
10004d20:	10008026 	beq	r2,zero,10004f24 <___vfprintf_internal_r+0x1b58>
10004d24:	d8802e17 	ldw	r2,184(sp)
10004d28:	14c0000f 	ldh	r19,0(r2)
10004d2c:	10800104 	addi	r2,r2,4
10004d30:	d8802e15 	stw	r2,184(sp)
10004d34:	982dd7fa 	srai	r22,r19,31
10004d38:	b005883a 	mov	r2,r22
10004d3c:	003af706 	br	1000391c <__alt_data_end+0xf800391c>
10004d40:	9080100c 	andi	r2,r18,64
10004d44:	d8002785 	stb	zero,158(sp)
10004d48:	10008a1e 	bne	r2,zero,10004f74 <___vfprintf_internal_r+0x1ba8>
10004d4c:	d9002e17 	ldw	r4,184(sp)
10004d50:	d9402a17 	ldw	r5,168(sp)
10004d54:	002d883a 	mov	r22,zero
10004d58:	20800104 	addi	r2,r4,4
10004d5c:	24c00017 	ldw	r19,0(r4)
10004d60:	283e4b0e 	bge	r5,zero,10004690 <__alt_data_end+0xf8004690>
10004d64:	9d86b03a 	or	r3,r19,r22
10004d68:	d8802e15 	stw	r2,184(sp)
10004d6c:	183e4c1e 	bne	r3,zero,100046a0 <__alt_data_end+0xf80046a0>
10004d70:	0039883a 	mov	fp,zero
10004d74:	0005883a 	mov	r2,zero
10004d78:	003d4006 	br	1000427c <__alt_data_end+0xf800427c>
10004d7c:	01440074 	movhi	r5,4097
10004d80:	294c5c84 	addi	r5,r5,12658
10004d84:	d9402c15 	stw	r5,176(sp)
10004d88:	d9402c17 	ldw	r5,176(sp)
10004d8c:	1c47883a 	add	r3,r3,r17
10004d90:	10800044 	addi	r2,r2,1
10004d94:	41400015 	stw	r5,0(r8)
10004d98:	44400115 	stw	r17,4(r8)
10004d9c:	d8c02015 	stw	r3,128(sp)
10004da0:	d8801f15 	stw	r2,124(sp)
10004da4:	010001c4 	movi	r4,7
10004da8:	20bec816 	blt	r4,r2,100048cc <__alt_data_end+0xf80048cc>
10004dac:	42000204 	addi	r8,r8,8
10004db0:	003ecd06 	br	100048e8 <__alt_data_end+0xf80048e8>
10004db4:	d9002a17 	ldw	r4,168(sp)
10004db8:	d8002785 	stb	zero,158(sp)
10004dbc:	203d2d16 	blt	r4,zero,10004274 <__alt_data_end+0xf8004274>
10004dc0:	00bfdfc4 	movi	r2,-129
10004dc4:	90a4703a 	and	r18,r18,r2
10004dc8:	003a6106 	br	10003750 <__alt_data_end+0xf8003750>
10004dcc:	01040074 	movhi	r4,4097
10004dd0:	210c5c84 	addi	r4,r4,12658
10004dd4:	d9002c15 	stw	r4,176(sp)
10004dd8:	003bea06 	br	10003d84 <__alt_data_end+0xf8003d84>
10004ddc:	d9002d17 	ldw	r4,180(sp)
10004de0:	d9801e04 	addi	r6,sp,120
10004de4:	b80b883a 	mov	r5,r23
10004de8:	000abac0 	call	1000abac <__sprint_r>
10004dec:	103a7b1e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10004df0:	d8c02017 	ldw	r3,128(sp)
10004df4:	da000404 	addi	r8,sp,16
10004df8:	003d4106 	br	10004300 <__alt_data_end+0xf8004300>
10004dfc:	d8801f17 	ldw	r2,124(sp)
10004e00:	01440074 	movhi	r5,4097
10004e04:	01000044 	movi	r4,1
10004e08:	18c00044 	addi	r3,r3,1
10004e0c:	10800044 	addi	r2,r2,1
10004e10:	294c5c04 	addi	r5,r5,12656
10004e14:	41000115 	stw	r4,4(r8)
10004e18:	41400015 	stw	r5,0(r8)
10004e1c:	d8c02015 	stw	r3,128(sp)
10004e20:	d8801f15 	stw	r2,124(sp)
10004e24:	010001c4 	movi	r4,7
10004e28:	20805c16 	blt	r4,r2,10004f9c <___vfprintf_internal_r+0x1bd0>
10004e2c:	42000204 	addi	r8,r8,8
10004e30:	8800041e 	bne	r17,zero,10004e44 <___vfprintf_internal_r+0x1a78>
10004e34:	d8803317 	ldw	r2,204(sp)
10004e38:	1000021e 	bne	r2,zero,10004e44 <___vfprintf_internal_r+0x1a78>
10004e3c:	9080004c 	andi	r2,r18,1
10004e40:	103be726 	beq	r2,zero,10003de0 <__alt_data_end+0xf8003de0>
10004e44:	d9003717 	ldw	r4,220(sp)
10004e48:	d8801f17 	ldw	r2,124(sp)
10004e4c:	d9403417 	ldw	r5,208(sp)
10004e50:	20c7883a 	add	r3,r4,r3
10004e54:	10800044 	addi	r2,r2,1
10004e58:	41000115 	stw	r4,4(r8)
10004e5c:	41400015 	stw	r5,0(r8)
10004e60:	d8c02015 	stw	r3,128(sp)
10004e64:	d8801f15 	stw	r2,124(sp)
10004e68:	010001c4 	movi	r4,7
10004e6c:	20812116 	blt	r4,r2,100052f4 <___vfprintf_internal_r+0x1f28>
10004e70:	42000204 	addi	r8,r8,8
10004e74:	0463c83a 	sub	r17,zero,r17
10004e78:	0440730e 	bge	zero,r17,10005048 <___vfprintf_internal_r+0x1c7c>
10004e7c:	05800404 	movi	r22,16
10004e80:	b440860e 	bge	r22,r17,1000509c <___vfprintf_internal_r+0x1cd0>
10004e84:	01440074 	movhi	r5,4097
10004e88:	294c5c84 	addi	r5,r5,12658
10004e8c:	d9402c15 	stw	r5,176(sp)
10004e90:	070001c4 	movi	fp,7
10004e94:	dcc02d17 	ldw	r19,180(sp)
10004e98:	00000306 	br	10004ea8 <___vfprintf_internal_r+0x1adc>
10004e9c:	42000204 	addi	r8,r8,8
10004ea0:	8c7ffc04 	addi	r17,r17,-16
10004ea4:	b440800e 	bge	r22,r17,100050a8 <___vfprintf_internal_r+0x1cdc>
10004ea8:	18c00404 	addi	r3,r3,16
10004eac:	10800044 	addi	r2,r2,1
10004eb0:	45000015 	stw	r20,0(r8)
10004eb4:	45800115 	stw	r22,4(r8)
10004eb8:	d8c02015 	stw	r3,128(sp)
10004ebc:	d8801f15 	stw	r2,124(sp)
10004ec0:	e0bff60e 	bge	fp,r2,10004e9c <__alt_data_end+0xf8004e9c>
10004ec4:	d9801e04 	addi	r6,sp,120
10004ec8:	b80b883a 	mov	r5,r23
10004ecc:	9809883a 	mov	r4,r19
10004ed0:	000abac0 	call	1000abac <__sprint_r>
10004ed4:	103a411e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10004ed8:	d8c02017 	ldw	r3,128(sp)
10004edc:	d8801f17 	ldw	r2,124(sp)
10004ee0:	da000404 	addi	r8,sp,16
10004ee4:	003fee06 	br	10004ea0 <__alt_data_end+0xf8004ea0>
10004ee8:	00bfffc4 	movi	r2,-1
10004eec:	003a3f06 	br	100037ec <__alt_data_end+0xf80037ec>
10004ef0:	008011c4 	movi	r2,71
10004ef4:	1440b816 	blt	r2,r17,100051d8 <___vfprintf_internal_r+0x1e0c>
10004ef8:	04040074 	movhi	r16,4097
10004efc:	840c4e04 	addi	r16,r16,12600
10004f00:	00c000c4 	movi	r3,3
10004f04:	00bfdfc4 	movi	r2,-129
10004f08:	d8c02915 	stw	r3,164(sp)
10004f0c:	90a4703a 	and	r18,r18,r2
10004f10:	df002783 	ldbu	fp,158(sp)
10004f14:	d8c02b15 	stw	r3,172(sp)
10004f18:	d8002a15 	stw	zero,168(sp)
10004f1c:	d8003215 	stw	zero,200(sp)
10004f20:	003b0706 	br	10003b40 <__alt_data_end+0xf8003b40>
10004f24:	d8c02e17 	ldw	r3,184(sp)
10004f28:	1cc00017 	ldw	r19,0(r3)
10004f2c:	18c00104 	addi	r3,r3,4
10004f30:	d8c02e15 	stw	r3,184(sp)
10004f34:	982dd7fa 	srai	r22,r19,31
10004f38:	b005883a 	mov	r2,r22
10004f3c:	003a7706 	br	1000391c <__alt_data_end+0xf800391c>
10004f40:	d8c02e17 	ldw	r3,184(sp)
10004f44:	d9002f17 	ldw	r4,188(sp)
10004f48:	18800017 	ldw	r2,0(r3)
10004f4c:	18c00104 	addi	r3,r3,4
10004f50:	d8c02e15 	stw	r3,184(sp)
10004f54:	11000015 	stw	r4,0(r2)
10004f58:	00395406 	br	100034ac <__alt_data_end+0xf80034ac>
10004f5c:	d9002e17 	ldw	r4,184(sp)
10004f60:	002d883a 	mov	r22,zero
10004f64:	24c00017 	ldw	r19,0(r4)
10004f68:	21000104 	addi	r4,r4,4
10004f6c:	d9002e15 	stw	r4,184(sp)
10004f70:	003c0706 	br	10003f90 <__alt_data_end+0xf8003f90>
10004f74:	d9402e17 	ldw	r5,184(sp)
10004f78:	d8c02a17 	ldw	r3,168(sp)
10004f7c:	002d883a 	mov	r22,zero
10004f80:	28800104 	addi	r2,r5,4
10004f84:	2cc0000b 	ldhu	r19,0(r5)
10004f88:	183dc10e 	bge	r3,zero,10004690 <__alt_data_end+0xf8004690>
10004f8c:	003f7506 	br	10004d64 <__alt_data_end+0xf8004d64>
10004f90:	04040074 	movhi	r16,4097
10004f94:	840c4c04 	addi	r16,r16,12592
10004f98:	003aa706 	br	10003a38 <__alt_data_end+0xf8003a38>
10004f9c:	d9002d17 	ldw	r4,180(sp)
10004fa0:	d9801e04 	addi	r6,sp,120
10004fa4:	b80b883a 	mov	r5,r23
10004fa8:	000abac0 	call	1000abac <__sprint_r>
10004fac:	103a0b1e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10004fb0:	dc402617 	ldw	r17,152(sp)
10004fb4:	d8c02017 	ldw	r3,128(sp)
10004fb8:	da000404 	addi	r8,sp,16
10004fbc:	003f9c06 	br	10004e30 <__alt_data_end+0xf8004e30>
10004fc0:	ac400043 	ldbu	r17,1(r21)
10004fc4:	84000814 	ori	r16,r16,32
10004fc8:	ad400044 	addi	r21,r21,1
10004fcc:	8c403fcc 	andi	r17,r17,255
10004fd0:	8c40201c 	xori	r17,r17,128
10004fd4:	8c7fe004 	addi	r17,r17,-128
10004fd8:	00395e06 	br	10003554 <__alt_data_end+0xf8003554>
10004fdc:	d8c02e15 	stw	r3,184(sp)
10004fe0:	0039883a 	mov	fp,zero
10004fe4:	003e3506 	br	100048bc <__alt_data_end+0xf80048bc>
10004fe8:	d9002d17 	ldw	r4,180(sp)
10004fec:	d9801e04 	addi	r6,sp,120
10004ff0:	b80b883a 	mov	r5,r23
10004ff4:	000abac0 	call	1000abac <__sprint_r>
10004ff8:	1039f81e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10004ffc:	d8c02017 	ldw	r3,128(sp)
10005000:	da000404 	addi	r8,sp,16
10005004:	003cd006 	br	10004348 <__alt_data_end+0xf8004348>
10005008:	8009883a 	mov	r4,r16
1000500c:	df003d15 	stw	fp,244(sp)
10005010:	00033340 	call	10003334 <strlen>
10005014:	d8802b15 	stw	r2,172(sp)
10005018:	da003d17 	ldw	r8,244(sp)
1000501c:	103c200e 	bge	r2,zero,100040a0 <__alt_data_end+0xf80040a0>
10005020:	0005883a 	mov	r2,zero
10005024:	003c1e06 	br	100040a0 <__alt_data_end+0xf80040a0>
10005028:	d9002d17 	ldw	r4,180(sp)
1000502c:	d9801e04 	addi	r6,sp,120
10005030:	b80b883a 	mov	r5,r23
10005034:	000abac0 	call	1000abac <__sprint_r>
10005038:	1039e81e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
1000503c:	d8c02017 	ldw	r3,128(sp)
10005040:	d8801f17 	ldw	r2,124(sp)
10005044:	da000404 	addi	r8,sp,16
10005048:	d9403317 	ldw	r5,204(sp)
1000504c:	10800044 	addi	r2,r2,1
10005050:	44000015 	stw	r16,0(r8)
10005054:	28c7883a 	add	r3,r5,r3
10005058:	003b5b06 	br	10003dc8 <__alt_data_end+0xf8003dc8>
1000505c:	01040074 	movhi	r4,4097
10005060:	210c6084 	addi	r4,r4,12674
10005064:	d9003515 	stw	r4,212(sp)
10005068:	003af206 	br	10003c34 <__alt_data_end+0xf8003c34>
1000506c:	013fffc4 	movi	r4,-1
10005070:	003a0806 	br	10003894 <__alt_data_end+0xf8003894>
10005074:	0023883a 	mov	r17,zero
10005078:	003d9d06 	br	100046f0 <__alt_data_end+0xf80046f0>
1000507c:	d9002d17 	ldw	r4,180(sp)
10005080:	d9801e04 	addi	r6,sp,120
10005084:	b80b883a 	mov	r5,r23
10005088:	000abac0 	call	1000abac <__sprint_r>
1000508c:	1039d31e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10005090:	d8c02017 	ldw	r3,128(sp)
10005094:	da000404 	addi	r8,sp,16
10005098:	003d9406 	br	100046ec <__alt_data_end+0xf80046ec>
1000509c:	01040074 	movhi	r4,4097
100050a0:	210c5c84 	addi	r4,r4,12658
100050a4:	d9002c15 	stw	r4,176(sp)
100050a8:	d9002c17 	ldw	r4,176(sp)
100050ac:	1c47883a 	add	r3,r3,r17
100050b0:	10800044 	addi	r2,r2,1
100050b4:	41000015 	stw	r4,0(r8)
100050b8:	44400115 	stw	r17,4(r8)
100050bc:	d8c02015 	stw	r3,128(sp)
100050c0:	d8801f15 	stw	r2,124(sp)
100050c4:	010001c4 	movi	r4,7
100050c8:	20bfd716 	blt	r4,r2,10005028 <__alt_data_end+0xf8005028>
100050cc:	42000204 	addi	r8,r8,8
100050d0:	003fdd06 	br	10005048 <__alt_data_end+0xf8005048>
100050d4:	d9002d17 	ldw	r4,180(sp)
100050d8:	d9801e04 	addi	r6,sp,120
100050dc:	b80b883a 	mov	r5,r23
100050e0:	000abac0 	call	1000abac <__sprint_r>
100050e4:	1039bd1e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
100050e8:	d8802617 	ldw	r2,152(sp)
100050ec:	d8c02017 	ldw	r3,128(sp)
100050f0:	da000404 	addi	r8,sp,16
100050f4:	003e1006 	br	10004938 <__alt_data_end+0xf8004938>
100050f8:	00800044 	movi	r2,1
100050fc:	10803fcc 	andi	r2,r2,255
10005100:	00c00044 	movi	r3,1
10005104:	10fa0d26 	beq	r2,r3,1000393c <__alt_data_end+0xf800393c>
10005108:	00c00084 	movi	r3,2
1000510c:	10fbaf26 	beq	r2,r3,10003fcc <__alt_data_end+0xf8003fcc>
10005110:	003a6d06 	br	10003ac8 <__alt_data_end+0xf8003ac8>
10005114:	01040074 	movhi	r4,4097
10005118:	210c6084 	addi	r4,r4,12674
1000511c:	d9003515 	stw	r4,212(sp)
10005120:	003b5406 	br	10003e74 <__alt_data_end+0xf8003e74>
10005124:	d8802a17 	ldw	r2,168(sp)
10005128:	00c00184 	movi	r3,6
1000512c:	1880012e 	bgeu	r3,r2,10005134 <___vfprintf_internal_r+0x1d68>
10005130:	1805883a 	mov	r2,r3
10005134:	d8802b15 	stw	r2,172(sp)
10005138:	1000ef16 	blt	r2,zero,100054f8 <___vfprintf_internal_r+0x212c>
1000513c:	04040074 	movhi	r16,4097
10005140:	d8802915 	stw	r2,164(sp)
10005144:	dcc02e15 	stw	r19,184(sp)
10005148:	d8002a15 	stw	zero,168(sp)
1000514c:	d8003215 	stw	zero,200(sp)
10005150:	840c5a04 	addi	r16,r16,12648
10005154:	0039883a 	mov	fp,zero
10005158:	003a8006 	br	10003b5c <__alt_data_end+0xf8003b5c>
1000515c:	0021883a 	mov	r16,zero
10005160:	003e0706 	br	10004980 <__alt_data_end+0xf8004980>
10005164:	d9002d17 	ldw	r4,180(sp)
10005168:	d9801e04 	addi	r6,sp,120
1000516c:	b80b883a 	mov	r5,r23
10005170:	000abac0 	call	1000abac <__sprint_r>
10005174:	1039991e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10005178:	d8802617 	ldw	r2,152(sp)
1000517c:	d9403317 	ldw	r5,204(sp)
10005180:	d8c02017 	ldw	r3,128(sp)
10005184:	da000404 	addi	r8,sp,16
10005188:	2885c83a 	sub	r2,r5,r2
1000518c:	003dfb06 	br	1000497c <__alt_data_end+0xf800497c>
10005190:	9080004c 	andi	r2,r18,1
10005194:	103e8f1e 	bne	r2,zero,10004bd4 <__alt_data_end+0xf8004bd4>
10005198:	d8802117 	ldw	r2,132(sp)
1000519c:	003e9e06 	br	10004c18 <__alt_data_end+0xf8004c18>
100051a0:	1025883a 	mov	r18,r2
100051a4:	0039883a 	mov	fp,zero
100051a8:	00800084 	movi	r2,2
100051ac:	003fd306 	br	100050fc <__alt_data_end+0xf80050fc>
100051b0:	07000b44 	movi	fp,45
100051b4:	df002785 	stb	fp,158(sp)
100051b8:	003a1b06 	br	10003a28 <__alt_data_end+0xf8003a28>
100051bc:	00c00b44 	movi	r3,45
100051c0:	d8c02785 	stb	r3,158(sp)
100051c4:	d8802915 	stw	r2,164(sp)
100051c8:	dc802c17 	ldw	r18,176(sp)
100051cc:	d8002a15 	stw	zero,168(sp)
100051d0:	07000b44 	movi	fp,45
100051d4:	003a5e06 	br	10003b50 <__alt_data_end+0xf8003b50>
100051d8:	04040074 	movhi	r16,4097
100051dc:	840c4f04 	addi	r16,r16,12604
100051e0:	003f4706 	br	10004f00 <__alt_data_end+0xf8004f00>
100051e4:	d9002e17 	ldw	r4,184(sp)
100051e8:	d9402f17 	ldw	r5,188(sp)
100051ec:	20800017 	ldw	r2,0(r4)
100051f0:	21000104 	addi	r4,r4,4
100051f4:	d9002e15 	stw	r4,184(sp)
100051f8:	11400015 	stw	r5,0(r2)
100051fc:	0038ab06 	br	100034ac <__alt_data_end+0xf80034ac>
10005200:	dd802617 	ldw	r22,152(sp)
10005204:	00bfff44 	movi	r2,-3
10005208:	b0801c16 	blt	r22,r2,1000527c <___vfprintf_internal_r+0x1eb0>
1000520c:	d9402a17 	ldw	r5,168(sp)
10005210:	2d801a16 	blt	r5,r22,1000527c <___vfprintf_internal_r+0x1eb0>
10005214:	dd803215 	stw	r22,200(sp)
10005218:	003e8906 	br	10004c40 <__alt_data_end+0xf8004c40>
1000521c:	01040074 	movhi	r4,4097
10005220:	210c5c84 	addi	r4,r4,12658
10005224:	d9002c15 	stw	r4,176(sp)
10005228:	003c9106 	br	10004470 <__alt_data_end+0xf8004470>
1000522c:	e005883a 	mov	r2,fp
10005230:	003e7906 	br	10004c18 <__alt_data_end+0xf8004c18>
10005234:	d9002a17 	ldw	r4,168(sp)
10005238:	df002783 	ldbu	fp,158(sp)
1000523c:	dcc02e15 	stw	r19,184(sp)
10005240:	d9002915 	stw	r4,164(sp)
10005244:	d9002b15 	stw	r4,172(sp)
10005248:	d8002a15 	stw	zero,168(sp)
1000524c:	d8003215 	stw	zero,200(sp)
10005250:	003a3b06 	br	10003b40 <__alt_data_end+0xf8003b40>
10005254:	9080004c 	andi	r2,r18,1
10005258:	0039883a 	mov	fp,zero
1000525c:	10000426 	beq	r2,zero,10005270 <___vfprintf_internal_r+0x1ea4>
10005260:	00800c04 	movi	r2,48
10005264:	dc001dc4 	addi	r16,sp,119
10005268:	d8801dc5 	stb	r2,119(sp)
1000526c:	003b6406 	br	10004000 <__alt_data_end+0xf8004000>
10005270:	d8002b15 	stw	zero,172(sp)
10005274:	dc001e04 	addi	r16,sp,120
10005278:	003a2b06 	br	10003b28 <__alt_data_end+0xf8003b28>
1000527c:	8c7fff84 	addi	r17,r17,-2
10005280:	b5bfffc4 	addi	r22,r22,-1
10005284:	dd802615 	stw	r22,152(sp)
10005288:	dc4022c5 	stb	r17,139(sp)
1000528c:	b000bf16 	blt	r22,zero,1000558c <___vfprintf_internal_r+0x21c0>
10005290:	00800ac4 	movi	r2,43
10005294:	d8802305 	stb	r2,140(sp)
10005298:	00800244 	movi	r2,9
1000529c:	15807016 	blt	r2,r22,10005460 <___vfprintf_internal_r+0x2094>
100052a0:	00800c04 	movi	r2,48
100052a4:	b5800c04 	addi	r22,r22,48
100052a8:	d8802345 	stb	r2,141(sp)
100052ac:	dd802385 	stb	r22,142(sp)
100052b0:	d88023c4 	addi	r2,sp,143
100052b4:	df0022c4 	addi	fp,sp,139
100052b8:	d8c03317 	ldw	r3,204(sp)
100052bc:	1739c83a 	sub	fp,r2,fp
100052c0:	d9003317 	ldw	r4,204(sp)
100052c4:	e0c7883a 	add	r3,fp,r3
100052c8:	df003a15 	stw	fp,232(sp)
100052cc:	d8c02b15 	stw	r3,172(sp)
100052d0:	00800044 	movi	r2,1
100052d4:	1100b30e 	bge	r2,r4,100055a4 <___vfprintf_internal_r+0x21d8>
100052d8:	d8c02b17 	ldw	r3,172(sp)
100052dc:	18c00044 	addi	r3,r3,1
100052e0:	d8c02b15 	stw	r3,172(sp)
100052e4:	1805883a 	mov	r2,r3
100052e8:	1800ac16 	blt	r3,zero,1000559c <___vfprintf_internal_r+0x21d0>
100052ec:	d8003215 	stw	zero,200(sp)
100052f0:	003e5d06 	br	10004c68 <__alt_data_end+0xf8004c68>
100052f4:	d9002d17 	ldw	r4,180(sp)
100052f8:	d9801e04 	addi	r6,sp,120
100052fc:	b80b883a 	mov	r5,r23
10005300:	000abac0 	call	1000abac <__sprint_r>
10005304:	1039351e 	bne	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10005308:	dc402617 	ldw	r17,152(sp)
1000530c:	d8c02017 	ldw	r3,128(sp)
10005310:	d8801f17 	ldw	r2,124(sp)
10005314:	da000404 	addi	r8,sp,16
10005318:	003ed606 	br	10004e74 <__alt_data_end+0xf8004e74>
1000531c:	182b883a 	mov	r21,r3
10005320:	d8002a15 	stw	zero,168(sp)
10005324:	00388c06 	br	10003558 <__alt_data_end+0xf8003558>
10005328:	d8802a17 	ldw	r2,168(sp)
1000532c:	103e071e 	bne	r2,zero,10004b4c <__alt_data_end+0xf8004b4c>
10005330:	dc002a15 	stw	r16,168(sp)
10005334:	003e0506 	br	10004b4c <__alt_data_end+0xf8004b4c>
10005338:	d9002a17 	ldw	r4,168(sp)
1000533c:	20c00044 	addi	r3,r4,1
10005340:	003e0f06 	br	10004b80 <__alt_data_end+0xf8004b80>
10005344:	01400184 	movi	r5,6
10005348:	d9402a15 	stw	r5,168(sp)
1000534c:	003dff06 	br	10004b4c <__alt_data_end+0xf8004b4c>
10005350:	d8802104 	addi	r2,sp,132
10005354:	d8800315 	stw	r2,12(sp)
10005358:	d8802504 	addi	r2,sp,148
1000535c:	d8800215 	stw	r2,8(sp)
10005360:	d8802604 	addi	r2,sp,152
10005364:	d8800115 	stw	r2,4(sp)
10005368:	d8802a17 	ldw	r2,168(sp)
1000536c:	d9403617 	ldw	r5,216(sp)
10005370:	d9002d17 	ldw	r4,180(sp)
10005374:	d8800015 	stw	r2,0(sp)
10005378:	01c000c4 	movi	r7,3
1000537c:	980d883a 	mov	r6,r19
10005380:	da003d15 	stw	r8,244(sp)
10005384:	0005afc0 	call	10005afc <_dtoa_r>
10005388:	d8c02a17 	ldw	r3,168(sp)
1000538c:	da003d17 	ldw	r8,244(sp)
10005390:	1021883a 	mov	r16,r2
10005394:	10f9883a 	add	fp,r2,r3
10005398:	81000007 	ldb	r4,0(r16)
1000539c:	00800c04 	movi	r2,48
100053a0:	20805e26 	beq	r4,r2,1000551c <___vfprintf_internal_r+0x2150>
100053a4:	d8c02617 	ldw	r3,152(sp)
100053a8:	e0f9883a 	add	fp,fp,r3
100053ac:	003e0a06 	br	10004bd8 <__alt_data_end+0xf8004bd8>
100053b0:	00c00b44 	movi	r3,45
100053b4:	24e0003c 	xorhi	r19,r4,32768
100053b8:	d8c02905 	stb	r3,164(sp)
100053bc:	003de906 	br	10004b64 <__alt_data_end+0xf8004b64>
100053c0:	d8c03217 	ldw	r3,200(sp)
100053c4:	00c07a0e 	bge	zero,r3,100055b0 <___vfprintf_internal_r+0x21e4>
100053c8:	00800044 	movi	r2,1
100053cc:	d9003317 	ldw	r4,204(sp)
100053d0:	1105883a 	add	r2,r2,r4
100053d4:	d8802b15 	stw	r2,172(sp)
100053d8:	10004e16 	blt	r2,zero,10005514 <___vfprintf_internal_r+0x2148>
100053dc:	044019c4 	movi	r17,103
100053e0:	003e2106 	br	10004c68 <__alt_data_end+0xf8004c68>
100053e4:	d9002a17 	ldw	r4,168(sp)
100053e8:	d8802104 	addi	r2,sp,132
100053ec:	d8800315 	stw	r2,12(sp)
100053f0:	d9000015 	stw	r4,0(sp)
100053f4:	d8802504 	addi	r2,sp,148
100053f8:	d9403617 	ldw	r5,216(sp)
100053fc:	d9002d17 	ldw	r4,180(sp)
10005400:	d8800215 	stw	r2,8(sp)
10005404:	d8802604 	addi	r2,sp,152
10005408:	d8800115 	stw	r2,4(sp)
1000540c:	01c000c4 	movi	r7,3
10005410:	980d883a 	mov	r6,r19
10005414:	da003d15 	stw	r8,244(sp)
10005418:	0005afc0 	call	10005afc <_dtoa_r>
1000541c:	d8c02a17 	ldw	r3,168(sp)
10005420:	da003d17 	ldw	r8,244(sp)
10005424:	1021883a 	mov	r16,r2
10005428:	00801184 	movi	r2,70
1000542c:	80f9883a 	add	fp,r16,r3
10005430:	88bfd926 	beq	r17,r2,10005398 <__alt_data_end+0xf8005398>
10005434:	003de806 	br	10004bd8 <__alt_data_end+0xf8004bd8>
10005438:	d9002a17 	ldw	r4,168(sp)
1000543c:	00c04d0e 	bge	zero,r3,10005574 <___vfprintf_internal_r+0x21a8>
10005440:	2000441e 	bne	r4,zero,10005554 <___vfprintf_internal_r+0x2188>
10005444:	9480004c 	andi	r18,r18,1
10005448:	9000421e 	bne	r18,zero,10005554 <___vfprintf_internal_r+0x2188>
1000544c:	1805883a 	mov	r2,r3
10005450:	18006f16 	blt	r3,zero,10005610 <___vfprintf_internal_r+0x2244>
10005454:	d8c03217 	ldw	r3,200(sp)
10005458:	d8c02b15 	stw	r3,172(sp)
1000545c:	003e0206 	br	10004c68 <__alt_data_end+0xf8004c68>
10005460:	df0022c4 	addi	fp,sp,139
10005464:	dc002a15 	stw	r16,168(sp)
10005468:	4027883a 	mov	r19,r8
1000546c:	e021883a 	mov	r16,fp
10005470:	b009883a 	mov	r4,r22
10005474:	01400284 	movi	r5,10
10005478:	000d7380 	call	1000d738 <__modsi3>
1000547c:	10800c04 	addi	r2,r2,48
10005480:	843fffc4 	addi	r16,r16,-1
10005484:	b009883a 	mov	r4,r22
10005488:	01400284 	movi	r5,10
1000548c:	80800005 	stb	r2,0(r16)
10005490:	000d6b40 	call	1000d6b4 <__divsi3>
10005494:	102d883a 	mov	r22,r2
10005498:	00800244 	movi	r2,9
1000549c:	15bff416 	blt	r2,r22,10005470 <__alt_data_end+0xf8005470>
100054a0:	9811883a 	mov	r8,r19
100054a4:	b0800c04 	addi	r2,r22,48
100054a8:	8027883a 	mov	r19,r16
100054ac:	997fffc4 	addi	r5,r19,-1
100054b0:	98bfffc5 	stb	r2,-1(r19)
100054b4:	dc002a17 	ldw	r16,168(sp)
100054b8:	2f006d2e 	bgeu	r5,fp,10005670 <___vfprintf_internal_r+0x22a4>
100054bc:	d9c02384 	addi	r7,sp,142
100054c0:	3ccfc83a 	sub	r7,r7,r19
100054c4:	d9002344 	addi	r4,sp,141
100054c8:	e1cf883a 	add	r7,fp,r7
100054cc:	00000106 	br	100054d4 <___vfprintf_internal_r+0x2108>
100054d0:	28800003 	ldbu	r2,0(r5)
100054d4:	20800005 	stb	r2,0(r4)
100054d8:	21000044 	addi	r4,r4,1
100054dc:	29400044 	addi	r5,r5,1
100054e0:	393ffb1e 	bne	r7,r4,100054d0 <__alt_data_end+0xf80054d0>
100054e4:	d8802304 	addi	r2,sp,140
100054e8:	14c5c83a 	sub	r2,r2,r19
100054ec:	d8c02344 	addi	r3,sp,141
100054f0:	1885883a 	add	r2,r3,r2
100054f4:	003f7006 	br	100052b8 <__alt_data_end+0xf80052b8>
100054f8:	0005883a 	mov	r2,zero
100054fc:	003f0f06 	br	1000513c <__alt_data_end+0xf800513c>
10005500:	d8c03217 	ldw	r3,200(sp)
10005504:	18c00044 	addi	r3,r3,1
10005508:	d8c02b15 	stw	r3,172(sp)
1000550c:	1805883a 	mov	r2,r3
10005510:	183fb20e 	bge	r3,zero,100053dc <__alt_data_end+0xf80053dc>
10005514:	0005883a 	mov	r2,zero
10005518:	003fb006 	br	100053dc <__alt_data_end+0xf80053dc>
1000551c:	d9003617 	ldw	r4,216(sp)
10005520:	000d883a 	mov	r6,zero
10005524:	000f883a 	mov	r7,zero
10005528:	980b883a 	mov	r5,r19
1000552c:	d8c03c15 	stw	r3,240(sp)
10005530:	da003d15 	stw	r8,244(sp)
10005534:	000eb0c0 	call	1000eb0c <__eqdf2>
10005538:	d8c03c17 	ldw	r3,240(sp)
1000553c:	da003d17 	ldw	r8,244(sp)
10005540:	103f9826 	beq	r2,zero,100053a4 <__alt_data_end+0xf80053a4>
10005544:	00800044 	movi	r2,1
10005548:	10c7c83a 	sub	r3,r2,r3
1000554c:	d8c02615 	stw	r3,152(sp)
10005550:	003f9506 	br	100053a8 <__alt_data_end+0xf80053a8>
10005554:	d9002a17 	ldw	r4,168(sp)
10005558:	d8c03217 	ldw	r3,200(sp)
1000555c:	20800044 	addi	r2,r4,1
10005560:	1885883a 	add	r2,r3,r2
10005564:	d8802b15 	stw	r2,172(sp)
10005568:	103dbf0e 	bge	r2,zero,10004c68 <__alt_data_end+0xf8004c68>
1000556c:	0005883a 	mov	r2,zero
10005570:	003dbd06 	br	10004c68 <__alt_data_end+0xf8004c68>
10005574:	2000201e 	bne	r4,zero,100055f8 <___vfprintf_internal_r+0x222c>
10005578:	9480004c 	andi	r18,r18,1
1000557c:	90001e1e 	bne	r18,zero,100055f8 <___vfprintf_internal_r+0x222c>
10005580:	00800044 	movi	r2,1
10005584:	d8802b15 	stw	r2,172(sp)
10005588:	003db706 	br	10004c68 <__alt_data_end+0xf8004c68>
1000558c:	00800b44 	movi	r2,45
10005590:	05adc83a 	sub	r22,zero,r22
10005594:	d8802305 	stb	r2,140(sp)
10005598:	003f3f06 	br	10005298 <__alt_data_end+0xf8005298>
1000559c:	0005883a 	mov	r2,zero
100055a0:	003f5206 	br	100052ec <__alt_data_end+0xf80052ec>
100055a4:	90a4703a 	and	r18,r18,r2
100055a8:	903f4e26 	beq	r18,zero,100052e4 <__alt_data_end+0xf80052e4>
100055ac:	003f4a06 	br	100052d8 <__alt_data_end+0xf80052d8>
100055b0:	00800084 	movi	r2,2
100055b4:	10c5c83a 	sub	r2,r2,r3
100055b8:	003f8406 	br	100053cc <__alt_data_end+0xf80053cc>
100055bc:	d9402e17 	ldw	r5,184(sp)
100055c0:	d9002e17 	ldw	r4,184(sp)
100055c4:	ac400043 	ldbu	r17,1(r21)
100055c8:	29400017 	ldw	r5,0(r5)
100055cc:	20800104 	addi	r2,r4,4
100055d0:	d8802e15 	stw	r2,184(sp)
100055d4:	d9402a15 	stw	r5,168(sp)
100055d8:	182b883a 	mov	r21,r3
100055dc:	283e7b0e 	bge	r5,zero,10004fcc <__alt_data_end+0xf8004fcc>
100055e0:	8c403fcc 	andi	r17,r17,255
100055e4:	017fffc4 	movi	r5,-1
100055e8:	8c40201c 	xori	r17,r17,128
100055ec:	d9402a15 	stw	r5,168(sp)
100055f0:	8c7fe004 	addi	r17,r17,-128
100055f4:	0037d706 	br	10003554 <__alt_data_end+0xf8003554>
100055f8:	d8c02a17 	ldw	r3,168(sp)
100055fc:	18c00084 	addi	r3,r3,2
10005600:	d8c02b15 	stw	r3,172(sp)
10005604:	1805883a 	mov	r2,r3
10005608:	183d970e 	bge	r3,zero,10004c68 <__alt_data_end+0xf8004c68>
1000560c:	003fd706 	br	1000556c <__alt_data_end+0xf800556c>
10005610:	0005883a 	mov	r2,zero
10005614:	003f8f06 	br	10005454 <__alt_data_end+0xf8005454>
10005618:	9080004c 	andi	r2,r18,1
1000561c:	103f821e 	bne	r2,zero,10005428 <__alt_data_end+0xf8005428>
10005620:	d8802117 	ldw	r2,132(sp)
10005624:	1405c83a 	sub	r2,r2,r16
10005628:	d8803315 	stw	r2,204(sp)
1000562c:	b47ef426 	beq	r22,r17,10005200 <__alt_data_end+0xf8005200>
10005630:	dd802617 	ldw	r22,152(sp)
10005634:	003f1206 	br	10005280 <__alt_data_end+0xf8005280>
10005638:	d8c02b03 	ldbu	r3,172(sp)
1000563c:	d8c02785 	stb	r3,158(sp)
10005640:	0038df06 	br	100039c0 <__alt_data_end+0xf80039c0>
10005644:	d8c02b03 	ldbu	r3,172(sp)
10005648:	d8c02785 	stb	r3,158(sp)
1000564c:	0038aa06 	br	100038f8 <__alt_data_end+0xf80038f8>
10005650:	d8c02b03 	ldbu	r3,172(sp)
10005654:	d8c02785 	stb	r3,158(sp)
10005658:	003a4306 	br	10003f68 <__alt_data_end+0xf8003f68>
1000565c:	d8c02b03 	ldbu	r3,172(sp)
10005660:	d8c02785 	stb	r3,158(sp)
10005664:	003af506 	br	1000423c <__alt_data_end+0xf800423c>
10005668:	0005883a 	mov	r2,zero
1000566c:	003d7b06 	br	10004c5c <__alt_data_end+0xf8004c5c>
10005670:	d8802344 	addi	r2,sp,141
10005674:	003f1006 	br	100052b8 <__alt_data_end+0xf80052b8>
10005678:	d8c02b03 	ldbu	r3,172(sp)
1000567c:	d8c02785 	stb	r3,158(sp)
10005680:	0038fd06 	br	10003a78 <__alt_data_end+0xf8003a78>
10005684:	d8c02b03 	ldbu	r3,172(sp)
10005688:	d8c02785 	stb	r3,158(sp)
1000568c:	003a9706 	br	100040ec <__alt_data_end+0xf80040ec>
10005690:	d8c02b03 	ldbu	r3,172(sp)
10005694:	d8c02785 	stb	r3,158(sp)
10005698:	003a1806 	br	10003efc <__alt_data_end+0xf8003efc>
1000569c:	d8c02b03 	ldbu	r3,172(sp)
100056a0:	d8c02785 	stb	r3,158(sp)
100056a4:	003abe06 	br	100041a0 <__alt_data_end+0xf80041a0>

100056a8 <__vfprintf_internal>:
100056a8:	00840074 	movhi	r2,4097
100056ac:	1093b704 	addi	r2,r2,20188
100056b0:	300f883a 	mov	r7,r6
100056b4:	280d883a 	mov	r6,r5
100056b8:	200b883a 	mov	r5,r4
100056bc:	11000017 	ldw	r4,0(r2)
100056c0:	00033cc1 	jmpi	100033cc <___vfprintf_internal_r>

100056c4 <__sbprintf>:
100056c4:	2880030b 	ldhu	r2,12(r5)
100056c8:	2ac01917 	ldw	r11,100(r5)
100056cc:	2a80038b 	ldhu	r10,14(r5)
100056d0:	2a400717 	ldw	r9,28(r5)
100056d4:	2a000917 	ldw	r8,36(r5)
100056d8:	defee204 	addi	sp,sp,-1144
100056dc:	00c10004 	movi	r3,1024
100056e0:	dc011a15 	stw	r16,1128(sp)
100056e4:	10bfff4c 	andi	r2,r2,65533
100056e8:	2821883a 	mov	r16,r5
100056ec:	d8cb883a 	add	r5,sp,r3
100056f0:	dc811c15 	stw	r18,1136(sp)
100056f4:	dc411b15 	stw	r17,1132(sp)
100056f8:	dfc11d15 	stw	ra,1140(sp)
100056fc:	2025883a 	mov	r18,r4
10005700:	d881030d 	sth	r2,1036(sp)
10005704:	dac11915 	stw	r11,1124(sp)
10005708:	da81038d 	sth	r10,1038(sp)
1000570c:	da410715 	stw	r9,1052(sp)
10005710:	da010915 	stw	r8,1060(sp)
10005714:	dec10015 	stw	sp,1024(sp)
10005718:	dec10415 	stw	sp,1040(sp)
1000571c:	d8c10215 	stw	r3,1032(sp)
10005720:	d8c10515 	stw	r3,1044(sp)
10005724:	d8010615 	stw	zero,1048(sp)
10005728:	00033cc0 	call	100033cc <___vfprintf_internal_r>
1000572c:	1023883a 	mov	r17,r2
10005730:	10000416 	blt	r2,zero,10005744 <__sbprintf+0x80>
10005734:	d9410004 	addi	r5,sp,1024
10005738:	9009883a 	mov	r4,r18
1000573c:	00073a00 	call	100073a0 <_fflush_r>
10005740:	10000d1e 	bne	r2,zero,10005778 <__sbprintf+0xb4>
10005744:	d881030b 	ldhu	r2,1036(sp)
10005748:	1080100c 	andi	r2,r2,64
1000574c:	10000326 	beq	r2,zero,1000575c <__sbprintf+0x98>
10005750:	8080030b 	ldhu	r2,12(r16)
10005754:	10801014 	ori	r2,r2,64
10005758:	8080030d 	sth	r2,12(r16)
1000575c:	8805883a 	mov	r2,r17
10005760:	dfc11d17 	ldw	ra,1140(sp)
10005764:	dc811c17 	ldw	r18,1136(sp)
10005768:	dc411b17 	ldw	r17,1132(sp)
1000576c:	dc011a17 	ldw	r16,1128(sp)
10005770:	dec11e04 	addi	sp,sp,1144
10005774:	f800283a 	ret
10005778:	047fffc4 	movi	r17,-1
1000577c:	003ff106 	br	10005744 <__alt_data_end+0xf8005744>

10005780 <__swsetup_r>:
10005780:	00840074 	movhi	r2,4097
10005784:	defffd04 	addi	sp,sp,-12
10005788:	1093b704 	addi	r2,r2,20188
1000578c:	dc400115 	stw	r17,4(sp)
10005790:	2023883a 	mov	r17,r4
10005794:	11000017 	ldw	r4,0(r2)
10005798:	dc000015 	stw	r16,0(sp)
1000579c:	dfc00215 	stw	ra,8(sp)
100057a0:	2821883a 	mov	r16,r5
100057a4:	20000226 	beq	r4,zero,100057b0 <__swsetup_r+0x30>
100057a8:	20800e17 	ldw	r2,56(r4)
100057ac:	10003126 	beq	r2,zero,10005874 <__swsetup_r+0xf4>
100057b0:	8080030b 	ldhu	r2,12(r16)
100057b4:	10c0020c 	andi	r3,r2,8
100057b8:	1009883a 	mov	r4,r2
100057bc:	18000f26 	beq	r3,zero,100057fc <__swsetup_r+0x7c>
100057c0:	80c00417 	ldw	r3,16(r16)
100057c4:	18001526 	beq	r3,zero,1000581c <__swsetup_r+0x9c>
100057c8:	1100004c 	andi	r4,r2,1
100057cc:	20001c1e 	bne	r4,zero,10005840 <__swsetup_r+0xc0>
100057d0:	1080008c 	andi	r2,r2,2
100057d4:	1000291e 	bne	r2,zero,1000587c <__swsetup_r+0xfc>
100057d8:	80800517 	ldw	r2,20(r16)
100057dc:	80800215 	stw	r2,8(r16)
100057e0:	18001c26 	beq	r3,zero,10005854 <__swsetup_r+0xd4>
100057e4:	0005883a 	mov	r2,zero
100057e8:	dfc00217 	ldw	ra,8(sp)
100057ec:	dc400117 	ldw	r17,4(sp)
100057f0:	dc000017 	ldw	r16,0(sp)
100057f4:	dec00304 	addi	sp,sp,12
100057f8:	f800283a 	ret
100057fc:	2080040c 	andi	r2,r4,16
10005800:	10002e26 	beq	r2,zero,100058bc <__swsetup_r+0x13c>
10005804:	2080010c 	andi	r2,r4,4
10005808:	10001e1e 	bne	r2,zero,10005884 <__swsetup_r+0x104>
1000580c:	80c00417 	ldw	r3,16(r16)
10005810:	20800214 	ori	r2,r4,8
10005814:	8080030d 	sth	r2,12(r16)
10005818:	183feb1e 	bne	r3,zero,100057c8 <__alt_data_end+0xf80057c8>
1000581c:	1100a00c 	andi	r4,r2,640
10005820:	01408004 	movi	r5,512
10005824:	217fe826 	beq	r4,r5,100057c8 <__alt_data_end+0xf80057c8>
10005828:	800b883a 	mov	r5,r16
1000582c:	8809883a 	mov	r4,r17
10005830:	000833c0 	call	1000833c <__smakebuf_r>
10005834:	8080030b 	ldhu	r2,12(r16)
10005838:	80c00417 	ldw	r3,16(r16)
1000583c:	003fe206 	br	100057c8 <__alt_data_end+0xf80057c8>
10005840:	80800517 	ldw	r2,20(r16)
10005844:	80000215 	stw	zero,8(r16)
10005848:	0085c83a 	sub	r2,zero,r2
1000584c:	80800615 	stw	r2,24(r16)
10005850:	183fe41e 	bne	r3,zero,100057e4 <__alt_data_end+0xf80057e4>
10005854:	80c0030b 	ldhu	r3,12(r16)
10005858:	0005883a 	mov	r2,zero
1000585c:	1900200c 	andi	r4,r3,128
10005860:	203fe126 	beq	r4,zero,100057e8 <__alt_data_end+0xf80057e8>
10005864:	18c01014 	ori	r3,r3,64
10005868:	80c0030d 	sth	r3,12(r16)
1000586c:	00bfffc4 	movi	r2,-1
10005870:	003fdd06 	br	100057e8 <__alt_data_end+0xf80057e8>
10005874:	000778c0 	call	1000778c <__sinit>
10005878:	003fcd06 	br	100057b0 <__alt_data_end+0xf80057b0>
1000587c:	0005883a 	mov	r2,zero
10005880:	003fd606 	br	100057dc <__alt_data_end+0xf80057dc>
10005884:	81400c17 	ldw	r5,48(r16)
10005888:	28000626 	beq	r5,zero,100058a4 <__swsetup_r+0x124>
1000588c:	80801004 	addi	r2,r16,64
10005890:	28800326 	beq	r5,r2,100058a0 <__swsetup_r+0x120>
10005894:	8809883a 	mov	r4,r17
10005898:	00079000 	call	10007900 <_free_r>
1000589c:	8100030b 	ldhu	r4,12(r16)
100058a0:	80000c15 	stw	zero,48(r16)
100058a4:	80c00417 	ldw	r3,16(r16)
100058a8:	00bff6c4 	movi	r2,-37
100058ac:	1108703a 	and	r4,r2,r4
100058b0:	80000115 	stw	zero,4(r16)
100058b4:	80c00015 	stw	r3,0(r16)
100058b8:	003fd506 	br	10005810 <__alt_data_end+0xf8005810>
100058bc:	00800244 	movi	r2,9
100058c0:	88800015 	stw	r2,0(r17)
100058c4:	20801014 	ori	r2,r4,64
100058c8:	8080030d 	sth	r2,12(r16)
100058cc:	00bfffc4 	movi	r2,-1
100058d0:	003fc506 	br	100057e8 <__alt_data_end+0xf80057e8>

100058d4 <quorem>:
100058d4:	defff204 	addi	sp,sp,-56
100058d8:	ddc00b15 	stw	r23,44(sp)
100058dc:	20800417 	ldw	r2,16(r4)
100058e0:	2dc00417 	ldw	r23,16(r5)
100058e4:	dfc00d15 	stw	ra,52(sp)
100058e8:	df000c15 	stw	fp,48(sp)
100058ec:	dd800a15 	stw	r22,40(sp)
100058f0:	dd400915 	stw	r21,36(sp)
100058f4:	dd000815 	stw	r20,32(sp)
100058f8:	dcc00715 	stw	r19,28(sp)
100058fc:	dc800615 	stw	r18,24(sp)
10005900:	dc400515 	stw	r17,20(sp)
10005904:	dc000415 	stw	r16,16(sp)
10005908:	15c07a16 	blt	r2,r23,10005af4 <quorem+0x220>
1000590c:	bdffffc4 	addi	r23,r23,-1
10005910:	bde9883a 	add	r20,r23,r23
10005914:	28c00504 	addi	r3,r5,20
10005918:	a529883a 	add	r20,r20,r20
1000591c:	1d39883a 	add	fp,r3,r20
10005920:	24c00504 	addi	r19,r4,20
10005924:	d9400215 	stw	r5,8(sp)
10005928:	9d29883a 	add	r20,r19,r20
1000592c:	e1400017 	ldw	r5,0(fp)
10005930:	d9000015 	stw	r4,0(sp)
10005934:	a1000017 	ldw	r4,0(r20)
10005938:	29400044 	addi	r5,r5,1
1000593c:	d8c00115 	stw	r3,4(sp)
10005940:	dd000315 	stw	r20,12(sp)
10005944:	000d7ac0 	call	1000d7ac <__udivsi3>
10005948:	1025883a 	mov	r18,r2
1000594c:	10003026 	beq	r2,zero,10005a10 <quorem+0x13c>
10005950:	dc400117 	ldw	r17,4(sp)
10005954:	9829883a 	mov	r20,r19
10005958:	002d883a 	mov	r22,zero
1000595c:	0021883a 	mov	r16,zero
10005960:	8d400017 	ldw	r21,0(r17)
10005964:	900b883a 	mov	r5,r18
10005968:	8c400104 	addi	r17,r17,4
1000596c:	a93fffcc 	andi	r4,r21,65535
10005970:	000d8680 	call	1000d868 <__mulsi3>
10005974:	a808d43a 	srli	r4,r21,16
10005978:	900b883a 	mov	r5,r18
1000597c:	15ad883a 	add	r22,r2,r22
10005980:	000d8680 	call	1000d868 <__mulsi3>
10005984:	a1000017 	ldw	r4,0(r20)
10005988:	b00cd43a 	srli	r6,r22,16
1000598c:	b0ffffcc 	andi	r3,r22,65535
10005990:	217fffcc 	andi	r5,r4,65535
10005994:	2c21883a 	add	r16,r5,r16
10005998:	80c7c83a 	sub	r3,r16,r3
1000599c:	2008d43a 	srli	r4,r4,16
100059a0:	1185883a 	add	r2,r2,r6
100059a4:	1821d43a 	srai	r16,r3,16
100059a8:	117fffcc 	andi	r5,r2,65535
100059ac:	2149c83a 	sub	r4,r4,r5
100059b0:	2421883a 	add	r16,r4,r16
100059b4:	8008943a 	slli	r4,r16,16
100059b8:	18ffffcc 	andi	r3,r3,65535
100059bc:	102cd43a 	srli	r22,r2,16
100059c0:	20c8b03a 	or	r4,r4,r3
100059c4:	a1000015 	stw	r4,0(r20)
100059c8:	8021d43a 	srai	r16,r16,16
100059cc:	a5000104 	addi	r20,r20,4
100059d0:	e47fe32e 	bgeu	fp,r17,10005960 <__alt_data_end+0xf8005960>
100059d4:	d8c00317 	ldw	r3,12(sp)
100059d8:	18800017 	ldw	r2,0(r3)
100059dc:	10000c1e 	bne	r2,zero,10005a10 <quorem+0x13c>
100059e0:	18bfff04 	addi	r2,r3,-4
100059e4:	9880082e 	bgeu	r19,r2,10005a08 <quorem+0x134>
100059e8:	18ffff17 	ldw	r3,-4(r3)
100059ec:	18000326 	beq	r3,zero,100059fc <quorem+0x128>
100059f0:	00000506 	br	10005a08 <quorem+0x134>
100059f4:	10c00017 	ldw	r3,0(r2)
100059f8:	1800031e 	bne	r3,zero,10005a08 <quorem+0x134>
100059fc:	10bfff04 	addi	r2,r2,-4
10005a00:	bdffffc4 	addi	r23,r23,-1
10005a04:	98bffb36 	bltu	r19,r2,100059f4 <__alt_data_end+0xf80059f4>
10005a08:	d8c00017 	ldw	r3,0(sp)
10005a0c:	1dc00415 	stw	r23,16(r3)
10005a10:	d9400217 	ldw	r5,8(sp)
10005a14:	d9000017 	ldw	r4,0(sp)
10005a18:	0009b380 	call	10009b38 <__mcmp>
10005a1c:	10002816 	blt	r2,zero,10005ac0 <quorem+0x1ec>
10005a20:	dc400117 	ldw	r17,4(sp)
10005a24:	94800044 	addi	r18,r18,1
10005a28:	980d883a 	mov	r6,r19
10005a2c:	0007883a 	mov	r3,zero
10005a30:	31000017 	ldw	r4,0(r6)
10005a34:	89400017 	ldw	r5,0(r17)
10005a38:	31800104 	addi	r6,r6,4
10005a3c:	20bfffcc 	andi	r2,r4,65535
10005a40:	10c7883a 	add	r3,r2,r3
10005a44:	28bfffcc 	andi	r2,r5,65535
10005a48:	1885c83a 	sub	r2,r3,r2
10005a4c:	280ad43a 	srli	r5,r5,16
10005a50:	2008d43a 	srli	r4,r4,16
10005a54:	1007d43a 	srai	r3,r2,16
10005a58:	10bfffcc 	andi	r2,r2,65535
10005a5c:	2149c83a 	sub	r4,r4,r5
10005a60:	20c9883a 	add	r4,r4,r3
10005a64:	200a943a 	slli	r5,r4,16
10005a68:	8c400104 	addi	r17,r17,4
10005a6c:	2007d43a 	srai	r3,r4,16
10005a70:	2884b03a 	or	r2,r5,r2
10005a74:	30bfff15 	stw	r2,-4(r6)
10005a78:	e47fed2e 	bgeu	fp,r17,10005a30 <__alt_data_end+0xf8005a30>
10005a7c:	bdc5883a 	add	r2,r23,r23
10005a80:	1085883a 	add	r2,r2,r2
10005a84:	9887883a 	add	r3,r19,r2
10005a88:	18800017 	ldw	r2,0(r3)
10005a8c:	10000c1e 	bne	r2,zero,10005ac0 <quorem+0x1ec>
10005a90:	18bfff04 	addi	r2,r3,-4
10005a94:	9880082e 	bgeu	r19,r2,10005ab8 <quorem+0x1e4>
10005a98:	18ffff17 	ldw	r3,-4(r3)
10005a9c:	18000326 	beq	r3,zero,10005aac <quorem+0x1d8>
10005aa0:	00000506 	br	10005ab8 <quorem+0x1e4>
10005aa4:	10c00017 	ldw	r3,0(r2)
10005aa8:	1800031e 	bne	r3,zero,10005ab8 <quorem+0x1e4>
10005aac:	10bfff04 	addi	r2,r2,-4
10005ab0:	bdffffc4 	addi	r23,r23,-1
10005ab4:	98bffb36 	bltu	r19,r2,10005aa4 <__alt_data_end+0xf8005aa4>
10005ab8:	d8c00017 	ldw	r3,0(sp)
10005abc:	1dc00415 	stw	r23,16(r3)
10005ac0:	9005883a 	mov	r2,r18
10005ac4:	dfc00d17 	ldw	ra,52(sp)
10005ac8:	df000c17 	ldw	fp,48(sp)
10005acc:	ddc00b17 	ldw	r23,44(sp)
10005ad0:	dd800a17 	ldw	r22,40(sp)
10005ad4:	dd400917 	ldw	r21,36(sp)
10005ad8:	dd000817 	ldw	r20,32(sp)
10005adc:	dcc00717 	ldw	r19,28(sp)
10005ae0:	dc800617 	ldw	r18,24(sp)
10005ae4:	dc400517 	ldw	r17,20(sp)
10005ae8:	dc000417 	ldw	r16,16(sp)
10005aec:	dec00e04 	addi	sp,sp,56
10005af0:	f800283a 	ret
10005af4:	0005883a 	mov	r2,zero
10005af8:	003ff206 	br	10005ac4 <__alt_data_end+0xf8005ac4>

10005afc <_dtoa_r>:
10005afc:	20801017 	ldw	r2,64(r4)
10005b00:	deffde04 	addi	sp,sp,-136
10005b04:	df002015 	stw	fp,128(sp)
10005b08:	dcc01b15 	stw	r19,108(sp)
10005b0c:	dc801a15 	stw	r18,104(sp)
10005b10:	dc401915 	stw	r17,100(sp)
10005b14:	dc001815 	stw	r16,96(sp)
10005b18:	dfc02115 	stw	ra,132(sp)
10005b1c:	ddc01f15 	stw	r23,124(sp)
10005b20:	dd801e15 	stw	r22,120(sp)
10005b24:	dd401d15 	stw	r21,116(sp)
10005b28:	dd001c15 	stw	r20,112(sp)
10005b2c:	d9c00315 	stw	r7,12(sp)
10005b30:	2039883a 	mov	fp,r4
10005b34:	3023883a 	mov	r17,r6
10005b38:	2825883a 	mov	r18,r5
10005b3c:	dc002417 	ldw	r16,144(sp)
10005b40:	3027883a 	mov	r19,r6
10005b44:	10000826 	beq	r2,zero,10005b68 <_dtoa_r+0x6c>
10005b48:	21801117 	ldw	r6,68(r4)
10005b4c:	00c00044 	movi	r3,1
10005b50:	100b883a 	mov	r5,r2
10005b54:	1986983a 	sll	r3,r3,r6
10005b58:	11800115 	stw	r6,4(r2)
10005b5c:	10c00215 	stw	r3,8(r2)
10005b60:	000925c0 	call	1000925c <_Bfree>
10005b64:	e0001015 	stw	zero,64(fp)
10005b68:	88002e16 	blt	r17,zero,10005c24 <_dtoa_r+0x128>
10005b6c:	80000015 	stw	zero,0(r16)
10005b70:	889ffc2c 	andhi	r2,r17,32752
10005b74:	00dffc34 	movhi	r3,32752
10005b78:	10c01c26 	beq	r2,r3,10005bec <_dtoa_r+0xf0>
10005b7c:	000d883a 	mov	r6,zero
10005b80:	000f883a 	mov	r7,zero
10005b84:	9009883a 	mov	r4,r18
10005b88:	980b883a 	mov	r5,r19
10005b8c:	000eb0c0 	call	1000eb0c <__eqdf2>
10005b90:	10002b1e 	bne	r2,zero,10005c40 <_dtoa_r+0x144>
10005b94:	d9c02317 	ldw	r7,140(sp)
10005b98:	00800044 	movi	r2,1
10005b9c:	38800015 	stw	r2,0(r7)
10005ba0:	d8802517 	ldw	r2,148(sp)
10005ba4:	10019e26 	beq	r2,zero,10006220 <_dtoa_r+0x724>
10005ba8:	d8c02517 	ldw	r3,148(sp)
10005bac:	00840074 	movhi	r2,4097
10005bb0:	108c5c44 	addi	r2,r2,12657
10005bb4:	18800015 	stw	r2,0(r3)
10005bb8:	10bfffc4 	addi	r2,r2,-1
10005bbc:	dfc02117 	ldw	ra,132(sp)
10005bc0:	df002017 	ldw	fp,128(sp)
10005bc4:	ddc01f17 	ldw	r23,124(sp)
10005bc8:	dd801e17 	ldw	r22,120(sp)
10005bcc:	dd401d17 	ldw	r21,116(sp)
10005bd0:	dd001c17 	ldw	r20,112(sp)
10005bd4:	dcc01b17 	ldw	r19,108(sp)
10005bd8:	dc801a17 	ldw	r18,104(sp)
10005bdc:	dc401917 	ldw	r17,100(sp)
10005be0:	dc001817 	ldw	r16,96(sp)
10005be4:	dec02204 	addi	sp,sp,136
10005be8:	f800283a 	ret
10005bec:	d8c02317 	ldw	r3,140(sp)
10005bf0:	0089c3c4 	movi	r2,9999
10005bf4:	18800015 	stw	r2,0(r3)
10005bf8:	90017726 	beq	r18,zero,100061d8 <_dtoa_r+0x6dc>
10005bfc:	00840074 	movhi	r2,4097
10005c00:	108c6804 	addi	r2,r2,12704
10005c04:	d9002517 	ldw	r4,148(sp)
10005c08:	203fec26 	beq	r4,zero,10005bbc <__alt_data_end+0xf8005bbc>
10005c0c:	10c000c7 	ldb	r3,3(r2)
10005c10:	1801781e 	bne	r3,zero,100061f4 <_dtoa_r+0x6f8>
10005c14:	10c000c4 	addi	r3,r2,3
10005c18:	d9802517 	ldw	r6,148(sp)
10005c1c:	30c00015 	stw	r3,0(r6)
10005c20:	003fe606 	br	10005bbc <__alt_data_end+0xf8005bbc>
10005c24:	04e00034 	movhi	r19,32768
10005c28:	9cffffc4 	addi	r19,r19,-1
10005c2c:	00800044 	movi	r2,1
10005c30:	8ce6703a 	and	r19,r17,r19
10005c34:	80800015 	stw	r2,0(r16)
10005c38:	9823883a 	mov	r17,r19
10005c3c:	003fcc06 	br	10005b70 <__alt_data_end+0xf8005b70>
10005c40:	d8800204 	addi	r2,sp,8
10005c44:	d8800015 	stw	r2,0(sp)
10005c48:	d9c00104 	addi	r7,sp,4
10005c4c:	900b883a 	mov	r5,r18
10005c50:	980d883a 	mov	r6,r19
10005c54:	e009883a 	mov	r4,fp
10005c58:	8820d53a 	srli	r16,r17,20
10005c5c:	0009f040 	call	10009f04 <__d2b>
10005c60:	d8800915 	stw	r2,36(sp)
10005c64:	8001651e 	bne	r16,zero,100061fc <_dtoa_r+0x700>
10005c68:	dd800217 	ldw	r22,8(sp)
10005c6c:	dc000117 	ldw	r16,4(sp)
10005c70:	00800804 	movi	r2,32
10005c74:	b421883a 	add	r16,r22,r16
10005c78:	80c10c84 	addi	r3,r16,1074
10005c7c:	10c2d10e 	bge	r2,r3,100067c4 <_dtoa_r+0xcc8>
10005c80:	00801004 	movi	r2,64
10005c84:	81010484 	addi	r4,r16,1042
10005c88:	10c7c83a 	sub	r3,r2,r3
10005c8c:	9108d83a 	srl	r4,r18,r4
10005c90:	88e2983a 	sll	r17,r17,r3
10005c94:	2448b03a 	or	r4,r4,r17
10005c98:	00100280 	call	10010028 <__floatunsidf>
10005c9c:	017f8434 	movhi	r5,65040
10005ca0:	01800044 	movi	r6,1
10005ca4:	1009883a 	mov	r4,r2
10005ca8:	194b883a 	add	r5,r3,r5
10005cac:	843fffc4 	addi	r16,r16,-1
10005cb0:	d9801115 	stw	r6,68(sp)
10005cb4:	000d883a 	mov	r6,zero
10005cb8:	01cffe34 	movhi	r7,16376
10005cbc:	000f5d00 	call	1000f5d0 <__subdf3>
10005cc0:	0198dbf4 	movhi	r6,25455
10005cc4:	01cff4f4 	movhi	r7,16339
10005cc8:	3190d844 	addi	r6,r6,17249
10005ccc:	39e1e9c4 	addi	r7,r7,-30809
10005cd0:	1009883a 	mov	r4,r2
10005cd4:	180b883a 	mov	r5,r3
10005cd8:	000ed640 	call	1000ed64 <__muldf3>
10005cdc:	01a2d874 	movhi	r6,35681
10005ce0:	01cff1f4 	movhi	r7,16327
10005ce4:	31b22cc4 	addi	r6,r6,-14157
10005ce8:	39e28a04 	addi	r7,r7,-30168
10005cec:	180b883a 	mov	r5,r3
10005cf0:	1009883a 	mov	r4,r2
10005cf4:	000d8900 	call	1000d890 <__adddf3>
10005cf8:	8009883a 	mov	r4,r16
10005cfc:	1029883a 	mov	r20,r2
10005d00:	1823883a 	mov	r17,r3
10005d04:	000ff4c0 	call	1000ff4c <__floatsidf>
10005d08:	019427f4 	movhi	r6,20639
10005d0c:	01cff4f4 	movhi	r7,16339
10005d10:	319e7ec4 	addi	r6,r6,31227
10005d14:	39d104c4 	addi	r7,r7,17427
10005d18:	1009883a 	mov	r4,r2
10005d1c:	180b883a 	mov	r5,r3
10005d20:	000ed640 	call	1000ed64 <__muldf3>
10005d24:	100d883a 	mov	r6,r2
10005d28:	180f883a 	mov	r7,r3
10005d2c:	a009883a 	mov	r4,r20
10005d30:	880b883a 	mov	r5,r17
10005d34:	000d8900 	call	1000d890 <__adddf3>
10005d38:	1009883a 	mov	r4,r2
10005d3c:	180b883a 	mov	r5,r3
10005d40:	1029883a 	mov	r20,r2
10005d44:	1823883a 	mov	r17,r3
10005d48:	000fecc0 	call	1000fecc <__fixdfsi>
10005d4c:	000d883a 	mov	r6,zero
10005d50:	000f883a 	mov	r7,zero
10005d54:	a009883a 	mov	r4,r20
10005d58:	880b883a 	mov	r5,r17
10005d5c:	d8800515 	stw	r2,20(sp)
10005d60:	000ec700 	call	1000ec70 <__ledf2>
10005d64:	10028716 	blt	r2,zero,10006784 <_dtoa_r+0xc88>
10005d68:	d8c00517 	ldw	r3,20(sp)
10005d6c:	00800584 	movi	r2,22
10005d70:	10c27536 	bltu	r2,r3,10006748 <_dtoa_r+0xc4c>
10005d74:	180490fa 	slli	r2,r3,3
10005d78:	00c40074 	movhi	r3,4097
10005d7c:	18cc8404 	addi	r3,r3,12816
10005d80:	1885883a 	add	r2,r3,r2
10005d84:	11000017 	ldw	r4,0(r2)
10005d88:	11400117 	ldw	r5,4(r2)
10005d8c:	900d883a 	mov	r6,r18
10005d90:	980f883a 	mov	r7,r19
10005d94:	000eb940 	call	1000eb94 <__gedf2>
10005d98:	00828d0e 	bge	zero,r2,100067d0 <_dtoa_r+0xcd4>
10005d9c:	d9000517 	ldw	r4,20(sp)
10005da0:	d8000e15 	stw	zero,56(sp)
10005da4:	213fffc4 	addi	r4,r4,-1
10005da8:	d9000515 	stw	r4,20(sp)
10005dac:	b42dc83a 	sub	r22,r22,r16
10005db0:	b5bfffc4 	addi	r22,r22,-1
10005db4:	b0026f16 	blt	r22,zero,10006774 <_dtoa_r+0xc78>
10005db8:	d8000815 	stw	zero,32(sp)
10005dbc:	d9c00517 	ldw	r7,20(sp)
10005dc0:	38026416 	blt	r7,zero,10006754 <_dtoa_r+0xc58>
10005dc4:	b1ed883a 	add	r22,r22,r7
10005dc8:	d9c00d15 	stw	r7,52(sp)
10005dcc:	d8000a15 	stw	zero,40(sp)
10005dd0:	d9800317 	ldw	r6,12(sp)
10005dd4:	00800244 	movi	r2,9
10005dd8:	11811436 	bltu	r2,r6,1000622c <_dtoa_r+0x730>
10005ddc:	00800144 	movi	r2,5
10005de0:	1184e10e 	bge	r2,r6,10007168 <_dtoa_r+0x166c>
10005de4:	31bfff04 	addi	r6,r6,-4
10005de8:	d9800315 	stw	r6,12(sp)
10005dec:	0023883a 	mov	r17,zero
10005df0:	d9800317 	ldw	r6,12(sp)
10005df4:	008000c4 	movi	r2,3
10005df8:	30836726 	beq	r6,r2,10006b98 <_dtoa_r+0x109c>
10005dfc:	1183410e 	bge	r2,r6,10006b04 <_dtoa_r+0x1008>
10005e00:	d9c00317 	ldw	r7,12(sp)
10005e04:	00800104 	movi	r2,4
10005e08:	38827c26 	beq	r7,r2,100067fc <_dtoa_r+0xd00>
10005e0c:	00800144 	movi	r2,5
10005e10:	3884c41e 	bne	r7,r2,10007124 <_dtoa_r+0x1628>
10005e14:	00800044 	movi	r2,1
10005e18:	d8800b15 	stw	r2,44(sp)
10005e1c:	d8c00517 	ldw	r3,20(sp)
10005e20:	d9002217 	ldw	r4,136(sp)
10005e24:	1907883a 	add	r3,r3,r4
10005e28:	19800044 	addi	r6,r3,1
10005e2c:	d8c00c15 	stw	r3,48(sp)
10005e30:	d9800615 	stw	r6,24(sp)
10005e34:	0183a40e 	bge	zero,r6,10006cc8 <_dtoa_r+0x11cc>
10005e38:	d9800617 	ldw	r6,24(sp)
10005e3c:	3021883a 	mov	r16,r6
10005e40:	e0001115 	stw	zero,68(fp)
10005e44:	008005c4 	movi	r2,23
10005e48:	1184c92e 	bgeu	r2,r6,10007170 <_dtoa_r+0x1674>
10005e4c:	00c00044 	movi	r3,1
10005e50:	00800104 	movi	r2,4
10005e54:	1085883a 	add	r2,r2,r2
10005e58:	11000504 	addi	r4,r2,20
10005e5c:	180b883a 	mov	r5,r3
10005e60:	18c00044 	addi	r3,r3,1
10005e64:	313ffb2e 	bgeu	r6,r4,10005e54 <__alt_data_end+0xf8005e54>
10005e68:	e1401115 	stw	r5,68(fp)
10005e6c:	e009883a 	mov	r4,fp
10005e70:	00091b40 	call	100091b4 <_Balloc>
10005e74:	d8800715 	stw	r2,28(sp)
10005e78:	e0801015 	stw	r2,64(fp)
10005e7c:	00800384 	movi	r2,14
10005e80:	1400f736 	bltu	r2,r16,10006260 <_dtoa_r+0x764>
10005e84:	8800f626 	beq	r17,zero,10006260 <_dtoa_r+0x764>
10005e88:	d9c00517 	ldw	r7,20(sp)
10005e8c:	01c39a0e 	bge	zero,r7,10006cf8 <_dtoa_r+0x11fc>
10005e90:	388003cc 	andi	r2,r7,15
10005e94:	100490fa 	slli	r2,r2,3
10005e98:	382bd13a 	srai	r21,r7,4
10005e9c:	00c40074 	movhi	r3,4097
10005ea0:	18cc8404 	addi	r3,r3,12816
10005ea4:	1885883a 	add	r2,r3,r2
10005ea8:	a8c0040c 	andi	r3,r21,16
10005eac:	12400017 	ldw	r9,0(r2)
10005eb0:	12000117 	ldw	r8,4(r2)
10005eb4:	18037926 	beq	r3,zero,10006c9c <_dtoa_r+0x11a0>
10005eb8:	00840074 	movhi	r2,4097
10005ebc:	108c7a04 	addi	r2,r2,12776
10005ec0:	11800817 	ldw	r6,32(r2)
10005ec4:	11c00917 	ldw	r7,36(r2)
10005ec8:	9009883a 	mov	r4,r18
10005ecc:	980b883a 	mov	r5,r19
10005ed0:	da001715 	stw	r8,92(sp)
10005ed4:	da401615 	stw	r9,88(sp)
10005ed8:	000e13c0 	call	1000e13c <__divdf3>
10005edc:	da001717 	ldw	r8,92(sp)
10005ee0:	da401617 	ldw	r9,88(sp)
10005ee4:	ad4003cc 	andi	r21,r21,15
10005ee8:	040000c4 	movi	r16,3
10005eec:	1023883a 	mov	r17,r2
10005ef0:	1829883a 	mov	r20,r3
10005ef4:	a8001126 	beq	r21,zero,10005f3c <_dtoa_r+0x440>
10005ef8:	05c40074 	movhi	r23,4097
10005efc:	bdcc7a04 	addi	r23,r23,12776
10005f00:	4805883a 	mov	r2,r9
10005f04:	4007883a 	mov	r3,r8
10005f08:	a980004c 	andi	r6,r21,1
10005f0c:	1009883a 	mov	r4,r2
10005f10:	a82bd07a 	srai	r21,r21,1
10005f14:	180b883a 	mov	r5,r3
10005f18:	30000426 	beq	r6,zero,10005f2c <_dtoa_r+0x430>
10005f1c:	b9800017 	ldw	r6,0(r23)
10005f20:	b9c00117 	ldw	r7,4(r23)
10005f24:	84000044 	addi	r16,r16,1
10005f28:	000ed640 	call	1000ed64 <__muldf3>
10005f2c:	bdc00204 	addi	r23,r23,8
10005f30:	a83ff51e 	bne	r21,zero,10005f08 <__alt_data_end+0xf8005f08>
10005f34:	1013883a 	mov	r9,r2
10005f38:	1811883a 	mov	r8,r3
10005f3c:	480d883a 	mov	r6,r9
10005f40:	400f883a 	mov	r7,r8
10005f44:	8809883a 	mov	r4,r17
10005f48:	a00b883a 	mov	r5,r20
10005f4c:	000e13c0 	call	1000e13c <__divdf3>
10005f50:	d8800f15 	stw	r2,60(sp)
10005f54:	d8c01015 	stw	r3,64(sp)
10005f58:	d8c00e17 	ldw	r3,56(sp)
10005f5c:	18000626 	beq	r3,zero,10005f78 <_dtoa_r+0x47c>
10005f60:	d9000f17 	ldw	r4,60(sp)
10005f64:	d9401017 	ldw	r5,64(sp)
10005f68:	000d883a 	mov	r6,zero
10005f6c:	01cffc34 	movhi	r7,16368
10005f70:	000ec700 	call	1000ec70 <__ledf2>
10005f74:	10040b16 	blt	r2,zero,10006fa4 <_dtoa_r+0x14a8>
10005f78:	8009883a 	mov	r4,r16
10005f7c:	000ff4c0 	call	1000ff4c <__floatsidf>
10005f80:	d9800f17 	ldw	r6,60(sp)
10005f84:	d9c01017 	ldw	r7,64(sp)
10005f88:	1009883a 	mov	r4,r2
10005f8c:	180b883a 	mov	r5,r3
10005f90:	000ed640 	call	1000ed64 <__muldf3>
10005f94:	000d883a 	mov	r6,zero
10005f98:	01d00734 	movhi	r7,16412
10005f9c:	1009883a 	mov	r4,r2
10005fa0:	180b883a 	mov	r5,r3
10005fa4:	000d8900 	call	1000d890 <__adddf3>
10005fa8:	1021883a 	mov	r16,r2
10005fac:	d8800617 	ldw	r2,24(sp)
10005fb0:	047f3034 	movhi	r17,64704
10005fb4:	1c63883a 	add	r17,r3,r17
10005fb8:	10031826 	beq	r2,zero,10006c1c <_dtoa_r+0x1120>
10005fbc:	d8c00517 	ldw	r3,20(sp)
10005fc0:	db000617 	ldw	r12,24(sp)
10005fc4:	d8c01315 	stw	r3,76(sp)
10005fc8:	d9000b17 	ldw	r4,44(sp)
10005fcc:	20038f26 	beq	r4,zero,10006e0c <_dtoa_r+0x1310>
10005fd0:	60bfffc4 	addi	r2,r12,-1
10005fd4:	100490fa 	slli	r2,r2,3
10005fd8:	00c40074 	movhi	r3,4097
10005fdc:	18cc8404 	addi	r3,r3,12816
10005fe0:	1885883a 	add	r2,r3,r2
10005fe4:	11800017 	ldw	r6,0(r2)
10005fe8:	11c00117 	ldw	r7,4(r2)
10005fec:	d8800717 	ldw	r2,28(sp)
10005ff0:	0009883a 	mov	r4,zero
10005ff4:	014ff834 	movhi	r5,16352
10005ff8:	db001615 	stw	r12,88(sp)
10005ffc:	15c00044 	addi	r23,r2,1
10006000:	000e13c0 	call	1000e13c <__divdf3>
10006004:	800d883a 	mov	r6,r16
10006008:	880f883a 	mov	r7,r17
1000600c:	1009883a 	mov	r4,r2
10006010:	180b883a 	mov	r5,r3
10006014:	000f5d00 	call	1000f5d0 <__subdf3>
10006018:	d9401017 	ldw	r5,64(sp)
1000601c:	d9000f17 	ldw	r4,60(sp)
10006020:	102b883a 	mov	r21,r2
10006024:	d8c01215 	stw	r3,72(sp)
10006028:	000fecc0 	call	1000fecc <__fixdfsi>
1000602c:	1009883a 	mov	r4,r2
10006030:	1029883a 	mov	r20,r2
10006034:	000ff4c0 	call	1000ff4c <__floatsidf>
10006038:	d9000f17 	ldw	r4,60(sp)
1000603c:	d9401017 	ldw	r5,64(sp)
10006040:	100d883a 	mov	r6,r2
10006044:	180f883a 	mov	r7,r3
10006048:	000f5d00 	call	1000f5d0 <__subdf3>
1000604c:	1823883a 	mov	r17,r3
10006050:	d8c00717 	ldw	r3,28(sp)
10006054:	d9401217 	ldw	r5,72(sp)
10006058:	a2000c04 	addi	r8,r20,48
1000605c:	1021883a 	mov	r16,r2
10006060:	1a000005 	stb	r8,0(r3)
10006064:	800d883a 	mov	r6,r16
10006068:	880f883a 	mov	r7,r17
1000606c:	a809883a 	mov	r4,r21
10006070:	4029883a 	mov	r20,r8
10006074:	000eb940 	call	1000eb94 <__gedf2>
10006078:	00841d16 	blt	zero,r2,100070f0 <_dtoa_r+0x15f4>
1000607c:	800d883a 	mov	r6,r16
10006080:	880f883a 	mov	r7,r17
10006084:	0009883a 	mov	r4,zero
10006088:	014ffc34 	movhi	r5,16368
1000608c:	000f5d00 	call	1000f5d0 <__subdf3>
10006090:	d9401217 	ldw	r5,72(sp)
10006094:	100d883a 	mov	r6,r2
10006098:	180f883a 	mov	r7,r3
1000609c:	a809883a 	mov	r4,r21
100060a0:	000eb940 	call	1000eb94 <__gedf2>
100060a4:	db001617 	ldw	r12,88(sp)
100060a8:	00840e16 	blt	zero,r2,100070e4 <_dtoa_r+0x15e8>
100060ac:	00800044 	movi	r2,1
100060b0:	13006b0e 	bge	r2,r12,10006260 <_dtoa_r+0x764>
100060b4:	d9000717 	ldw	r4,28(sp)
100060b8:	dd800f15 	stw	r22,60(sp)
100060bc:	dcc01015 	stw	r19,64(sp)
100060c0:	2319883a 	add	r12,r4,r12
100060c4:	dcc01217 	ldw	r19,72(sp)
100060c8:	602d883a 	mov	r22,r12
100060cc:	dc801215 	stw	r18,72(sp)
100060d0:	b825883a 	mov	r18,r23
100060d4:	00000906 	br	100060fc <_dtoa_r+0x600>
100060d8:	000f5d00 	call	1000f5d0 <__subdf3>
100060dc:	a80d883a 	mov	r6,r21
100060e0:	980f883a 	mov	r7,r19
100060e4:	1009883a 	mov	r4,r2
100060e8:	180b883a 	mov	r5,r3
100060ec:	000ec700 	call	1000ec70 <__ledf2>
100060f0:	1003e816 	blt	r2,zero,10007094 <_dtoa_r+0x1598>
100060f4:	b825883a 	mov	r18,r23
100060f8:	bd83e926 	beq	r23,r22,100070a0 <_dtoa_r+0x15a4>
100060fc:	a809883a 	mov	r4,r21
10006100:	980b883a 	mov	r5,r19
10006104:	000d883a 	mov	r6,zero
10006108:	01d00934 	movhi	r7,16420
1000610c:	000ed640 	call	1000ed64 <__muldf3>
10006110:	000d883a 	mov	r6,zero
10006114:	01d00934 	movhi	r7,16420
10006118:	8009883a 	mov	r4,r16
1000611c:	880b883a 	mov	r5,r17
10006120:	102b883a 	mov	r21,r2
10006124:	1827883a 	mov	r19,r3
10006128:	000ed640 	call	1000ed64 <__muldf3>
1000612c:	180b883a 	mov	r5,r3
10006130:	1009883a 	mov	r4,r2
10006134:	1821883a 	mov	r16,r3
10006138:	1023883a 	mov	r17,r2
1000613c:	000fecc0 	call	1000fecc <__fixdfsi>
10006140:	1009883a 	mov	r4,r2
10006144:	1029883a 	mov	r20,r2
10006148:	000ff4c0 	call	1000ff4c <__floatsidf>
1000614c:	8809883a 	mov	r4,r17
10006150:	800b883a 	mov	r5,r16
10006154:	100d883a 	mov	r6,r2
10006158:	180f883a 	mov	r7,r3
1000615c:	000f5d00 	call	1000f5d0 <__subdf3>
10006160:	a5000c04 	addi	r20,r20,48
10006164:	a80d883a 	mov	r6,r21
10006168:	980f883a 	mov	r7,r19
1000616c:	1009883a 	mov	r4,r2
10006170:	180b883a 	mov	r5,r3
10006174:	95000005 	stb	r20,0(r18)
10006178:	1021883a 	mov	r16,r2
1000617c:	1823883a 	mov	r17,r3
10006180:	000ec700 	call	1000ec70 <__ledf2>
10006184:	bdc00044 	addi	r23,r23,1
10006188:	800d883a 	mov	r6,r16
1000618c:	880f883a 	mov	r7,r17
10006190:	0009883a 	mov	r4,zero
10006194:	014ffc34 	movhi	r5,16368
10006198:	103fcf0e 	bge	r2,zero,100060d8 <__alt_data_end+0xf80060d8>
1000619c:	d8c01317 	ldw	r3,76(sp)
100061a0:	d8c00515 	stw	r3,20(sp)
100061a4:	d9400917 	ldw	r5,36(sp)
100061a8:	e009883a 	mov	r4,fp
100061ac:	000925c0 	call	1000925c <_Bfree>
100061b0:	d9000517 	ldw	r4,20(sp)
100061b4:	d9802317 	ldw	r6,140(sp)
100061b8:	d9c02517 	ldw	r7,148(sp)
100061bc:	b8000005 	stb	zero,0(r23)
100061c0:	20800044 	addi	r2,r4,1
100061c4:	30800015 	stw	r2,0(r6)
100061c8:	3802aa26 	beq	r7,zero,10006c74 <_dtoa_r+0x1178>
100061cc:	3dc00015 	stw	r23,0(r7)
100061d0:	d8800717 	ldw	r2,28(sp)
100061d4:	003e7906 	br	10005bbc <__alt_data_end+0xf8005bbc>
100061d8:	00800434 	movhi	r2,16
100061dc:	10bfffc4 	addi	r2,r2,-1
100061e0:	88a2703a 	and	r17,r17,r2
100061e4:	883e851e 	bne	r17,zero,10005bfc <__alt_data_end+0xf8005bfc>
100061e8:	00840074 	movhi	r2,4097
100061ec:	108c6504 	addi	r2,r2,12692
100061f0:	003e8406 	br	10005c04 <__alt_data_end+0xf8005c04>
100061f4:	10c00204 	addi	r3,r2,8
100061f8:	003e8706 	br	10005c18 <__alt_data_end+0xf8005c18>
100061fc:	01400434 	movhi	r5,16
10006200:	297fffc4 	addi	r5,r5,-1
10006204:	994a703a 	and	r5,r19,r5
10006208:	9009883a 	mov	r4,r18
1000620c:	843f0044 	addi	r16,r16,-1023
10006210:	294ffc34 	orhi	r5,r5,16368
10006214:	dd800217 	ldw	r22,8(sp)
10006218:	d8001115 	stw	zero,68(sp)
1000621c:	003ea506 	br	10005cb4 <__alt_data_end+0xf8005cb4>
10006220:	00840074 	movhi	r2,4097
10006224:	108c5c04 	addi	r2,r2,12656
10006228:	003e6406 	br	10005bbc <__alt_data_end+0xf8005bbc>
1000622c:	e0001115 	stw	zero,68(fp)
10006230:	000b883a 	mov	r5,zero
10006234:	e009883a 	mov	r4,fp
10006238:	00091b40 	call	100091b4 <_Balloc>
1000623c:	01bfffc4 	movi	r6,-1
10006240:	01c00044 	movi	r7,1
10006244:	d8800715 	stw	r2,28(sp)
10006248:	d9800c15 	stw	r6,48(sp)
1000624c:	e0801015 	stw	r2,64(fp)
10006250:	d8000315 	stw	zero,12(sp)
10006254:	d9c00b15 	stw	r7,44(sp)
10006258:	d9800615 	stw	r6,24(sp)
1000625c:	d8002215 	stw	zero,136(sp)
10006260:	d8800117 	ldw	r2,4(sp)
10006264:	10008916 	blt	r2,zero,1000648c <_dtoa_r+0x990>
10006268:	d9000517 	ldw	r4,20(sp)
1000626c:	00c00384 	movi	r3,14
10006270:	19008616 	blt	r3,r4,1000648c <_dtoa_r+0x990>
10006274:	200490fa 	slli	r2,r4,3
10006278:	00c40074 	movhi	r3,4097
1000627c:	d9802217 	ldw	r6,136(sp)
10006280:	18cc8404 	addi	r3,r3,12816
10006284:	1885883a 	add	r2,r3,r2
10006288:	14000017 	ldw	r16,0(r2)
1000628c:	14400117 	ldw	r17,4(r2)
10006290:	30016316 	blt	r6,zero,10006820 <_dtoa_r+0xd24>
10006294:	800d883a 	mov	r6,r16
10006298:	880f883a 	mov	r7,r17
1000629c:	9009883a 	mov	r4,r18
100062a0:	980b883a 	mov	r5,r19
100062a4:	000e13c0 	call	1000e13c <__divdf3>
100062a8:	180b883a 	mov	r5,r3
100062ac:	1009883a 	mov	r4,r2
100062b0:	000fecc0 	call	1000fecc <__fixdfsi>
100062b4:	1009883a 	mov	r4,r2
100062b8:	102b883a 	mov	r21,r2
100062bc:	000ff4c0 	call	1000ff4c <__floatsidf>
100062c0:	800d883a 	mov	r6,r16
100062c4:	880f883a 	mov	r7,r17
100062c8:	1009883a 	mov	r4,r2
100062cc:	180b883a 	mov	r5,r3
100062d0:	000ed640 	call	1000ed64 <__muldf3>
100062d4:	100d883a 	mov	r6,r2
100062d8:	180f883a 	mov	r7,r3
100062dc:	9009883a 	mov	r4,r18
100062e0:	980b883a 	mov	r5,r19
100062e4:	000f5d00 	call	1000f5d0 <__subdf3>
100062e8:	d9c00717 	ldw	r7,28(sp)
100062ec:	1009883a 	mov	r4,r2
100062f0:	a8800c04 	addi	r2,r21,48
100062f4:	38800005 	stb	r2,0(r7)
100062f8:	3dc00044 	addi	r23,r7,1
100062fc:	d9c00617 	ldw	r7,24(sp)
10006300:	01800044 	movi	r6,1
10006304:	180b883a 	mov	r5,r3
10006308:	2005883a 	mov	r2,r4
1000630c:	39803826 	beq	r7,r6,100063f0 <_dtoa_r+0x8f4>
10006310:	000d883a 	mov	r6,zero
10006314:	01d00934 	movhi	r7,16420
10006318:	000ed640 	call	1000ed64 <__muldf3>
1000631c:	000d883a 	mov	r6,zero
10006320:	000f883a 	mov	r7,zero
10006324:	1009883a 	mov	r4,r2
10006328:	180b883a 	mov	r5,r3
1000632c:	1025883a 	mov	r18,r2
10006330:	1827883a 	mov	r19,r3
10006334:	000eb0c0 	call	1000eb0c <__eqdf2>
10006338:	103f9a26 	beq	r2,zero,100061a4 <__alt_data_end+0xf80061a4>
1000633c:	d9c00617 	ldw	r7,24(sp)
10006340:	d8c00717 	ldw	r3,28(sp)
10006344:	b829883a 	mov	r20,r23
10006348:	38bfffc4 	addi	r2,r7,-1
1000634c:	18ad883a 	add	r22,r3,r2
10006350:	00000a06 	br	1000637c <_dtoa_r+0x880>
10006354:	000ed640 	call	1000ed64 <__muldf3>
10006358:	000d883a 	mov	r6,zero
1000635c:	000f883a 	mov	r7,zero
10006360:	1009883a 	mov	r4,r2
10006364:	180b883a 	mov	r5,r3
10006368:	1025883a 	mov	r18,r2
1000636c:	1827883a 	mov	r19,r3
10006370:	b829883a 	mov	r20,r23
10006374:	000eb0c0 	call	1000eb0c <__eqdf2>
10006378:	103f8a26 	beq	r2,zero,100061a4 <__alt_data_end+0xf80061a4>
1000637c:	800d883a 	mov	r6,r16
10006380:	880f883a 	mov	r7,r17
10006384:	9009883a 	mov	r4,r18
10006388:	980b883a 	mov	r5,r19
1000638c:	000e13c0 	call	1000e13c <__divdf3>
10006390:	180b883a 	mov	r5,r3
10006394:	1009883a 	mov	r4,r2
10006398:	000fecc0 	call	1000fecc <__fixdfsi>
1000639c:	1009883a 	mov	r4,r2
100063a0:	102b883a 	mov	r21,r2
100063a4:	000ff4c0 	call	1000ff4c <__floatsidf>
100063a8:	800d883a 	mov	r6,r16
100063ac:	880f883a 	mov	r7,r17
100063b0:	1009883a 	mov	r4,r2
100063b4:	180b883a 	mov	r5,r3
100063b8:	000ed640 	call	1000ed64 <__muldf3>
100063bc:	100d883a 	mov	r6,r2
100063c0:	180f883a 	mov	r7,r3
100063c4:	9009883a 	mov	r4,r18
100063c8:	980b883a 	mov	r5,r19
100063cc:	000f5d00 	call	1000f5d0 <__subdf3>
100063d0:	aa000c04 	addi	r8,r21,48
100063d4:	a2000005 	stb	r8,0(r20)
100063d8:	000d883a 	mov	r6,zero
100063dc:	01d00934 	movhi	r7,16420
100063e0:	1009883a 	mov	r4,r2
100063e4:	180b883a 	mov	r5,r3
100063e8:	a5c00044 	addi	r23,r20,1
100063ec:	b53fd91e 	bne	r22,r20,10006354 <__alt_data_end+0xf8006354>
100063f0:	100d883a 	mov	r6,r2
100063f4:	180f883a 	mov	r7,r3
100063f8:	1009883a 	mov	r4,r2
100063fc:	180b883a 	mov	r5,r3
10006400:	000d8900 	call	1000d890 <__adddf3>
10006404:	100d883a 	mov	r6,r2
10006408:	180f883a 	mov	r7,r3
1000640c:	8009883a 	mov	r4,r16
10006410:	880b883a 	mov	r5,r17
10006414:	1027883a 	mov	r19,r2
10006418:	1825883a 	mov	r18,r3
1000641c:	000ec700 	call	1000ec70 <__ledf2>
10006420:	10000816 	blt	r2,zero,10006444 <_dtoa_r+0x948>
10006424:	980d883a 	mov	r6,r19
10006428:	900f883a 	mov	r7,r18
1000642c:	8009883a 	mov	r4,r16
10006430:	880b883a 	mov	r5,r17
10006434:	000eb0c0 	call	1000eb0c <__eqdf2>
10006438:	103f5a1e 	bne	r2,zero,100061a4 <__alt_data_end+0xf80061a4>
1000643c:	ad40004c 	andi	r21,r21,1
10006440:	a83f5826 	beq	r21,zero,100061a4 <__alt_data_end+0xf80061a4>
10006444:	bd3fffc3 	ldbu	r20,-1(r23)
10006448:	b8bfffc4 	addi	r2,r23,-1
1000644c:	1007883a 	mov	r3,r2
10006450:	01400e44 	movi	r5,57
10006454:	d9800717 	ldw	r6,28(sp)
10006458:	00000506 	br	10006470 <_dtoa_r+0x974>
1000645c:	18ffffc4 	addi	r3,r3,-1
10006460:	11824726 	beq	r2,r6,10006d80 <_dtoa_r+0x1284>
10006464:	1d000003 	ldbu	r20,0(r3)
10006468:	102f883a 	mov	r23,r2
1000646c:	10bfffc4 	addi	r2,r2,-1
10006470:	a1003fcc 	andi	r4,r20,255
10006474:	2100201c 	xori	r4,r4,128
10006478:	213fe004 	addi	r4,r4,-128
1000647c:	217ff726 	beq	r4,r5,1000645c <__alt_data_end+0xf800645c>
10006480:	a2000044 	addi	r8,r20,1
10006484:	12000005 	stb	r8,0(r2)
10006488:	003f4606 	br	100061a4 <__alt_data_end+0xf80061a4>
1000648c:	d9000b17 	ldw	r4,44(sp)
10006490:	2000c826 	beq	r4,zero,100067b4 <_dtoa_r+0xcb8>
10006494:	d9800317 	ldw	r6,12(sp)
10006498:	00c00044 	movi	r3,1
1000649c:	1980f90e 	bge	r3,r6,10006884 <_dtoa_r+0xd88>
100064a0:	d8800617 	ldw	r2,24(sp)
100064a4:	d8c00a17 	ldw	r3,40(sp)
100064a8:	157fffc4 	addi	r21,r2,-1
100064ac:	1d41f316 	blt	r3,r21,10006c7c <_dtoa_r+0x1180>
100064b0:	1d6bc83a 	sub	r21,r3,r21
100064b4:	d9c00617 	ldw	r7,24(sp)
100064b8:	3802aa16 	blt	r7,zero,10006f64 <_dtoa_r+0x1468>
100064bc:	dd000817 	ldw	r20,32(sp)
100064c0:	d8800617 	ldw	r2,24(sp)
100064c4:	d8c00817 	ldw	r3,32(sp)
100064c8:	01400044 	movi	r5,1
100064cc:	e009883a 	mov	r4,fp
100064d0:	1887883a 	add	r3,r3,r2
100064d4:	d8c00815 	stw	r3,32(sp)
100064d8:	b0ad883a 	add	r22,r22,r2
100064dc:	00095e80 	call	100095e8 <__i2b>
100064e0:	1023883a 	mov	r17,r2
100064e4:	a0000826 	beq	r20,zero,10006508 <_dtoa_r+0xa0c>
100064e8:	0580070e 	bge	zero,r22,10006508 <_dtoa_r+0xa0c>
100064ec:	a005883a 	mov	r2,r20
100064f0:	b500b916 	blt	r22,r20,100067d8 <_dtoa_r+0xcdc>
100064f4:	d9000817 	ldw	r4,32(sp)
100064f8:	a0a9c83a 	sub	r20,r20,r2
100064fc:	b0adc83a 	sub	r22,r22,r2
10006500:	2089c83a 	sub	r4,r4,r2
10006504:	d9000815 	stw	r4,32(sp)
10006508:	d9800a17 	ldw	r6,40(sp)
1000650c:	0181810e 	bge	zero,r6,10006b14 <_dtoa_r+0x1018>
10006510:	d9c00b17 	ldw	r7,44(sp)
10006514:	3800b326 	beq	r7,zero,100067e4 <_dtoa_r+0xce8>
10006518:	a800b226 	beq	r21,zero,100067e4 <_dtoa_r+0xce8>
1000651c:	880b883a 	mov	r5,r17
10006520:	a80d883a 	mov	r6,r21
10006524:	e009883a 	mov	r4,fp
10006528:	00098b00 	call	100098b0 <__pow5mult>
1000652c:	d9800917 	ldw	r6,36(sp)
10006530:	100b883a 	mov	r5,r2
10006534:	e009883a 	mov	r4,fp
10006538:	1023883a 	mov	r17,r2
1000653c:	00096240 	call	10009624 <__multiply>
10006540:	1021883a 	mov	r16,r2
10006544:	d8800a17 	ldw	r2,40(sp)
10006548:	d9400917 	ldw	r5,36(sp)
1000654c:	e009883a 	mov	r4,fp
10006550:	1545c83a 	sub	r2,r2,r21
10006554:	d8800a15 	stw	r2,40(sp)
10006558:	000925c0 	call	1000925c <_Bfree>
1000655c:	d8c00a17 	ldw	r3,40(sp)
10006560:	18009f1e 	bne	r3,zero,100067e0 <_dtoa_r+0xce4>
10006564:	05c00044 	movi	r23,1
10006568:	e009883a 	mov	r4,fp
1000656c:	b80b883a 	mov	r5,r23
10006570:	00095e80 	call	100095e8 <__i2b>
10006574:	d9000d17 	ldw	r4,52(sp)
10006578:	102b883a 	mov	r21,r2
1000657c:	2000ce26 	beq	r4,zero,100068b8 <_dtoa_r+0xdbc>
10006580:	200d883a 	mov	r6,r4
10006584:	100b883a 	mov	r5,r2
10006588:	e009883a 	mov	r4,fp
1000658c:	00098b00 	call	100098b0 <__pow5mult>
10006590:	d9800317 	ldw	r6,12(sp)
10006594:	102b883a 	mov	r21,r2
10006598:	b981810e 	bge	r23,r6,10006ba0 <_dtoa_r+0x10a4>
1000659c:	0027883a 	mov	r19,zero
100065a0:	a8800417 	ldw	r2,16(r21)
100065a4:	05c00804 	movi	r23,32
100065a8:	10800104 	addi	r2,r2,4
100065ac:	1085883a 	add	r2,r2,r2
100065b0:	1085883a 	add	r2,r2,r2
100065b4:	a885883a 	add	r2,r21,r2
100065b8:	11000017 	ldw	r4,0(r2)
100065bc:	00094d00 	call	100094d0 <__hi0bits>
100065c0:	b885c83a 	sub	r2,r23,r2
100065c4:	1585883a 	add	r2,r2,r22
100065c8:	108007cc 	andi	r2,r2,31
100065cc:	1000b326 	beq	r2,zero,1000689c <_dtoa_r+0xda0>
100065d0:	00c00804 	movi	r3,32
100065d4:	1887c83a 	sub	r3,r3,r2
100065d8:	01000104 	movi	r4,4
100065dc:	20c2cd0e 	bge	r4,r3,10007114 <_dtoa_r+0x1618>
100065e0:	00c00704 	movi	r3,28
100065e4:	1885c83a 	sub	r2,r3,r2
100065e8:	d8c00817 	ldw	r3,32(sp)
100065ec:	a0a9883a 	add	r20,r20,r2
100065f0:	b0ad883a 	add	r22,r22,r2
100065f4:	1887883a 	add	r3,r3,r2
100065f8:	d8c00815 	stw	r3,32(sp)
100065fc:	d9800817 	ldw	r6,32(sp)
10006600:	0180040e 	bge	zero,r6,10006614 <_dtoa_r+0xb18>
10006604:	800b883a 	mov	r5,r16
10006608:	e009883a 	mov	r4,fp
1000660c:	00099f00 	call	100099f0 <__lshift>
10006610:	1021883a 	mov	r16,r2
10006614:	0580050e 	bge	zero,r22,1000662c <_dtoa_r+0xb30>
10006618:	a80b883a 	mov	r5,r21
1000661c:	b00d883a 	mov	r6,r22
10006620:	e009883a 	mov	r4,fp
10006624:	00099f00 	call	100099f0 <__lshift>
10006628:	102b883a 	mov	r21,r2
1000662c:	d9c00e17 	ldw	r7,56(sp)
10006630:	3801211e 	bne	r7,zero,10006ab8 <_dtoa_r+0xfbc>
10006634:	d9800617 	ldw	r6,24(sp)
10006638:	0181380e 	bge	zero,r6,10006b1c <_dtoa_r+0x1020>
1000663c:	d8c00b17 	ldw	r3,44(sp)
10006640:	1800ab1e 	bne	r3,zero,100068f0 <_dtoa_r+0xdf4>
10006644:	dc800717 	ldw	r18,28(sp)
10006648:	dcc00617 	ldw	r19,24(sp)
1000664c:	9029883a 	mov	r20,r18
10006650:	00000206 	br	1000665c <_dtoa_r+0xb60>
10006654:	00092840 	call	10009284 <__multadd>
10006658:	1021883a 	mov	r16,r2
1000665c:	a80b883a 	mov	r5,r21
10006660:	8009883a 	mov	r4,r16
10006664:	00058d40 	call	100058d4 <quorem>
10006668:	10800c04 	addi	r2,r2,48
1000666c:	90800005 	stb	r2,0(r18)
10006670:	94800044 	addi	r18,r18,1
10006674:	9507c83a 	sub	r3,r18,r20
10006678:	000f883a 	mov	r7,zero
1000667c:	01800284 	movi	r6,10
10006680:	800b883a 	mov	r5,r16
10006684:	e009883a 	mov	r4,fp
10006688:	1cfff216 	blt	r3,r19,10006654 <__alt_data_end+0xf8006654>
1000668c:	1011883a 	mov	r8,r2
10006690:	d8800617 	ldw	r2,24(sp)
10006694:	0082370e 	bge	zero,r2,10006f74 <_dtoa_r+0x1478>
10006698:	d9000717 	ldw	r4,28(sp)
1000669c:	0025883a 	mov	r18,zero
100066a0:	20af883a 	add	r23,r4,r2
100066a4:	01800044 	movi	r6,1
100066a8:	800b883a 	mov	r5,r16
100066ac:	e009883a 	mov	r4,fp
100066b0:	da001715 	stw	r8,92(sp)
100066b4:	00099f00 	call	100099f0 <__lshift>
100066b8:	a80b883a 	mov	r5,r21
100066bc:	1009883a 	mov	r4,r2
100066c0:	d8800915 	stw	r2,36(sp)
100066c4:	0009b380 	call	10009b38 <__mcmp>
100066c8:	da001717 	ldw	r8,92(sp)
100066cc:	0081800e 	bge	zero,r2,10006cd0 <_dtoa_r+0x11d4>
100066d0:	b93fffc3 	ldbu	r4,-1(r23)
100066d4:	b8bfffc4 	addi	r2,r23,-1
100066d8:	1007883a 	mov	r3,r2
100066dc:	01800e44 	movi	r6,57
100066e0:	d9c00717 	ldw	r7,28(sp)
100066e4:	00000506 	br	100066fc <_dtoa_r+0xc00>
100066e8:	18ffffc4 	addi	r3,r3,-1
100066ec:	11c12326 	beq	r2,r7,10006b7c <_dtoa_r+0x1080>
100066f0:	19000003 	ldbu	r4,0(r3)
100066f4:	102f883a 	mov	r23,r2
100066f8:	10bfffc4 	addi	r2,r2,-1
100066fc:	21403fcc 	andi	r5,r4,255
10006700:	2940201c 	xori	r5,r5,128
10006704:	297fe004 	addi	r5,r5,-128
10006708:	29bff726 	beq	r5,r6,100066e8 <__alt_data_end+0xf80066e8>
1000670c:	21000044 	addi	r4,r4,1
10006710:	11000005 	stb	r4,0(r2)
10006714:	a80b883a 	mov	r5,r21
10006718:	e009883a 	mov	r4,fp
1000671c:	000925c0 	call	1000925c <_Bfree>
10006720:	883ea026 	beq	r17,zero,100061a4 <__alt_data_end+0xf80061a4>
10006724:	90000426 	beq	r18,zero,10006738 <_dtoa_r+0xc3c>
10006728:	94400326 	beq	r18,r17,10006738 <_dtoa_r+0xc3c>
1000672c:	900b883a 	mov	r5,r18
10006730:	e009883a 	mov	r4,fp
10006734:	000925c0 	call	1000925c <_Bfree>
10006738:	880b883a 	mov	r5,r17
1000673c:	e009883a 	mov	r4,fp
10006740:	000925c0 	call	1000925c <_Bfree>
10006744:	003e9706 	br	100061a4 <__alt_data_end+0xf80061a4>
10006748:	01800044 	movi	r6,1
1000674c:	d9800e15 	stw	r6,56(sp)
10006750:	003d9606 	br	10005dac <__alt_data_end+0xf8005dac>
10006754:	d8800817 	ldw	r2,32(sp)
10006758:	d8c00517 	ldw	r3,20(sp)
1000675c:	d8000d15 	stw	zero,52(sp)
10006760:	10c5c83a 	sub	r2,r2,r3
10006764:	00c9c83a 	sub	r4,zero,r3
10006768:	d8800815 	stw	r2,32(sp)
1000676c:	d9000a15 	stw	r4,40(sp)
10006770:	003d9706 	br	10005dd0 <__alt_data_end+0xf8005dd0>
10006774:	05adc83a 	sub	r22,zero,r22
10006778:	dd800815 	stw	r22,32(sp)
1000677c:	002d883a 	mov	r22,zero
10006780:	003d8e06 	br	10005dbc <__alt_data_end+0xf8005dbc>
10006784:	d9000517 	ldw	r4,20(sp)
10006788:	000ff4c0 	call	1000ff4c <__floatsidf>
1000678c:	100d883a 	mov	r6,r2
10006790:	180f883a 	mov	r7,r3
10006794:	a009883a 	mov	r4,r20
10006798:	880b883a 	mov	r5,r17
1000679c:	000eb0c0 	call	1000eb0c <__eqdf2>
100067a0:	103d7126 	beq	r2,zero,10005d68 <__alt_data_end+0xf8005d68>
100067a4:	d9c00517 	ldw	r7,20(sp)
100067a8:	39ffffc4 	addi	r7,r7,-1
100067ac:	d9c00515 	stw	r7,20(sp)
100067b0:	003d6d06 	br	10005d68 <__alt_data_end+0xf8005d68>
100067b4:	dd400a17 	ldw	r21,40(sp)
100067b8:	dd000817 	ldw	r20,32(sp)
100067bc:	0023883a 	mov	r17,zero
100067c0:	003f4806 	br	100064e4 <__alt_data_end+0xf80064e4>
100067c4:	10e3c83a 	sub	r17,r2,r3
100067c8:	9448983a 	sll	r4,r18,r17
100067cc:	003d3206 	br	10005c98 <__alt_data_end+0xf8005c98>
100067d0:	d8000e15 	stw	zero,56(sp)
100067d4:	003d7506 	br	10005dac <__alt_data_end+0xf8005dac>
100067d8:	b005883a 	mov	r2,r22
100067dc:	003f4506 	br	100064f4 <__alt_data_end+0xf80064f4>
100067e0:	dc000915 	stw	r16,36(sp)
100067e4:	d9800a17 	ldw	r6,40(sp)
100067e8:	d9400917 	ldw	r5,36(sp)
100067ec:	e009883a 	mov	r4,fp
100067f0:	00098b00 	call	100098b0 <__pow5mult>
100067f4:	1021883a 	mov	r16,r2
100067f8:	003f5a06 	br	10006564 <__alt_data_end+0xf8006564>
100067fc:	01c00044 	movi	r7,1
10006800:	d9c00b15 	stw	r7,44(sp)
10006804:	d8802217 	ldw	r2,136(sp)
10006808:	0081280e 	bge	zero,r2,10006cac <_dtoa_r+0x11b0>
1000680c:	100d883a 	mov	r6,r2
10006810:	1021883a 	mov	r16,r2
10006814:	d8800c15 	stw	r2,48(sp)
10006818:	d8800615 	stw	r2,24(sp)
1000681c:	003d8806 	br	10005e40 <__alt_data_end+0xf8005e40>
10006820:	d8800617 	ldw	r2,24(sp)
10006824:	00be9b16 	blt	zero,r2,10006294 <__alt_data_end+0xf8006294>
10006828:	10010f1e 	bne	r2,zero,10006c68 <_dtoa_r+0x116c>
1000682c:	880b883a 	mov	r5,r17
10006830:	000d883a 	mov	r6,zero
10006834:	01d00534 	movhi	r7,16404
10006838:	8009883a 	mov	r4,r16
1000683c:	000ed640 	call	1000ed64 <__muldf3>
10006840:	900d883a 	mov	r6,r18
10006844:	980f883a 	mov	r7,r19
10006848:	1009883a 	mov	r4,r2
1000684c:	180b883a 	mov	r5,r3
10006850:	000eb940 	call	1000eb94 <__gedf2>
10006854:	002b883a 	mov	r21,zero
10006858:	0023883a 	mov	r17,zero
1000685c:	1000bf16 	blt	r2,zero,10006b5c <_dtoa_r+0x1060>
10006860:	d9802217 	ldw	r6,136(sp)
10006864:	ddc00717 	ldw	r23,28(sp)
10006868:	018c303a 	nor	r6,zero,r6
1000686c:	d9800515 	stw	r6,20(sp)
10006870:	a80b883a 	mov	r5,r21
10006874:	e009883a 	mov	r4,fp
10006878:	000925c0 	call	1000925c <_Bfree>
1000687c:	883e4926 	beq	r17,zero,100061a4 <__alt_data_end+0xf80061a4>
10006880:	003fad06 	br	10006738 <__alt_data_end+0xf8006738>
10006884:	d9c01117 	ldw	r7,68(sp)
10006888:	3801bc26 	beq	r7,zero,10006f7c <_dtoa_r+0x1480>
1000688c:	10810cc4 	addi	r2,r2,1075
10006890:	dd400a17 	ldw	r21,40(sp)
10006894:	dd000817 	ldw	r20,32(sp)
10006898:	003f0a06 	br	100064c4 <__alt_data_end+0xf80064c4>
1000689c:	00800704 	movi	r2,28
100068a0:	d9000817 	ldw	r4,32(sp)
100068a4:	a0a9883a 	add	r20,r20,r2
100068a8:	b0ad883a 	add	r22,r22,r2
100068ac:	2089883a 	add	r4,r4,r2
100068b0:	d9000815 	stw	r4,32(sp)
100068b4:	003f5106 	br	100065fc <__alt_data_end+0xf80065fc>
100068b8:	d8c00317 	ldw	r3,12(sp)
100068bc:	b8c1fc0e 	bge	r23,r3,100070b0 <_dtoa_r+0x15b4>
100068c0:	0027883a 	mov	r19,zero
100068c4:	b805883a 	mov	r2,r23
100068c8:	003f3e06 	br	100065c4 <__alt_data_end+0xf80065c4>
100068cc:	880b883a 	mov	r5,r17
100068d0:	e009883a 	mov	r4,fp
100068d4:	000f883a 	mov	r7,zero
100068d8:	01800284 	movi	r6,10
100068dc:	00092840 	call	10009284 <__multadd>
100068e0:	d9000c17 	ldw	r4,48(sp)
100068e4:	1023883a 	mov	r17,r2
100068e8:	0102040e 	bge	zero,r4,100070fc <_dtoa_r+0x1600>
100068ec:	d9000615 	stw	r4,24(sp)
100068f0:	0500050e 	bge	zero,r20,10006908 <_dtoa_r+0xe0c>
100068f4:	880b883a 	mov	r5,r17
100068f8:	a00d883a 	mov	r6,r20
100068fc:	e009883a 	mov	r4,fp
10006900:	00099f00 	call	100099f0 <__lshift>
10006904:	1023883a 	mov	r17,r2
10006908:	9801241e 	bne	r19,zero,10006d9c <_dtoa_r+0x12a0>
1000690c:	8829883a 	mov	r20,r17
10006910:	d9000617 	ldw	r4,24(sp)
10006914:	dcc00717 	ldw	r19,28(sp)
10006918:	9480004c 	andi	r18,r18,1
1000691c:	20bfffc4 	addi	r2,r4,-1
10006920:	9885883a 	add	r2,r19,r2
10006924:	d8800415 	stw	r2,16(sp)
10006928:	dc800615 	stw	r18,24(sp)
1000692c:	a80b883a 	mov	r5,r21
10006930:	8009883a 	mov	r4,r16
10006934:	00058d40 	call	100058d4 <quorem>
10006938:	880b883a 	mov	r5,r17
1000693c:	8009883a 	mov	r4,r16
10006940:	102f883a 	mov	r23,r2
10006944:	0009b380 	call	10009b38 <__mcmp>
10006948:	a80b883a 	mov	r5,r21
1000694c:	a00d883a 	mov	r6,r20
10006950:	e009883a 	mov	r4,fp
10006954:	102d883a 	mov	r22,r2
10006958:	0009b980 	call	10009b98 <__mdiff>
1000695c:	1007883a 	mov	r3,r2
10006960:	10800317 	ldw	r2,12(r2)
10006964:	bc800c04 	addi	r18,r23,48
10006968:	180b883a 	mov	r5,r3
1000696c:	10004e1e 	bne	r2,zero,10006aa8 <_dtoa_r+0xfac>
10006970:	8009883a 	mov	r4,r16
10006974:	d8c01615 	stw	r3,88(sp)
10006978:	0009b380 	call	10009b38 <__mcmp>
1000697c:	d8c01617 	ldw	r3,88(sp)
10006980:	e009883a 	mov	r4,fp
10006984:	d8801615 	stw	r2,88(sp)
10006988:	180b883a 	mov	r5,r3
1000698c:	000925c0 	call	1000925c <_Bfree>
10006990:	d8801617 	ldw	r2,88(sp)
10006994:	1000041e 	bne	r2,zero,100069a8 <_dtoa_r+0xeac>
10006998:	d9800317 	ldw	r6,12(sp)
1000699c:	3000021e 	bne	r6,zero,100069a8 <_dtoa_r+0xeac>
100069a0:	d8c00617 	ldw	r3,24(sp)
100069a4:	18003726 	beq	r3,zero,10006a84 <_dtoa_r+0xf88>
100069a8:	b0002016 	blt	r22,zero,10006a2c <_dtoa_r+0xf30>
100069ac:	b000041e 	bne	r22,zero,100069c0 <_dtoa_r+0xec4>
100069b0:	d9000317 	ldw	r4,12(sp)
100069b4:	2000021e 	bne	r4,zero,100069c0 <_dtoa_r+0xec4>
100069b8:	d8c00617 	ldw	r3,24(sp)
100069bc:	18001b26 	beq	r3,zero,10006a2c <_dtoa_r+0xf30>
100069c0:	00810716 	blt	zero,r2,10006de0 <_dtoa_r+0x12e4>
100069c4:	d8c00417 	ldw	r3,16(sp)
100069c8:	9d800044 	addi	r22,r19,1
100069cc:	9c800005 	stb	r18,0(r19)
100069d0:	b02f883a 	mov	r23,r22
100069d4:	98c10626 	beq	r19,r3,10006df0 <_dtoa_r+0x12f4>
100069d8:	800b883a 	mov	r5,r16
100069dc:	000f883a 	mov	r7,zero
100069e0:	01800284 	movi	r6,10
100069e4:	e009883a 	mov	r4,fp
100069e8:	00092840 	call	10009284 <__multadd>
100069ec:	1021883a 	mov	r16,r2
100069f0:	000f883a 	mov	r7,zero
100069f4:	01800284 	movi	r6,10
100069f8:	880b883a 	mov	r5,r17
100069fc:	e009883a 	mov	r4,fp
10006a00:	8d002526 	beq	r17,r20,10006a98 <_dtoa_r+0xf9c>
10006a04:	00092840 	call	10009284 <__multadd>
10006a08:	a00b883a 	mov	r5,r20
10006a0c:	000f883a 	mov	r7,zero
10006a10:	01800284 	movi	r6,10
10006a14:	e009883a 	mov	r4,fp
10006a18:	1023883a 	mov	r17,r2
10006a1c:	00092840 	call	10009284 <__multadd>
10006a20:	1029883a 	mov	r20,r2
10006a24:	b027883a 	mov	r19,r22
10006a28:	003fc006 	br	1000692c <__alt_data_end+0xf800692c>
10006a2c:	9011883a 	mov	r8,r18
10006a30:	00800e0e 	bge	zero,r2,10006a6c <_dtoa_r+0xf70>
10006a34:	800b883a 	mov	r5,r16
10006a38:	01800044 	movi	r6,1
10006a3c:	e009883a 	mov	r4,fp
10006a40:	da001715 	stw	r8,92(sp)
10006a44:	00099f00 	call	100099f0 <__lshift>
10006a48:	a80b883a 	mov	r5,r21
10006a4c:	1009883a 	mov	r4,r2
10006a50:	1021883a 	mov	r16,r2
10006a54:	0009b380 	call	10009b38 <__mcmp>
10006a58:	da001717 	ldw	r8,92(sp)
10006a5c:	0081960e 	bge	zero,r2,100070b8 <_dtoa_r+0x15bc>
10006a60:	00800e44 	movi	r2,57
10006a64:	40817026 	beq	r8,r2,10007028 <_dtoa_r+0x152c>
10006a68:	ba000c44 	addi	r8,r23,49
10006a6c:	8825883a 	mov	r18,r17
10006a70:	9dc00044 	addi	r23,r19,1
10006a74:	9a000005 	stb	r8,0(r19)
10006a78:	a023883a 	mov	r17,r20
10006a7c:	dc000915 	stw	r16,36(sp)
10006a80:	003f2406 	br	10006714 <__alt_data_end+0xf8006714>
10006a84:	00800e44 	movi	r2,57
10006a88:	9011883a 	mov	r8,r18
10006a8c:	90816626 	beq	r18,r2,10007028 <_dtoa_r+0x152c>
10006a90:	05bff516 	blt	zero,r22,10006a68 <__alt_data_end+0xf8006a68>
10006a94:	003ff506 	br	10006a6c <__alt_data_end+0xf8006a6c>
10006a98:	00092840 	call	10009284 <__multadd>
10006a9c:	1023883a 	mov	r17,r2
10006aa0:	1029883a 	mov	r20,r2
10006aa4:	003fdf06 	br	10006a24 <__alt_data_end+0xf8006a24>
10006aa8:	e009883a 	mov	r4,fp
10006aac:	000925c0 	call	1000925c <_Bfree>
10006ab0:	00800044 	movi	r2,1
10006ab4:	003fbc06 	br	100069a8 <__alt_data_end+0xf80069a8>
10006ab8:	a80b883a 	mov	r5,r21
10006abc:	8009883a 	mov	r4,r16
10006ac0:	0009b380 	call	10009b38 <__mcmp>
10006ac4:	103edb0e 	bge	r2,zero,10006634 <__alt_data_end+0xf8006634>
10006ac8:	800b883a 	mov	r5,r16
10006acc:	000f883a 	mov	r7,zero
10006ad0:	01800284 	movi	r6,10
10006ad4:	e009883a 	mov	r4,fp
10006ad8:	00092840 	call	10009284 <__multadd>
10006adc:	1021883a 	mov	r16,r2
10006ae0:	d8800517 	ldw	r2,20(sp)
10006ae4:	d8c00b17 	ldw	r3,44(sp)
10006ae8:	10bfffc4 	addi	r2,r2,-1
10006aec:	d8800515 	stw	r2,20(sp)
10006af0:	183f761e 	bne	r3,zero,100068cc <__alt_data_end+0xf80068cc>
10006af4:	d9000c17 	ldw	r4,48(sp)
10006af8:	0101730e 	bge	zero,r4,100070c8 <_dtoa_r+0x15cc>
10006afc:	d9000615 	stw	r4,24(sp)
10006b00:	003ed006 	br	10006644 <__alt_data_end+0xf8006644>
10006b04:	00800084 	movi	r2,2
10006b08:	3081861e 	bne	r6,r2,10007124 <_dtoa_r+0x1628>
10006b0c:	d8000b15 	stw	zero,44(sp)
10006b10:	003f3c06 	br	10006804 <__alt_data_end+0xf8006804>
10006b14:	dc000917 	ldw	r16,36(sp)
10006b18:	003e9206 	br	10006564 <__alt_data_end+0xf8006564>
10006b1c:	d9c00317 	ldw	r7,12(sp)
10006b20:	00800084 	movi	r2,2
10006b24:	11fec50e 	bge	r2,r7,1000663c <__alt_data_end+0xf800663c>
10006b28:	d9000617 	ldw	r4,24(sp)
10006b2c:	20013c1e 	bne	r4,zero,10007020 <_dtoa_r+0x1524>
10006b30:	a80b883a 	mov	r5,r21
10006b34:	000f883a 	mov	r7,zero
10006b38:	01800144 	movi	r6,5
10006b3c:	e009883a 	mov	r4,fp
10006b40:	00092840 	call	10009284 <__multadd>
10006b44:	100b883a 	mov	r5,r2
10006b48:	8009883a 	mov	r4,r16
10006b4c:	102b883a 	mov	r21,r2
10006b50:	0009b380 	call	10009b38 <__mcmp>
10006b54:	dc000915 	stw	r16,36(sp)
10006b58:	00bf410e 	bge	zero,r2,10006860 <__alt_data_end+0xf8006860>
10006b5c:	d9c00717 	ldw	r7,28(sp)
10006b60:	00800c44 	movi	r2,49
10006b64:	38800005 	stb	r2,0(r7)
10006b68:	d8800517 	ldw	r2,20(sp)
10006b6c:	3dc00044 	addi	r23,r7,1
10006b70:	10800044 	addi	r2,r2,1
10006b74:	d8800515 	stw	r2,20(sp)
10006b78:	003f3d06 	br	10006870 <__alt_data_end+0xf8006870>
10006b7c:	d9800517 	ldw	r6,20(sp)
10006b80:	d9c00717 	ldw	r7,28(sp)
10006b84:	00800c44 	movi	r2,49
10006b88:	31800044 	addi	r6,r6,1
10006b8c:	d9800515 	stw	r6,20(sp)
10006b90:	38800005 	stb	r2,0(r7)
10006b94:	003edf06 	br	10006714 <__alt_data_end+0xf8006714>
10006b98:	d8000b15 	stw	zero,44(sp)
10006b9c:	003c9f06 	br	10005e1c <__alt_data_end+0xf8005e1c>
10006ba0:	903e7e1e 	bne	r18,zero,1000659c <__alt_data_end+0xf800659c>
10006ba4:	00800434 	movhi	r2,16
10006ba8:	10bfffc4 	addi	r2,r2,-1
10006bac:	9884703a 	and	r2,r19,r2
10006bb0:	1000ea1e 	bne	r2,zero,10006f5c <_dtoa_r+0x1460>
10006bb4:	9cdffc2c 	andhi	r19,r19,32752
10006bb8:	9800e826 	beq	r19,zero,10006f5c <_dtoa_r+0x1460>
10006bbc:	d9c00817 	ldw	r7,32(sp)
10006bc0:	b5800044 	addi	r22,r22,1
10006bc4:	04c00044 	movi	r19,1
10006bc8:	39c00044 	addi	r7,r7,1
10006bcc:	d9c00815 	stw	r7,32(sp)
10006bd0:	d8800d17 	ldw	r2,52(sp)
10006bd4:	103e721e 	bne	r2,zero,100065a0 <__alt_data_end+0xf80065a0>
10006bd8:	00800044 	movi	r2,1
10006bdc:	003e7906 	br	100065c4 <__alt_data_end+0xf80065c4>
10006be0:	8009883a 	mov	r4,r16
10006be4:	000ff4c0 	call	1000ff4c <__floatsidf>
10006be8:	d9800f17 	ldw	r6,60(sp)
10006bec:	d9c01017 	ldw	r7,64(sp)
10006bf0:	1009883a 	mov	r4,r2
10006bf4:	180b883a 	mov	r5,r3
10006bf8:	000ed640 	call	1000ed64 <__muldf3>
10006bfc:	000d883a 	mov	r6,zero
10006c00:	01d00734 	movhi	r7,16412
10006c04:	1009883a 	mov	r4,r2
10006c08:	180b883a 	mov	r5,r3
10006c0c:	000d8900 	call	1000d890 <__adddf3>
10006c10:	047f3034 	movhi	r17,64704
10006c14:	1021883a 	mov	r16,r2
10006c18:	1c63883a 	add	r17,r3,r17
10006c1c:	d9000f17 	ldw	r4,60(sp)
10006c20:	d9401017 	ldw	r5,64(sp)
10006c24:	000d883a 	mov	r6,zero
10006c28:	01d00534 	movhi	r7,16404
10006c2c:	000f5d00 	call	1000f5d0 <__subdf3>
10006c30:	800d883a 	mov	r6,r16
10006c34:	880f883a 	mov	r7,r17
10006c38:	1009883a 	mov	r4,r2
10006c3c:	180b883a 	mov	r5,r3
10006c40:	102b883a 	mov	r21,r2
10006c44:	1829883a 	mov	r20,r3
10006c48:	000eb940 	call	1000eb94 <__gedf2>
10006c4c:	00806c16 	blt	zero,r2,10006e00 <_dtoa_r+0x1304>
10006c50:	89e0003c 	xorhi	r7,r17,32768
10006c54:	800d883a 	mov	r6,r16
10006c58:	a809883a 	mov	r4,r21
10006c5c:	a00b883a 	mov	r5,r20
10006c60:	000ec700 	call	1000ec70 <__ledf2>
10006c64:	103d7e0e 	bge	r2,zero,10006260 <__alt_data_end+0xf8006260>
10006c68:	002b883a 	mov	r21,zero
10006c6c:	0023883a 	mov	r17,zero
10006c70:	003efb06 	br	10006860 <__alt_data_end+0xf8006860>
10006c74:	d8800717 	ldw	r2,28(sp)
10006c78:	003bd006 	br	10005bbc <__alt_data_end+0xf8005bbc>
10006c7c:	d9000a17 	ldw	r4,40(sp)
10006c80:	d9800d17 	ldw	r6,52(sp)
10006c84:	dd400a15 	stw	r21,40(sp)
10006c88:	a905c83a 	sub	r2,r21,r4
10006c8c:	308d883a 	add	r6,r6,r2
10006c90:	d9800d15 	stw	r6,52(sp)
10006c94:	002b883a 	mov	r21,zero
10006c98:	003e0606 	br	100064b4 <__alt_data_end+0xf80064b4>
10006c9c:	9023883a 	mov	r17,r18
10006ca0:	9829883a 	mov	r20,r19
10006ca4:	04000084 	movi	r16,2
10006ca8:	003c9206 	br	10005ef4 <__alt_data_end+0xf8005ef4>
10006cac:	04000044 	movi	r16,1
10006cb0:	dc000c15 	stw	r16,48(sp)
10006cb4:	dc000615 	stw	r16,24(sp)
10006cb8:	dc002215 	stw	r16,136(sp)
10006cbc:	e0001115 	stw	zero,68(fp)
10006cc0:	000b883a 	mov	r5,zero
10006cc4:	003c6906 	br	10005e6c <__alt_data_end+0xf8005e6c>
10006cc8:	3021883a 	mov	r16,r6
10006ccc:	003ffb06 	br	10006cbc <__alt_data_end+0xf8006cbc>
10006cd0:	1000021e 	bne	r2,zero,10006cdc <_dtoa_r+0x11e0>
10006cd4:	4200004c 	andi	r8,r8,1
10006cd8:	403e7d1e 	bne	r8,zero,100066d0 <__alt_data_end+0xf80066d0>
10006cdc:	01000c04 	movi	r4,48
10006ce0:	00000106 	br	10006ce8 <_dtoa_r+0x11ec>
10006ce4:	102f883a 	mov	r23,r2
10006ce8:	b8bfffc4 	addi	r2,r23,-1
10006cec:	10c00007 	ldb	r3,0(r2)
10006cf0:	193ffc26 	beq	r3,r4,10006ce4 <__alt_data_end+0xf8006ce4>
10006cf4:	003e8706 	br	10006714 <__alt_data_end+0xf8006714>
10006cf8:	d8800517 	ldw	r2,20(sp)
10006cfc:	00a3c83a 	sub	r17,zero,r2
10006d00:	8800a426 	beq	r17,zero,10006f94 <_dtoa_r+0x1498>
10006d04:	888003cc 	andi	r2,r17,15
10006d08:	100490fa 	slli	r2,r2,3
10006d0c:	00c40074 	movhi	r3,4097
10006d10:	18cc8404 	addi	r3,r3,12816
10006d14:	1885883a 	add	r2,r3,r2
10006d18:	11800017 	ldw	r6,0(r2)
10006d1c:	11c00117 	ldw	r7,4(r2)
10006d20:	9009883a 	mov	r4,r18
10006d24:	980b883a 	mov	r5,r19
10006d28:	8823d13a 	srai	r17,r17,4
10006d2c:	000ed640 	call	1000ed64 <__muldf3>
10006d30:	d8800f15 	stw	r2,60(sp)
10006d34:	d8c01015 	stw	r3,64(sp)
10006d38:	8800e826 	beq	r17,zero,100070dc <_dtoa_r+0x15e0>
10006d3c:	05040074 	movhi	r20,4097
10006d40:	a50c7a04 	addi	r20,r20,12776
10006d44:	04000084 	movi	r16,2
10006d48:	8980004c 	andi	r6,r17,1
10006d4c:	1009883a 	mov	r4,r2
10006d50:	8823d07a 	srai	r17,r17,1
10006d54:	180b883a 	mov	r5,r3
10006d58:	30000426 	beq	r6,zero,10006d6c <_dtoa_r+0x1270>
10006d5c:	a1800017 	ldw	r6,0(r20)
10006d60:	a1c00117 	ldw	r7,4(r20)
10006d64:	84000044 	addi	r16,r16,1
10006d68:	000ed640 	call	1000ed64 <__muldf3>
10006d6c:	a5000204 	addi	r20,r20,8
10006d70:	883ff51e 	bne	r17,zero,10006d48 <__alt_data_end+0xf8006d48>
10006d74:	d8800f15 	stw	r2,60(sp)
10006d78:	d8c01015 	stw	r3,64(sp)
10006d7c:	003c7606 	br	10005f58 <__alt_data_end+0xf8005f58>
10006d80:	00c00c04 	movi	r3,48
10006d84:	10c00005 	stb	r3,0(r2)
10006d88:	d8c00517 	ldw	r3,20(sp)
10006d8c:	bd3fffc3 	ldbu	r20,-1(r23)
10006d90:	18c00044 	addi	r3,r3,1
10006d94:	d8c00515 	stw	r3,20(sp)
10006d98:	003db906 	br	10006480 <__alt_data_end+0xf8006480>
10006d9c:	89400117 	ldw	r5,4(r17)
10006da0:	e009883a 	mov	r4,fp
10006da4:	00091b40 	call	100091b4 <_Balloc>
10006da8:	89800417 	ldw	r6,16(r17)
10006dac:	89400304 	addi	r5,r17,12
10006db0:	11000304 	addi	r4,r2,12
10006db4:	31800084 	addi	r6,r6,2
10006db8:	318d883a 	add	r6,r6,r6
10006dbc:	318d883a 	add	r6,r6,r6
10006dc0:	1027883a 	mov	r19,r2
10006dc4:	0008de80 	call	10008de8 <memcpy>
10006dc8:	01800044 	movi	r6,1
10006dcc:	980b883a 	mov	r5,r19
10006dd0:	e009883a 	mov	r4,fp
10006dd4:	00099f00 	call	100099f0 <__lshift>
10006dd8:	1029883a 	mov	r20,r2
10006ddc:	003ecc06 	br	10006910 <__alt_data_end+0xf8006910>
10006de0:	00800e44 	movi	r2,57
10006de4:	90809026 	beq	r18,r2,10007028 <_dtoa_r+0x152c>
10006de8:	92000044 	addi	r8,r18,1
10006dec:	003f1f06 	br	10006a6c <__alt_data_end+0xf8006a6c>
10006df0:	9011883a 	mov	r8,r18
10006df4:	8825883a 	mov	r18,r17
10006df8:	a023883a 	mov	r17,r20
10006dfc:	003e2906 	br	100066a4 <__alt_data_end+0xf80066a4>
10006e00:	002b883a 	mov	r21,zero
10006e04:	0023883a 	mov	r17,zero
10006e08:	003f5406 	br	10006b5c <__alt_data_end+0xf8006b5c>
10006e0c:	61bfffc4 	addi	r6,r12,-1
10006e10:	300490fa 	slli	r2,r6,3
10006e14:	00c40074 	movhi	r3,4097
10006e18:	18cc8404 	addi	r3,r3,12816
10006e1c:	1885883a 	add	r2,r3,r2
10006e20:	11000017 	ldw	r4,0(r2)
10006e24:	11400117 	ldw	r5,4(r2)
10006e28:	d8800717 	ldw	r2,28(sp)
10006e2c:	880f883a 	mov	r7,r17
10006e30:	d9801215 	stw	r6,72(sp)
10006e34:	800d883a 	mov	r6,r16
10006e38:	db001615 	stw	r12,88(sp)
10006e3c:	15c00044 	addi	r23,r2,1
10006e40:	000ed640 	call	1000ed64 <__muldf3>
10006e44:	d9401017 	ldw	r5,64(sp)
10006e48:	d9000f17 	ldw	r4,60(sp)
10006e4c:	d8c01515 	stw	r3,84(sp)
10006e50:	d8801415 	stw	r2,80(sp)
10006e54:	000fecc0 	call	1000fecc <__fixdfsi>
10006e58:	1009883a 	mov	r4,r2
10006e5c:	1021883a 	mov	r16,r2
10006e60:	000ff4c0 	call	1000ff4c <__floatsidf>
10006e64:	d9000f17 	ldw	r4,60(sp)
10006e68:	d9401017 	ldw	r5,64(sp)
10006e6c:	100d883a 	mov	r6,r2
10006e70:	180f883a 	mov	r7,r3
10006e74:	000f5d00 	call	1000f5d0 <__subdf3>
10006e78:	1829883a 	mov	r20,r3
10006e7c:	d8c00717 	ldw	r3,28(sp)
10006e80:	84000c04 	addi	r16,r16,48
10006e84:	1023883a 	mov	r17,r2
10006e88:	1c000005 	stb	r16,0(r3)
10006e8c:	db001617 	ldw	r12,88(sp)
10006e90:	00800044 	movi	r2,1
10006e94:	60802226 	beq	r12,r2,10006f20 <_dtoa_r+0x1424>
10006e98:	d9c00717 	ldw	r7,28(sp)
10006e9c:	8805883a 	mov	r2,r17
10006ea0:	b82b883a 	mov	r21,r23
10006ea4:	3b19883a 	add	r12,r7,r12
10006ea8:	6023883a 	mov	r17,r12
10006eac:	a007883a 	mov	r3,r20
10006eb0:	dc800f15 	stw	r18,60(sp)
10006eb4:	000d883a 	mov	r6,zero
10006eb8:	01d00934 	movhi	r7,16420
10006ebc:	1009883a 	mov	r4,r2
10006ec0:	180b883a 	mov	r5,r3
10006ec4:	000ed640 	call	1000ed64 <__muldf3>
10006ec8:	180b883a 	mov	r5,r3
10006ecc:	1009883a 	mov	r4,r2
10006ed0:	1829883a 	mov	r20,r3
10006ed4:	1025883a 	mov	r18,r2
10006ed8:	000fecc0 	call	1000fecc <__fixdfsi>
10006edc:	1009883a 	mov	r4,r2
10006ee0:	1021883a 	mov	r16,r2
10006ee4:	000ff4c0 	call	1000ff4c <__floatsidf>
10006ee8:	100d883a 	mov	r6,r2
10006eec:	180f883a 	mov	r7,r3
10006ef0:	9009883a 	mov	r4,r18
10006ef4:	a00b883a 	mov	r5,r20
10006ef8:	84000c04 	addi	r16,r16,48
10006efc:	000f5d00 	call	1000f5d0 <__subdf3>
10006f00:	ad400044 	addi	r21,r21,1
10006f04:	ac3fffc5 	stb	r16,-1(r21)
10006f08:	ac7fea1e 	bne	r21,r17,10006eb4 <__alt_data_end+0xf8006eb4>
10006f0c:	1023883a 	mov	r17,r2
10006f10:	d8801217 	ldw	r2,72(sp)
10006f14:	dc800f17 	ldw	r18,60(sp)
10006f18:	1829883a 	mov	r20,r3
10006f1c:	b8af883a 	add	r23,r23,r2
10006f20:	d9001417 	ldw	r4,80(sp)
10006f24:	d9401517 	ldw	r5,84(sp)
10006f28:	000d883a 	mov	r6,zero
10006f2c:	01cff834 	movhi	r7,16352
10006f30:	000d8900 	call	1000d890 <__adddf3>
10006f34:	880d883a 	mov	r6,r17
10006f38:	a00f883a 	mov	r7,r20
10006f3c:	1009883a 	mov	r4,r2
10006f40:	180b883a 	mov	r5,r3
10006f44:	000ec700 	call	1000ec70 <__ledf2>
10006f48:	10003e0e 	bge	r2,zero,10007044 <_dtoa_r+0x1548>
10006f4c:	d9001317 	ldw	r4,76(sp)
10006f50:	bd3fffc3 	ldbu	r20,-1(r23)
10006f54:	d9000515 	stw	r4,20(sp)
10006f58:	003d3b06 	br	10006448 <__alt_data_end+0xf8006448>
10006f5c:	0027883a 	mov	r19,zero
10006f60:	003f1b06 	br	10006bd0 <__alt_data_end+0xf8006bd0>
10006f64:	d8800817 	ldw	r2,32(sp)
10006f68:	11e9c83a 	sub	r20,r2,r7
10006f6c:	0005883a 	mov	r2,zero
10006f70:	003d5406 	br	100064c4 <__alt_data_end+0xf80064c4>
10006f74:	00800044 	movi	r2,1
10006f78:	003dc706 	br	10006698 <__alt_data_end+0xf8006698>
10006f7c:	d8c00217 	ldw	r3,8(sp)
10006f80:	00800d84 	movi	r2,54
10006f84:	dd400a17 	ldw	r21,40(sp)
10006f88:	10c5c83a 	sub	r2,r2,r3
10006f8c:	dd000817 	ldw	r20,32(sp)
10006f90:	003d4c06 	br	100064c4 <__alt_data_end+0xf80064c4>
10006f94:	dc800f15 	stw	r18,60(sp)
10006f98:	dcc01015 	stw	r19,64(sp)
10006f9c:	04000084 	movi	r16,2
10006fa0:	003bed06 	br	10005f58 <__alt_data_end+0xf8005f58>
10006fa4:	d9000617 	ldw	r4,24(sp)
10006fa8:	203f0d26 	beq	r4,zero,10006be0 <__alt_data_end+0xf8006be0>
10006fac:	d9800c17 	ldw	r6,48(sp)
10006fb0:	01bcab0e 	bge	zero,r6,10006260 <__alt_data_end+0xf8006260>
10006fb4:	d9401017 	ldw	r5,64(sp)
10006fb8:	d9000f17 	ldw	r4,60(sp)
10006fbc:	000d883a 	mov	r6,zero
10006fc0:	01d00934 	movhi	r7,16420
10006fc4:	000ed640 	call	1000ed64 <__muldf3>
10006fc8:	81000044 	addi	r4,r16,1
10006fcc:	d8800f15 	stw	r2,60(sp)
10006fd0:	d8c01015 	stw	r3,64(sp)
10006fd4:	000ff4c0 	call	1000ff4c <__floatsidf>
10006fd8:	d9800f17 	ldw	r6,60(sp)
10006fdc:	d9c01017 	ldw	r7,64(sp)
10006fe0:	1009883a 	mov	r4,r2
10006fe4:	180b883a 	mov	r5,r3
10006fe8:	000ed640 	call	1000ed64 <__muldf3>
10006fec:	01d00734 	movhi	r7,16412
10006ff0:	000d883a 	mov	r6,zero
10006ff4:	1009883a 	mov	r4,r2
10006ff8:	180b883a 	mov	r5,r3
10006ffc:	000d8900 	call	1000d890 <__adddf3>
10007000:	d9c00517 	ldw	r7,20(sp)
10007004:	047f3034 	movhi	r17,64704
10007008:	1021883a 	mov	r16,r2
1000700c:	39ffffc4 	addi	r7,r7,-1
10007010:	d9c01315 	stw	r7,76(sp)
10007014:	1c63883a 	add	r17,r3,r17
10007018:	db000c17 	ldw	r12,48(sp)
1000701c:	003bea06 	br	10005fc8 <__alt_data_end+0xf8005fc8>
10007020:	dc000915 	stw	r16,36(sp)
10007024:	003e0e06 	br	10006860 <__alt_data_end+0xf8006860>
10007028:	01000e44 	movi	r4,57
1000702c:	8825883a 	mov	r18,r17
10007030:	9dc00044 	addi	r23,r19,1
10007034:	99000005 	stb	r4,0(r19)
10007038:	a023883a 	mov	r17,r20
1000703c:	dc000915 	stw	r16,36(sp)
10007040:	003da406 	br	100066d4 <__alt_data_end+0xf80066d4>
10007044:	d9801417 	ldw	r6,80(sp)
10007048:	d9c01517 	ldw	r7,84(sp)
1000704c:	0009883a 	mov	r4,zero
10007050:	014ff834 	movhi	r5,16352
10007054:	000f5d00 	call	1000f5d0 <__subdf3>
10007058:	880d883a 	mov	r6,r17
1000705c:	a00f883a 	mov	r7,r20
10007060:	1009883a 	mov	r4,r2
10007064:	180b883a 	mov	r5,r3
10007068:	000eb940 	call	1000eb94 <__gedf2>
1000706c:	00bc7c0e 	bge	zero,r2,10006260 <__alt_data_end+0xf8006260>
10007070:	01000c04 	movi	r4,48
10007074:	00000106 	br	1000707c <_dtoa_r+0x1580>
10007078:	102f883a 	mov	r23,r2
1000707c:	b8bfffc4 	addi	r2,r23,-1
10007080:	10c00007 	ldb	r3,0(r2)
10007084:	193ffc26 	beq	r3,r4,10007078 <__alt_data_end+0xf8007078>
10007088:	d9801317 	ldw	r6,76(sp)
1000708c:	d9800515 	stw	r6,20(sp)
10007090:	003c4406 	br	100061a4 <__alt_data_end+0xf80061a4>
10007094:	d9801317 	ldw	r6,76(sp)
10007098:	d9800515 	stw	r6,20(sp)
1000709c:	003cea06 	br	10006448 <__alt_data_end+0xf8006448>
100070a0:	dd800f17 	ldw	r22,60(sp)
100070a4:	dcc01017 	ldw	r19,64(sp)
100070a8:	dc801217 	ldw	r18,72(sp)
100070ac:	003c6c06 	br	10006260 <__alt_data_end+0xf8006260>
100070b0:	903e031e 	bne	r18,zero,100068c0 <__alt_data_end+0xf80068c0>
100070b4:	003ebb06 	br	10006ba4 <__alt_data_end+0xf8006ba4>
100070b8:	103e6c1e 	bne	r2,zero,10006a6c <__alt_data_end+0xf8006a6c>
100070bc:	4080004c 	andi	r2,r8,1
100070c0:	103e6a26 	beq	r2,zero,10006a6c <__alt_data_end+0xf8006a6c>
100070c4:	003e6606 	br	10006a60 <__alt_data_end+0xf8006a60>
100070c8:	d8c00317 	ldw	r3,12(sp)
100070cc:	00800084 	movi	r2,2
100070d0:	10c02916 	blt	r2,r3,10007178 <_dtoa_r+0x167c>
100070d4:	d9000c17 	ldw	r4,48(sp)
100070d8:	003e8806 	br	10006afc <__alt_data_end+0xf8006afc>
100070dc:	04000084 	movi	r16,2
100070e0:	003b9d06 	br	10005f58 <__alt_data_end+0xf8005f58>
100070e4:	d9001317 	ldw	r4,76(sp)
100070e8:	d9000515 	stw	r4,20(sp)
100070ec:	003cd606 	br	10006448 <__alt_data_end+0xf8006448>
100070f0:	d8801317 	ldw	r2,76(sp)
100070f4:	d8800515 	stw	r2,20(sp)
100070f8:	003c2a06 	br	100061a4 <__alt_data_end+0xf80061a4>
100070fc:	d9800317 	ldw	r6,12(sp)
10007100:	00800084 	movi	r2,2
10007104:	11801516 	blt	r2,r6,1000715c <_dtoa_r+0x1660>
10007108:	d9c00c17 	ldw	r7,48(sp)
1000710c:	d9c00615 	stw	r7,24(sp)
10007110:	003df706 	br	100068f0 <__alt_data_end+0xf80068f0>
10007114:	193d3926 	beq	r3,r4,100065fc <__alt_data_end+0xf80065fc>
10007118:	00c00f04 	movi	r3,60
1000711c:	1885c83a 	sub	r2,r3,r2
10007120:	003ddf06 	br	100068a0 <__alt_data_end+0xf80068a0>
10007124:	e009883a 	mov	r4,fp
10007128:	e0001115 	stw	zero,68(fp)
1000712c:	000b883a 	mov	r5,zero
10007130:	00091b40 	call	100091b4 <_Balloc>
10007134:	d8800715 	stw	r2,28(sp)
10007138:	d8c00717 	ldw	r3,28(sp)
1000713c:	00bfffc4 	movi	r2,-1
10007140:	01000044 	movi	r4,1
10007144:	d8800c15 	stw	r2,48(sp)
10007148:	e0c01015 	stw	r3,64(fp)
1000714c:	d9000b15 	stw	r4,44(sp)
10007150:	d8800615 	stw	r2,24(sp)
10007154:	d8002215 	stw	zero,136(sp)
10007158:	003c4106 	br	10006260 <__alt_data_end+0xf8006260>
1000715c:	d8c00c17 	ldw	r3,48(sp)
10007160:	d8c00615 	stw	r3,24(sp)
10007164:	003e7006 	br	10006b28 <__alt_data_end+0xf8006b28>
10007168:	04400044 	movi	r17,1
1000716c:	003b2006 	br	10005df0 <__alt_data_end+0xf8005df0>
10007170:	000b883a 	mov	r5,zero
10007174:	003b3d06 	br	10005e6c <__alt_data_end+0xf8005e6c>
10007178:	d8800c17 	ldw	r2,48(sp)
1000717c:	d8800615 	stw	r2,24(sp)
10007180:	003e6906 	br	10006b28 <__alt_data_end+0xf8006b28>

10007184 <__sflush_r>:
10007184:	2880030b 	ldhu	r2,12(r5)
10007188:	defffb04 	addi	sp,sp,-20
1000718c:	dcc00315 	stw	r19,12(sp)
10007190:	dc400115 	stw	r17,4(sp)
10007194:	dfc00415 	stw	ra,16(sp)
10007198:	dc800215 	stw	r18,8(sp)
1000719c:	dc000015 	stw	r16,0(sp)
100071a0:	10c0020c 	andi	r3,r2,8
100071a4:	2823883a 	mov	r17,r5
100071a8:	2027883a 	mov	r19,r4
100071ac:	1800311e 	bne	r3,zero,10007274 <__sflush_r+0xf0>
100071b0:	28c00117 	ldw	r3,4(r5)
100071b4:	10820014 	ori	r2,r2,2048
100071b8:	2880030d 	sth	r2,12(r5)
100071bc:	00c04b0e 	bge	zero,r3,100072ec <__sflush_r+0x168>
100071c0:	8a000a17 	ldw	r8,40(r17)
100071c4:	40002326 	beq	r8,zero,10007254 <__sflush_r+0xd0>
100071c8:	9c000017 	ldw	r16,0(r19)
100071cc:	10c4000c 	andi	r3,r2,4096
100071d0:	98000015 	stw	zero,0(r19)
100071d4:	18004826 	beq	r3,zero,100072f8 <__sflush_r+0x174>
100071d8:	89801417 	ldw	r6,80(r17)
100071dc:	10c0010c 	andi	r3,r2,4
100071e0:	18000626 	beq	r3,zero,100071fc <__sflush_r+0x78>
100071e4:	88c00117 	ldw	r3,4(r17)
100071e8:	88800c17 	ldw	r2,48(r17)
100071ec:	30cdc83a 	sub	r6,r6,r3
100071f0:	10000226 	beq	r2,zero,100071fc <__sflush_r+0x78>
100071f4:	88800f17 	ldw	r2,60(r17)
100071f8:	308dc83a 	sub	r6,r6,r2
100071fc:	89400717 	ldw	r5,28(r17)
10007200:	000f883a 	mov	r7,zero
10007204:	9809883a 	mov	r4,r19
10007208:	403ee83a 	callr	r8
1000720c:	00ffffc4 	movi	r3,-1
10007210:	10c04426 	beq	r2,r3,10007324 <__sflush_r+0x1a0>
10007214:	88c0030b 	ldhu	r3,12(r17)
10007218:	89000417 	ldw	r4,16(r17)
1000721c:	88000115 	stw	zero,4(r17)
10007220:	197dffcc 	andi	r5,r3,63487
10007224:	8940030d 	sth	r5,12(r17)
10007228:	89000015 	stw	r4,0(r17)
1000722c:	18c4000c 	andi	r3,r3,4096
10007230:	18002c1e 	bne	r3,zero,100072e4 <__sflush_r+0x160>
10007234:	89400c17 	ldw	r5,48(r17)
10007238:	9c000015 	stw	r16,0(r19)
1000723c:	28000526 	beq	r5,zero,10007254 <__sflush_r+0xd0>
10007240:	88801004 	addi	r2,r17,64
10007244:	28800226 	beq	r5,r2,10007250 <__sflush_r+0xcc>
10007248:	9809883a 	mov	r4,r19
1000724c:	00079000 	call	10007900 <_free_r>
10007250:	88000c15 	stw	zero,48(r17)
10007254:	0005883a 	mov	r2,zero
10007258:	dfc00417 	ldw	ra,16(sp)
1000725c:	dcc00317 	ldw	r19,12(sp)
10007260:	dc800217 	ldw	r18,8(sp)
10007264:	dc400117 	ldw	r17,4(sp)
10007268:	dc000017 	ldw	r16,0(sp)
1000726c:	dec00504 	addi	sp,sp,20
10007270:	f800283a 	ret
10007274:	2c800417 	ldw	r18,16(r5)
10007278:	903ff626 	beq	r18,zero,10007254 <__alt_data_end+0xf8007254>
1000727c:	2c000017 	ldw	r16,0(r5)
10007280:	108000cc 	andi	r2,r2,3
10007284:	2c800015 	stw	r18,0(r5)
10007288:	84a1c83a 	sub	r16,r16,r18
1000728c:	1000131e 	bne	r2,zero,100072dc <__sflush_r+0x158>
10007290:	28800517 	ldw	r2,20(r5)
10007294:	88800215 	stw	r2,8(r17)
10007298:	04000316 	blt	zero,r16,100072a8 <__sflush_r+0x124>
1000729c:	003fed06 	br	10007254 <__alt_data_end+0xf8007254>
100072a0:	90a5883a 	add	r18,r18,r2
100072a4:	043feb0e 	bge	zero,r16,10007254 <__alt_data_end+0xf8007254>
100072a8:	88800917 	ldw	r2,36(r17)
100072ac:	89400717 	ldw	r5,28(r17)
100072b0:	800f883a 	mov	r7,r16
100072b4:	900d883a 	mov	r6,r18
100072b8:	9809883a 	mov	r4,r19
100072bc:	103ee83a 	callr	r2
100072c0:	80a1c83a 	sub	r16,r16,r2
100072c4:	00bff616 	blt	zero,r2,100072a0 <__alt_data_end+0xf80072a0>
100072c8:	88c0030b 	ldhu	r3,12(r17)
100072cc:	00bfffc4 	movi	r2,-1
100072d0:	18c01014 	ori	r3,r3,64
100072d4:	88c0030d 	sth	r3,12(r17)
100072d8:	003fdf06 	br	10007258 <__alt_data_end+0xf8007258>
100072dc:	0005883a 	mov	r2,zero
100072e0:	003fec06 	br	10007294 <__alt_data_end+0xf8007294>
100072e4:	88801415 	stw	r2,80(r17)
100072e8:	003fd206 	br	10007234 <__alt_data_end+0xf8007234>
100072ec:	28c00f17 	ldw	r3,60(r5)
100072f0:	00ffb316 	blt	zero,r3,100071c0 <__alt_data_end+0xf80071c0>
100072f4:	003fd706 	br	10007254 <__alt_data_end+0xf8007254>
100072f8:	89400717 	ldw	r5,28(r17)
100072fc:	000d883a 	mov	r6,zero
10007300:	01c00044 	movi	r7,1
10007304:	9809883a 	mov	r4,r19
10007308:	403ee83a 	callr	r8
1000730c:	100d883a 	mov	r6,r2
10007310:	00bfffc4 	movi	r2,-1
10007314:	30801426 	beq	r6,r2,10007368 <__sflush_r+0x1e4>
10007318:	8880030b 	ldhu	r2,12(r17)
1000731c:	8a000a17 	ldw	r8,40(r17)
10007320:	003fae06 	br	100071dc <__alt_data_end+0xf80071dc>
10007324:	98c00017 	ldw	r3,0(r19)
10007328:	183fba26 	beq	r3,zero,10007214 <__alt_data_end+0xf8007214>
1000732c:	01000744 	movi	r4,29
10007330:	19000626 	beq	r3,r4,1000734c <__sflush_r+0x1c8>
10007334:	01000584 	movi	r4,22
10007338:	19000426 	beq	r3,r4,1000734c <__sflush_r+0x1c8>
1000733c:	88c0030b 	ldhu	r3,12(r17)
10007340:	18c01014 	ori	r3,r3,64
10007344:	88c0030d 	sth	r3,12(r17)
10007348:	003fc306 	br	10007258 <__alt_data_end+0xf8007258>
1000734c:	8880030b 	ldhu	r2,12(r17)
10007350:	88c00417 	ldw	r3,16(r17)
10007354:	88000115 	stw	zero,4(r17)
10007358:	10bdffcc 	andi	r2,r2,63487
1000735c:	8880030d 	sth	r2,12(r17)
10007360:	88c00015 	stw	r3,0(r17)
10007364:	003fb306 	br	10007234 <__alt_data_end+0xf8007234>
10007368:	98800017 	ldw	r2,0(r19)
1000736c:	103fea26 	beq	r2,zero,10007318 <__alt_data_end+0xf8007318>
10007370:	00c00744 	movi	r3,29
10007374:	10c00226 	beq	r2,r3,10007380 <__sflush_r+0x1fc>
10007378:	00c00584 	movi	r3,22
1000737c:	10c0031e 	bne	r2,r3,1000738c <__sflush_r+0x208>
10007380:	9c000015 	stw	r16,0(r19)
10007384:	0005883a 	mov	r2,zero
10007388:	003fb306 	br	10007258 <__alt_data_end+0xf8007258>
1000738c:	88c0030b 	ldhu	r3,12(r17)
10007390:	3005883a 	mov	r2,r6
10007394:	18c01014 	ori	r3,r3,64
10007398:	88c0030d 	sth	r3,12(r17)
1000739c:	003fae06 	br	10007258 <__alt_data_end+0xf8007258>

100073a0 <_fflush_r>:
100073a0:	defffd04 	addi	sp,sp,-12
100073a4:	dc000115 	stw	r16,4(sp)
100073a8:	dfc00215 	stw	ra,8(sp)
100073ac:	2021883a 	mov	r16,r4
100073b0:	20000226 	beq	r4,zero,100073bc <_fflush_r+0x1c>
100073b4:	20800e17 	ldw	r2,56(r4)
100073b8:	10000c26 	beq	r2,zero,100073ec <_fflush_r+0x4c>
100073bc:	2880030f 	ldh	r2,12(r5)
100073c0:	1000051e 	bne	r2,zero,100073d8 <_fflush_r+0x38>
100073c4:	0005883a 	mov	r2,zero
100073c8:	dfc00217 	ldw	ra,8(sp)
100073cc:	dc000117 	ldw	r16,4(sp)
100073d0:	dec00304 	addi	sp,sp,12
100073d4:	f800283a 	ret
100073d8:	8009883a 	mov	r4,r16
100073dc:	dfc00217 	ldw	ra,8(sp)
100073e0:	dc000117 	ldw	r16,4(sp)
100073e4:	dec00304 	addi	sp,sp,12
100073e8:	00071841 	jmpi	10007184 <__sflush_r>
100073ec:	d9400015 	stw	r5,0(sp)
100073f0:	000778c0 	call	1000778c <__sinit>
100073f4:	d9400017 	ldw	r5,0(sp)
100073f8:	003ff006 	br	100073bc <__alt_data_end+0xf80073bc>

100073fc <fflush>:
100073fc:	20000526 	beq	r4,zero,10007414 <fflush+0x18>
10007400:	00840074 	movhi	r2,4097
10007404:	1093b704 	addi	r2,r2,20188
10007408:	200b883a 	mov	r5,r4
1000740c:	11000017 	ldw	r4,0(r2)
10007410:	00073a01 	jmpi	100073a0 <_fflush_r>
10007414:	00840074 	movhi	r2,4097
10007418:	1093b604 	addi	r2,r2,20184
1000741c:	11000017 	ldw	r4,0(r2)
10007420:	01440034 	movhi	r5,4096
10007424:	295ce804 	addi	r5,r5,29600
10007428:	000819c1 	jmpi	1000819c <_fwalk_reent>

1000742c <__fp_unlock>:
1000742c:	0005883a 	mov	r2,zero
10007430:	f800283a 	ret

10007434 <_cleanup_r>:
10007434:	01440074 	movhi	r5,4097
10007438:	2970ce04 	addi	r5,r5,-15560
1000743c:	000819c1 	jmpi	1000819c <_fwalk_reent>

10007440 <__sinit.part.1>:
10007440:	defff704 	addi	sp,sp,-36
10007444:	00c40034 	movhi	r3,4096
10007448:	dfc00815 	stw	ra,32(sp)
1000744c:	ddc00715 	stw	r23,28(sp)
10007450:	dd800615 	stw	r22,24(sp)
10007454:	dd400515 	stw	r21,20(sp)
10007458:	dd000415 	stw	r20,16(sp)
1000745c:	dcc00315 	stw	r19,12(sp)
10007460:	dc800215 	stw	r18,8(sp)
10007464:	dc400115 	stw	r17,4(sp)
10007468:	dc000015 	stw	r16,0(sp)
1000746c:	18dd0d04 	addi	r3,r3,29748
10007470:	24000117 	ldw	r16,4(r4)
10007474:	20c00f15 	stw	r3,60(r4)
10007478:	2080bb04 	addi	r2,r4,748
1000747c:	00c000c4 	movi	r3,3
10007480:	20c0b915 	stw	r3,740(r4)
10007484:	2080ba15 	stw	r2,744(r4)
10007488:	2000b815 	stw	zero,736(r4)
1000748c:	05c00204 	movi	r23,8
10007490:	00800104 	movi	r2,4
10007494:	2025883a 	mov	r18,r4
10007498:	b80d883a 	mov	r6,r23
1000749c:	81001704 	addi	r4,r16,92
100074a0:	000b883a 	mov	r5,zero
100074a4:	80000015 	stw	zero,0(r16)
100074a8:	80000115 	stw	zero,4(r16)
100074ac:	80000215 	stw	zero,8(r16)
100074b0:	8080030d 	sth	r2,12(r16)
100074b4:	80001915 	stw	zero,100(r16)
100074b8:	8000038d 	sth	zero,14(r16)
100074bc:	80000415 	stw	zero,16(r16)
100074c0:	80000515 	stw	zero,20(r16)
100074c4:	80000615 	stw	zero,24(r16)
100074c8:	000908c0 	call	1000908c <memset>
100074cc:	05840074 	movhi	r22,4097
100074d0:	94400217 	ldw	r17,8(r18)
100074d4:	05440074 	movhi	r21,4097
100074d8:	05040074 	movhi	r20,4097
100074dc:	04c40074 	movhi	r19,4097
100074e0:	b5aa2604 	addi	r22,r22,-22376
100074e4:	ad6a3d04 	addi	r21,r21,-22284
100074e8:	a52a5c04 	addi	r20,r20,-22160
100074ec:	9cea7304 	addi	r19,r19,-22068
100074f0:	85800815 	stw	r22,32(r16)
100074f4:	85400915 	stw	r21,36(r16)
100074f8:	85000a15 	stw	r20,40(r16)
100074fc:	84c00b15 	stw	r19,44(r16)
10007500:	84000715 	stw	r16,28(r16)
10007504:	00800284 	movi	r2,10
10007508:	8880030d 	sth	r2,12(r17)
1000750c:	00800044 	movi	r2,1
10007510:	b80d883a 	mov	r6,r23
10007514:	89001704 	addi	r4,r17,92
10007518:	000b883a 	mov	r5,zero
1000751c:	88000015 	stw	zero,0(r17)
10007520:	88000115 	stw	zero,4(r17)
10007524:	88000215 	stw	zero,8(r17)
10007528:	88001915 	stw	zero,100(r17)
1000752c:	8880038d 	sth	r2,14(r17)
10007530:	88000415 	stw	zero,16(r17)
10007534:	88000515 	stw	zero,20(r17)
10007538:	88000615 	stw	zero,24(r17)
1000753c:	000908c0 	call	1000908c <memset>
10007540:	94000317 	ldw	r16,12(r18)
10007544:	00800484 	movi	r2,18
10007548:	8c400715 	stw	r17,28(r17)
1000754c:	8d800815 	stw	r22,32(r17)
10007550:	8d400915 	stw	r21,36(r17)
10007554:	8d000a15 	stw	r20,40(r17)
10007558:	8cc00b15 	stw	r19,44(r17)
1000755c:	8080030d 	sth	r2,12(r16)
10007560:	00800084 	movi	r2,2
10007564:	80000015 	stw	zero,0(r16)
10007568:	80000115 	stw	zero,4(r16)
1000756c:	80000215 	stw	zero,8(r16)
10007570:	80001915 	stw	zero,100(r16)
10007574:	8080038d 	sth	r2,14(r16)
10007578:	80000415 	stw	zero,16(r16)
1000757c:	80000515 	stw	zero,20(r16)
10007580:	80000615 	stw	zero,24(r16)
10007584:	b80d883a 	mov	r6,r23
10007588:	000b883a 	mov	r5,zero
1000758c:	81001704 	addi	r4,r16,92
10007590:	000908c0 	call	1000908c <memset>
10007594:	00800044 	movi	r2,1
10007598:	84000715 	stw	r16,28(r16)
1000759c:	85800815 	stw	r22,32(r16)
100075a0:	85400915 	stw	r21,36(r16)
100075a4:	85000a15 	stw	r20,40(r16)
100075a8:	84c00b15 	stw	r19,44(r16)
100075ac:	90800e15 	stw	r2,56(r18)
100075b0:	dfc00817 	ldw	ra,32(sp)
100075b4:	ddc00717 	ldw	r23,28(sp)
100075b8:	dd800617 	ldw	r22,24(sp)
100075bc:	dd400517 	ldw	r21,20(sp)
100075c0:	dd000417 	ldw	r20,16(sp)
100075c4:	dcc00317 	ldw	r19,12(sp)
100075c8:	dc800217 	ldw	r18,8(sp)
100075cc:	dc400117 	ldw	r17,4(sp)
100075d0:	dc000017 	ldw	r16,0(sp)
100075d4:	dec00904 	addi	sp,sp,36
100075d8:	f800283a 	ret

100075dc <__fp_lock>:
100075dc:	0005883a 	mov	r2,zero
100075e0:	f800283a 	ret

100075e4 <__sfmoreglue>:
100075e4:	defffc04 	addi	sp,sp,-16
100075e8:	dc800215 	stw	r18,8(sp)
100075ec:	2825883a 	mov	r18,r5
100075f0:	dc000015 	stw	r16,0(sp)
100075f4:	01401a04 	movi	r5,104
100075f8:	2021883a 	mov	r16,r4
100075fc:	913fffc4 	addi	r4,r18,-1
10007600:	dfc00315 	stw	ra,12(sp)
10007604:	dc400115 	stw	r17,4(sp)
10007608:	000d8680 	call	1000d868 <__mulsi3>
1000760c:	8009883a 	mov	r4,r16
10007610:	11401d04 	addi	r5,r2,116
10007614:	1023883a 	mov	r17,r2
10007618:	00084f80 	call	100084f8 <_malloc_r>
1000761c:	1021883a 	mov	r16,r2
10007620:	10000726 	beq	r2,zero,10007640 <__sfmoreglue+0x5c>
10007624:	11000304 	addi	r4,r2,12
10007628:	10000015 	stw	zero,0(r2)
1000762c:	14800115 	stw	r18,4(r2)
10007630:	11000215 	stw	r4,8(r2)
10007634:	89801a04 	addi	r6,r17,104
10007638:	000b883a 	mov	r5,zero
1000763c:	000908c0 	call	1000908c <memset>
10007640:	8005883a 	mov	r2,r16
10007644:	dfc00317 	ldw	ra,12(sp)
10007648:	dc800217 	ldw	r18,8(sp)
1000764c:	dc400117 	ldw	r17,4(sp)
10007650:	dc000017 	ldw	r16,0(sp)
10007654:	dec00404 	addi	sp,sp,16
10007658:	f800283a 	ret

1000765c <__sfp>:
1000765c:	defffb04 	addi	sp,sp,-20
10007660:	dc000015 	stw	r16,0(sp)
10007664:	04040074 	movhi	r16,4097
10007668:	8413b604 	addi	r16,r16,20184
1000766c:	dcc00315 	stw	r19,12(sp)
10007670:	2027883a 	mov	r19,r4
10007674:	81000017 	ldw	r4,0(r16)
10007678:	dfc00415 	stw	ra,16(sp)
1000767c:	dc800215 	stw	r18,8(sp)
10007680:	20800e17 	ldw	r2,56(r4)
10007684:	dc400115 	stw	r17,4(sp)
10007688:	1000021e 	bne	r2,zero,10007694 <__sfp+0x38>
1000768c:	00074400 	call	10007440 <__sinit.part.1>
10007690:	81000017 	ldw	r4,0(r16)
10007694:	2480b804 	addi	r18,r4,736
10007698:	047fffc4 	movi	r17,-1
1000769c:	91000117 	ldw	r4,4(r18)
100076a0:	94000217 	ldw	r16,8(r18)
100076a4:	213fffc4 	addi	r4,r4,-1
100076a8:	20000a16 	blt	r4,zero,100076d4 <__sfp+0x78>
100076ac:	8080030f 	ldh	r2,12(r16)
100076b0:	10000c26 	beq	r2,zero,100076e4 <__sfp+0x88>
100076b4:	80c01d04 	addi	r3,r16,116
100076b8:	00000206 	br	100076c4 <__sfp+0x68>
100076bc:	18bfe60f 	ldh	r2,-104(r3)
100076c0:	10000826 	beq	r2,zero,100076e4 <__sfp+0x88>
100076c4:	213fffc4 	addi	r4,r4,-1
100076c8:	1c3ffd04 	addi	r16,r3,-12
100076cc:	18c01a04 	addi	r3,r3,104
100076d0:	247ffa1e 	bne	r4,r17,100076bc <__alt_data_end+0xf80076bc>
100076d4:	90800017 	ldw	r2,0(r18)
100076d8:	10001d26 	beq	r2,zero,10007750 <__sfp+0xf4>
100076dc:	1025883a 	mov	r18,r2
100076e0:	003fee06 	br	1000769c <__alt_data_end+0xf800769c>
100076e4:	00bfffc4 	movi	r2,-1
100076e8:	8080038d 	sth	r2,14(r16)
100076ec:	00800044 	movi	r2,1
100076f0:	8080030d 	sth	r2,12(r16)
100076f4:	80001915 	stw	zero,100(r16)
100076f8:	80000015 	stw	zero,0(r16)
100076fc:	80000215 	stw	zero,8(r16)
10007700:	80000115 	stw	zero,4(r16)
10007704:	80000415 	stw	zero,16(r16)
10007708:	80000515 	stw	zero,20(r16)
1000770c:	80000615 	stw	zero,24(r16)
10007710:	01800204 	movi	r6,8
10007714:	000b883a 	mov	r5,zero
10007718:	81001704 	addi	r4,r16,92
1000771c:	000908c0 	call	1000908c <memset>
10007720:	8005883a 	mov	r2,r16
10007724:	80000c15 	stw	zero,48(r16)
10007728:	80000d15 	stw	zero,52(r16)
1000772c:	80001115 	stw	zero,68(r16)
10007730:	80001215 	stw	zero,72(r16)
10007734:	dfc00417 	ldw	ra,16(sp)
10007738:	dcc00317 	ldw	r19,12(sp)
1000773c:	dc800217 	ldw	r18,8(sp)
10007740:	dc400117 	ldw	r17,4(sp)
10007744:	dc000017 	ldw	r16,0(sp)
10007748:	dec00504 	addi	sp,sp,20
1000774c:	f800283a 	ret
10007750:	01400104 	movi	r5,4
10007754:	9809883a 	mov	r4,r19
10007758:	00075e40 	call	100075e4 <__sfmoreglue>
1000775c:	90800015 	stw	r2,0(r18)
10007760:	103fde1e 	bne	r2,zero,100076dc <__alt_data_end+0xf80076dc>
10007764:	00800304 	movi	r2,12
10007768:	98800015 	stw	r2,0(r19)
1000776c:	0005883a 	mov	r2,zero
10007770:	003ff006 	br	10007734 <__alt_data_end+0xf8007734>

10007774 <_cleanup>:
10007774:	00840074 	movhi	r2,4097
10007778:	1093b604 	addi	r2,r2,20184
1000777c:	11000017 	ldw	r4,0(r2)
10007780:	01440074 	movhi	r5,4097
10007784:	2970ce04 	addi	r5,r5,-15560
10007788:	000819c1 	jmpi	1000819c <_fwalk_reent>

1000778c <__sinit>:
1000778c:	20800e17 	ldw	r2,56(r4)
10007790:	10000126 	beq	r2,zero,10007798 <__sinit+0xc>
10007794:	f800283a 	ret
10007798:	00074401 	jmpi	10007440 <__sinit.part.1>

1000779c <__sfp_lock_acquire>:
1000779c:	f800283a 	ret

100077a0 <__sfp_lock_release>:
100077a0:	f800283a 	ret

100077a4 <__sinit_lock_acquire>:
100077a4:	f800283a 	ret

100077a8 <__sinit_lock_release>:
100077a8:	f800283a 	ret

100077ac <__fp_lock_all>:
100077ac:	00840074 	movhi	r2,4097
100077b0:	1093b704 	addi	r2,r2,20188
100077b4:	11000017 	ldw	r4,0(r2)
100077b8:	01440034 	movhi	r5,4096
100077bc:	295d7704 	addi	r5,r5,30172
100077c0:	00080d81 	jmpi	100080d8 <_fwalk>

100077c4 <__fp_unlock_all>:
100077c4:	00840074 	movhi	r2,4097
100077c8:	1093b704 	addi	r2,r2,20188
100077cc:	11000017 	ldw	r4,0(r2)
100077d0:	01440034 	movhi	r5,4096
100077d4:	295d0b04 	addi	r5,r5,29740
100077d8:	00080d81 	jmpi	100080d8 <_fwalk>

100077dc <_malloc_trim_r>:
100077dc:	defffb04 	addi	sp,sp,-20
100077e0:	dcc00315 	stw	r19,12(sp)
100077e4:	04c40074 	movhi	r19,4097
100077e8:	dc800215 	stw	r18,8(sp)
100077ec:	dc400115 	stw	r17,4(sp)
100077f0:	dc000015 	stw	r16,0(sp)
100077f4:	dfc00415 	stw	ra,16(sp)
100077f8:	2821883a 	mov	r16,r5
100077fc:	9cce3204 	addi	r19,r19,14536
10007800:	2025883a 	mov	r18,r4
10007804:	00106d00 	call	100106d0 <__malloc_lock>
10007808:	98800217 	ldw	r2,8(r19)
1000780c:	14400117 	ldw	r17,4(r2)
10007810:	00bfff04 	movi	r2,-4
10007814:	88a2703a 	and	r17,r17,r2
10007818:	8c21c83a 	sub	r16,r17,r16
1000781c:	8403fbc4 	addi	r16,r16,4079
10007820:	8020d33a 	srli	r16,r16,12
10007824:	0083ffc4 	movi	r2,4095
10007828:	843fffc4 	addi	r16,r16,-1
1000782c:	8020933a 	slli	r16,r16,12
10007830:	1400060e 	bge	r2,r16,1000784c <_malloc_trim_r+0x70>
10007834:	000b883a 	mov	r5,zero
10007838:	9009883a 	mov	r4,r18
1000783c:	000a8440 	call	1000a844 <_sbrk_r>
10007840:	98c00217 	ldw	r3,8(r19)
10007844:	1c47883a 	add	r3,r3,r17
10007848:	10c00a26 	beq	r2,r3,10007874 <_malloc_trim_r+0x98>
1000784c:	9009883a 	mov	r4,r18
10007850:	00106f40 	call	100106f4 <__malloc_unlock>
10007854:	0005883a 	mov	r2,zero
10007858:	dfc00417 	ldw	ra,16(sp)
1000785c:	dcc00317 	ldw	r19,12(sp)
10007860:	dc800217 	ldw	r18,8(sp)
10007864:	dc400117 	ldw	r17,4(sp)
10007868:	dc000017 	ldw	r16,0(sp)
1000786c:	dec00504 	addi	sp,sp,20
10007870:	f800283a 	ret
10007874:	040bc83a 	sub	r5,zero,r16
10007878:	9009883a 	mov	r4,r18
1000787c:	000a8440 	call	1000a844 <_sbrk_r>
10007880:	00ffffc4 	movi	r3,-1
10007884:	10c00d26 	beq	r2,r3,100078bc <_malloc_trim_r+0xe0>
10007888:	00c40074 	movhi	r3,4097
1000788c:	18da9004 	addi	r3,r3,27200
10007890:	18800017 	ldw	r2,0(r3)
10007894:	99000217 	ldw	r4,8(r19)
10007898:	8c23c83a 	sub	r17,r17,r16
1000789c:	8c400054 	ori	r17,r17,1
100078a0:	1421c83a 	sub	r16,r2,r16
100078a4:	24400115 	stw	r17,4(r4)
100078a8:	9009883a 	mov	r4,r18
100078ac:	1c000015 	stw	r16,0(r3)
100078b0:	00106f40 	call	100106f4 <__malloc_unlock>
100078b4:	00800044 	movi	r2,1
100078b8:	003fe706 	br	10007858 <__alt_data_end+0xf8007858>
100078bc:	000b883a 	mov	r5,zero
100078c0:	9009883a 	mov	r4,r18
100078c4:	000a8440 	call	1000a844 <_sbrk_r>
100078c8:	99000217 	ldw	r4,8(r19)
100078cc:	014003c4 	movi	r5,15
100078d0:	1107c83a 	sub	r3,r2,r4
100078d4:	28ffdd0e 	bge	r5,r3,1000784c <__alt_data_end+0xf800784c>
100078d8:	01440074 	movhi	r5,4097
100078dc:	2953b904 	addi	r5,r5,20196
100078e0:	29400017 	ldw	r5,0(r5)
100078e4:	18c00054 	ori	r3,r3,1
100078e8:	20c00115 	stw	r3,4(r4)
100078ec:	00c40074 	movhi	r3,4097
100078f0:	1145c83a 	sub	r2,r2,r5
100078f4:	18da9004 	addi	r3,r3,27200
100078f8:	18800015 	stw	r2,0(r3)
100078fc:	003fd306 	br	1000784c <__alt_data_end+0xf800784c>

10007900 <_free_r>:
10007900:	28004126 	beq	r5,zero,10007a08 <_free_r+0x108>
10007904:	defffd04 	addi	sp,sp,-12
10007908:	dc400115 	stw	r17,4(sp)
1000790c:	dc000015 	stw	r16,0(sp)
10007910:	2023883a 	mov	r17,r4
10007914:	2821883a 	mov	r16,r5
10007918:	dfc00215 	stw	ra,8(sp)
1000791c:	00106d00 	call	100106d0 <__malloc_lock>
10007920:	81ffff17 	ldw	r7,-4(r16)
10007924:	00bfff84 	movi	r2,-2
10007928:	01040074 	movhi	r4,4097
1000792c:	81bffe04 	addi	r6,r16,-8
10007930:	3884703a 	and	r2,r7,r2
10007934:	210e3204 	addi	r4,r4,14536
10007938:	308b883a 	add	r5,r6,r2
1000793c:	2a400117 	ldw	r9,4(r5)
10007940:	22000217 	ldw	r8,8(r4)
10007944:	00ffff04 	movi	r3,-4
10007948:	48c6703a 	and	r3,r9,r3
1000794c:	2a005726 	beq	r5,r8,10007aac <_free_r+0x1ac>
10007950:	28c00115 	stw	r3,4(r5)
10007954:	39c0004c 	andi	r7,r7,1
10007958:	3800091e 	bne	r7,zero,10007980 <_free_r+0x80>
1000795c:	823ffe17 	ldw	r8,-8(r16)
10007960:	22400204 	addi	r9,r4,8
10007964:	320dc83a 	sub	r6,r6,r8
10007968:	31c00217 	ldw	r7,8(r6)
1000796c:	1205883a 	add	r2,r2,r8
10007970:	3a406526 	beq	r7,r9,10007b08 <_free_r+0x208>
10007974:	32000317 	ldw	r8,12(r6)
10007978:	3a000315 	stw	r8,12(r7)
1000797c:	41c00215 	stw	r7,8(r8)
10007980:	28cf883a 	add	r7,r5,r3
10007984:	39c00117 	ldw	r7,4(r7)
10007988:	39c0004c 	andi	r7,r7,1
1000798c:	38003a26 	beq	r7,zero,10007a78 <_free_r+0x178>
10007990:	10c00054 	ori	r3,r2,1
10007994:	30c00115 	stw	r3,4(r6)
10007998:	3087883a 	add	r3,r6,r2
1000799c:	18800015 	stw	r2,0(r3)
100079a0:	00c07fc4 	movi	r3,511
100079a4:	18801936 	bltu	r3,r2,10007a0c <_free_r+0x10c>
100079a8:	1004d0fa 	srli	r2,r2,3
100079ac:	01c00044 	movi	r7,1
100079b0:	21400117 	ldw	r5,4(r4)
100079b4:	10c00044 	addi	r3,r2,1
100079b8:	18c7883a 	add	r3,r3,r3
100079bc:	1005d0ba 	srai	r2,r2,2
100079c0:	18c7883a 	add	r3,r3,r3
100079c4:	18c7883a 	add	r3,r3,r3
100079c8:	1907883a 	add	r3,r3,r4
100079cc:	3884983a 	sll	r2,r7,r2
100079d0:	19c00017 	ldw	r7,0(r3)
100079d4:	1a3ffe04 	addi	r8,r3,-8
100079d8:	1144b03a 	or	r2,r2,r5
100079dc:	32000315 	stw	r8,12(r6)
100079e0:	31c00215 	stw	r7,8(r6)
100079e4:	20800115 	stw	r2,4(r4)
100079e8:	19800015 	stw	r6,0(r3)
100079ec:	39800315 	stw	r6,12(r7)
100079f0:	8809883a 	mov	r4,r17
100079f4:	dfc00217 	ldw	ra,8(sp)
100079f8:	dc400117 	ldw	r17,4(sp)
100079fc:	dc000017 	ldw	r16,0(sp)
10007a00:	dec00304 	addi	sp,sp,12
10007a04:	00106f41 	jmpi	100106f4 <__malloc_unlock>
10007a08:	f800283a 	ret
10007a0c:	100ad27a 	srli	r5,r2,9
10007a10:	00c00104 	movi	r3,4
10007a14:	19404a36 	bltu	r3,r5,10007b40 <_free_r+0x240>
10007a18:	100ad1ba 	srli	r5,r2,6
10007a1c:	28c00e44 	addi	r3,r5,57
10007a20:	18c7883a 	add	r3,r3,r3
10007a24:	29400e04 	addi	r5,r5,56
10007a28:	18c7883a 	add	r3,r3,r3
10007a2c:	18c7883a 	add	r3,r3,r3
10007a30:	1909883a 	add	r4,r3,r4
10007a34:	20c00017 	ldw	r3,0(r4)
10007a38:	01c40074 	movhi	r7,4097
10007a3c:	213ffe04 	addi	r4,r4,-8
10007a40:	39ce3204 	addi	r7,r7,14536
10007a44:	20c04426 	beq	r4,r3,10007b58 <_free_r+0x258>
10007a48:	01ffff04 	movi	r7,-4
10007a4c:	19400117 	ldw	r5,4(r3)
10007a50:	29ca703a 	and	r5,r5,r7
10007a54:	1140022e 	bgeu	r2,r5,10007a60 <_free_r+0x160>
10007a58:	18c00217 	ldw	r3,8(r3)
10007a5c:	20fffb1e 	bne	r4,r3,10007a4c <__alt_data_end+0xf8007a4c>
10007a60:	19000317 	ldw	r4,12(r3)
10007a64:	31000315 	stw	r4,12(r6)
10007a68:	30c00215 	stw	r3,8(r6)
10007a6c:	21800215 	stw	r6,8(r4)
10007a70:	19800315 	stw	r6,12(r3)
10007a74:	003fde06 	br	100079f0 <__alt_data_end+0xf80079f0>
10007a78:	29c00217 	ldw	r7,8(r5)
10007a7c:	10c5883a 	add	r2,r2,r3
10007a80:	00c40074 	movhi	r3,4097
10007a84:	18ce3404 	addi	r3,r3,14544
10007a88:	38c03b26 	beq	r7,r3,10007b78 <_free_r+0x278>
10007a8c:	2a000317 	ldw	r8,12(r5)
10007a90:	11400054 	ori	r5,r2,1
10007a94:	3087883a 	add	r3,r6,r2
10007a98:	3a000315 	stw	r8,12(r7)
10007a9c:	41c00215 	stw	r7,8(r8)
10007aa0:	31400115 	stw	r5,4(r6)
10007aa4:	18800015 	stw	r2,0(r3)
10007aa8:	003fbd06 	br	100079a0 <__alt_data_end+0xf80079a0>
10007aac:	39c0004c 	andi	r7,r7,1
10007ab0:	10c5883a 	add	r2,r2,r3
10007ab4:	3800071e 	bne	r7,zero,10007ad4 <_free_r+0x1d4>
10007ab8:	81fffe17 	ldw	r7,-8(r16)
10007abc:	31cdc83a 	sub	r6,r6,r7
10007ac0:	30c00317 	ldw	r3,12(r6)
10007ac4:	31400217 	ldw	r5,8(r6)
10007ac8:	11c5883a 	add	r2,r2,r7
10007acc:	28c00315 	stw	r3,12(r5)
10007ad0:	19400215 	stw	r5,8(r3)
10007ad4:	10c00054 	ori	r3,r2,1
10007ad8:	30c00115 	stw	r3,4(r6)
10007adc:	00c40074 	movhi	r3,4097
10007ae0:	18d3ba04 	addi	r3,r3,20200
10007ae4:	18c00017 	ldw	r3,0(r3)
10007ae8:	21800215 	stw	r6,8(r4)
10007aec:	10ffc036 	bltu	r2,r3,100079f0 <__alt_data_end+0xf80079f0>
10007af0:	00840074 	movhi	r2,4097
10007af4:	109a8704 	addi	r2,r2,27164
10007af8:	11400017 	ldw	r5,0(r2)
10007afc:	8809883a 	mov	r4,r17
10007b00:	00077dc0 	call	100077dc <_malloc_trim_r>
10007b04:	003fba06 	br	100079f0 <__alt_data_end+0xf80079f0>
10007b08:	28c9883a 	add	r4,r5,r3
10007b0c:	21000117 	ldw	r4,4(r4)
10007b10:	2100004c 	andi	r4,r4,1
10007b14:	2000391e 	bne	r4,zero,10007bfc <_free_r+0x2fc>
10007b18:	29c00217 	ldw	r7,8(r5)
10007b1c:	29000317 	ldw	r4,12(r5)
10007b20:	1885883a 	add	r2,r3,r2
10007b24:	10c00054 	ori	r3,r2,1
10007b28:	39000315 	stw	r4,12(r7)
10007b2c:	21c00215 	stw	r7,8(r4)
10007b30:	30c00115 	stw	r3,4(r6)
10007b34:	308d883a 	add	r6,r6,r2
10007b38:	30800015 	stw	r2,0(r6)
10007b3c:	003fac06 	br	100079f0 <__alt_data_end+0xf80079f0>
10007b40:	00c00504 	movi	r3,20
10007b44:	19401536 	bltu	r3,r5,10007b9c <_free_r+0x29c>
10007b48:	28c01704 	addi	r3,r5,92
10007b4c:	18c7883a 	add	r3,r3,r3
10007b50:	294016c4 	addi	r5,r5,91
10007b54:	003fb406 	br	10007a28 <__alt_data_end+0xf8007a28>
10007b58:	280bd0ba 	srai	r5,r5,2
10007b5c:	00c00044 	movi	r3,1
10007b60:	38800117 	ldw	r2,4(r7)
10007b64:	194a983a 	sll	r5,r3,r5
10007b68:	2007883a 	mov	r3,r4
10007b6c:	2884b03a 	or	r2,r5,r2
10007b70:	38800115 	stw	r2,4(r7)
10007b74:	003fbb06 	br	10007a64 <__alt_data_end+0xf8007a64>
10007b78:	21800515 	stw	r6,20(r4)
10007b7c:	21800415 	stw	r6,16(r4)
10007b80:	10c00054 	ori	r3,r2,1
10007b84:	31c00315 	stw	r7,12(r6)
10007b88:	31c00215 	stw	r7,8(r6)
10007b8c:	30c00115 	stw	r3,4(r6)
10007b90:	308d883a 	add	r6,r6,r2
10007b94:	30800015 	stw	r2,0(r6)
10007b98:	003f9506 	br	100079f0 <__alt_data_end+0xf80079f0>
10007b9c:	00c01504 	movi	r3,84
10007ba0:	19400536 	bltu	r3,r5,10007bb8 <_free_r+0x2b8>
10007ba4:	100ad33a 	srli	r5,r2,12
10007ba8:	28c01bc4 	addi	r3,r5,111
10007bac:	18c7883a 	add	r3,r3,r3
10007bb0:	29401b84 	addi	r5,r5,110
10007bb4:	003f9c06 	br	10007a28 <__alt_data_end+0xf8007a28>
10007bb8:	00c05504 	movi	r3,340
10007bbc:	19400536 	bltu	r3,r5,10007bd4 <_free_r+0x2d4>
10007bc0:	100ad3fa 	srli	r5,r2,15
10007bc4:	28c01e04 	addi	r3,r5,120
10007bc8:	18c7883a 	add	r3,r3,r3
10007bcc:	29401dc4 	addi	r5,r5,119
10007bd0:	003f9506 	br	10007a28 <__alt_data_end+0xf8007a28>
10007bd4:	00c15504 	movi	r3,1364
10007bd8:	19400536 	bltu	r3,r5,10007bf0 <_free_r+0x2f0>
10007bdc:	100ad4ba 	srli	r5,r2,18
10007be0:	28c01f44 	addi	r3,r5,125
10007be4:	18c7883a 	add	r3,r3,r3
10007be8:	29401f04 	addi	r5,r5,124
10007bec:	003f8e06 	br	10007a28 <__alt_data_end+0xf8007a28>
10007bf0:	00c03f84 	movi	r3,254
10007bf4:	01401f84 	movi	r5,126
10007bf8:	003f8b06 	br	10007a28 <__alt_data_end+0xf8007a28>
10007bfc:	10c00054 	ori	r3,r2,1
10007c00:	30c00115 	stw	r3,4(r6)
10007c04:	308d883a 	add	r6,r6,r2
10007c08:	30800015 	stw	r2,0(r6)
10007c0c:	003f7806 	br	100079f0 <__alt_data_end+0xf80079f0>

10007c10 <__sfvwrite_r>:
10007c10:	30800217 	ldw	r2,8(r6)
10007c14:	10006726 	beq	r2,zero,10007db4 <__sfvwrite_r+0x1a4>
10007c18:	28c0030b 	ldhu	r3,12(r5)
10007c1c:	defff404 	addi	sp,sp,-48
10007c20:	dd400715 	stw	r21,28(sp)
10007c24:	dd000615 	stw	r20,24(sp)
10007c28:	dc000215 	stw	r16,8(sp)
10007c2c:	dfc00b15 	stw	ra,44(sp)
10007c30:	df000a15 	stw	fp,40(sp)
10007c34:	ddc00915 	stw	r23,36(sp)
10007c38:	dd800815 	stw	r22,32(sp)
10007c3c:	dcc00515 	stw	r19,20(sp)
10007c40:	dc800415 	stw	r18,16(sp)
10007c44:	dc400315 	stw	r17,12(sp)
10007c48:	1880020c 	andi	r2,r3,8
10007c4c:	2821883a 	mov	r16,r5
10007c50:	202b883a 	mov	r21,r4
10007c54:	3029883a 	mov	r20,r6
10007c58:	10002726 	beq	r2,zero,10007cf8 <__sfvwrite_r+0xe8>
10007c5c:	28800417 	ldw	r2,16(r5)
10007c60:	10002526 	beq	r2,zero,10007cf8 <__sfvwrite_r+0xe8>
10007c64:	1880008c 	andi	r2,r3,2
10007c68:	a4400017 	ldw	r17,0(r20)
10007c6c:	10002a26 	beq	r2,zero,10007d18 <__sfvwrite_r+0x108>
10007c70:	05a00034 	movhi	r22,32768
10007c74:	0027883a 	mov	r19,zero
10007c78:	0025883a 	mov	r18,zero
10007c7c:	b5bf0004 	addi	r22,r22,-1024
10007c80:	980d883a 	mov	r6,r19
10007c84:	a809883a 	mov	r4,r21
10007c88:	90004626 	beq	r18,zero,10007da4 <__sfvwrite_r+0x194>
10007c8c:	900f883a 	mov	r7,r18
10007c90:	b480022e 	bgeu	r22,r18,10007c9c <__sfvwrite_r+0x8c>
10007c94:	01e00034 	movhi	r7,32768
10007c98:	39ff0004 	addi	r7,r7,-1024
10007c9c:	80800917 	ldw	r2,36(r16)
10007ca0:	81400717 	ldw	r5,28(r16)
10007ca4:	103ee83a 	callr	r2
10007ca8:	00805a0e 	bge	zero,r2,10007e14 <__sfvwrite_r+0x204>
10007cac:	a0c00217 	ldw	r3,8(r20)
10007cb0:	98a7883a 	add	r19,r19,r2
10007cb4:	90a5c83a 	sub	r18,r18,r2
10007cb8:	1885c83a 	sub	r2,r3,r2
10007cbc:	a0800215 	stw	r2,8(r20)
10007cc0:	103fef1e 	bne	r2,zero,10007c80 <__alt_data_end+0xf8007c80>
10007cc4:	0005883a 	mov	r2,zero
10007cc8:	dfc00b17 	ldw	ra,44(sp)
10007ccc:	df000a17 	ldw	fp,40(sp)
10007cd0:	ddc00917 	ldw	r23,36(sp)
10007cd4:	dd800817 	ldw	r22,32(sp)
10007cd8:	dd400717 	ldw	r21,28(sp)
10007cdc:	dd000617 	ldw	r20,24(sp)
10007ce0:	dcc00517 	ldw	r19,20(sp)
10007ce4:	dc800417 	ldw	r18,16(sp)
10007ce8:	dc400317 	ldw	r17,12(sp)
10007cec:	dc000217 	ldw	r16,8(sp)
10007cf0:	dec00c04 	addi	sp,sp,48
10007cf4:	f800283a 	ret
10007cf8:	800b883a 	mov	r5,r16
10007cfc:	a809883a 	mov	r4,r21
10007d00:	00057800 	call	10005780 <__swsetup_r>
10007d04:	1000ee1e 	bne	r2,zero,100080c0 <__sfvwrite_r+0x4b0>
10007d08:	80c0030b 	ldhu	r3,12(r16)
10007d0c:	a4400017 	ldw	r17,0(r20)
10007d10:	1880008c 	andi	r2,r3,2
10007d14:	103fd61e 	bne	r2,zero,10007c70 <__alt_data_end+0xf8007c70>
10007d18:	1880004c 	andi	r2,r3,1
10007d1c:	1000421e 	bne	r2,zero,10007e28 <__sfvwrite_r+0x218>
10007d20:	0039883a 	mov	fp,zero
10007d24:	0025883a 	mov	r18,zero
10007d28:	90001a26 	beq	r18,zero,10007d94 <__sfvwrite_r+0x184>
10007d2c:	1880800c 	andi	r2,r3,512
10007d30:	84c00217 	ldw	r19,8(r16)
10007d34:	10002126 	beq	r2,zero,10007dbc <__sfvwrite_r+0x1ac>
10007d38:	982f883a 	mov	r23,r19
10007d3c:	94c09636 	bltu	r18,r19,10007f98 <__sfvwrite_r+0x388>
10007d40:	1881200c 	andi	r2,r3,1152
10007d44:	1000a11e 	bne	r2,zero,10007fcc <__sfvwrite_r+0x3bc>
10007d48:	81000017 	ldw	r4,0(r16)
10007d4c:	b80d883a 	mov	r6,r23
10007d50:	e00b883a 	mov	r5,fp
10007d54:	0008f300 	call	10008f30 <memmove>
10007d58:	80c00217 	ldw	r3,8(r16)
10007d5c:	81000017 	ldw	r4,0(r16)
10007d60:	9005883a 	mov	r2,r18
10007d64:	1ce7c83a 	sub	r19,r3,r19
10007d68:	25cf883a 	add	r7,r4,r23
10007d6c:	84c00215 	stw	r19,8(r16)
10007d70:	81c00015 	stw	r7,0(r16)
10007d74:	a0c00217 	ldw	r3,8(r20)
10007d78:	e0b9883a 	add	fp,fp,r2
10007d7c:	90a5c83a 	sub	r18,r18,r2
10007d80:	18a7c83a 	sub	r19,r3,r2
10007d84:	a4c00215 	stw	r19,8(r20)
10007d88:	983fce26 	beq	r19,zero,10007cc4 <__alt_data_end+0xf8007cc4>
10007d8c:	80c0030b 	ldhu	r3,12(r16)
10007d90:	903fe61e 	bne	r18,zero,10007d2c <__alt_data_end+0xf8007d2c>
10007d94:	8f000017 	ldw	fp,0(r17)
10007d98:	8c800117 	ldw	r18,4(r17)
10007d9c:	8c400204 	addi	r17,r17,8
10007da0:	003fe106 	br	10007d28 <__alt_data_end+0xf8007d28>
10007da4:	8cc00017 	ldw	r19,0(r17)
10007da8:	8c800117 	ldw	r18,4(r17)
10007dac:	8c400204 	addi	r17,r17,8
10007db0:	003fb306 	br	10007c80 <__alt_data_end+0xf8007c80>
10007db4:	0005883a 	mov	r2,zero
10007db8:	f800283a 	ret
10007dbc:	81000017 	ldw	r4,0(r16)
10007dc0:	80800417 	ldw	r2,16(r16)
10007dc4:	11005a36 	bltu	r2,r4,10007f30 <__sfvwrite_r+0x320>
10007dc8:	85c00517 	ldw	r23,20(r16)
10007dcc:	95c05836 	bltu	r18,r23,10007f30 <__sfvwrite_r+0x320>
10007dd0:	00a00034 	movhi	r2,32768
10007dd4:	10bfffc4 	addi	r2,r2,-1
10007dd8:	9009883a 	mov	r4,r18
10007ddc:	1480012e 	bgeu	r2,r18,10007de4 <__sfvwrite_r+0x1d4>
10007de0:	1009883a 	mov	r4,r2
10007de4:	b80b883a 	mov	r5,r23
10007de8:	000d6b40 	call	1000d6b4 <__divsi3>
10007dec:	b80b883a 	mov	r5,r23
10007df0:	1009883a 	mov	r4,r2
10007df4:	000d8680 	call	1000d868 <__mulsi3>
10007df8:	81400717 	ldw	r5,28(r16)
10007dfc:	80c00917 	ldw	r3,36(r16)
10007e00:	100f883a 	mov	r7,r2
10007e04:	e00d883a 	mov	r6,fp
10007e08:	a809883a 	mov	r4,r21
10007e0c:	183ee83a 	callr	r3
10007e10:	00bfd816 	blt	zero,r2,10007d74 <__alt_data_end+0xf8007d74>
10007e14:	8080030b 	ldhu	r2,12(r16)
10007e18:	10801014 	ori	r2,r2,64
10007e1c:	8080030d 	sth	r2,12(r16)
10007e20:	00bfffc4 	movi	r2,-1
10007e24:	003fa806 	br	10007cc8 <__alt_data_end+0xf8007cc8>
10007e28:	0027883a 	mov	r19,zero
10007e2c:	0011883a 	mov	r8,zero
10007e30:	0039883a 	mov	fp,zero
10007e34:	0025883a 	mov	r18,zero
10007e38:	90001f26 	beq	r18,zero,10007eb8 <__sfvwrite_r+0x2a8>
10007e3c:	40005a26 	beq	r8,zero,10007fa8 <__sfvwrite_r+0x398>
10007e40:	982d883a 	mov	r22,r19
10007e44:	94c0012e 	bgeu	r18,r19,10007e4c <__sfvwrite_r+0x23c>
10007e48:	902d883a 	mov	r22,r18
10007e4c:	81000017 	ldw	r4,0(r16)
10007e50:	80800417 	ldw	r2,16(r16)
10007e54:	b02f883a 	mov	r23,r22
10007e58:	81c00517 	ldw	r7,20(r16)
10007e5c:	1100032e 	bgeu	r2,r4,10007e6c <__sfvwrite_r+0x25c>
10007e60:	80c00217 	ldw	r3,8(r16)
10007e64:	38c7883a 	add	r3,r7,r3
10007e68:	1d801816 	blt	r3,r22,10007ecc <__sfvwrite_r+0x2bc>
10007e6c:	b1c03e16 	blt	r22,r7,10007f68 <__sfvwrite_r+0x358>
10007e70:	80800917 	ldw	r2,36(r16)
10007e74:	81400717 	ldw	r5,28(r16)
10007e78:	e00d883a 	mov	r6,fp
10007e7c:	da000115 	stw	r8,4(sp)
10007e80:	a809883a 	mov	r4,r21
10007e84:	103ee83a 	callr	r2
10007e88:	102f883a 	mov	r23,r2
10007e8c:	da000117 	ldw	r8,4(sp)
10007e90:	00bfe00e 	bge	zero,r2,10007e14 <__alt_data_end+0xf8007e14>
10007e94:	9de7c83a 	sub	r19,r19,r23
10007e98:	98001f26 	beq	r19,zero,10007f18 <__sfvwrite_r+0x308>
10007e9c:	a0800217 	ldw	r2,8(r20)
10007ea0:	e5f9883a 	add	fp,fp,r23
10007ea4:	95e5c83a 	sub	r18,r18,r23
10007ea8:	15efc83a 	sub	r23,r2,r23
10007eac:	a5c00215 	stw	r23,8(r20)
10007eb0:	b83f8426 	beq	r23,zero,10007cc4 <__alt_data_end+0xf8007cc4>
10007eb4:	903fe11e 	bne	r18,zero,10007e3c <__alt_data_end+0xf8007e3c>
10007eb8:	8f000017 	ldw	fp,0(r17)
10007ebc:	8c800117 	ldw	r18,4(r17)
10007ec0:	0011883a 	mov	r8,zero
10007ec4:	8c400204 	addi	r17,r17,8
10007ec8:	003fdb06 	br	10007e38 <__alt_data_end+0xf8007e38>
10007ecc:	180d883a 	mov	r6,r3
10007ed0:	e00b883a 	mov	r5,fp
10007ed4:	da000115 	stw	r8,4(sp)
10007ed8:	d8c00015 	stw	r3,0(sp)
10007edc:	0008f300 	call	10008f30 <memmove>
10007ee0:	d8c00017 	ldw	r3,0(sp)
10007ee4:	80800017 	ldw	r2,0(r16)
10007ee8:	800b883a 	mov	r5,r16
10007eec:	a809883a 	mov	r4,r21
10007ef0:	10c5883a 	add	r2,r2,r3
10007ef4:	80800015 	stw	r2,0(r16)
10007ef8:	d8c00015 	stw	r3,0(sp)
10007efc:	00073a00 	call	100073a0 <_fflush_r>
10007f00:	d8c00017 	ldw	r3,0(sp)
10007f04:	da000117 	ldw	r8,4(sp)
10007f08:	103fc21e 	bne	r2,zero,10007e14 <__alt_data_end+0xf8007e14>
10007f0c:	182f883a 	mov	r23,r3
10007f10:	9de7c83a 	sub	r19,r19,r23
10007f14:	983fe11e 	bne	r19,zero,10007e9c <__alt_data_end+0xf8007e9c>
10007f18:	800b883a 	mov	r5,r16
10007f1c:	a809883a 	mov	r4,r21
10007f20:	00073a00 	call	100073a0 <_fflush_r>
10007f24:	103fbb1e 	bne	r2,zero,10007e14 <__alt_data_end+0xf8007e14>
10007f28:	0011883a 	mov	r8,zero
10007f2c:	003fdb06 	br	10007e9c <__alt_data_end+0xf8007e9c>
10007f30:	94c0012e 	bgeu	r18,r19,10007f38 <__sfvwrite_r+0x328>
10007f34:	9027883a 	mov	r19,r18
10007f38:	980d883a 	mov	r6,r19
10007f3c:	e00b883a 	mov	r5,fp
10007f40:	0008f300 	call	10008f30 <memmove>
10007f44:	80800217 	ldw	r2,8(r16)
10007f48:	80c00017 	ldw	r3,0(r16)
10007f4c:	14c5c83a 	sub	r2,r2,r19
10007f50:	1cc7883a 	add	r3,r3,r19
10007f54:	80800215 	stw	r2,8(r16)
10007f58:	80c00015 	stw	r3,0(r16)
10007f5c:	10004326 	beq	r2,zero,1000806c <__sfvwrite_r+0x45c>
10007f60:	9805883a 	mov	r2,r19
10007f64:	003f8306 	br	10007d74 <__alt_data_end+0xf8007d74>
10007f68:	b00d883a 	mov	r6,r22
10007f6c:	e00b883a 	mov	r5,fp
10007f70:	da000115 	stw	r8,4(sp)
10007f74:	0008f300 	call	10008f30 <memmove>
10007f78:	80800217 	ldw	r2,8(r16)
10007f7c:	80c00017 	ldw	r3,0(r16)
10007f80:	da000117 	ldw	r8,4(sp)
10007f84:	1585c83a 	sub	r2,r2,r22
10007f88:	1dad883a 	add	r22,r3,r22
10007f8c:	80800215 	stw	r2,8(r16)
10007f90:	85800015 	stw	r22,0(r16)
10007f94:	003fbf06 	br	10007e94 <__alt_data_end+0xf8007e94>
10007f98:	81000017 	ldw	r4,0(r16)
10007f9c:	9027883a 	mov	r19,r18
10007fa0:	902f883a 	mov	r23,r18
10007fa4:	003f6906 	br	10007d4c <__alt_data_end+0xf8007d4c>
10007fa8:	900d883a 	mov	r6,r18
10007fac:	01400284 	movi	r5,10
10007fb0:	e009883a 	mov	r4,fp
10007fb4:	0008d040 	call	10008d04 <memchr>
10007fb8:	10003e26 	beq	r2,zero,100080b4 <__sfvwrite_r+0x4a4>
10007fbc:	10800044 	addi	r2,r2,1
10007fc0:	1727c83a 	sub	r19,r2,fp
10007fc4:	02000044 	movi	r8,1
10007fc8:	003f9d06 	br	10007e40 <__alt_data_end+0xf8007e40>
10007fcc:	80800517 	ldw	r2,20(r16)
10007fd0:	81400417 	ldw	r5,16(r16)
10007fd4:	81c00017 	ldw	r7,0(r16)
10007fd8:	10a7883a 	add	r19,r2,r2
10007fdc:	9885883a 	add	r2,r19,r2
10007fe0:	1026d7fa 	srli	r19,r2,31
10007fe4:	396dc83a 	sub	r22,r7,r5
10007fe8:	b1000044 	addi	r4,r22,1
10007fec:	9885883a 	add	r2,r19,r2
10007ff0:	1027d07a 	srai	r19,r2,1
10007ff4:	2485883a 	add	r2,r4,r18
10007ff8:	980d883a 	mov	r6,r19
10007ffc:	9880022e 	bgeu	r19,r2,10008008 <__sfvwrite_r+0x3f8>
10008000:	1027883a 	mov	r19,r2
10008004:	100d883a 	mov	r6,r2
10008008:	18c1000c 	andi	r3,r3,1024
1000800c:	18001c26 	beq	r3,zero,10008080 <__sfvwrite_r+0x470>
10008010:	300b883a 	mov	r5,r6
10008014:	a809883a 	mov	r4,r21
10008018:	00084f80 	call	100084f8 <_malloc_r>
1000801c:	102f883a 	mov	r23,r2
10008020:	10002926 	beq	r2,zero,100080c8 <__sfvwrite_r+0x4b8>
10008024:	81400417 	ldw	r5,16(r16)
10008028:	b00d883a 	mov	r6,r22
1000802c:	1009883a 	mov	r4,r2
10008030:	0008de80 	call	10008de8 <memcpy>
10008034:	8080030b 	ldhu	r2,12(r16)
10008038:	00fedfc4 	movi	r3,-1153
1000803c:	10c4703a 	and	r2,r2,r3
10008040:	10802014 	ori	r2,r2,128
10008044:	8080030d 	sth	r2,12(r16)
10008048:	bd89883a 	add	r4,r23,r22
1000804c:	9d8fc83a 	sub	r7,r19,r22
10008050:	85c00415 	stw	r23,16(r16)
10008054:	84c00515 	stw	r19,20(r16)
10008058:	81000015 	stw	r4,0(r16)
1000805c:	9027883a 	mov	r19,r18
10008060:	81c00215 	stw	r7,8(r16)
10008064:	902f883a 	mov	r23,r18
10008068:	003f3806 	br	10007d4c <__alt_data_end+0xf8007d4c>
1000806c:	800b883a 	mov	r5,r16
10008070:	a809883a 	mov	r4,r21
10008074:	00073a00 	call	100073a0 <_fflush_r>
10008078:	103fb926 	beq	r2,zero,10007f60 <__alt_data_end+0xf8007f60>
1000807c:	003f6506 	br	10007e14 <__alt_data_end+0xf8007e14>
10008080:	a809883a 	mov	r4,r21
10008084:	000a26c0 	call	1000a26c <_realloc_r>
10008088:	102f883a 	mov	r23,r2
1000808c:	103fee1e 	bne	r2,zero,10008048 <__alt_data_end+0xf8008048>
10008090:	81400417 	ldw	r5,16(r16)
10008094:	a809883a 	mov	r4,r21
10008098:	00079000 	call	10007900 <_free_r>
1000809c:	8080030b 	ldhu	r2,12(r16)
100080a0:	00ffdfc4 	movi	r3,-129
100080a4:	1884703a 	and	r2,r3,r2
100080a8:	00c00304 	movi	r3,12
100080ac:	a8c00015 	stw	r3,0(r21)
100080b0:	003f5906 	br	10007e18 <__alt_data_end+0xf8007e18>
100080b4:	94c00044 	addi	r19,r18,1
100080b8:	02000044 	movi	r8,1
100080bc:	003f6006 	br	10007e40 <__alt_data_end+0xf8007e40>
100080c0:	00bfffc4 	movi	r2,-1
100080c4:	003f0006 	br	10007cc8 <__alt_data_end+0xf8007cc8>
100080c8:	00800304 	movi	r2,12
100080cc:	a8800015 	stw	r2,0(r21)
100080d0:	8080030b 	ldhu	r2,12(r16)
100080d4:	003f5006 	br	10007e18 <__alt_data_end+0xf8007e18>

100080d8 <_fwalk>:
100080d8:	defff704 	addi	sp,sp,-36
100080dc:	dd000415 	stw	r20,16(sp)
100080e0:	dfc00815 	stw	ra,32(sp)
100080e4:	ddc00715 	stw	r23,28(sp)
100080e8:	dd800615 	stw	r22,24(sp)
100080ec:	dd400515 	stw	r21,20(sp)
100080f0:	dcc00315 	stw	r19,12(sp)
100080f4:	dc800215 	stw	r18,8(sp)
100080f8:	dc400115 	stw	r17,4(sp)
100080fc:	dc000015 	stw	r16,0(sp)
10008100:	2500b804 	addi	r20,r4,736
10008104:	a0002326 	beq	r20,zero,10008194 <_fwalk+0xbc>
10008108:	282b883a 	mov	r21,r5
1000810c:	002f883a 	mov	r23,zero
10008110:	05800044 	movi	r22,1
10008114:	04ffffc4 	movi	r19,-1
10008118:	a4400117 	ldw	r17,4(r20)
1000811c:	a4800217 	ldw	r18,8(r20)
10008120:	8c7fffc4 	addi	r17,r17,-1
10008124:	88000d16 	blt	r17,zero,1000815c <_fwalk+0x84>
10008128:	94000304 	addi	r16,r18,12
1000812c:	94800384 	addi	r18,r18,14
10008130:	8080000b 	ldhu	r2,0(r16)
10008134:	8c7fffc4 	addi	r17,r17,-1
10008138:	813ffd04 	addi	r4,r16,-12
1000813c:	b080042e 	bgeu	r22,r2,10008150 <_fwalk+0x78>
10008140:	9080000f 	ldh	r2,0(r18)
10008144:	14c00226 	beq	r2,r19,10008150 <_fwalk+0x78>
10008148:	a83ee83a 	callr	r21
1000814c:	b8aeb03a 	or	r23,r23,r2
10008150:	84001a04 	addi	r16,r16,104
10008154:	94801a04 	addi	r18,r18,104
10008158:	8cfff51e 	bne	r17,r19,10008130 <__alt_data_end+0xf8008130>
1000815c:	a5000017 	ldw	r20,0(r20)
10008160:	a03fed1e 	bne	r20,zero,10008118 <__alt_data_end+0xf8008118>
10008164:	b805883a 	mov	r2,r23
10008168:	dfc00817 	ldw	ra,32(sp)
1000816c:	ddc00717 	ldw	r23,28(sp)
10008170:	dd800617 	ldw	r22,24(sp)
10008174:	dd400517 	ldw	r21,20(sp)
10008178:	dd000417 	ldw	r20,16(sp)
1000817c:	dcc00317 	ldw	r19,12(sp)
10008180:	dc800217 	ldw	r18,8(sp)
10008184:	dc400117 	ldw	r17,4(sp)
10008188:	dc000017 	ldw	r16,0(sp)
1000818c:	dec00904 	addi	sp,sp,36
10008190:	f800283a 	ret
10008194:	002f883a 	mov	r23,zero
10008198:	003ff206 	br	10008164 <__alt_data_end+0xf8008164>

1000819c <_fwalk_reent>:
1000819c:	defff704 	addi	sp,sp,-36
100081a0:	dd000415 	stw	r20,16(sp)
100081a4:	dfc00815 	stw	ra,32(sp)
100081a8:	ddc00715 	stw	r23,28(sp)
100081ac:	dd800615 	stw	r22,24(sp)
100081b0:	dd400515 	stw	r21,20(sp)
100081b4:	dcc00315 	stw	r19,12(sp)
100081b8:	dc800215 	stw	r18,8(sp)
100081bc:	dc400115 	stw	r17,4(sp)
100081c0:	dc000015 	stw	r16,0(sp)
100081c4:	2500b804 	addi	r20,r4,736
100081c8:	a0002326 	beq	r20,zero,10008258 <_fwalk_reent+0xbc>
100081cc:	282b883a 	mov	r21,r5
100081d0:	2027883a 	mov	r19,r4
100081d4:	002f883a 	mov	r23,zero
100081d8:	05800044 	movi	r22,1
100081dc:	04bfffc4 	movi	r18,-1
100081e0:	a4400117 	ldw	r17,4(r20)
100081e4:	a4000217 	ldw	r16,8(r20)
100081e8:	8c7fffc4 	addi	r17,r17,-1
100081ec:	88000c16 	blt	r17,zero,10008220 <_fwalk_reent+0x84>
100081f0:	84000304 	addi	r16,r16,12
100081f4:	8080000b 	ldhu	r2,0(r16)
100081f8:	8c7fffc4 	addi	r17,r17,-1
100081fc:	817ffd04 	addi	r5,r16,-12
10008200:	b080052e 	bgeu	r22,r2,10008218 <_fwalk_reent+0x7c>
10008204:	8080008f 	ldh	r2,2(r16)
10008208:	9809883a 	mov	r4,r19
1000820c:	14800226 	beq	r2,r18,10008218 <_fwalk_reent+0x7c>
10008210:	a83ee83a 	callr	r21
10008214:	b8aeb03a 	or	r23,r23,r2
10008218:	84001a04 	addi	r16,r16,104
1000821c:	8cbff51e 	bne	r17,r18,100081f4 <__alt_data_end+0xf80081f4>
10008220:	a5000017 	ldw	r20,0(r20)
10008224:	a03fee1e 	bne	r20,zero,100081e0 <__alt_data_end+0xf80081e0>
10008228:	b805883a 	mov	r2,r23
1000822c:	dfc00817 	ldw	ra,32(sp)
10008230:	ddc00717 	ldw	r23,28(sp)
10008234:	dd800617 	ldw	r22,24(sp)
10008238:	dd400517 	ldw	r21,20(sp)
1000823c:	dd000417 	ldw	r20,16(sp)
10008240:	dcc00317 	ldw	r19,12(sp)
10008244:	dc800217 	ldw	r18,8(sp)
10008248:	dc400117 	ldw	r17,4(sp)
1000824c:	dc000017 	ldw	r16,0(sp)
10008250:	dec00904 	addi	sp,sp,36
10008254:	f800283a 	ret
10008258:	002f883a 	mov	r23,zero
1000825c:	003ff206 	br	10008228 <__alt_data_end+0xf8008228>

10008260 <_setlocale_r>:
10008260:	30001b26 	beq	r6,zero,100082d0 <_setlocale_r+0x70>
10008264:	01440074 	movhi	r5,4097
10008268:	defffe04 	addi	sp,sp,-8
1000826c:	294c6a04 	addi	r5,r5,12712
10008270:	3009883a 	mov	r4,r6
10008274:	dc000015 	stw	r16,0(sp)
10008278:	dfc00115 	stw	ra,4(sp)
1000827c:	3021883a 	mov	r16,r6
10008280:	000a9d40 	call	1000a9d4 <strcmp>
10008284:	1000061e 	bne	r2,zero,100082a0 <_setlocale_r+0x40>
10008288:	00840074 	movhi	r2,4097
1000828c:	108c6904 	addi	r2,r2,12708
10008290:	dfc00117 	ldw	ra,4(sp)
10008294:	dc000017 	ldw	r16,0(sp)
10008298:	dec00204 	addi	sp,sp,8
1000829c:	f800283a 	ret
100082a0:	01440074 	movhi	r5,4097
100082a4:	294c6904 	addi	r5,r5,12708
100082a8:	8009883a 	mov	r4,r16
100082ac:	000a9d40 	call	1000a9d4 <strcmp>
100082b0:	103ff526 	beq	r2,zero,10008288 <__alt_data_end+0xf8008288>
100082b4:	01440074 	movhi	r5,4097
100082b8:	294c5404 	addi	r5,r5,12624
100082bc:	8009883a 	mov	r4,r16
100082c0:	000a9d40 	call	1000a9d4 <strcmp>
100082c4:	103ff026 	beq	r2,zero,10008288 <__alt_data_end+0xf8008288>
100082c8:	0005883a 	mov	r2,zero
100082cc:	003ff006 	br	10008290 <__alt_data_end+0xf8008290>
100082d0:	00840074 	movhi	r2,4097
100082d4:	108c6904 	addi	r2,r2,12708
100082d8:	f800283a 	ret

100082dc <__locale_charset>:
100082dc:	00840074 	movhi	r2,4097
100082e0:	108e1c04 	addi	r2,r2,14448
100082e4:	f800283a 	ret

100082e8 <__locale_mb_cur_max>:
100082e8:	00840074 	movhi	r2,4097
100082ec:	1093b804 	addi	r2,r2,20192
100082f0:	10800017 	ldw	r2,0(r2)
100082f4:	f800283a 	ret

100082f8 <__locale_msgcharset>:
100082f8:	00840074 	movhi	r2,4097
100082fc:	108e1404 	addi	r2,r2,14416
10008300:	f800283a 	ret

10008304 <__locale_cjk_lang>:
10008304:	0005883a 	mov	r2,zero
10008308:	f800283a 	ret

1000830c <_localeconv_r>:
1000830c:	00840074 	movhi	r2,4097
10008310:	108e2404 	addi	r2,r2,14480
10008314:	f800283a 	ret

10008318 <setlocale>:
10008318:	00840074 	movhi	r2,4097
1000831c:	1093b704 	addi	r2,r2,20188
10008320:	280d883a 	mov	r6,r5
10008324:	200b883a 	mov	r5,r4
10008328:	11000017 	ldw	r4,0(r2)
1000832c:	00082601 	jmpi	10008260 <_setlocale_r>

10008330 <localeconv>:
10008330:	00840074 	movhi	r2,4097
10008334:	108e2404 	addi	r2,r2,14480
10008338:	f800283a 	ret

1000833c <__smakebuf_r>:
1000833c:	2880030b 	ldhu	r2,12(r5)
10008340:	10c0008c 	andi	r3,r2,2
10008344:	1800411e 	bne	r3,zero,1000844c <__smakebuf_r+0x110>
10008348:	deffec04 	addi	sp,sp,-80
1000834c:	dc000f15 	stw	r16,60(sp)
10008350:	2821883a 	mov	r16,r5
10008354:	2940038f 	ldh	r5,14(r5)
10008358:	dc401015 	stw	r17,64(sp)
1000835c:	dfc01315 	stw	ra,76(sp)
10008360:	dcc01215 	stw	r19,72(sp)
10008364:	dc801115 	stw	r18,68(sp)
10008368:	2023883a 	mov	r17,r4
1000836c:	28001c16 	blt	r5,zero,100083e0 <__smakebuf_r+0xa4>
10008370:	d80d883a 	mov	r6,sp
10008374:	000c6440 	call	1000c644 <_fstat_r>
10008378:	10001816 	blt	r2,zero,100083dc <__smakebuf_r+0xa0>
1000837c:	d8800117 	ldw	r2,4(sp)
10008380:	00e00014 	movui	r3,32768
10008384:	10bc000c 	andi	r2,r2,61440
10008388:	14c80020 	cmpeqi	r19,r2,8192
1000838c:	10c03726 	beq	r2,r3,1000846c <__smakebuf_r+0x130>
10008390:	80c0030b 	ldhu	r3,12(r16)
10008394:	18c20014 	ori	r3,r3,2048
10008398:	80c0030d 	sth	r3,12(r16)
1000839c:	00c80004 	movi	r3,8192
100083a0:	10c0521e 	bne	r2,r3,100084ec <__smakebuf_r+0x1b0>
100083a4:	8140038f 	ldh	r5,14(r16)
100083a8:	8809883a 	mov	r4,r17
100083ac:	000c6a00 	call	1000c6a0 <_isatty_r>
100083b0:	10004c26 	beq	r2,zero,100084e4 <__smakebuf_r+0x1a8>
100083b4:	8080030b 	ldhu	r2,12(r16)
100083b8:	80c010c4 	addi	r3,r16,67
100083bc:	80c00015 	stw	r3,0(r16)
100083c0:	10800054 	ori	r2,r2,1
100083c4:	8080030d 	sth	r2,12(r16)
100083c8:	00800044 	movi	r2,1
100083cc:	80c00415 	stw	r3,16(r16)
100083d0:	80800515 	stw	r2,20(r16)
100083d4:	04810004 	movi	r18,1024
100083d8:	00000706 	br	100083f8 <__smakebuf_r+0xbc>
100083dc:	8080030b 	ldhu	r2,12(r16)
100083e0:	10c0200c 	andi	r3,r2,128
100083e4:	18001f1e 	bne	r3,zero,10008464 <__smakebuf_r+0x128>
100083e8:	04810004 	movi	r18,1024
100083ec:	10820014 	ori	r2,r2,2048
100083f0:	8080030d 	sth	r2,12(r16)
100083f4:	0027883a 	mov	r19,zero
100083f8:	900b883a 	mov	r5,r18
100083fc:	8809883a 	mov	r4,r17
10008400:	00084f80 	call	100084f8 <_malloc_r>
10008404:	10002c26 	beq	r2,zero,100084b8 <__smakebuf_r+0x17c>
10008408:	80c0030b 	ldhu	r3,12(r16)
1000840c:	01040034 	movhi	r4,4096
10008410:	211d0d04 	addi	r4,r4,29748
10008414:	89000f15 	stw	r4,60(r17)
10008418:	18c02014 	ori	r3,r3,128
1000841c:	80c0030d 	sth	r3,12(r16)
10008420:	80800015 	stw	r2,0(r16)
10008424:	80800415 	stw	r2,16(r16)
10008428:	84800515 	stw	r18,20(r16)
1000842c:	98001a1e 	bne	r19,zero,10008498 <__smakebuf_r+0x15c>
10008430:	dfc01317 	ldw	ra,76(sp)
10008434:	dcc01217 	ldw	r19,72(sp)
10008438:	dc801117 	ldw	r18,68(sp)
1000843c:	dc401017 	ldw	r17,64(sp)
10008440:	dc000f17 	ldw	r16,60(sp)
10008444:	dec01404 	addi	sp,sp,80
10008448:	f800283a 	ret
1000844c:	288010c4 	addi	r2,r5,67
10008450:	28800015 	stw	r2,0(r5)
10008454:	28800415 	stw	r2,16(r5)
10008458:	00800044 	movi	r2,1
1000845c:	28800515 	stw	r2,20(r5)
10008460:	f800283a 	ret
10008464:	04801004 	movi	r18,64
10008468:	003fe006 	br	100083ec <__alt_data_end+0xf80083ec>
1000846c:	81000a17 	ldw	r4,40(r16)
10008470:	00c40074 	movhi	r3,4097
10008474:	18ea5c04 	addi	r3,r3,-22160
10008478:	20ffc51e 	bne	r4,r3,10008390 <__alt_data_end+0xf8008390>
1000847c:	8080030b 	ldhu	r2,12(r16)
10008480:	04810004 	movi	r18,1024
10008484:	84801315 	stw	r18,76(r16)
10008488:	1484b03a 	or	r2,r2,r18
1000848c:	8080030d 	sth	r2,12(r16)
10008490:	0027883a 	mov	r19,zero
10008494:	003fd806 	br	100083f8 <__alt_data_end+0xf80083f8>
10008498:	8140038f 	ldh	r5,14(r16)
1000849c:	8809883a 	mov	r4,r17
100084a0:	000c6a00 	call	1000c6a0 <_isatty_r>
100084a4:	103fe226 	beq	r2,zero,10008430 <__alt_data_end+0xf8008430>
100084a8:	8080030b 	ldhu	r2,12(r16)
100084ac:	10800054 	ori	r2,r2,1
100084b0:	8080030d 	sth	r2,12(r16)
100084b4:	003fde06 	br	10008430 <__alt_data_end+0xf8008430>
100084b8:	8080030b 	ldhu	r2,12(r16)
100084bc:	10c0800c 	andi	r3,r2,512
100084c0:	183fdb1e 	bne	r3,zero,10008430 <__alt_data_end+0xf8008430>
100084c4:	10800094 	ori	r2,r2,2
100084c8:	80c010c4 	addi	r3,r16,67
100084cc:	8080030d 	sth	r2,12(r16)
100084d0:	00800044 	movi	r2,1
100084d4:	80c00015 	stw	r3,0(r16)
100084d8:	80c00415 	stw	r3,16(r16)
100084dc:	80800515 	stw	r2,20(r16)
100084e0:	003fd306 	br	10008430 <__alt_data_end+0xf8008430>
100084e4:	04810004 	movi	r18,1024
100084e8:	003fc306 	br	100083f8 <__alt_data_end+0xf80083f8>
100084ec:	0027883a 	mov	r19,zero
100084f0:	04810004 	movi	r18,1024
100084f4:	003fc006 	br	100083f8 <__alt_data_end+0xf80083f8>

100084f8 <_malloc_r>:
100084f8:	defff504 	addi	sp,sp,-44
100084fc:	dc800315 	stw	r18,12(sp)
10008500:	dfc00a15 	stw	ra,40(sp)
10008504:	df000915 	stw	fp,36(sp)
10008508:	ddc00815 	stw	r23,32(sp)
1000850c:	dd800715 	stw	r22,28(sp)
10008510:	dd400615 	stw	r21,24(sp)
10008514:	dd000515 	stw	r20,20(sp)
10008518:	dcc00415 	stw	r19,16(sp)
1000851c:	dc400215 	stw	r17,8(sp)
10008520:	dc000115 	stw	r16,4(sp)
10008524:	288002c4 	addi	r2,r5,11
10008528:	00c00584 	movi	r3,22
1000852c:	2025883a 	mov	r18,r4
10008530:	18807f2e 	bgeu	r3,r2,10008730 <_malloc_r+0x238>
10008534:	047ffe04 	movi	r17,-8
10008538:	1462703a 	and	r17,r2,r17
1000853c:	8800a316 	blt	r17,zero,100087cc <_malloc_r+0x2d4>
10008540:	8940a236 	bltu	r17,r5,100087cc <_malloc_r+0x2d4>
10008544:	00106d00 	call	100106d0 <__malloc_lock>
10008548:	00807dc4 	movi	r2,503
1000854c:	1441e92e 	bgeu	r2,r17,10008cf4 <_malloc_r+0x7fc>
10008550:	8804d27a 	srli	r2,r17,9
10008554:	1000a126 	beq	r2,zero,100087dc <_malloc_r+0x2e4>
10008558:	00c00104 	movi	r3,4
1000855c:	18811e36 	bltu	r3,r2,100089d8 <_malloc_r+0x4e0>
10008560:	8804d1ba 	srli	r2,r17,6
10008564:	12000e44 	addi	r8,r2,57
10008568:	11c00e04 	addi	r7,r2,56
1000856c:	4209883a 	add	r4,r8,r8
10008570:	04c40074 	movhi	r19,4097
10008574:	2109883a 	add	r4,r4,r4
10008578:	9cce3204 	addi	r19,r19,14536
1000857c:	2109883a 	add	r4,r4,r4
10008580:	9909883a 	add	r4,r19,r4
10008584:	24000117 	ldw	r16,4(r4)
10008588:	213ffe04 	addi	r4,r4,-8
1000858c:	24009726 	beq	r4,r16,100087ec <_malloc_r+0x2f4>
10008590:	80800117 	ldw	r2,4(r16)
10008594:	01bfff04 	movi	r6,-4
10008598:	014003c4 	movi	r5,15
1000859c:	1184703a 	and	r2,r2,r6
100085a0:	1447c83a 	sub	r3,r2,r17
100085a4:	28c00716 	blt	r5,r3,100085c4 <_malloc_r+0xcc>
100085a8:	1800920e 	bge	r3,zero,100087f4 <_malloc_r+0x2fc>
100085ac:	84000317 	ldw	r16,12(r16)
100085b0:	24008e26 	beq	r4,r16,100087ec <_malloc_r+0x2f4>
100085b4:	80800117 	ldw	r2,4(r16)
100085b8:	1184703a 	and	r2,r2,r6
100085bc:	1447c83a 	sub	r3,r2,r17
100085c0:	28fff90e 	bge	r5,r3,100085a8 <__alt_data_end+0xf80085a8>
100085c4:	3809883a 	mov	r4,r7
100085c8:	01840074 	movhi	r6,4097
100085cc:	9c000417 	ldw	r16,16(r19)
100085d0:	318e3204 	addi	r6,r6,14536
100085d4:	32000204 	addi	r8,r6,8
100085d8:	82013426 	beq	r16,r8,10008aac <_malloc_r+0x5b4>
100085dc:	80c00117 	ldw	r3,4(r16)
100085e0:	00bfff04 	movi	r2,-4
100085e4:	188e703a 	and	r7,r3,r2
100085e8:	3c45c83a 	sub	r2,r7,r17
100085ec:	00c003c4 	movi	r3,15
100085f0:	18811f16 	blt	r3,r2,10008a70 <_malloc_r+0x578>
100085f4:	32000515 	stw	r8,20(r6)
100085f8:	32000415 	stw	r8,16(r6)
100085fc:	10007f0e 	bge	r2,zero,100087fc <_malloc_r+0x304>
10008600:	00807fc4 	movi	r2,511
10008604:	11c0fd36 	bltu	r2,r7,100089fc <_malloc_r+0x504>
10008608:	3806d0fa 	srli	r3,r7,3
1000860c:	01c00044 	movi	r7,1
10008610:	30800117 	ldw	r2,4(r6)
10008614:	19400044 	addi	r5,r3,1
10008618:	294b883a 	add	r5,r5,r5
1000861c:	1807d0ba 	srai	r3,r3,2
10008620:	294b883a 	add	r5,r5,r5
10008624:	294b883a 	add	r5,r5,r5
10008628:	298b883a 	add	r5,r5,r6
1000862c:	38c6983a 	sll	r3,r7,r3
10008630:	29c00017 	ldw	r7,0(r5)
10008634:	2a7ffe04 	addi	r9,r5,-8
10008638:	1886b03a 	or	r3,r3,r2
1000863c:	82400315 	stw	r9,12(r16)
10008640:	81c00215 	stw	r7,8(r16)
10008644:	30c00115 	stw	r3,4(r6)
10008648:	2c000015 	stw	r16,0(r5)
1000864c:	3c000315 	stw	r16,12(r7)
10008650:	2005d0ba 	srai	r2,r4,2
10008654:	01400044 	movi	r5,1
10008658:	288a983a 	sll	r5,r5,r2
1000865c:	19406f36 	bltu	r3,r5,1000881c <_malloc_r+0x324>
10008660:	28c4703a 	and	r2,r5,r3
10008664:	10000a1e 	bne	r2,zero,10008690 <_malloc_r+0x198>
10008668:	00bfff04 	movi	r2,-4
1000866c:	294b883a 	add	r5,r5,r5
10008670:	2088703a 	and	r4,r4,r2
10008674:	28c4703a 	and	r2,r5,r3
10008678:	21000104 	addi	r4,r4,4
1000867c:	1000041e 	bne	r2,zero,10008690 <_malloc_r+0x198>
10008680:	294b883a 	add	r5,r5,r5
10008684:	28c4703a 	and	r2,r5,r3
10008688:	21000104 	addi	r4,r4,4
1000868c:	103ffc26 	beq	r2,zero,10008680 <__alt_data_end+0xf8008680>
10008690:	02bfff04 	movi	r10,-4
10008694:	024003c4 	movi	r9,15
10008698:	21800044 	addi	r6,r4,1
1000869c:	318d883a 	add	r6,r6,r6
100086a0:	318d883a 	add	r6,r6,r6
100086a4:	318d883a 	add	r6,r6,r6
100086a8:	998d883a 	add	r6,r19,r6
100086ac:	333ffe04 	addi	r12,r6,-8
100086b0:	2017883a 	mov	r11,r4
100086b4:	31800104 	addi	r6,r6,4
100086b8:	34000017 	ldw	r16,0(r6)
100086bc:	31fffd04 	addi	r7,r6,-12
100086c0:	81c0041e 	bne	r16,r7,100086d4 <_malloc_r+0x1dc>
100086c4:	0000fb06 	br	10008ab4 <_malloc_r+0x5bc>
100086c8:	1801030e 	bge	r3,zero,10008ad8 <_malloc_r+0x5e0>
100086cc:	84000317 	ldw	r16,12(r16)
100086d0:	81c0f826 	beq	r16,r7,10008ab4 <_malloc_r+0x5bc>
100086d4:	80800117 	ldw	r2,4(r16)
100086d8:	1284703a 	and	r2,r2,r10
100086dc:	1447c83a 	sub	r3,r2,r17
100086e0:	48fff90e 	bge	r9,r3,100086c8 <__alt_data_end+0xf80086c8>
100086e4:	80800317 	ldw	r2,12(r16)
100086e8:	81000217 	ldw	r4,8(r16)
100086ec:	89400054 	ori	r5,r17,1
100086f0:	81400115 	stw	r5,4(r16)
100086f4:	20800315 	stw	r2,12(r4)
100086f8:	11000215 	stw	r4,8(r2)
100086fc:	8463883a 	add	r17,r16,r17
10008700:	9c400515 	stw	r17,20(r19)
10008704:	9c400415 	stw	r17,16(r19)
10008708:	18800054 	ori	r2,r3,1
1000870c:	88800115 	stw	r2,4(r17)
10008710:	8a000315 	stw	r8,12(r17)
10008714:	8a000215 	stw	r8,8(r17)
10008718:	88e3883a 	add	r17,r17,r3
1000871c:	88c00015 	stw	r3,0(r17)
10008720:	9009883a 	mov	r4,r18
10008724:	00106f40 	call	100106f4 <__malloc_unlock>
10008728:	80800204 	addi	r2,r16,8
1000872c:	00001b06 	br	1000879c <_malloc_r+0x2a4>
10008730:	04400404 	movi	r17,16
10008734:	89402536 	bltu	r17,r5,100087cc <_malloc_r+0x2d4>
10008738:	00106d00 	call	100106d0 <__malloc_lock>
1000873c:	00800184 	movi	r2,6
10008740:	01000084 	movi	r4,2
10008744:	04c40074 	movhi	r19,4097
10008748:	1085883a 	add	r2,r2,r2
1000874c:	9cce3204 	addi	r19,r19,14536
10008750:	1085883a 	add	r2,r2,r2
10008754:	9885883a 	add	r2,r19,r2
10008758:	14000117 	ldw	r16,4(r2)
1000875c:	10fffe04 	addi	r3,r2,-8
10008760:	80c0d926 	beq	r16,r3,10008ac8 <_malloc_r+0x5d0>
10008764:	80c00117 	ldw	r3,4(r16)
10008768:	81000317 	ldw	r4,12(r16)
1000876c:	00bfff04 	movi	r2,-4
10008770:	1884703a 	and	r2,r3,r2
10008774:	81400217 	ldw	r5,8(r16)
10008778:	8085883a 	add	r2,r16,r2
1000877c:	10c00117 	ldw	r3,4(r2)
10008780:	29000315 	stw	r4,12(r5)
10008784:	21400215 	stw	r5,8(r4)
10008788:	18c00054 	ori	r3,r3,1
1000878c:	10c00115 	stw	r3,4(r2)
10008790:	9009883a 	mov	r4,r18
10008794:	00106f40 	call	100106f4 <__malloc_unlock>
10008798:	80800204 	addi	r2,r16,8
1000879c:	dfc00a17 	ldw	ra,40(sp)
100087a0:	df000917 	ldw	fp,36(sp)
100087a4:	ddc00817 	ldw	r23,32(sp)
100087a8:	dd800717 	ldw	r22,28(sp)
100087ac:	dd400617 	ldw	r21,24(sp)
100087b0:	dd000517 	ldw	r20,20(sp)
100087b4:	dcc00417 	ldw	r19,16(sp)
100087b8:	dc800317 	ldw	r18,12(sp)
100087bc:	dc400217 	ldw	r17,8(sp)
100087c0:	dc000117 	ldw	r16,4(sp)
100087c4:	dec00b04 	addi	sp,sp,44
100087c8:	f800283a 	ret
100087cc:	00800304 	movi	r2,12
100087d0:	90800015 	stw	r2,0(r18)
100087d4:	0005883a 	mov	r2,zero
100087d8:	003ff006 	br	1000879c <__alt_data_end+0xf800879c>
100087dc:	01002004 	movi	r4,128
100087e0:	02001004 	movi	r8,64
100087e4:	01c00fc4 	movi	r7,63
100087e8:	003f6106 	br	10008570 <__alt_data_end+0xf8008570>
100087ec:	4009883a 	mov	r4,r8
100087f0:	003f7506 	br	100085c8 <__alt_data_end+0xf80085c8>
100087f4:	81000317 	ldw	r4,12(r16)
100087f8:	003fde06 	br	10008774 <__alt_data_end+0xf8008774>
100087fc:	81c5883a 	add	r2,r16,r7
10008800:	11400117 	ldw	r5,4(r2)
10008804:	9009883a 	mov	r4,r18
10008808:	29400054 	ori	r5,r5,1
1000880c:	11400115 	stw	r5,4(r2)
10008810:	00106f40 	call	100106f4 <__malloc_unlock>
10008814:	80800204 	addi	r2,r16,8
10008818:	003fe006 	br	1000879c <__alt_data_end+0xf800879c>
1000881c:	9c000217 	ldw	r16,8(r19)
10008820:	00bfff04 	movi	r2,-4
10008824:	85800117 	ldw	r22,4(r16)
10008828:	b0ac703a 	and	r22,r22,r2
1000882c:	b4400336 	bltu	r22,r17,1000883c <_malloc_r+0x344>
10008830:	b445c83a 	sub	r2,r22,r17
10008834:	00c003c4 	movi	r3,15
10008838:	18805d16 	blt	r3,r2,100089b0 <_malloc_r+0x4b8>
1000883c:	05c40074 	movhi	r23,4097
10008840:	00840074 	movhi	r2,4097
10008844:	109a8704 	addi	r2,r2,27164
10008848:	bdd3b904 	addi	r23,r23,20196
1000884c:	15400017 	ldw	r21,0(r2)
10008850:	b8c00017 	ldw	r3,0(r23)
10008854:	00bfffc4 	movi	r2,-1
10008858:	858d883a 	add	r6,r16,r22
1000885c:	8d6b883a 	add	r21,r17,r21
10008860:	1880ea26 	beq	r3,r2,10008c0c <_malloc_r+0x714>
10008864:	ad4403c4 	addi	r21,r21,4111
10008868:	00bc0004 	movi	r2,-4096
1000886c:	a8aa703a 	and	r21,r21,r2
10008870:	a80b883a 	mov	r5,r21
10008874:	9009883a 	mov	r4,r18
10008878:	d9800015 	stw	r6,0(sp)
1000887c:	000a8440 	call	1000a844 <_sbrk_r>
10008880:	1029883a 	mov	r20,r2
10008884:	00bfffc4 	movi	r2,-1
10008888:	d9800017 	ldw	r6,0(sp)
1000888c:	a080e826 	beq	r20,r2,10008c30 <_malloc_r+0x738>
10008890:	a180a636 	bltu	r20,r6,10008b2c <_malloc_r+0x634>
10008894:	07040074 	movhi	fp,4097
10008898:	e71a9004 	addi	fp,fp,27200
1000889c:	e0800017 	ldw	r2,0(fp)
100088a0:	a887883a 	add	r3,r21,r2
100088a4:	e0c00015 	stw	r3,0(fp)
100088a8:	3500e626 	beq	r6,r20,10008c44 <_malloc_r+0x74c>
100088ac:	b9000017 	ldw	r4,0(r23)
100088b0:	00bfffc4 	movi	r2,-1
100088b4:	2080ee26 	beq	r4,r2,10008c70 <_malloc_r+0x778>
100088b8:	a185c83a 	sub	r2,r20,r6
100088bc:	10c5883a 	add	r2,r2,r3
100088c0:	e0800015 	stw	r2,0(fp)
100088c4:	a0c001cc 	andi	r3,r20,7
100088c8:	1800bc26 	beq	r3,zero,10008bbc <_malloc_r+0x6c4>
100088cc:	a0e9c83a 	sub	r20,r20,r3
100088d0:	00840204 	movi	r2,4104
100088d4:	a5000204 	addi	r20,r20,8
100088d8:	10c7c83a 	sub	r3,r2,r3
100088dc:	a545883a 	add	r2,r20,r21
100088e0:	1083ffcc 	andi	r2,r2,4095
100088e4:	18abc83a 	sub	r21,r3,r2
100088e8:	a80b883a 	mov	r5,r21
100088ec:	9009883a 	mov	r4,r18
100088f0:	000a8440 	call	1000a844 <_sbrk_r>
100088f4:	00ffffc4 	movi	r3,-1
100088f8:	10c0e126 	beq	r2,r3,10008c80 <_malloc_r+0x788>
100088fc:	1505c83a 	sub	r2,r2,r20
10008900:	1545883a 	add	r2,r2,r21
10008904:	10800054 	ori	r2,r2,1
10008908:	e0c00017 	ldw	r3,0(fp)
1000890c:	9d000215 	stw	r20,8(r19)
10008910:	a0800115 	stw	r2,4(r20)
10008914:	a8c7883a 	add	r3,r21,r3
10008918:	e0c00015 	stw	r3,0(fp)
1000891c:	84c00e26 	beq	r16,r19,10008958 <_malloc_r+0x460>
10008920:	018003c4 	movi	r6,15
10008924:	3580a72e 	bgeu	r6,r22,10008bc4 <_malloc_r+0x6cc>
10008928:	81400117 	ldw	r5,4(r16)
1000892c:	013ffe04 	movi	r4,-8
10008930:	b0bffd04 	addi	r2,r22,-12
10008934:	1104703a 	and	r2,r2,r4
10008938:	2900004c 	andi	r4,r5,1
1000893c:	2088b03a 	or	r4,r4,r2
10008940:	81000115 	stw	r4,4(r16)
10008944:	01400144 	movi	r5,5
10008948:	8089883a 	add	r4,r16,r2
1000894c:	21400115 	stw	r5,4(r4)
10008950:	21400215 	stw	r5,8(r4)
10008954:	3080cd36 	bltu	r6,r2,10008c8c <_malloc_r+0x794>
10008958:	00840074 	movhi	r2,4097
1000895c:	109a8604 	addi	r2,r2,27160
10008960:	11000017 	ldw	r4,0(r2)
10008964:	20c0012e 	bgeu	r4,r3,1000896c <_malloc_r+0x474>
10008968:	10c00015 	stw	r3,0(r2)
1000896c:	00840074 	movhi	r2,4097
10008970:	109a8504 	addi	r2,r2,27156
10008974:	11000017 	ldw	r4,0(r2)
10008978:	9c000217 	ldw	r16,8(r19)
1000897c:	20c0012e 	bgeu	r4,r3,10008984 <_malloc_r+0x48c>
10008980:	10c00015 	stw	r3,0(r2)
10008984:	80c00117 	ldw	r3,4(r16)
10008988:	00bfff04 	movi	r2,-4
1000898c:	1886703a 	and	r3,r3,r2
10008990:	1c45c83a 	sub	r2,r3,r17
10008994:	1c400236 	bltu	r3,r17,100089a0 <_malloc_r+0x4a8>
10008998:	00c003c4 	movi	r3,15
1000899c:	18800416 	blt	r3,r2,100089b0 <_malloc_r+0x4b8>
100089a0:	9009883a 	mov	r4,r18
100089a4:	00106f40 	call	100106f4 <__malloc_unlock>
100089a8:	0005883a 	mov	r2,zero
100089ac:	003f7b06 	br	1000879c <__alt_data_end+0xf800879c>
100089b0:	88c00054 	ori	r3,r17,1
100089b4:	80c00115 	stw	r3,4(r16)
100089b8:	8463883a 	add	r17,r16,r17
100089bc:	10800054 	ori	r2,r2,1
100089c0:	9c400215 	stw	r17,8(r19)
100089c4:	88800115 	stw	r2,4(r17)
100089c8:	9009883a 	mov	r4,r18
100089cc:	00106f40 	call	100106f4 <__malloc_unlock>
100089d0:	80800204 	addi	r2,r16,8
100089d4:	003f7106 	br	1000879c <__alt_data_end+0xf800879c>
100089d8:	00c00504 	movi	r3,20
100089dc:	18804a2e 	bgeu	r3,r2,10008b08 <_malloc_r+0x610>
100089e0:	00c01504 	movi	r3,84
100089e4:	18806e36 	bltu	r3,r2,10008ba0 <_malloc_r+0x6a8>
100089e8:	8804d33a 	srli	r2,r17,12
100089ec:	12001bc4 	addi	r8,r2,111
100089f0:	11c01b84 	addi	r7,r2,110
100089f4:	4209883a 	add	r4,r8,r8
100089f8:	003edd06 	br	10008570 <__alt_data_end+0xf8008570>
100089fc:	3804d27a 	srli	r2,r7,9
10008a00:	00c00104 	movi	r3,4
10008a04:	1880442e 	bgeu	r3,r2,10008b18 <_malloc_r+0x620>
10008a08:	00c00504 	movi	r3,20
10008a0c:	18808136 	bltu	r3,r2,10008c14 <_malloc_r+0x71c>
10008a10:	11401704 	addi	r5,r2,92
10008a14:	10c016c4 	addi	r3,r2,91
10008a18:	294b883a 	add	r5,r5,r5
10008a1c:	294b883a 	add	r5,r5,r5
10008a20:	294b883a 	add	r5,r5,r5
10008a24:	994b883a 	add	r5,r19,r5
10008a28:	28800017 	ldw	r2,0(r5)
10008a2c:	01840074 	movhi	r6,4097
10008a30:	297ffe04 	addi	r5,r5,-8
10008a34:	318e3204 	addi	r6,r6,14536
10008a38:	28806526 	beq	r5,r2,10008bd0 <_malloc_r+0x6d8>
10008a3c:	01bfff04 	movi	r6,-4
10008a40:	10c00117 	ldw	r3,4(r2)
10008a44:	1986703a 	and	r3,r3,r6
10008a48:	38c0022e 	bgeu	r7,r3,10008a54 <_malloc_r+0x55c>
10008a4c:	10800217 	ldw	r2,8(r2)
10008a50:	28bffb1e 	bne	r5,r2,10008a40 <__alt_data_end+0xf8008a40>
10008a54:	11400317 	ldw	r5,12(r2)
10008a58:	98c00117 	ldw	r3,4(r19)
10008a5c:	81400315 	stw	r5,12(r16)
10008a60:	80800215 	stw	r2,8(r16)
10008a64:	2c000215 	stw	r16,8(r5)
10008a68:	14000315 	stw	r16,12(r2)
10008a6c:	003ef806 	br	10008650 <__alt_data_end+0xf8008650>
10008a70:	88c00054 	ori	r3,r17,1
10008a74:	80c00115 	stw	r3,4(r16)
10008a78:	8463883a 	add	r17,r16,r17
10008a7c:	34400515 	stw	r17,20(r6)
10008a80:	34400415 	stw	r17,16(r6)
10008a84:	10c00054 	ori	r3,r2,1
10008a88:	8a000315 	stw	r8,12(r17)
10008a8c:	8a000215 	stw	r8,8(r17)
10008a90:	88c00115 	stw	r3,4(r17)
10008a94:	88a3883a 	add	r17,r17,r2
10008a98:	88800015 	stw	r2,0(r17)
10008a9c:	9009883a 	mov	r4,r18
10008aa0:	00106f40 	call	100106f4 <__malloc_unlock>
10008aa4:	80800204 	addi	r2,r16,8
10008aa8:	003f3c06 	br	1000879c <__alt_data_end+0xf800879c>
10008aac:	30c00117 	ldw	r3,4(r6)
10008ab0:	003ee706 	br	10008650 <__alt_data_end+0xf8008650>
10008ab4:	5ac00044 	addi	r11,r11,1
10008ab8:	588000cc 	andi	r2,r11,3
10008abc:	31800204 	addi	r6,r6,8
10008ac0:	103efd1e 	bne	r2,zero,100086b8 <__alt_data_end+0xf80086b8>
10008ac4:	00002406 	br	10008b58 <_malloc_r+0x660>
10008ac8:	14000317 	ldw	r16,12(r2)
10008acc:	143f251e 	bne	r2,r16,10008764 <__alt_data_end+0xf8008764>
10008ad0:	21000084 	addi	r4,r4,2
10008ad4:	003ebc06 	br	100085c8 <__alt_data_end+0xf80085c8>
10008ad8:	8085883a 	add	r2,r16,r2
10008adc:	10c00117 	ldw	r3,4(r2)
10008ae0:	81000317 	ldw	r4,12(r16)
10008ae4:	81400217 	ldw	r5,8(r16)
10008ae8:	18c00054 	ori	r3,r3,1
10008aec:	10c00115 	stw	r3,4(r2)
10008af0:	29000315 	stw	r4,12(r5)
10008af4:	21400215 	stw	r5,8(r4)
10008af8:	9009883a 	mov	r4,r18
10008afc:	00106f40 	call	100106f4 <__malloc_unlock>
10008b00:	80800204 	addi	r2,r16,8
10008b04:	003f2506 	br	1000879c <__alt_data_end+0xf800879c>
10008b08:	12001704 	addi	r8,r2,92
10008b0c:	11c016c4 	addi	r7,r2,91
10008b10:	4209883a 	add	r4,r8,r8
10008b14:	003e9606 	br	10008570 <__alt_data_end+0xf8008570>
10008b18:	3804d1ba 	srli	r2,r7,6
10008b1c:	11400e44 	addi	r5,r2,57
10008b20:	10c00e04 	addi	r3,r2,56
10008b24:	294b883a 	add	r5,r5,r5
10008b28:	003fbc06 	br	10008a1c <__alt_data_end+0xf8008a1c>
10008b2c:	84ff5926 	beq	r16,r19,10008894 <__alt_data_end+0xf8008894>
10008b30:	00840074 	movhi	r2,4097
10008b34:	108e3204 	addi	r2,r2,14536
10008b38:	14000217 	ldw	r16,8(r2)
10008b3c:	00bfff04 	movi	r2,-4
10008b40:	80c00117 	ldw	r3,4(r16)
10008b44:	1886703a 	and	r3,r3,r2
10008b48:	003f9106 	br	10008990 <__alt_data_end+0xf8008990>
10008b4c:	60800217 	ldw	r2,8(r12)
10008b50:	213fffc4 	addi	r4,r4,-1
10008b54:	1300651e 	bne	r2,r12,10008cec <_malloc_r+0x7f4>
10008b58:	208000cc 	andi	r2,r4,3
10008b5c:	633ffe04 	addi	r12,r12,-8
10008b60:	103ffa1e 	bne	r2,zero,10008b4c <__alt_data_end+0xf8008b4c>
10008b64:	98800117 	ldw	r2,4(r19)
10008b68:	0146303a 	nor	r3,zero,r5
10008b6c:	1884703a 	and	r2,r3,r2
10008b70:	98800115 	stw	r2,4(r19)
10008b74:	294b883a 	add	r5,r5,r5
10008b78:	117f2836 	bltu	r2,r5,1000881c <__alt_data_end+0xf800881c>
10008b7c:	283f2726 	beq	r5,zero,1000881c <__alt_data_end+0xf800881c>
10008b80:	2886703a 	and	r3,r5,r2
10008b84:	5809883a 	mov	r4,r11
10008b88:	183ec31e 	bne	r3,zero,10008698 <__alt_data_end+0xf8008698>
10008b8c:	294b883a 	add	r5,r5,r5
10008b90:	2886703a 	and	r3,r5,r2
10008b94:	21000104 	addi	r4,r4,4
10008b98:	183ffc26 	beq	r3,zero,10008b8c <__alt_data_end+0xf8008b8c>
10008b9c:	003ebe06 	br	10008698 <__alt_data_end+0xf8008698>
10008ba0:	00c05504 	movi	r3,340
10008ba4:	18801236 	bltu	r3,r2,10008bf0 <_malloc_r+0x6f8>
10008ba8:	8804d3fa 	srli	r2,r17,15
10008bac:	12001e04 	addi	r8,r2,120
10008bb0:	11c01dc4 	addi	r7,r2,119
10008bb4:	4209883a 	add	r4,r8,r8
10008bb8:	003e6d06 	br	10008570 <__alt_data_end+0xf8008570>
10008bbc:	00c40004 	movi	r3,4096
10008bc0:	003f4606 	br	100088dc <__alt_data_end+0xf80088dc>
10008bc4:	00800044 	movi	r2,1
10008bc8:	a0800115 	stw	r2,4(r20)
10008bcc:	003f7406 	br	100089a0 <__alt_data_end+0xf80089a0>
10008bd0:	1805d0ba 	srai	r2,r3,2
10008bd4:	01c00044 	movi	r7,1
10008bd8:	30c00117 	ldw	r3,4(r6)
10008bdc:	388e983a 	sll	r7,r7,r2
10008be0:	2805883a 	mov	r2,r5
10008be4:	38c6b03a 	or	r3,r7,r3
10008be8:	30c00115 	stw	r3,4(r6)
10008bec:	003f9b06 	br	10008a5c <__alt_data_end+0xf8008a5c>
10008bf0:	00c15504 	movi	r3,1364
10008bf4:	18801a36 	bltu	r3,r2,10008c60 <_malloc_r+0x768>
10008bf8:	8804d4ba 	srli	r2,r17,18
10008bfc:	12001f44 	addi	r8,r2,125
10008c00:	11c01f04 	addi	r7,r2,124
10008c04:	4209883a 	add	r4,r8,r8
10008c08:	003e5906 	br	10008570 <__alt_data_end+0xf8008570>
10008c0c:	ad400404 	addi	r21,r21,16
10008c10:	003f1706 	br	10008870 <__alt_data_end+0xf8008870>
10008c14:	00c01504 	movi	r3,84
10008c18:	18802336 	bltu	r3,r2,10008ca8 <_malloc_r+0x7b0>
10008c1c:	3804d33a 	srli	r2,r7,12
10008c20:	11401bc4 	addi	r5,r2,111
10008c24:	10c01b84 	addi	r3,r2,110
10008c28:	294b883a 	add	r5,r5,r5
10008c2c:	003f7b06 	br	10008a1c <__alt_data_end+0xf8008a1c>
10008c30:	9c000217 	ldw	r16,8(r19)
10008c34:	00bfff04 	movi	r2,-4
10008c38:	80c00117 	ldw	r3,4(r16)
10008c3c:	1886703a 	and	r3,r3,r2
10008c40:	003f5306 	br	10008990 <__alt_data_end+0xf8008990>
10008c44:	3083ffcc 	andi	r2,r6,4095
10008c48:	103f181e 	bne	r2,zero,100088ac <__alt_data_end+0xf80088ac>
10008c4c:	99000217 	ldw	r4,8(r19)
10008c50:	b545883a 	add	r2,r22,r21
10008c54:	10800054 	ori	r2,r2,1
10008c58:	20800115 	stw	r2,4(r4)
10008c5c:	003f3e06 	br	10008958 <__alt_data_end+0xf8008958>
10008c60:	01003f84 	movi	r4,254
10008c64:	02001fc4 	movi	r8,127
10008c68:	01c01f84 	movi	r7,126
10008c6c:	003e4006 	br	10008570 <__alt_data_end+0xf8008570>
10008c70:	00840074 	movhi	r2,4097
10008c74:	1093b904 	addi	r2,r2,20196
10008c78:	15000015 	stw	r20,0(r2)
10008c7c:	003f1106 	br	100088c4 <__alt_data_end+0xf80088c4>
10008c80:	00800044 	movi	r2,1
10008c84:	002b883a 	mov	r21,zero
10008c88:	003f1f06 	br	10008908 <__alt_data_end+0xf8008908>
10008c8c:	81400204 	addi	r5,r16,8
10008c90:	9009883a 	mov	r4,r18
10008c94:	00079000 	call	10007900 <_free_r>
10008c98:	00840074 	movhi	r2,4097
10008c9c:	109a9004 	addi	r2,r2,27200
10008ca0:	10c00017 	ldw	r3,0(r2)
10008ca4:	003f2c06 	br	10008958 <__alt_data_end+0xf8008958>
10008ca8:	00c05504 	movi	r3,340
10008cac:	18800536 	bltu	r3,r2,10008cc4 <_malloc_r+0x7cc>
10008cb0:	3804d3fa 	srli	r2,r7,15
10008cb4:	11401e04 	addi	r5,r2,120
10008cb8:	10c01dc4 	addi	r3,r2,119
10008cbc:	294b883a 	add	r5,r5,r5
10008cc0:	003f5606 	br	10008a1c <__alt_data_end+0xf8008a1c>
10008cc4:	00c15504 	movi	r3,1364
10008cc8:	18800536 	bltu	r3,r2,10008ce0 <_malloc_r+0x7e8>
10008ccc:	3804d4ba 	srli	r2,r7,18
10008cd0:	11401f44 	addi	r5,r2,125
10008cd4:	10c01f04 	addi	r3,r2,124
10008cd8:	294b883a 	add	r5,r5,r5
10008cdc:	003f4f06 	br	10008a1c <__alt_data_end+0xf8008a1c>
10008ce0:	01403f84 	movi	r5,254
10008ce4:	00c01f84 	movi	r3,126
10008ce8:	003f4c06 	br	10008a1c <__alt_data_end+0xf8008a1c>
10008cec:	98800117 	ldw	r2,4(r19)
10008cf0:	003fa006 	br	10008b74 <__alt_data_end+0xf8008b74>
10008cf4:	8808d0fa 	srli	r4,r17,3
10008cf8:	20800044 	addi	r2,r4,1
10008cfc:	1085883a 	add	r2,r2,r2
10008d00:	003e9006 	br	10008744 <__alt_data_end+0xf8008744>

10008d04 <memchr>:
10008d04:	208000cc 	andi	r2,r4,3
10008d08:	280f883a 	mov	r7,r5
10008d0c:	10003426 	beq	r2,zero,10008de0 <memchr+0xdc>
10008d10:	30bfffc4 	addi	r2,r6,-1
10008d14:	30001a26 	beq	r6,zero,10008d80 <memchr+0x7c>
10008d18:	20c00003 	ldbu	r3,0(r4)
10008d1c:	29803fcc 	andi	r6,r5,255
10008d20:	30c0051e 	bne	r6,r3,10008d38 <memchr+0x34>
10008d24:	00001806 	br	10008d88 <memchr+0x84>
10008d28:	10001526 	beq	r2,zero,10008d80 <memchr+0x7c>
10008d2c:	20c00003 	ldbu	r3,0(r4)
10008d30:	10bfffc4 	addi	r2,r2,-1
10008d34:	30c01426 	beq	r6,r3,10008d88 <memchr+0x84>
10008d38:	21000044 	addi	r4,r4,1
10008d3c:	20c000cc 	andi	r3,r4,3
10008d40:	183ff91e 	bne	r3,zero,10008d28 <__alt_data_end+0xf8008d28>
10008d44:	020000c4 	movi	r8,3
10008d48:	40801136 	bltu	r8,r2,10008d90 <memchr+0x8c>
10008d4c:	10000c26 	beq	r2,zero,10008d80 <memchr+0x7c>
10008d50:	20c00003 	ldbu	r3,0(r4)
10008d54:	29403fcc 	andi	r5,r5,255
10008d58:	28c00b26 	beq	r5,r3,10008d88 <memchr+0x84>
10008d5c:	20c00044 	addi	r3,r4,1
10008d60:	39803fcc 	andi	r6,r7,255
10008d64:	2089883a 	add	r4,r4,r2
10008d68:	00000306 	br	10008d78 <memchr+0x74>
10008d6c:	18c00044 	addi	r3,r3,1
10008d70:	197fffc3 	ldbu	r5,-1(r3)
10008d74:	31400526 	beq	r6,r5,10008d8c <memchr+0x88>
10008d78:	1805883a 	mov	r2,r3
10008d7c:	20fffb1e 	bne	r4,r3,10008d6c <__alt_data_end+0xf8008d6c>
10008d80:	0005883a 	mov	r2,zero
10008d84:	f800283a 	ret
10008d88:	2005883a 	mov	r2,r4
10008d8c:	f800283a 	ret
10008d90:	28c03fcc 	andi	r3,r5,255
10008d94:	1812923a 	slli	r9,r3,8
10008d98:	02ffbff4 	movhi	r11,65279
10008d9c:	02a02074 	movhi	r10,32897
10008da0:	48d2b03a 	or	r9,r9,r3
10008da4:	4806943a 	slli	r3,r9,16
10008da8:	5affbfc4 	addi	r11,r11,-257
10008dac:	52a02004 	addi	r10,r10,-32640
10008db0:	48d2b03a 	or	r9,r9,r3
10008db4:	20c00017 	ldw	r3,0(r4)
10008db8:	48c6f03a 	xor	r3,r9,r3
10008dbc:	1acd883a 	add	r6,r3,r11
10008dc0:	00c6303a 	nor	r3,zero,r3
10008dc4:	30c6703a 	and	r3,r6,r3
10008dc8:	1a86703a 	and	r3,r3,r10
10008dcc:	183fe01e 	bne	r3,zero,10008d50 <__alt_data_end+0xf8008d50>
10008dd0:	10bfff04 	addi	r2,r2,-4
10008dd4:	21000104 	addi	r4,r4,4
10008dd8:	40bff636 	bltu	r8,r2,10008db4 <__alt_data_end+0xf8008db4>
10008ddc:	003fdb06 	br	10008d4c <__alt_data_end+0xf8008d4c>
10008de0:	3005883a 	mov	r2,r6
10008de4:	003fd706 	br	10008d44 <__alt_data_end+0xf8008d44>

10008de8 <memcpy>:
10008de8:	defffd04 	addi	sp,sp,-12
10008dec:	dfc00215 	stw	ra,8(sp)
10008df0:	dc400115 	stw	r17,4(sp)
10008df4:	dc000015 	stw	r16,0(sp)
10008df8:	00c003c4 	movi	r3,15
10008dfc:	2005883a 	mov	r2,r4
10008e00:	1980452e 	bgeu	r3,r6,10008f18 <memcpy+0x130>
10008e04:	2906b03a 	or	r3,r5,r4
10008e08:	18c000cc 	andi	r3,r3,3
10008e0c:	1800441e 	bne	r3,zero,10008f20 <memcpy+0x138>
10008e10:	347ffc04 	addi	r17,r6,-16
10008e14:	8822d13a 	srli	r17,r17,4
10008e18:	28c00104 	addi	r3,r5,4
10008e1c:	23400104 	addi	r13,r4,4
10008e20:	8820913a 	slli	r16,r17,4
10008e24:	2b000204 	addi	r12,r5,8
10008e28:	22c00204 	addi	r11,r4,8
10008e2c:	84000504 	addi	r16,r16,20
10008e30:	2a800304 	addi	r10,r5,12
10008e34:	22400304 	addi	r9,r4,12
10008e38:	2c21883a 	add	r16,r5,r16
10008e3c:	2811883a 	mov	r8,r5
10008e40:	200f883a 	mov	r7,r4
10008e44:	41000017 	ldw	r4,0(r8)
10008e48:	1fc00017 	ldw	ra,0(r3)
10008e4c:	63c00017 	ldw	r15,0(r12)
10008e50:	39000015 	stw	r4,0(r7)
10008e54:	53800017 	ldw	r14,0(r10)
10008e58:	6fc00015 	stw	ra,0(r13)
10008e5c:	5bc00015 	stw	r15,0(r11)
10008e60:	4b800015 	stw	r14,0(r9)
10008e64:	18c00404 	addi	r3,r3,16
10008e68:	39c00404 	addi	r7,r7,16
10008e6c:	42000404 	addi	r8,r8,16
10008e70:	6b400404 	addi	r13,r13,16
10008e74:	63000404 	addi	r12,r12,16
10008e78:	5ac00404 	addi	r11,r11,16
10008e7c:	52800404 	addi	r10,r10,16
10008e80:	4a400404 	addi	r9,r9,16
10008e84:	1c3fef1e 	bne	r3,r16,10008e44 <__alt_data_end+0xf8008e44>
10008e88:	89c00044 	addi	r7,r17,1
10008e8c:	380e913a 	slli	r7,r7,4
10008e90:	310003cc 	andi	r4,r6,15
10008e94:	02c000c4 	movi	r11,3
10008e98:	11c7883a 	add	r3,r2,r7
10008e9c:	29cb883a 	add	r5,r5,r7
10008ea0:	5900212e 	bgeu	r11,r4,10008f28 <memcpy+0x140>
10008ea4:	1813883a 	mov	r9,r3
10008ea8:	2811883a 	mov	r8,r5
10008eac:	200f883a 	mov	r7,r4
10008eb0:	42800017 	ldw	r10,0(r8)
10008eb4:	4a400104 	addi	r9,r9,4
10008eb8:	39ffff04 	addi	r7,r7,-4
10008ebc:	4abfff15 	stw	r10,-4(r9)
10008ec0:	42000104 	addi	r8,r8,4
10008ec4:	59fffa36 	bltu	r11,r7,10008eb0 <__alt_data_end+0xf8008eb0>
10008ec8:	213fff04 	addi	r4,r4,-4
10008ecc:	2008d0ba 	srli	r4,r4,2
10008ed0:	318000cc 	andi	r6,r6,3
10008ed4:	21000044 	addi	r4,r4,1
10008ed8:	2109883a 	add	r4,r4,r4
10008edc:	2109883a 	add	r4,r4,r4
10008ee0:	1907883a 	add	r3,r3,r4
10008ee4:	290b883a 	add	r5,r5,r4
10008ee8:	30000626 	beq	r6,zero,10008f04 <memcpy+0x11c>
10008eec:	198d883a 	add	r6,r3,r6
10008ef0:	29c00003 	ldbu	r7,0(r5)
10008ef4:	18c00044 	addi	r3,r3,1
10008ef8:	29400044 	addi	r5,r5,1
10008efc:	19ffffc5 	stb	r7,-1(r3)
10008f00:	19bffb1e 	bne	r3,r6,10008ef0 <__alt_data_end+0xf8008ef0>
10008f04:	dfc00217 	ldw	ra,8(sp)
10008f08:	dc400117 	ldw	r17,4(sp)
10008f0c:	dc000017 	ldw	r16,0(sp)
10008f10:	dec00304 	addi	sp,sp,12
10008f14:	f800283a 	ret
10008f18:	2007883a 	mov	r3,r4
10008f1c:	003ff206 	br	10008ee8 <__alt_data_end+0xf8008ee8>
10008f20:	2007883a 	mov	r3,r4
10008f24:	003ff106 	br	10008eec <__alt_data_end+0xf8008eec>
10008f28:	200d883a 	mov	r6,r4
10008f2c:	003fee06 	br	10008ee8 <__alt_data_end+0xf8008ee8>

10008f30 <memmove>:
10008f30:	2005883a 	mov	r2,r4
10008f34:	29000b2e 	bgeu	r5,r4,10008f64 <memmove+0x34>
10008f38:	298f883a 	add	r7,r5,r6
10008f3c:	21c0092e 	bgeu	r4,r7,10008f64 <memmove+0x34>
10008f40:	2187883a 	add	r3,r4,r6
10008f44:	198bc83a 	sub	r5,r3,r6
10008f48:	30004826 	beq	r6,zero,1000906c <memmove+0x13c>
10008f4c:	39ffffc4 	addi	r7,r7,-1
10008f50:	39000003 	ldbu	r4,0(r7)
10008f54:	18ffffc4 	addi	r3,r3,-1
10008f58:	19000005 	stb	r4,0(r3)
10008f5c:	28fffb1e 	bne	r5,r3,10008f4c <__alt_data_end+0xf8008f4c>
10008f60:	f800283a 	ret
10008f64:	00c003c4 	movi	r3,15
10008f68:	1980412e 	bgeu	r3,r6,10009070 <memmove+0x140>
10008f6c:	2886b03a 	or	r3,r5,r2
10008f70:	18c000cc 	andi	r3,r3,3
10008f74:	1800401e 	bne	r3,zero,10009078 <memmove+0x148>
10008f78:	33fffc04 	addi	r15,r6,-16
10008f7c:	781ed13a 	srli	r15,r15,4
10008f80:	28c00104 	addi	r3,r5,4
10008f84:	13400104 	addi	r13,r2,4
10008f88:	781c913a 	slli	r14,r15,4
10008f8c:	2b000204 	addi	r12,r5,8
10008f90:	12c00204 	addi	r11,r2,8
10008f94:	73800504 	addi	r14,r14,20
10008f98:	2a800304 	addi	r10,r5,12
10008f9c:	12400304 	addi	r9,r2,12
10008fa0:	2b9d883a 	add	r14,r5,r14
10008fa4:	2811883a 	mov	r8,r5
10008fa8:	100f883a 	mov	r7,r2
10008fac:	41000017 	ldw	r4,0(r8)
10008fb0:	39c00404 	addi	r7,r7,16
10008fb4:	18c00404 	addi	r3,r3,16
10008fb8:	393ffc15 	stw	r4,-16(r7)
10008fbc:	193ffc17 	ldw	r4,-16(r3)
10008fc0:	6b400404 	addi	r13,r13,16
10008fc4:	5ac00404 	addi	r11,r11,16
10008fc8:	693ffc15 	stw	r4,-16(r13)
10008fcc:	61000017 	ldw	r4,0(r12)
10008fd0:	4a400404 	addi	r9,r9,16
10008fd4:	42000404 	addi	r8,r8,16
10008fd8:	593ffc15 	stw	r4,-16(r11)
10008fdc:	51000017 	ldw	r4,0(r10)
10008fe0:	63000404 	addi	r12,r12,16
10008fe4:	52800404 	addi	r10,r10,16
10008fe8:	493ffc15 	stw	r4,-16(r9)
10008fec:	1bbfef1e 	bne	r3,r14,10008fac <__alt_data_end+0xf8008fac>
10008ff0:	79000044 	addi	r4,r15,1
10008ff4:	2008913a 	slli	r4,r4,4
10008ff8:	328003cc 	andi	r10,r6,15
10008ffc:	02c000c4 	movi	r11,3
10009000:	1107883a 	add	r3,r2,r4
10009004:	290b883a 	add	r5,r5,r4
10009008:	5a801e2e 	bgeu	r11,r10,10009084 <memmove+0x154>
1000900c:	1813883a 	mov	r9,r3
10009010:	2811883a 	mov	r8,r5
10009014:	500f883a 	mov	r7,r10
10009018:	41000017 	ldw	r4,0(r8)
1000901c:	4a400104 	addi	r9,r9,4
10009020:	39ffff04 	addi	r7,r7,-4
10009024:	493fff15 	stw	r4,-4(r9)
10009028:	42000104 	addi	r8,r8,4
1000902c:	59fffa36 	bltu	r11,r7,10009018 <__alt_data_end+0xf8009018>
10009030:	513fff04 	addi	r4,r10,-4
10009034:	2008d0ba 	srli	r4,r4,2
10009038:	318000cc 	andi	r6,r6,3
1000903c:	21000044 	addi	r4,r4,1
10009040:	2109883a 	add	r4,r4,r4
10009044:	2109883a 	add	r4,r4,r4
10009048:	1907883a 	add	r3,r3,r4
1000904c:	290b883a 	add	r5,r5,r4
10009050:	30000b26 	beq	r6,zero,10009080 <memmove+0x150>
10009054:	198d883a 	add	r6,r3,r6
10009058:	29c00003 	ldbu	r7,0(r5)
1000905c:	18c00044 	addi	r3,r3,1
10009060:	29400044 	addi	r5,r5,1
10009064:	19ffffc5 	stb	r7,-1(r3)
10009068:	19bffb1e 	bne	r3,r6,10009058 <__alt_data_end+0xf8009058>
1000906c:	f800283a 	ret
10009070:	1007883a 	mov	r3,r2
10009074:	003ff606 	br	10009050 <__alt_data_end+0xf8009050>
10009078:	1007883a 	mov	r3,r2
1000907c:	003ff506 	br	10009054 <__alt_data_end+0xf8009054>
10009080:	f800283a 	ret
10009084:	500d883a 	mov	r6,r10
10009088:	003ff106 	br	10009050 <__alt_data_end+0xf8009050>

1000908c <memset>:
1000908c:	20c000cc 	andi	r3,r4,3
10009090:	2005883a 	mov	r2,r4
10009094:	18004426 	beq	r3,zero,100091a8 <memset+0x11c>
10009098:	31ffffc4 	addi	r7,r6,-1
1000909c:	30004026 	beq	r6,zero,100091a0 <memset+0x114>
100090a0:	2813883a 	mov	r9,r5
100090a4:	200d883a 	mov	r6,r4
100090a8:	2007883a 	mov	r3,r4
100090ac:	00000406 	br	100090c0 <memset+0x34>
100090b0:	3a3fffc4 	addi	r8,r7,-1
100090b4:	31800044 	addi	r6,r6,1
100090b8:	38003926 	beq	r7,zero,100091a0 <memset+0x114>
100090bc:	400f883a 	mov	r7,r8
100090c0:	18c00044 	addi	r3,r3,1
100090c4:	32400005 	stb	r9,0(r6)
100090c8:	1a0000cc 	andi	r8,r3,3
100090cc:	403ff81e 	bne	r8,zero,100090b0 <__alt_data_end+0xf80090b0>
100090d0:	010000c4 	movi	r4,3
100090d4:	21c02d2e 	bgeu	r4,r7,1000918c <memset+0x100>
100090d8:	29003fcc 	andi	r4,r5,255
100090dc:	200c923a 	slli	r6,r4,8
100090e0:	3108b03a 	or	r4,r6,r4
100090e4:	200c943a 	slli	r6,r4,16
100090e8:	218cb03a 	or	r6,r4,r6
100090ec:	010003c4 	movi	r4,15
100090f0:	21c0182e 	bgeu	r4,r7,10009154 <memset+0xc8>
100090f4:	3b3ffc04 	addi	r12,r7,-16
100090f8:	6018d13a 	srli	r12,r12,4
100090fc:	1a000104 	addi	r8,r3,4
10009100:	1ac00204 	addi	r11,r3,8
10009104:	6008913a 	slli	r4,r12,4
10009108:	1a800304 	addi	r10,r3,12
1000910c:	1813883a 	mov	r9,r3
10009110:	21000504 	addi	r4,r4,20
10009114:	1909883a 	add	r4,r3,r4
10009118:	49800015 	stw	r6,0(r9)
1000911c:	41800015 	stw	r6,0(r8)
10009120:	59800015 	stw	r6,0(r11)
10009124:	51800015 	stw	r6,0(r10)
10009128:	42000404 	addi	r8,r8,16
1000912c:	4a400404 	addi	r9,r9,16
10009130:	5ac00404 	addi	r11,r11,16
10009134:	52800404 	addi	r10,r10,16
10009138:	413ff71e 	bne	r8,r4,10009118 <__alt_data_end+0xf8009118>
1000913c:	63000044 	addi	r12,r12,1
10009140:	6018913a 	slli	r12,r12,4
10009144:	39c003cc 	andi	r7,r7,15
10009148:	010000c4 	movi	r4,3
1000914c:	1b07883a 	add	r3,r3,r12
10009150:	21c00e2e 	bgeu	r4,r7,1000918c <memset+0x100>
10009154:	1813883a 	mov	r9,r3
10009158:	3811883a 	mov	r8,r7
1000915c:	010000c4 	movi	r4,3
10009160:	49800015 	stw	r6,0(r9)
10009164:	423fff04 	addi	r8,r8,-4
10009168:	4a400104 	addi	r9,r9,4
1000916c:	223ffc36 	bltu	r4,r8,10009160 <__alt_data_end+0xf8009160>
10009170:	393fff04 	addi	r4,r7,-4
10009174:	2008d0ba 	srli	r4,r4,2
10009178:	39c000cc 	andi	r7,r7,3
1000917c:	21000044 	addi	r4,r4,1
10009180:	2109883a 	add	r4,r4,r4
10009184:	2109883a 	add	r4,r4,r4
10009188:	1907883a 	add	r3,r3,r4
1000918c:	38000526 	beq	r7,zero,100091a4 <memset+0x118>
10009190:	19cf883a 	add	r7,r3,r7
10009194:	19400005 	stb	r5,0(r3)
10009198:	18c00044 	addi	r3,r3,1
1000919c:	38fffd1e 	bne	r7,r3,10009194 <__alt_data_end+0xf8009194>
100091a0:	f800283a 	ret
100091a4:	f800283a 	ret
100091a8:	2007883a 	mov	r3,r4
100091ac:	300f883a 	mov	r7,r6
100091b0:	003fc706 	br	100090d0 <__alt_data_end+0xf80090d0>

100091b4 <_Balloc>:
100091b4:	20801317 	ldw	r2,76(r4)
100091b8:	defffc04 	addi	sp,sp,-16
100091bc:	dc400115 	stw	r17,4(sp)
100091c0:	dc000015 	stw	r16,0(sp)
100091c4:	dfc00315 	stw	ra,12(sp)
100091c8:	dc800215 	stw	r18,8(sp)
100091cc:	2023883a 	mov	r17,r4
100091d0:	2821883a 	mov	r16,r5
100091d4:	10000f26 	beq	r2,zero,10009214 <_Balloc+0x60>
100091d8:	8407883a 	add	r3,r16,r16
100091dc:	18c7883a 	add	r3,r3,r3
100091e0:	10c7883a 	add	r3,r2,r3
100091e4:	18800017 	ldw	r2,0(r3)
100091e8:	10001126 	beq	r2,zero,10009230 <_Balloc+0x7c>
100091ec:	11000017 	ldw	r4,0(r2)
100091f0:	19000015 	stw	r4,0(r3)
100091f4:	10000415 	stw	zero,16(r2)
100091f8:	10000315 	stw	zero,12(r2)
100091fc:	dfc00317 	ldw	ra,12(sp)
10009200:	dc800217 	ldw	r18,8(sp)
10009204:	dc400117 	ldw	r17,4(sp)
10009208:	dc000017 	ldw	r16,0(sp)
1000920c:	dec00404 	addi	sp,sp,16
10009210:	f800283a 	ret
10009214:	01800844 	movi	r6,33
10009218:	01400104 	movi	r5,4
1000921c:	000c25c0 	call	1000c25c <_calloc_r>
10009220:	88801315 	stw	r2,76(r17)
10009224:	103fec1e 	bne	r2,zero,100091d8 <__alt_data_end+0xf80091d8>
10009228:	0005883a 	mov	r2,zero
1000922c:	003ff306 	br	100091fc <__alt_data_end+0xf80091fc>
10009230:	01400044 	movi	r5,1
10009234:	2c24983a 	sll	r18,r5,r16
10009238:	8809883a 	mov	r4,r17
1000923c:	91800144 	addi	r6,r18,5
10009240:	318d883a 	add	r6,r6,r6
10009244:	318d883a 	add	r6,r6,r6
10009248:	000c25c0 	call	1000c25c <_calloc_r>
1000924c:	103ff626 	beq	r2,zero,10009228 <__alt_data_end+0xf8009228>
10009250:	14000115 	stw	r16,4(r2)
10009254:	14800215 	stw	r18,8(r2)
10009258:	003fe606 	br	100091f4 <__alt_data_end+0xf80091f4>

1000925c <_Bfree>:
1000925c:	28000826 	beq	r5,zero,10009280 <_Bfree+0x24>
10009260:	28c00117 	ldw	r3,4(r5)
10009264:	20801317 	ldw	r2,76(r4)
10009268:	18c7883a 	add	r3,r3,r3
1000926c:	18c7883a 	add	r3,r3,r3
10009270:	10c5883a 	add	r2,r2,r3
10009274:	10c00017 	ldw	r3,0(r2)
10009278:	28c00015 	stw	r3,0(r5)
1000927c:	11400015 	stw	r5,0(r2)
10009280:	f800283a 	ret

10009284 <__multadd>:
10009284:	defff704 	addi	sp,sp,-36
10009288:	dc800215 	stw	r18,8(sp)
1000928c:	2c800417 	ldw	r18,16(r5)
10009290:	dd800615 	stw	r22,24(sp)
10009294:	dd400515 	stw	r21,20(sp)
10009298:	dd000415 	stw	r20,16(sp)
1000929c:	dcc00315 	stw	r19,12(sp)
100092a0:	dc400115 	stw	r17,4(sp)
100092a4:	dc000015 	stw	r16,0(sp)
100092a8:	dfc00815 	stw	ra,32(sp)
100092ac:	ddc00715 	stw	r23,28(sp)
100092b0:	2827883a 	mov	r19,r5
100092b4:	2029883a 	mov	r20,r4
100092b8:	3023883a 	mov	r17,r6
100092bc:	3821883a 	mov	r16,r7
100092c0:	2d400504 	addi	r21,r5,20
100092c4:	002d883a 	mov	r22,zero
100092c8:	adc00017 	ldw	r23,0(r21)
100092cc:	880b883a 	mov	r5,r17
100092d0:	ad400104 	addi	r21,r21,4
100092d4:	b93fffcc 	andi	r4,r23,65535
100092d8:	000d8680 	call	1000d868 <__mulsi3>
100092dc:	b808d43a 	srli	r4,r23,16
100092e0:	880b883a 	mov	r5,r17
100092e4:	1421883a 	add	r16,r2,r16
100092e8:	000d8680 	call	1000d868 <__mulsi3>
100092ec:	800ed43a 	srli	r7,r16,16
100092f0:	80ffffcc 	andi	r3,r16,65535
100092f4:	b5800044 	addi	r22,r22,1
100092f8:	11c5883a 	add	r2,r2,r7
100092fc:	100e943a 	slli	r7,r2,16
10009300:	1020d43a 	srli	r16,r2,16
10009304:	38c7883a 	add	r3,r7,r3
10009308:	a8ffff15 	stw	r3,-4(r21)
1000930c:	b4bfee16 	blt	r22,r18,100092c8 <__alt_data_end+0xf80092c8>
10009310:	80000926 	beq	r16,zero,10009338 <__multadd+0xb4>
10009314:	98800217 	ldw	r2,8(r19)
10009318:	9080130e 	bge	r18,r2,10009368 <__multadd+0xe4>
1000931c:	90800144 	addi	r2,r18,5
10009320:	1085883a 	add	r2,r2,r2
10009324:	1085883a 	add	r2,r2,r2
10009328:	9885883a 	add	r2,r19,r2
1000932c:	14000015 	stw	r16,0(r2)
10009330:	94800044 	addi	r18,r18,1
10009334:	9c800415 	stw	r18,16(r19)
10009338:	9805883a 	mov	r2,r19
1000933c:	dfc00817 	ldw	ra,32(sp)
10009340:	ddc00717 	ldw	r23,28(sp)
10009344:	dd800617 	ldw	r22,24(sp)
10009348:	dd400517 	ldw	r21,20(sp)
1000934c:	dd000417 	ldw	r20,16(sp)
10009350:	dcc00317 	ldw	r19,12(sp)
10009354:	dc800217 	ldw	r18,8(sp)
10009358:	dc400117 	ldw	r17,4(sp)
1000935c:	dc000017 	ldw	r16,0(sp)
10009360:	dec00904 	addi	sp,sp,36
10009364:	f800283a 	ret
10009368:	99400117 	ldw	r5,4(r19)
1000936c:	a009883a 	mov	r4,r20
10009370:	29400044 	addi	r5,r5,1
10009374:	00091b40 	call	100091b4 <_Balloc>
10009378:	99800417 	ldw	r6,16(r19)
1000937c:	99400304 	addi	r5,r19,12
10009380:	11000304 	addi	r4,r2,12
10009384:	31800084 	addi	r6,r6,2
10009388:	318d883a 	add	r6,r6,r6
1000938c:	318d883a 	add	r6,r6,r6
10009390:	1023883a 	mov	r17,r2
10009394:	0008de80 	call	10008de8 <memcpy>
10009398:	98000a26 	beq	r19,zero,100093c4 <__multadd+0x140>
1000939c:	98c00117 	ldw	r3,4(r19)
100093a0:	a0801317 	ldw	r2,76(r20)
100093a4:	18c7883a 	add	r3,r3,r3
100093a8:	18c7883a 	add	r3,r3,r3
100093ac:	10c5883a 	add	r2,r2,r3
100093b0:	10c00017 	ldw	r3,0(r2)
100093b4:	98c00015 	stw	r3,0(r19)
100093b8:	14c00015 	stw	r19,0(r2)
100093bc:	8827883a 	mov	r19,r17
100093c0:	003fd606 	br	1000931c <__alt_data_end+0xf800931c>
100093c4:	8827883a 	mov	r19,r17
100093c8:	003fd406 	br	1000931c <__alt_data_end+0xf800931c>

100093cc <__s2b>:
100093cc:	defff904 	addi	sp,sp,-28
100093d0:	dc400115 	stw	r17,4(sp)
100093d4:	dc000015 	stw	r16,0(sp)
100093d8:	2023883a 	mov	r17,r4
100093dc:	2821883a 	mov	r16,r5
100093e0:	39000204 	addi	r4,r7,8
100093e4:	01400244 	movi	r5,9
100093e8:	dcc00315 	stw	r19,12(sp)
100093ec:	dc800215 	stw	r18,8(sp)
100093f0:	dfc00615 	stw	ra,24(sp)
100093f4:	dd400515 	stw	r21,20(sp)
100093f8:	dd000415 	stw	r20,16(sp)
100093fc:	3825883a 	mov	r18,r7
10009400:	3027883a 	mov	r19,r6
10009404:	000d6b40 	call	1000d6b4 <__divsi3>
10009408:	00c00044 	movi	r3,1
1000940c:	000b883a 	mov	r5,zero
10009410:	1880030e 	bge	r3,r2,10009420 <__s2b+0x54>
10009414:	18c7883a 	add	r3,r3,r3
10009418:	29400044 	addi	r5,r5,1
1000941c:	18bffd16 	blt	r3,r2,10009414 <__alt_data_end+0xf8009414>
10009420:	8809883a 	mov	r4,r17
10009424:	00091b40 	call	100091b4 <_Balloc>
10009428:	d8c00717 	ldw	r3,28(sp)
1000942c:	10c00515 	stw	r3,20(r2)
10009430:	00c00044 	movi	r3,1
10009434:	10c00415 	stw	r3,16(r2)
10009438:	00c00244 	movi	r3,9
1000943c:	1cc0210e 	bge	r3,r19,100094c4 <__s2b+0xf8>
10009440:	80eb883a 	add	r21,r16,r3
10009444:	a829883a 	mov	r20,r21
10009448:	84e1883a 	add	r16,r16,r19
1000944c:	a1c00007 	ldb	r7,0(r20)
10009450:	01800284 	movi	r6,10
10009454:	a5000044 	addi	r20,r20,1
10009458:	100b883a 	mov	r5,r2
1000945c:	39fff404 	addi	r7,r7,-48
10009460:	8809883a 	mov	r4,r17
10009464:	00092840 	call	10009284 <__multadd>
10009468:	a43ff81e 	bne	r20,r16,1000944c <__alt_data_end+0xf800944c>
1000946c:	ace1883a 	add	r16,r21,r19
10009470:	843ffe04 	addi	r16,r16,-8
10009474:	9c800a0e 	bge	r19,r18,100094a0 <__s2b+0xd4>
10009478:	94e5c83a 	sub	r18,r18,r19
1000947c:	84a5883a 	add	r18,r16,r18
10009480:	81c00007 	ldb	r7,0(r16)
10009484:	01800284 	movi	r6,10
10009488:	84000044 	addi	r16,r16,1
1000948c:	100b883a 	mov	r5,r2
10009490:	39fff404 	addi	r7,r7,-48
10009494:	8809883a 	mov	r4,r17
10009498:	00092840 	call	10009284 <__multadd>
1000949c:	84bff81e 	bne	r16,r18,10009480 <__alt_data_end+0xf8009480>
100094a0:	dfc00617 	ldw	ra,24(sp)
100094a4:	dd400517 	ldw	r21,20(sp)
100094a8:	dd000417 	ldw	r20,16(sp)
100094ac:	dcc00317 	ldw	r19,12(sp)
100094b0:	dc800217 	ldw	r18,8(sp)
100094b4:	dc400117 	ldw	r17,4(sp)
100094b8:	dc000017 	ldw	r16,0(sp)
100094bc:	dec00704 	addi	sp,sp,28
100094c0:	f800283a 	ret
100094c4:	84000284 	addi	r16,r16,10
100094c8:	1827883a 	mov	r19,r3
100094cc:	003fe906 	br	10009474 <__alt_data_end+0xf8009474>

100094d0 <__hi0bits>:
100094d0:	20bfffec 	andhi	r2,r4,65535
100094d4:	1000141e 	bne	r2,zero,10009528 <__hi0bits+0x58>
100094d8:	2008943a 	slli	r4,r4,16
100094dc:	00800404 	movi	r2,16
100094e0:	20ffc02c 	andhi	r3,r4,65280
100094e4:	1800021e 	bne	r3,zero,100094f0 <__hi0bits+0x20>
100094e8:	2008923a 	slli	r4,r4,8
100094ec:	10800204 	addi	r2,r2,8
100094f0:	20fc002c 	andhi	r3,r4,61440
100094f4:	1800021e 	bne	r3,zero,10009500 <__hi0bits+0x30>
100094f8:	2008913a 	slli	r4,r4,4
100094fc:	10800104 	addi	r2,r2,4
10009500:	20f0002c 	andhi	r3,r4,49152
10009504:	1800031e 	bne	r3,zero,10009514 <__hi0bits+0x44>
10009508:	2109883a 	add	r4,r4,r4
1000950c:	10800084 	addi	r2,r2,2
10009510:	2109883a 	add	r4,r4,r4
10009514:	20000316 	blt	r4,zero,10009524 <__hi0bits+0x54>
10009518:	2110002c 	andhi	r4,r4,16384
1000951c:	2000041e 	bne	r4,zero,10009530 <__hi0bits+0x60>
10009520:	00800804 	movi	r2,32
10009524:	f800283a 	ret
10009528:	0005883a 	mov	r2,zero
1000952c:	003fec06 	br	100094e0 <__alt_data_end+0xf80094e0>
10009530:	10800044 	addi	r2,r2,1
10009534:	f800283a 	ret

10009538 <__lo0bits>:
10009538:	20c00017 	ldw	r3,0(r4)
1000953c:	188001cc 	andi	r2,r3,7
10009540:	10000826 	beq	r2,zero,10009564 <__lo0bits+0x2c>
10009544:	1880004c 	andi	r2,r3,1
10009548:	1000211e 	bne	r2,zero,100095d0 <__lo0bits+0x98>
1000954c:	1880008c 	andi	r2,r3,2
10009550:	1000211e 	bne	r2,zero,100095d8 <__lo0bits+0xa0>
10009554:	1806d0ba 	srli	r3,r3,2
10009558:	00800084 	movi	r2,2
1000955c:	20c00015 	stw	r3,0(r4)
10009560:	f800283a 	ret
10009564:	18bfffcc 	andi	r2,r3,65535
10009568:	10001326 	beq	r2,zero,100095b8 <__lo0bits+0x80>
1000956c:	0005883a 	mov	r2,zero
10009570:	19403fcc 	andi	r5,r3,255
10009574:	2800021e 	bne	r5,zero,10009580 <__lo0bits+0x48>
10009578:	1806d23a 	srli	r3,r3,8
1000957c:	10800204 	addi	r2,r2,8
10009580:	194003cc 	andi	r5,r3,15
10009584:	2800021e 	bne	r5,zero,10009590 <__lo0bits+0x58>
10009588:	1806d13a 	srli	r3,r3,4
1000958c:	10800104 	addi	r2,r2,4
10009590:	194000cc 	andi	r5,r3,3
10009594:	2800021e 	bne	r5,zero,100095a0 <__lo0bits+0x68>
10009598:	1806d0ba 	srli	r3,r3,2
1000959c:	10800084 	addi	r2,r2,2
100095a0:	1940004c 	andi	r5,r3,1
100095a4:	2800081e 	bne	r5,zero,100095c8 <__lo0bits+0x90>
100095a8:	1806d07a 	srli	r3,r3,1
100095ac:	1800051e 	bne	r3,zero,100095c4 <__lo0bits+0x8c>
100095b0:	00800804 	movi	r2,32
100095b4:	f800283a 	ret
100095b8:	1806d43a 	srli	r3,r3,16
100095bc:	00800404 	movi	r2,16
100095c0:	003feb06 	br	10009570 <__alt_data_end+0xf8009570>
100095c4:	10800044 	addi	r2,r2,1
100095c8:	20c00015 	stw	r3,0(r4)
100095cc:	f800283a 	ret
100095d0:	0005883a 	mov	r2,zero
100095d4:	f800283a 	ret
100095d8:	1806d07a 	srli	r3,r3,1
100095dc:	00800044 	movi	r2,1
100095e0:	20c00015 	stw	r3,0(r4)
100095e4:	f800283a 	ret

100095e8 <__i2b>:
100095e8:	defffd04 	addi	sp,sp,-12
100095ec:	dc000015 	stw	r16,0(sp)
100095f0:	04000044 	movi	r16,1
100095f4:	dc400115 	stw	r17,4(sp)
100095f8:	2823883a 	mov	r17,r5
100095fc:	800b883a 	mov	r5,r16
10009600:	dfc00215 	stw	ra,8(sp)
10009604:	00091b40 	call	100091b4 <_Balloc>
10009608:	14400515 	stw	r17,20(r2)
1000960c:	14000415 	stw	r16,16(r2)
10009610:	dfc00217 	ldw	ra,8(sp)
10009614:	dc400117 	ldw	r17,4(sp)
10009618:	dc000017 	ldw	r16,0(sp)
1000961c:	dec00304 	addi	sp,sp,12
10009620:	f800283a 	ret

10009624 <__multiply>:
10009624:	deffef04 	addi	sp,sp,-68
10009628:	dc400815 	stw	r17,32(sp)
1000962c:	dc000715 	stw	r16,28(sp)
10009630:	34400417 	ldw	r17,16(r6)
10009634:	2c000417 	ldw	r16,16(r5)
10009638:	dd800d15 	stw	r22,52(sp)
1000963c:	dc800915 	stw	r18,36(sp)
10009640:	dfc01015 	stw	ra,64(sp)
10009644:	df000f15 	stw	fp,60(sp)
10009648:	ddc00e15 	stw	r23,56(sp)
1000964c:	dd400c15 	stw	r21,48(sp)
10009650:	dd000b15 	stw	r20,44(sp)
10009654:	dcc00a15 	stw	r19,40(sp)
10009658:	2825883a 	mov	r18,r5
1000965c:	302d883a 	mov	r22,r6
10009660:	8440050e 	bge	r16,r17,10009678 <__multiply+0x54>
10009664:	8007883a 	mov	r3,r16
10009668:	3025883a 	mov	r18,r6
1000966c:	8821883a 	mov	r16,r17
10009670:	282d883a 	mov	r22,r5
10009674:	1823883a 	mov	r17,r3
10009678:	90800217 	ldw	r2,8(r18)
1000967c:	8447883a 	add	r3,r16,r17
10009680:	d8c00215 	stw	r3,8(sp)
10009684:	91400117 	ldw	r5,4(r18)
10009688:	10c0010e 	bge	r2,r3,10009690 <__multiply+0x6c>
1000968c:	29400044 	addi	r5,r5,1
10009690:	00091b40 	call	100091b4 <_Balloc>
10009694:	d8c00217 	ldw	r3,8(sp)
10009698:	d8800615 	stw	r2,24(sp)
1000969c:	18eb883a 	add	r21,r3,r3
100096a0:	ad6b883a 	add	r21,r21,r21
100096a4:	10c00504 	addi	r3,r2,20
100096a8:	1d6b883a 	add	r21,r3,r21
100096ac:	d8c00115 	stw	r3,4(sp)
100096b0:	dd400315 	stw	r21,12(sp)
100096b4:	1805883a 	mov	r2,r3
100096b8:	1d40042e 	bgeu	r3,r21,100096cc <__multiply+0xa8>
100096bc:	d8c00317 	ldw	r3,12(sp)
100096c0:	10000015 	stw	zero,0(r2)
100096c4:	10800104 	addi	r2,r2,4
100096c8:	10fffc36 	bltu	r2,r3,100096bc <__alt_data_end+0xf80096bc>
100096cc:	8c63883a 	add	r17,r17,r17
100096d0:	b5800504 	addi	r22,r22,20
100096d4:	8c63883a 	add	r17,r17,r17
100096d8:	94800504 	addi	r18,r18,20
100096dc:	8421883a 	add	r16,r16,r16
100096e0:	b463883a 	add	r17,r22,r17
100096e4:	8421883a 	add	r16,r16,r16
100096e8:	dd800015 	stw	r22,0(sp)
100096ec:	dc800415 	stw	r18,16(sp)
100096f0:	dc400515 	stw	r17,20(sp)
100096f4:	9429883a 	add	r20,r18,r16
100096f8:	b4404f2e 	bgeu	r22,r17,10009838 <__multiply+0x214>
100096fc:	d8c00017 	ldw	r3,0(sp)
10009700:	1c800017 	ldw	r18,0(r3)
10009704:	947fffcc 	andi	r17,r18,65535
10009708:	88001e26 	beq	r17,zero,10009784 <__multiply+0x160>
1000970c:	dd800117 	ldw	r22,4(sp)
10009710:	dd400417 	ldw	r21,16(sp)
10009714:	0027883a 	mov	r19,zero
10009718:	ac800017 	ldw	r18,0(r21)
1000971c:	b4000017 	ldw	r16,0(r22)
10009720:	880b883a 	mov	r5,r17
10009724:	913fffcc 	andi	r4,r18,65535
10009728:	000d8680 	call	1000d868 <__mulsi3>
1000972c:	9008d43a 	srli	r4,r18,16
10009730:	84bfffcc 	andi	r18,r16,65535
10009734:	1485883a 	add	r2,r2,r18
10009738:	14e5883a 	add	r18,r2,r19
1000973c:	8020d43a 	srli	r16,r16,16
10009740:	9026d43a 	srli	r19,r18,16
10009744:	880b883a 	mov	r5,r17
10009748:	000d8680 	call	1000d868 <__mulsi3>
1000974c:	1405883a 	add	r2,r2,r16
10009750:	14e1883a 	add	r16,r2,r19
10009754:	90ffffcc 	andi	r3,r18,65535
10009758:	8024943a 	slli	r18,r16,16
1000975c:	ad400104 	addi	r21,r21,4
10009760:	b005883a 	mov	r2,r22
10009764:	90c6b03a 	or	r3,r18,r3
10009768:	b0c00015 	stw	r3,0(r22)
1000976c:	8026d43a 	srli	r19,r16,16
10009770:	b5800104 	addi	r22,r22,4
10009774:	ad3fe836 	bltu	r21,r20,10009718 <__alt_data_end+0xf8009718>
10009778:	d8c00017 	ldw	r3,0(sp)
1000977c:	14c00115 	stw	r19,4(r2)
10009780:	1c800017 	ldw	r18,0(r3)
10009784:	9024d43a 	srli	r18,r18,16
10009788:	90002226 	beq	r18,zero,10009814 <__multiply+0x1f0>
1000978c:	d8c00117 	ldw	r3,4(sp)
10009790:	dd800417 	ldw	r22,16(sp)
10009794:	002f883a 	mov	r23,zero
10009798:	1f000017 	ldw	fp,0(r3)
1000979c:	1823883a 	mov	r17,r3
100097a0:	182b883a 	mov	r21,r3
100097a4:	e021883a 	mov	r16,fp
100097a8:	00000106 	br	100097b0 <__multiply+0x18c>
100097ac:	982b883a 	mov	r21,r19
100097b0:	b100000b 	ldhu	r4,0(r22)
100097b4:	8020d43a 	srli	r16,r16,16
100097b8:	900b883a 	mov	r5,r18
100097bc:	000d8680 	call	1000d868 <__mulsi3>
100097c0:	1405883a 	add	r2,r2,r16
100097c4:	15ef883a 	add	r23,r2,r23
100097c8:	b804943a 	slli	r2,r23,16
100097cc:	e0ffffcc 	andi	r3,fp,65535
100097d0:	8c400104 	addi	r17,r17,4
100097d4:	10c6b03a 	or	r3,r2,r3
100097d8:	88ffff15 	stw	r3,-4(r17)
100097dc:	b5800104 	addi	r22,r22,4
100097e0:	b13fff17 	ldw	r4,-4(r22)
100097e4:	acc00104 	addi	r19,r21,4
100097e8:	900b883a 	mov	r5,r18
100097ec:	2008d43a 	srli	r4,r4,16
100097f0:	9c000017 	ldw	r16,0(r19)
100097f4:	000d8680 	call	1000d868 <__mulsi3>
100097f8:	b806d43a 	srli	r3,r23,16
100097fc:	813fffcc 	andi	r4,r16,65535
10009800:	1105883a 	add	r2,r2,r4
10009804:	10f9883a 	add	fp,r2,r3
10009808:	e02ed43a 	srli	r23,fp,16
1000980c:	b53fe736 	bltu	r22,r20,100097ac <__alt_data_end+0xf80097ac>
10009810:	af000115 	stw	fp,4(r21)
10009814:	d8c00017 	ldw	r3,0(sp)
10009818:	d9000517 	ldw	r4,20(sp)
1000981c:	18c00104 	addi	r3,r3,4
10009820:	d8c00015 	stw	r3,0(sp)
10009824:	d8c00117 	ldw	r3,4(sp)
10009828:	18c00104 	addi	r3,r3,4
1000982c:	d8c00115 	stw	r3,4(sp)
10009830:	d8c00017 	ldw	r3,0(sp)
10009834:	193fb136 	bltu	r3,r4,100096fc <__alt_data_end+0xf80096fc>
10009838:	d8c00217 	ldw	r3,8(sp)
1000983c:	00c00c0e 	bge	zero,r3,10009870 <__multiply+0x24c>
10009840:	d8c00317 	ldw	r3,12(sp)
10009844:	18bfff17 	ldw	r2,-4(r3)
10009848:	1d7fff04 	addi	r21,r3,-4
1000984c:	10000326 	beq	r2,zero,1000985c <__multiply+0x238>
10009850:	00000706 	br	10009870 <__multiply+0x24c>
10009854:	a8800017 	ldw	r2,0(r21)
10009858:	1000051e 	bne	r2,zero,10009870 <__multiply+0x24c>
1000985c:	d8c00217 	ldw	r3,8(sp)
10009860:	ad7fff04 	addi	r21,r21,-4
10009864:	18ffffc4 	addi	r3,r3,-1
10009868:	d8c00215 	stw	r3,8(sp)
1000986c:	183ff91e 	bne	r3,zero,10009854 <__alt_data_end+0xf8009854>
10009870:	d8c00617 	ldw	r3,24(sp)
10009874:	d9000217 	ldw	r4,8(sp)
10009878:	1805883a 	mov	r2,r3
1000987c:	19000415 	stw	r4,16(r3)
10009880:	dfc01017 	ldw	ra,64(sp)
10009884:	df000f17 	ldw	fp,60(sp)
10009888:	ddc00e17 	ldw	r23,56(sp)
1000988c:	dd800d17 	ldw	r22,52(sp)
10009890:	dd400c17 	ldw	r21,48(sp)
10009894:	dd000b17 	ldw	r20,44(sp)
10009898:	dcc00a17 	ldw	r19,40(sp)
1000989c:	dc800917 	ldw	r18,36(sp)
100098a0:	dc400817 	ldw	r17,32(sp)
100098a4:	dc000717 	ldw	r16,28(sp)
100098a8:	dec01104 	addi	sp,sp,68
100098ac:	f800283a 	ret

100098b0 <__pow5mult>:
100098b0:	defffa04 	addi	sp,sp,-24
100098b4:	dcc00315 	stw	r19,12(sp)
100098b8:	dc000015 	stw	r16,0(sp)
100098bc:	dfc00515 	stw	ra,20(sp)
100098c0:	dd000415 	stw	r20,16(sp)
100098c4:	dc800215 	stw	r18,8(sp)
100098c8:	dc400115 	stw	r17,4(sp)
100098cc:	308000cc 	andi	r2,r6,3
100098d0:	3021883a 	mov	r16,r6
100098d4:	2027883a 	mov	r19,r4
100098d8:	10002f1e 	bne	r2,zero,10009998 <__pow5mult+0xe8>
100098dc:	2825883a 	mov	r18,r5
100098e0:	8021d0ba 	srai	r16,r16,2
100098e4:	80001a26 	beq	r16,zero,10009950 <__pow5mult+0xa0>
100098e8:	9c401217 	ldw	r17,72(r19)
100098ec:	8800061e 	bne	r17,zero,10009908 <__pow5mult+0x58>
100098f0:	00003406 	br	100099c4 <__pow5mult+0x114>
100098f4:	8021d07a 	srai	r16,r16,1
100098f8:	80001526 	beq	r16,zero,10009950 <__pow5mult+0xa0>
100098fc:	88800017 	ldw	r2,0(r17)
10009900:	10001c26 	beq	r2,zero,10009974 <__pow5mult+0xc4>
10009904:	1023883a 	mov	r17,r2
10009908:	8080004c 	andi	r2,r16,1
1000990c:	103ff926 	beq	r2,zero,100098f4 <__alt_data_end+0xf80098f4>
10009910:	880d883a 	mov	r6,r17
10009914:	900b883a 	mov	r5,r18
10009918:	9809883a 	mov	r4,r19
1000991c:	00096240 	call	10009624 <__multiply>
10009920:	90001b26 	beq	r18,zero,10009990 <__pow5mult+0xe0>
10009924:	91000117 	ldw	r4,4(r18)
10009928:	98c01317 	ldw	r3,76(r19)
1000992c:	8021d07a 	srai	r16,r16,1
10009930:	2109883a 	add	r4,r4,r4
10009934:	2109883a 	add	r4,r4,r4
10009938:	1907883a 	add	r3,r3,r4
1000993c:	19000017 	ldw	r4,0(r3)
10009940:	91000015 	stw	r4,0(r18)
10009944:	1c800015 	stw	r18,0(r3)
10009948:	1025883a 	mov	r18,r2
1000994c:	803feb1e 	bne	r16,zero,100098fc <__alt_data_end+0xf80098fc>
10009950:	9005883a 	mov	r2,r18
10009954:	dfc00517 	ldw	ra,20(sp)
10009958:	dd000417 	ldw	r20,16(sp)
1000995c:	dcc00317 	ldw	r19,12(sp)
10009960:	dc800217 	ldw	r18,8(sp)
10009964:	dc400117 	ldw	r17,4(sp)
10009968:	dc000017 	ldw	r16,0(sp)
1000996c:	dec00604 	addi	sp,sp,24
10009970:	f800283a 	ret
10009974:	880d883a 	mov	r6,r17
10009978:	880b883a 	mov	r5,r17
1000997c:	9809883a 	mov	r4,r19
10009980:	00096240 	call	10009624 <__multiply>
10009984:	88800015 	stw	r2,0(r17)
10009988:	10000015 	stw	zero,0(r2)
1000998c:	003fdd06 	br	10009904 <__alt_data_end+0xf8009904>
10009990:	1025883a 	mov	r18,r2
10009994:	003fd706 	br	100098f4 <__alt_data_end+0xf80098f4>
10009998:	10bfffc4 	addi	r2,r2,-1
1000999c:	1085883a 	add	r2,r2,r2
100099a0:	00c40074 	movhi	r3,4097
100099a4:	18cc6d04 	addi	r3,r3,12724
100099a8:	1085883a 	add	r2,r2,r2
100099ac:	1885883a 	add	r2,r3,r2
100099b0:	11800017 	ldw	r6,0(r2)
100099b4:	000f883a 	mov	r7,zero
100099b8:	00092840 	call	10009284 <__multadd>
100099bc:	1025883a 	mov	r18,r2
100099c0:	003fc706 	br	100098e0 <__alt_data_end+0xf80098e0>
100099c4:	05000044 	movi	r20,1
100099c8:	a00b883a 	mov	r5,r20
100099cc:	9809883a 	mov	r4,r19
100099d0:	00091b40 	call	100091b4 <_Balloc>
100099d4:	1023883a 	mov	r17,r2
100099d8:	00809c44 	movi	r2,625
100099dc:	88800515 	stw	r2,20(r17)
100099e0:	8d000415 	stw	r20,16(r17)
100099e4:	9c401215 	stw	r17,72(r19)
100099e8:	88000015 	stw	zero,0(r17)
100099ec:	003fc606 	br	10009908 <__alt_data_end+0xf8009908>

100099f0 <__lshift>:
100099f0:	defff904 	addi	sp,sp,-28
100099f4:	dd400515 	stw	r21,20(sp)
100099f8:	dcc00315 	stw	r19,12(sp)
100099fc:	302bd17a 	srai	r21,r6,5
10009a00:	2cc00417 	ldw	r19,16(r5)
10009a04:	28800217 	ldw	r2,8(r5)
10009a08:	dd000415 	stw	r20,16(sp)
10009a0c:	ace7883a 	add	r19,r21,r19
10009a10:	dc800215 	stw	r18,8(sp)
10009a14:	dc400115 	stw	r17,4(sp)
10009a18:	dc000015 	stw	r16,0(sp)
10009a1c:	dfc00615 	stw	ra,24(sp)
10009a20:	9c000044 	addi	r16,r19,1
10009a24:	2823883a 	mov	r17,r5
10009a28:	3029883a 	mov	r20,r6
10009a2c:	2025883a 	mov	r18,r4
10009a30:	29400117 	ldw	r5,4(r5)
10009a34:	1400030e 	bge	r2,r16,10009a44 <__lshift+0x54>
10009a38:	1085883a 	add	r2,r2,r2
10009a3c:	29400044 	addi	r5,r5,1
10009a40:	143ffd16 	blt	r2,r16,10009a38 <__alt_data_end+0xf8009a38>
10009a44:	9009883a 	mov	r4,r18
10009a48:	00091b40 	call	100091b4 <_Balloc>
10009a4c:	10c00504 	addi	r3,r2,20
10009a50:	0540070e 	bge	zero,r21,10009a70 <__lshift+0x80>
10009a54:	ad6b883a 	add	r21,r21,r21
10009a58:	ad6b883a 	add	r21,r21,r21
10009a5c:	1809883a 	mov	r4,r3
10009a60:	1d47883a 	add	r3,r3,r21
10009a64:	20000015 	stw	zero,0(r4)
10009a68:	21000104 	addi	r4,r4,4
10009a6c:	193ffd1e 	bne	r3,r4,10009a64 <__alt_data_end+0xf8009a64>
10009a70:	8a000417 	ldw	r8,16(r17)
10009a74:	89000504 	addi	r4,r17,20
10009a78:	a18007cc 	andi	r6,r20,31
10009a7c:	4211883a 	add	r8,r8,r8
10009a80:	4211883a 	add	r8,r8,r8
10009a84:	2211883a 	add	r8,r4,r8
10009a88:	30002326 	beq	r6,zero,10009b18 <__lshift+0x128>
10009a8c:	02400804 	movi	r9,32
10009a90:	4993c83a 	sub	r9,r9,r6
10009a94:	000b883a 	mov	r5,zero
10009a98:	21c00017 	ldw	r7,0(r4)
10009a9c:	1815883a 	mov	r10,r3
10009aa0:	18c00104 	addi	r3,r3,4
10009aa4:	398e983a 	sll	r7,r7,r6
10009aa8:	21000104 	addi	r4,r4,4
10009aac:	394ab03a 	or	r5,r7,r5
10009ab0:	197fff15 	stw	r5,-4(r3)
10009ab4:	217fff17 	ldw	r5,-4(r4)
10009ab8:	2a4ad83a 	srl	r5,r5,r9
10009abc:	223ff636 	bltu	r4,r8,10009a98 <__alt_data_end+0xf8009a98>
10009ac0:	51400115 	stw	r5,4(r10)
10009ac4:	28001a1e 	bne	r5,zero,10009b30 <__lshift+0x140>
10009ac8:	843fffc4 	addi	r16,r16,-1
10009acc:	14000415 	stw	r16,16(r2)
10009ad0:	88000826 	beq	r17,zero,10009af4 <__lshift+0x104>
10009ad4:	89000117 	ldw	r4,4(r17)
10009ad8:	90c01317 	ldw	r3,76(r18)
10009adc:	2109883a 	add	r4,r4,r4
10009ae0:	2109883a 	add	r4,r4,r4
10009ae4:	1907883a 	add	r3,r3,r4
10009ae8:	19000017 	ldw	r4,0(r3)
10009aec:	89000015 	stw	r4,0(r17)
10009af0:	1c400015 	stw	r17,0(r3)
10009af4:	dfc00617 	ldw	ra,24(sp)
10009af8:	dd400517 	ldw	r21,20(sp)
10009afc:	dd000417 	ldw	r20,16(sp)
10009b00:	dcc00317 	ldw	r19,12(sp)
10009b04:	dc800217 	ldw	r18,8(sp)
10009b08:	dc400117 	ldw	r17,4(sp)
10009b0c:	dc000017 	ldw	r16,0(sp)
10009b10:	dec00704 	addi	sp,sp,28
10009b14:	f800283a 	ret
10009b18:	21400017 	ldw	r5,0(r4)
10009b1c:	18c00104 	addi	r3,r3,4
10009b20:	21000104 	addi	r4,r4,4
10009b24:	197fff15 	stw	r5,-4(r3)
10009b28:	223ffb36 	bltu	r4,r8,10009b18 <__alt_data_end+0xf8009b18>
10009b2c:	003fe606 	br	10009ac8 <__alt_data_end+0xf8009ac8>
10009b30:	9c000084 	addi	r16,r19,2
10009b34:	003fe406 	br	10009ac8 <__alt_data_end+0xf8009ac8>

10009b38 <__mcmp>:
10009b38:	20800417 	ldw	r2,16(r4)
10009b3c:	28c00417 	ldw	r3,16(r5)
10009b40:	10c5c83a 	sub	r2,r2,r3
10009b44:	1000111e 	bne	r2,zero,10009b8c <__mcmp+0x54>
10009b48:	18c7883a 	add	r3,r3,r3
10009b4c:	18c7883a 	add	r3,r3,r3
10009b50:	21000504 	addi	r4,r4,20
10009b54:	29400504 	addi	r5,r5,20
10009b58:	20c5883a 	add	r2,r4,r3
10009b5c:	28cb883a 	add	r5,r5,r3
10009b60:	00000106 	br	10009b68 <__mcmp+0x30>
10009b64:	20800a2e 	bgeu	r4,r2,10009b90 <__mcmp+0x58>
10009b68:	10bfff04 	addi	r2,r2,-4
10009b6c:	297fff04 	addi	r5,r5,-4
10009b70:	11800017 	ldw	r6,0(r2)
10009b74:	28c00017 	ldw	r3,0(r5)
10009b78:	30fffa26 	beq	r6,r3,10009b64 <__alt_data_end+0xf8009b64>
10009b7c:	30c00236 	bltu	r6,r3,10009b88 <__mcmp+0x50>
10009b80:	00800044 	movi	r2,1
10009b84:	f800283a 	ret
10009b88:	00bfffc4 	movi	r2,-1
10009b8c:	f800283a 	ret
10009b90:	0005883a 	mov	r2,zero
10009b94:	f800283a 	ret

10009b98 <__mdiff>:
10009b98:	28c00417 	ldw	r3,16(r5)
10009b9c:	30800417 	ldw	r2,16(r6)
10009ba0:	defffa04 	addi	sp,sp,-24
10009ba4:	dcc00315 	stw	r19,12(sp)
10009ba8:	dc800215 	stw	r18,8(sp)
10009bac:	dfc00515 	stw	ra,20(sp)
10009bb0:	dd000415 	stw	r20,16(sp)
10009bb4:	dc400115 	stw	r17,4(sp)
10009bb8:	dc000015 	stw	r16,0(sp)
10009bbc:	1887c83a 	sub	r3,r3,r2
10009bc0:	2825883a 	mov	r18,r5
10009bc4:	3027883a 	mov	r19,r6
10009bc8:	1800141e 	bne	r3,zero,10009c1c <__mdiff+0x84>
10009bcc:	1085883a 	add	r2,r2,r2
10009bd0:	1085883a 	add	r2,r2,r2
10009bd4:	2a000504 	addi	r8,r5,20
10009bd8:	34000504 	addi	r16,r6,20
10009bdc:	4087883a 	add	r3,r8,r2
10009be0:	8085883a 	add	r2,r16,r2
10009be4:	00000106 	br	10009bec <__mdiff+0x54>
10009be8:	40c0592e 	bgeu	r8,r3,10009d50 <__mdiff+0x1b8>
10009bec:	18ffff04 	addi	r3,r3,-4
10009bf0:	10bfff04 	addi	r2,r2,-4
10009bf4:	19c00017 	ldw	r7,0(r3)
10009bf8:	11400017 	ldw	r5,0(r2)
10009bfc:	397ffa26 	beq	r7,r5,10009be8 <__alt_data_end+0xf8009be8>
10009c00:	3940592e 	bgeu	r7,r5,10009d68 <__mdiff+0x1d0>
10009c04:	9005883a 	mov	r2,r18
10009c08:	4023883a 	mov	r17,r8
10009c0c:	9825883a 	mov	r18,r19
10009c10:	05000044 	movi	r20,1
10009c14:	1027883a 	mov	r19,r2
10009c18:	00000406 	br	10009c2c <__mdiff+0x94>
10009c1c:	18005616 	blt	r3,zero,10009d78 <__mdiff+0x1e0>
10009c20:	34400504 	addi	r17,r6,20
10009c24:	2c000504 	addi	r16,r5,20
10009c28:	0029883a 	mov	r20,zero
10009c2c:	91400117 	ldw	r5,4(r18)
10009c30:	00091b40 	call	100091b4 <_Balloc>
10009c34:	92400417 	ldw	r9,16(r18)
10009c38:	9b000417 	ldw	r12,16(r19)
10009c3c:	12c00504 	addi	r11,r2,20
10009c40:	4a51883a 	add	r8,r9,r9
10009c44:	6319883a 	add	r12,r12,r12
10009c48:	4211883a 	add	r8,r8,r8
10009c4c:	6319883a 	add	r12,r12,r12
10009c50:	15000315 	stw	r20,12(r2)
10009c54:	8211883a 	add	r8,r16,r8
10009c58:	8b19883a 	add	r12,r17,r12
10009c5c:	0007883a 	mov	r3,zero
10009c60:	81400017 	ldw	r5,0(r16)
10009c64:	89c00017 	ldw	r7,0(r17)
10009c68:	59800104 	addi	r6,r11,4
10009c6c:	293fffcc 	andi	r4,r5,65535
10009c70:	20c7883a 	add	r3,r4,r3
10009c74:	393fffcc 	andi	r4,r7,65535
10009c78:	1909c83a 	sub	r4,r3,r4
10009c7c:	280ad43a 	srli	r5,r5,16
10009c80:	380ed43a 	srli	r7,r7,16
10009c84:	2007d43a 	srai	r3,r4,16
10009c88:	213fffcc 	andi	r4,r4,65535
10009c8c:	29cbc83a 	sub	r5,r5,r7
10009c90:	28c7883a 	add	r3,r5,r3
10009c94:	180a943a 	slli	r5,r3,16
10009c98:	8c400104 	addi	r17,r17,4
10009c9c:	84000104 	addi	r16,r16,4
10009ca0:	2908b03a 	or	r4,r5,r4
10009ca4:	59000015 	stw	r4,0(r11)
10009ca8:	1807d43a 	srai	r3,r3,16
10009cac:	3015883a 	mov	r10,r6
10009cb0:	3017883a 	mov	r11,r6
10009cb4:	8b3fea36 	bltu	r17,r12,10009c60 <__alt_data_end+0xf8009c60>
10009cb8:	8200162e 	bgeu	r16,r8,10009d14 <__mdiff+0x17c>
10009cbc:	8017883a 	mov	r11,r16
10009cc0:	59400017 	ldw	r5,0(r11)
10009cc4:	31800104 	addi	r6,r6,4
10009cc8:	5ac00104 	addi	r11,r11,4
10009ccc:	293fffcc 	andi	r4,r5,65535
10009cd0:	20c7883a 	add	r3,r4,r3
10009cd4:	280ed43a 	srli	r7,r5,16
10009cd8:	180bd43a 	srai	r5,r3,16
10009cdc:	193fffcc 	andi	r4,r3,65535
10009ce0:	3947883a 	add	r3,r7,r5
10009ce4:	180a943a 	slli	r5,r3,16
10009ce8:	1807d43a 	srai	r3,r3,16
10009cec:	2908b03a 	or	r4,r5,r4
10009cf0:	313fff15 	stw	r4,-4(r6)
10009cf4:	5a3ff236 	bltu	r11,r8,10009cc0 <__alt_data_end+0xf8009cc0>
10009cf8:	0406303a 	nor	r3,zero,r16
10009cfc:	1a07883a 	add	r3,r3,r8
10009d00:	1806d0ba 	srli	r3,r3,2
10009d04:	18c00044 	addi	r3,r3,1
10009d08:	18c7883a 	add	r3,r3,r3
10009d0c:	18c7883a 	add	r3,r3,r3
10009d10:	50d5883a 	add	r10,r10,r3
10009d14:	50ffff04 	addi	r3,r10,-4
10009d18:	2000041e 	bne	r4,zero,10009d2c <__mdiff+0x194>
10009d1c:	18ffff04 	addi	r3,r3,-4
10009d20:	19000017 	ldw	r4,0(r3)
10009d24:	4a7fffc4 	addi	r9,r9,-1
10009d28:	203ffc26 	beq	r4,zero,10009d1c <__alt_data_end+0xf8009d1c>
10009d2c:	12400415 	stw	r9,16(r2)
10009d30:	dfc00517 	ldw	ra,20(sp)
10009d34:	dd000417 	ldw	r20,16(sp)
10009d38:	dcc00317 	ldw	r19,12(sp)
10009d3c:	dc800217 	ldw	r18,8(sp)
10009d40:	dc400117 	ldw	r17,4(sp)
10009d44:	dc000017 	ldw	r16,0(sp)
10009d48:	dec00604 	addi	sp,sp,24
10009d4c:	f800283a 	ret
10009d50:	000b883a 	mov	r5,zero
10009d54:	00091b40 	call	100091b4 <_Balloc>
10009d58:	00c00044 	movi	r3,1
10009d5c:	10c00415 	stw	r3,16(r2)
10009d60:	10000515 	stw	zero,20(r2)
10009d64:	003ff206 	br	10009d30 <__alt_data_end+0xf8009d30>
10009d68:	8023883a 	mov	r17,r16
10009d6c:	0029883a 	mov	r20,zero
10009d70:	4021883a 	mov	r16,r8
10009d74:	003fad06 	br	10009c2c <__alt_data_end+0xf8009c2c>
10009d78:	9005883a 	mov	r2,r18
10009d7c:	94400504 	addi	r17,r18,20
10009d80:	9c000504 	addi	r16,r19,20
10009d84:	9825883a 	mov	r18,r19
10009d88:	05000044 	movi	r20,1
10009d8c:	1027883a 	mov	r19,r2
10009d90:	003fa606 	br	10009c2c <__alt_data_end+0xf8009c2c>

10009d94 <__ulp>:
10009d94:	295ffc2c 	andhi	r5,r5,32752
10009d98:	00bf3034 	movhi	r2,64704
10009d9c:	2887883a 	add	r3,r5,r2
10009da0:	00c0020e 	bge	zero,r3,10009dac <__ulp+0x18>
10009da4:	0005883a 	mov	r2,zero
10009da8:	f800283a 	ret
10009dac:	00c7c83a 	sub	r3,zero,r3
10009db0:	1807d53a 	srai	r3,r3,20
10009db4:	008004c4 	movi	r2,19
10009db8:	10c00b0e 	bge	r2,r3,10009de8 <__ulp+0x54>
10009dbc:	18bffb04 	addi	r2,r3,-20
10009dc0:	01000784 	movi	r4,30
10009dc4:	0007883a 	mov	r3,zero
10009dc8:	20800516 	blt	r4,r2,10009de0 <__ulp+0x4c>
10009dcc:	010007c4 	movi	r4,31
10009dd0:	2089c83a 	sub	r4,r4,r2
10009dd4:	00800044 	movi	r2,1
10009dd8:	1104983a 	sll	r2,r2,r4
10009ddc:	f800283a 	ret
10009de0:	00800044 	movi	r2,1
10009de4:	f800283a 	ret
10009de8:	01400234 	movhi	r5,8
10009dec:	28c7d83a 	sra	r3,r5,r3
10009df0:	0005883a 	mov	r2,zero
10009df4:	f800283a 	ret

10009df8 <__b2d>:
10009df8:	defffa04 	addi	sp,sp,-24
10009dfc:	dc000015 	stw	r16,0(sp)
10009e00:	24000417 	ldw	r16,16(r4)
10009e04:	dc400115 	stw	r17,4(sp)
10009e08:	24400504 	addi	r17,r4,20
10009e0c:	8421883a 	add	r16,r16,r16
10009e10:	8421883a 	add	r16,r16,r16
10009e14:	8c21883a 	add	r16,r17,r16
10009e18:	dc800215 	stw	r18,8(sp)
10009e1c:	84bfff17 	ldw	r18,-4(r16)
10009e20:	dd000415 	stw	r20,16(sp)
10009e24:	dcc00315 	stw	r19,12(sp)
10009e28:	9009883a 	mov	r4,r18
10009e2c:	2829883a 	mov	r20,r5
10009e30:	dfc00515 	stw	ra,20(sp)
10009e34:	00094d00 	call	100094d0 <__hi0bits>
10009e38:	00c00804 	movi	r3,32
10009e3c:	1889c83a 	sub	r4,r3,r2
10009e40:	a1000015 	stw	r4,0(r20)
10009e44:	01000284 	movi	r4,10
10009e48:	84ffff04 	addi	r19,r16,-4
10009e4c:	20801216 	blt	r4,r2,10009e98 <__b2d+0xa0>
10009e50:	018002c4 	movi	r6,11
10009e54:	308dc83a 	sub	r6,r6,r2
10009e58:	9186d83a 	srl	r3,r18,r6
10009e5c:	18cffc34 	orhi	r3,r3,16368
10009e60:	8cc0212e 	bgeu	r17,r19,10009ee8 <__b2d+0xf0>
10009e64:	813ffe17 	ldw	r4,-8(r16)
10009e68:	218cd83a 	srl	r6,r4,r6
10009e6c:	10800544 	addi	r2,r2,21
10009e70:	9084983a 	sll	r2,r18,r2
10009e74:	1184b03a 	or	r2,r2,r6
10009e78:	dfc00517 	ldw	ra,20(sp)
10009e7c:	dd000417 	ldw	r20,16(sp)
10009e80:	dcc00317 	ldw	r19,12(sp)
10009e84:	dc800217 	ldw	r18,8(sp)
10009e88:	dc400117 	ldw	r17,4(sp)
10009e8c:	dc000017 	ldw	r16,0(sp)
10009e90:	dec00604 	addi	sp,sp,24
10009e94:	f800283a 	ret
10009e98:	8cc00f2e 	bgeu	r17,r19,10009ed8 <__b2d+0xe0>
10009e9c:	117ffd44 	addi	r5,r2,-11
10009ea0:	80bffe17 	ldw	r2,-8(r16)
10009ea4:	28000e26 	beq	r5,zero,10009ee0 <__b2d+0xe8>
10009ea8:	1949c83a 	sub	r4,r3,r5
10009eac:	9164983a 	sll	r18,r18,r5
10009eb0:	1106d83a 	srl	r3,r2,r4
10009eb4:	81bffe04 	addi	r6,r16,-8
10009eb8:	948ffc34 	orhi	r18,r18,16368
10009ebc:	90c6b03a 	or	r3,r18,r3
10009ec0:	89800e2e 	bgeu	r17,r6,10009efc <__b2d+0x104>
10009ec4:	81bffd17 	ldw	r6,-12(r16)
10009ec8:	1144983a 	sll	r2,r2,r5
10009ecc:	310ad83a 	srl	r5,r6,r4
10009ed0:	2884b03a 	or	r2,r5,r2
10009ed4:	003fe806 	br	10009e78 <__alt_data_end+0xf8009e78>
10009ed8:	10bffd44 	addi	r2,r2,-11
10009edc:	1000041e 	bne	r2,zero,10009ef0 <__b2d+0xf8>
10009ee0:	90cffc34 	orhi	r3,r18,16368
10009ee4:	003fe406 	br	10009e78 <__alt_data_end+0xf8009e78>
10009ee8:	000d883a 	mov	r6,zero
10009eec:	003fdf06 	br	10009e6c <__alt_data_end+0xf8009e6c>
10009ef0:	90a4983a 	sll	r18,r18,r2
10009ef4:	0005883a 	mov	r2,zero
10009ef8:	003ff906 	br	10009ee0 <__alt_data_end+0xf8009ee0>
10009efc:	1144983a 	sll	r2,r2,r5
10009f00:	003fdd06 	br	10009e78 <__alt_data_end+0xf8009e78>

10009f04 <__d2b>:
10009f04:	defff804 	addi	sp,sp,-32
10009f08:	dc000215 	stw	r16,8(sp)
10009f0c:	3021883a 	mov	r16,r6
10009f10:	dc400315 	stw	r17,12(sp)
10009f14:	8022907a 	slli	r17,r16,1
10009f18:	dd000615 	stw	r20,24(sp)
10009f1c:	2829883a 	mov	r20,r5
10009f20:	01400044 	movi	r5,1
10009f24:	dcc00515 	stw	r19,20(sp)
10009f28:	dc800415 	stw	r18,16(sp)
10009f2c:	dfc00715 	stw	ra,28(sp)
10009f30:	3825883a 	mov	r18,r7
10009f34:	8822d57a 	srli	r17,r17,21
10009f38:	00091b40 	call	100091b4 <_Balloc>
10009f3c:	1027883a 	mov	r19,r2
10009f40:	00800434 	movhi	r2,16
10009f44:	10bfffc4 	addi	r2,r2,-1
10009f48:	808c703a 	and	r6,r16,r2
10009f4c:	88000126 	beq	r17,zero,10009f54 <__d2b+0x50>
10009f50:	31800434 	orhi	r6,r6,16
10009f54:	d9800015 	stw	r6,0(sp)
10009f58:	a0002426 	beq	r20,zero,10009fec <__d2b+0xe8>
10009f5c:	d9000104 	addi	r4,sp,4
10009f60:	dd000115 	stw	r20,4(sp)
10009f64:	00095380 	call	10009538 <__lo0bits>
10009f68:	d8c00017 	ldw	r3,0(sp)
10009f6c:	10002f1e 	bne	r2,zero,1000a02c <__d2b+0x128>
10009f70:	d9000117 	ldw	r4,4(sp)
10009f74:	99000515 	stw	r4,20(r19)
10009f78:	1821003a 	cmpeq	r16,r3,zero
10009f7c:	01000084 	movi	r4,2
10009f80:	2421c83a 	sub	r16,r4,r16
10009f84:	98c00615 	stw	r3,24(r19)
10009f88:	9c000415 	stw	r16,16(r19)
10009f8c:	88001f1e 	bne	r17,zero,1000a00c <__d2b+0x108>
10009f90:	10bef384 	addi	r2,r2,-1074
10009f94:	90800015 	stw	r2,0(r18)
10009f98:	00900034 	movhi	r2,16384
10009f9c:	10bfffc4 	addi	r2,r2,-1
10009fa0:	8085883a 	add	r2,r16,r2
10009fa4:	1085883a 	add	r2,r2,r2
10009fa8:	1085883a 	add	r2,r2,r2
10009fac:	9885883a 	add	r2,r19,r2
10009fb0:	11000517 	ldw	r4,20(r2)
10009fb4:	8020917a 	slli	r16,r16,5
10009fb8:	00094d00 	call	100094d0 <__hi0bits>
10009fbc:	d8c00817 	ldw	r3,32(sp)
10009fc0:	8085c83a 	sub	r2,r16,r2
10009fc4:	18800015 	stw	r2,0(r3)
10009fc8:	9805883a 	mov	r2,r19
10009fcc:	dfc00717 	ldw	ra,28(sp)
10009fd0:	dd000617 	ldw	r20,24(sp)
10009fd4:	dcc00517 	ldw	r19,20(sp)
10009fd8:	dc800417 	ldw	r18,16(sp)
10009fdc:	dc400317 	ldw	r17,12(sp)
10009fe0:	dc000217 	ldw	r16,8(sp)
10009fe4:	dec00804 	addi	sp,sp,32
10009fe8:	f800283a 	ret
10009fec:	d809883a 	mov	r4,sp
10009ff0:	00095380 	call	10009538 <__lo0bits>
10009ff4:	d8c00017 	ldw	r3,0(sp)
10009ff8:	04000044 	movi	r16,1
10009ffc:	9c000415 	stw	r16,16(r19)
1000a000:	98c00515 	stw	r3,20(r19)
1000a004:	10800804 	addi	r2,r2,32
1000a008:	883fe126 	beq	r17,zero,10009f90 <__alt_data_end+0xf8009f90>
1000a00c:	00c00d44 	movi	r3,53
1000a010:	8c7ef344 	addi	r17,r17,-1075
1000a014:	88a3883a 	add	r17,r17,r2
1000a018:	1885c83a 	sub	r2,r3,r2
1000a01c:	d8c00817 	ldw	r3,32(sp)
1000a020:	94400015 	stw	r17,0(r18)
1000a024:	18800015 	stw	r2,0(r3)
1000a028:	003fe706 	br	10009fc8 <__alt_data_end+0xf8009fc8>
1000a02c:	01000804 	movi	r4,32
1000a030:	2089c83a 	sub	r4,r4,r2
1000a034:	1908983a 	sll	r4,r3,r4
1000a038:	d9400117 	ldw	r5,4(sp)
1000a03c:	1886d83a 	srl	r3,r3,r2
1000a040:	2148b03a 	or	r4,r4,r5
1000a044:	99000515 	stw	r4,20(r19)
1000a048:	d8c00015 	stw	r3,0(sp)
1000a04c:	003fca06 	br	10009f78 <__alt_data_end+0xf8009f78>

1000a050 <__ratio>:
1000a050:	defff904 	addi	sp,sp,-28
1000a054:	dc400315 	stw	r17,12(sp)
1000a058:	2823883a 	mov	r17,r5
1000a05c:	d9400104 	addi	r5,sp,4
1000a060:	dfc00615 	stw	ra,24(sp)
1000a064:	dcc00515 	stw	r19,20(sp)
1000a068:	dc800415 	stw	r18,16(sp)
1000a06c:	2027883a 	mov	r19,r4
1000a070:	dc000215 	stw	r16,8(sp)
1000a074:	0009df80 	call	10009df8 <__b2d>
1000a078:	d80b883a 	mov	r5,sp
1000a07c:	8809883a 	mov	r4,r17
1000a080:	1025883a 	mov	r18,r2
1000a084:	1821883a 	mov	r16,r3
1000a088:	0009df80 	call	10009df8 <__b2d>
1000a08c:	8a000417 	ldw	r8,16(r17)
1000a090:	99000417 	ldw	r4,16(r19)
1000a094:	d9400117 	ldw	r5,4(sp)
1000a098:	2209c83a 	sub	r4,r4,r8
1000a09c:	2010917a 	slli	r8,r4,5
1000a0a0:	d9000017 	ldw	r4,0(sp)
1000a0a4:	2909c83a 	sub	r4,r5,r4
1000a0a8:	4109883a 	add	r4,r8,r4
1000a0ac:	01000e0e 	bge	zero,r4,1000a0e8 <__ratio+0x98>
1000a0b0:	2008953a 	slli	r4,r4,20
1000a0b4:	2421883a 	add	r16,r4,r16
1000a0b8:	100d883a 	mov	r6,r2
1000a0bc:	180f883a 	mov	r7,r3
1000a0c0:	9009883a 	mov	r4,r18
1000a0c4:	800b883a 	mov	r5,r16
1000a0c8:	000e13c0 	call	1000e13c <__divdf3>
1000a0cc:	dfc00617 	ldw	ra,24(sp)
1000a0d0:	dcc00517 	ldw	r19,20(sp)
1000a0d4:	dc800417 	ldw	r18,16(sp)
1000a0d8:	dc400317 	ldw	r17,12(sp)
1000a0dc:	dc000217 	ldw	r16,8(sp)
1000a0e0:	dec00704 	addi	sp,sp,28
1000a0e4:	f800283a 	ret
1000a0e8:	2008953a 	slli	r4,r4,20
1000a0ec:	1907c83a 	sub	r3,r3,r4
1000a0f0:	003ff106 	br	1000a0b8 <__alt_data_end+0xf800a0b8>

1000a0f4 <_mprec_log10>:
1000a0f4:	defffe04 	addi	sp,sp,-8
1000a0f8:	dc000015 	stw	r16,0(sp)
1000a0fc:	dfc00115 	stw	ra,4(sp)
1000a100:	008005c4 	movi	r2,23
1000a104:	2021883a 	mov	r16,r4
1000a108:	11000d0e 	bge	r2,r4,1000a140 <_mprec_log10+0x4c>
1000a10c:	0005883a 	mov	r2,zero
1000a110:	00cffc34 	movhi	r3,16368
1000a114:	843fffc4 	addi	r16,r16,-1
1000a118:	000d883a 	mov	r6,zero
1000a11c:	01d00934 	movhi	r7,16420
1000a120:	1009883a 	mov	r4,r2
1000a124:	180b883a 	mov	r5,r3
1000a128:	000ed640 	call	1000ed64 <__muldf3>
1000a12c:	803ff91e 	bne	r16,zero,1000a114 <__alt_data_end+0xf800a114>
1000a130:	dfc00117 	ldw	ra,4(sp)
1000a134:	dc000017 	ldw	r16,0(sp)
1000a138:	dec00204 	addi	sp,sp,8
1000a13c:	f800283a 	ret
1000a140:	202090fa 	slli	r16,r4,3
1000a144:	00840074 	movhi	r2,4097
1000a148:	108c8404 	addi	r2,r2,12816
1000a14c:	1421883a 	add	r16,r2,r16
1000a150:	80800017 	ldw	r2,0(r16)
1000a154:	80c00117 	ldw	r3,4(r16)
1000a158:	dfc00117 	ldw	ra,4(sp)
1000a15c:	dc000017 	ldw	r16,0(sp)
1000a160:	dec00204 	addi	sp,sp,8
1000a164:	f800283a 	ret

1000a168 <__copybits>:
1000a168:	297fffc4 	addi	r5,r5,-1
1000a16c:	280fd17a 	srai	r7,r5,5
1000a170:	30c00417 	ldw	r3,16(r6)
1000a174:	30800504 	addi	r2,r6,20
1000a178:	39c00044 	addi	r7,r7,1
1000a17c:	18c7883a 	add	r3,r3,r3
1000a180:	39cf883a 	add	r7,r7,r7
1000a184:	18c7883a 	add	r3,r3,r3
1000a188:	39cf883a 	add	r7,r7,r7
1000a18c:	10c7883a 	add	r3,r2,r3
1000a190:	21cf883a 	add	r7,r4,r7
1000a194:	10c00d2e 	bgeu	r2,r3,1000a1cc <__copybits+0x64>
1000a198:	200b883a 	mov	r5,r4
1000a19c:	12000017 	ldw	r8,0(r2)
1000a1a0:	29400104 	addi	r5,r5,4
1000a1a4:	10800104 	addi	r2,r2,4
1000a1a8:	2a3fff15 	stw	r8,-4(r5)
1000a1ac:	10fffb36 	bltu	r2,r3,1000a19c <__alt_data_end+0xf800a19c>
1000a1b0:	1985c83a 	sub	r2,r3,r6
1000a1b4:	10bffac4 	addi	r2,r2,-21
1000a1b8:	1004d0ba 	srli	r2,r2,2
1000a1bc:	10800044 	addi	r2,r2,1
1000a1c0:	1085883a 	add	r2,r2,r2
1000a1c4:	1085883a 	add	r2,r2,r2
1000a1c8:	2089883a 	add	r4,r4,r2
1000a1cc:	21c0032e 	bgeu	r4,r7,1000a1dc <__copybits+0x74>
1000a1d0:	20000015 	stw	zero,0(r4)
1000a1d4:	21000104 	addi	r4,r4,4
1000a1d8:	21fffd36 	bltu	r4,r7,1000a1d0 <__alt_data_end+0xf800a1d0>
1000a1dc:	f800283a 	ret

1000a1e0 <__any_on>:
1000a1e0:	20c00417 	ldw	r3,16(r4)
1000a1e4:	2805d17a 	srai	r2,r5,5
1000a1e8:	21000504 	addi	r4,r4,20
1000a1ec:	18800d0e 	bge	r3,r2,1000a224 <__any_on+0x44>
1000a1f0:	18c7883a 	add	r3,r3,r3
1000a1f4:	18c7883a 	add	r3,r3,r3
1000a1f8:	20c7883a 	add	r3,r4,r3
1000a1fc:	20c0192e 	bgeu	r4,r3,1000a264 <__any_on+0x84>
1000a200:	18bfff17 	ldw	r2,-4(r3)
1000a204:	18ffff04 	addi	r3,r3,-4
1000a208:	1000041e 	bne	r2,zero,1000a21c <__any_on+0x3c>
1000a20c:	20c0142e 	bgeu	r4,r3,1000a260 <__any_on+0x80>
1000a210:	18ffff04 	addi	r3,r3,-4
1000a214:	19400017 	ldw	r5,0(r3)
1000a218:	283ffc26 	beq	r5,zero,1000a20c <__alt_data_end+0xf800a20c>
1000a21c:	00800044 	movi	r2,1
1000a220:	f800283a 	ret
1000a224:	10c00a0e 	bge	r2,r3,1000a250 <__any_on+0x70>
1000a228:	1085883a 	add	r2,r2,r2
1000a22c:	1085883a 	add	r2,r2,r2
1000a230:	294007cc 	andi	r5,r5,31
1000a234:	2087883a 	add	r3,r4,r2
1000a238:	283ff026 	beq	r5,zero,1000a1fc <__alt_data_end+0xf800a1fc>
1000a23c:	19800017 	ldw	r6,0(r3)
1000a240:	3144d83a 	srl	r2,r6,r5
1000a244:	114a983a 	sll	r5,r2,r5
1000a248:	317ff41e 	bne	r6,r5,1000a21c <__alt_data_end+0xf800a21c>
1000a24c:	003feb06 	br	1000a1fc <__alt_data_end+0xf800a1fc>
1000a250:	1085883a 	add	r2,r2,r2
1000a254:	1085883a 	add	r2,r2,r2
1000a258:	2087883a 	add	r3,r4,r2
1000a25c:	003fe706 	br	1000a1fc <__alt_data_end+0xf800a1fc>
1000a260:	f800283a 	ret
1000a264:	0005883a 	mov	r2,zero
1000a268:	f800283a 	ret

1000a26c <_realloc_r>:
1000a26c:	defff604 	addi	sp,sp,-40
1000a270:	dc800215 	stw	r18,8(sp)
1000a274:	dfc00915 	stw	ra,36(sp)
1000a278:	df000815 	stw	fp,32(sp)
1000a27c:	ddc00715 	stw	r23,28(sp)
1000a280:	dd800615 	stw	r22,24(sp)
1000a284:	dd400515 	stw	r21,20(sp)
1000a288:	dd000415 	stw	r20,16(sp)
1000a28c:	dcc00315 	stw	r19,12(sp)
1000a290:	dc400115 	stw	r17,4(sp)
1000a294:	dc000015 	stw	r16,0(sp)
1000a298:	3025883a 	mov	r18,r6
1000a29c:	2800b726 	beq	r5,zero,1000a57c <_realloc_r+0x310>
1000a2a0:	282b883a 	mov	r21,r5
1000a2a4:	2029883a 	mov	r20,r4
1000a2a8:	00106d00 	call	100106d0 <__malloc_lock>
1000a2ac:	a8bfff17 	ldw	r2,-4(r21)
1000a2b0:	043fff04 	movi	r16,-4
1000a2b4:	90c002c4 	addi	r3,r18,11
1000a2b8:	01000584 	movi	r4,22
1000a2bc:	acfffe04 	addi	r19,r21,-8
1000a2c0:	1420703a 	and	r16,r2,r16
1000a2c4:	20c0332e 	bgeu	r4,r3,1000a394 <_realloc_r+0x128>
1000a2c8:	047ffe04 	movi	r17,-8
1000a2cc:	1c62703a 	and	r17,r3,r17
1000a2d0:	8807883a 	mov	r3,r17
1000a2d4:	88005816 	blt	r17,zero,1000a438 <_realloc_r+0x1cc>
1000a2d8:	8c805736 	bltu	r17,r18,1000a438 <_realloc_r+0x1cc>
1000a2dc:	80c0300e 	bge	r16,r3,1000a3a0 <_realloc_r+0x134>
1000a2e0:	07040074 	movhi	fp,4097
1000a2e4:	e70e3204 	addi	fp,fp,14536
1000a2e8:	e1c00217 	ldw	r7,8(fp)
1000a2ec:	9c09883a 	add	r4,r19,r16
1000a2f0:	22000117 	ldw	r8,4(r4)
1000a2f4:	21c06326 	beq	r4,r7,1000a484 <_realloc_r+0x218>
1000a2f8:	017fff84 	movi	r5,-2
1000a2fc:	414a703a 	and	r5,r8,r5
1000a300:	214b883a 	add	r5,r4,r5
1000a304:	29800117 	ldw	r6,4(r5)
1000a308:	3180004c 	andi	r6,r6,1
1000a30c:	30003f26 	beq	r6,zero,1000a40c <_realloc_r+0x1a0>
1000a310:	1080004c 	andi	r2,r2,1
1000a314:	10008326 	beq	r2,zero,1000a524 <_realloc_r+0x2b8>
1000a318:	900b883a 	mov	r5,r18
1000a31c:	a009883a 	mov	r4,r20
1000a320:	00084f80 	call	100084f8 <_malloc_r>
1000a324:	1025883a 	mov	r18,r2
1000a328:	10011e26 	beq	r2,zero,1000a7a4 <_realloc_r+0x538>
1000a32c:	a93fff17 	ldw	r4,-4(r21)
1000a330:	10fffe04 	addi	r3,r2,-8
1000a334:	00bfff84 	movi	r2,-2
1000a338:	2084703a 	and	r2,r4,r2
1000a33c:	9885883a 	add	r2,r19,r2
1000a340:	1880ee26 	beq	r3,r2,1000a6fc <_realloc_r+0x490>
1000a344:	81bfff04 	addi	r6,r16,-4
1000a348:	00800904 	movi	r2,36
1000a34c:	1180b836 	bltu	r2,r6,1000a630 <_realloc_r+0x3c4>
1000a350:	00c004c4 	movi	r3,19
1000a354:	19809636 	bltu	r3,r6,1000a5b0 <_realloc_r+0x344>
1000a358:	9005883a 	mov	r2,r18
1000a35c:	a807883a 	mov	r3,r21
1000a360:	19000017 	ldw	r4,0(r3)
1000a364:	11000015 	stw	r4,0(r2)
1000a368:	19000117 	ldw	r4,4(r3)
1000a36c:	11000115 	stw	r4,4(r2)
1000a370:	18c00217 	ldw	r3,8(r3)
1000a374:	10c00215 	stw	r3,8(r2)
1000a378:	a80b883a 	mov	r5,r21
1000a37c:	a009883a 	mov	r4,r20
1000a380:	00079000 	call	10007900 <_free_r>
1000a384:	a009883a 	mov	r4,r20
1000a388:	00106f40 	call	100106f4 <__malloc_unlock>
1000a38c:	9005883a 	mov	r2,r18
1000a390:	00001206 	br	1000a3dc <_realloc_r+0x170>
1000a394:	00c00404 	movi	r3,16
1000a398:	1823883a 	mov	r17,r3
1000a39c:	003fce06 	br	1000a2d8 <__alt_data_end+0xf800a2d8>
1000a3a0:	a825883a 	mov	r18,r21
1000a3a4:	8445c83a 	sub	r2,r16,r17
1000a3a8:	00c003c4 	movi	r3,15
1000a3ac:	18802636 	bltu	r3,r2,1000a448 <_realloc_r+0x1dc>
1000a3b0:	99800117 	ldw	r6,4(r19)
1000a3b4:	9c07883a 	add	r3,r19,r16
1000a3b8:	3180004c 	andi	r6,r6,1
1000a3bc:	3420b03a 	or	r16,r6,r16
1000a3c0:	9c000115 	stw	r16,4(r19)
1000a3c4:	18800117 	ldw	r2,4(r3)
1000a3c8:	10800054 	ori	r2,r2,1
1000a3cc:	18800115 	stw	r2,4(r3)
1000a3d0:	a009883a 	mov	r4,r20
1000a3d4:	00106f40 	call	100106f4 <__malloc_unlock>
1000a3d8:	9005883a 	mov	r2,r18
1000a3dc:	dfc00917 	ldw	ra,36(sp)
1000a3e0:	df000817 	ldw	fp,32(sp)
1000a3e4:	ddc00717 	ldw	r23,28(sp)
1000a3e8:	dd800617 	ldw	r22,24(sp)
1000a3ec:	dd400517 	ldw	r21,20(sp)
1000a3f0:	dd000417 	ldw	r20,16(sp)
1000a3f4:	dcc00317 	ldw	r19,12(sp)
1000a3f8:	dc800217 	ldw	r18,8(sp)
1000a3fc:	dc400117 	ldw	r17,4(sp)
1000a400:	dc000017 	ldw	r16,0(sp)
1000a404:	dec00a04 	addi	sp,sp,40
1000a408:	f800283a 	ret
1000a40c:	017fff04 	movi	r5,-4
1000a410:	414a703a 	and	r5,r8,r5
1000a414:	814d883a 	add	r6,r16,r5
1000a418:	30c01f16 	blt	r6,r3,1000a498 <_realloc_r+0x22c>
1000a41c:	20800317 	ldw	r2,12(r4)
1000a420:	20c00217 	ldw	r3,8(r4)
1000a424:	a825883a 	mov	r18,r21
1000a428:	3021883a 	mov	r16,r6
1000a42c:	18800315 	stw	r2,12(r3)
1000a430:	10c00215 	stw	r3,8(r2)
1000a434:	003fdb06 	br	1000a3a4 <__alt_data_end+0xf800a3a4>
1000a438:	00800304 	movi	r2,12
1000a43c:	a0800015 	stw	r2,0(r20)
1000a440:	0005883a 	mov	r2,zero
1000a444:	003fe506 	br	1000a3dc <__alt_data_end+0xf800a3dc>
1000a448:	98c00117 	ldw	r3,4(r19)
1000a44c:	9c4b883a 	add	r5,r19,r17
1000a450:	11000054 	ori	r4,r2,1
1000a454:	18c0004c 	andi	r3,r3,1
1000a458:	1c62b03a 	or	r17,r3,r17
1000a45c:	9c400115 	stw	r17,4(r19)
1000a460:	29000115 	stw	r4,4(r5)
1000a464:	2885883a 	add	r2,r5,r2
1000a468:	10c00117 	ldw	r3,4(r2)
1000a46c:	29400204 	addi	r5,r5,8
1000a470:	a009883a 	mov	r4,r20
1000a474:	18c00054 	ori	r3,r3,1
1000a478:	10c00115 	stw	r3,4(r2)
1000a47c:	00079000 	call	10007900 <_free_r>
1000a480:	003fd306 	br	1000a3d0 <__alt_data_end+0xf800a3d0>
1000a484:	017fff04 	movi	r5,-4
1000a488:	414a703a 	and	r5,r8,r5
1000a48c:	89800404 	addi	r6,r17,16
1000a490:	8151883a 	add	r8,r16,r5
1000a494:	4180590e 	bge	r8,r6,1000a5fc <_realloc_r+0x390>
1000a498:	1080004c 	andi	r2,r2,1
1000a49c:	103f9e1e 	bne	r2,zero,1000a318 <__alt_data_end+0xf800a318>
1000a4a0:	adbffe17 	ldw	r22,-8(r21)
1000a4a4:	00bfff04 	movi	r2,-4
1000a4a8:	9dadc83a 	sub	r22,r19,r22
1000a4ac:	b1800117 	ldw	r6,4(r22)
1000a4b0:	3084703a 	and	r2,r6,r2
1000a4b4:	20002026 	beq	r4,zero,1000a538 <_realloc_r+0x2cc>
1000a4b8:	80af883a 	add	r23,r16,r2
1000a4bc:	b96f883a 	add	r23,r23,r5
1000a4c0:	21c05f26 	beq	r4,r7,1000a640 <_realloc_r+0x3d4>
1000a4c4:	b8c01c16 	blt	r23,r3,1000a538 <_realloc_r+0x2cc>
1000a4c8:	20800317 	ldw	r2,12(r4)
1000a4cc:	20c00217 	ldw	r3,8(r4)
1000a4d0:	81bfff04 	addi	r6,r16,-4
1000a4d4:	01000904 	movi	r4,36
1000a4d8:	18800315 	stw	r2,12(r3)
1000a4dc:	10c00215 	stw	r3,8(r2)
1000a4e0:	b0c00217 	ldw	r3,8(r22)
1000a4e4:	b0800317 	ldw	r2,12(r22)
1000a4e8:	b4800204 	addi	r18,r22,8
1000a4ec:	18800315 	stw	r2,12(r3)
1000a4f0:	10c00215 	stw	r3,8(r2)
1000a4f4:	21801b36 	bltu	r4,r6,1000a564 <_realloc_r+0x2f8>
1000a4f8:	008004c4 	movi	r2,19
1000a4fc:	1180352e 	bgeu	r2,r6,1000a5d4 <_realloc_r+0x368>
1000a500:	a8800017 	ldw	r2,0(r21)
1000a504:	b0800215 	stw	r2,8(r22)
1000a508:	a8800117 	ldw	r2,4(r21)
1000a50c:	b0800315 	stw	r2,12(r22)
1000a510:	008006c4 	movi	r2,27
1000a514:	11807f36 	bltu	r2,r6,1000a714 <_realloc_r+0x4a8>
1000a518:	b0800404 	addi	r2,r22,16
1000a51c:	ad400204 	addi	r21,r21,8
1000a520:	00002d06 	br	1000a5d8 <_realloc_r+0x36c>
1000a524:	adbffe17 	ldw	r22,-8(r21)
1000a528:	00bfff04 	movi	r2,-4
1000a52c:	9dadc83a 	sub	r22,r19,r22
1000a530:	b1000117 	ldw	r4,4(r22)
1000a534:	2084703a 	and	r2,r4,r2
1000a538:	b03f7726 	beq	r22,zero,1000a318 <__alt_data_end+0xf800a318>
1000a53c:	80af883a 	add	r23,r16,r2
1000a540:	b8ff7516 	blt	r23,r3,1000a318 <__alt_data_end+0xf800a318>
1000a544:	b0800317 	ldw	r2,12(r22)
1000a548:	b0c00217 	ldw	r3,8(r22)
1000a54c:	81bfff04 	addi	r6,r16,-4
1000a550:	01000904 	movi	r4,36
1000a554:	18800315 	stw	r2,12(r3)
1000a558:	10c00215 	stw	r3,8(r2)
1000a55c:	b4800204 	addi	r18,r22,8
1000a560:	21bfe52e 	bgeu	r4,r6,1000a4f8 <__alt_data_end+0xf800a4f8>
1000a564:	a80b883a 	mov	r5,r21
1000a568:	9009883a 	mov	r4,r18
1000a56c:	0008f300 	call	10008f30 <memmove>
1000a570:	b821883a 	mov	r16,r23
1000a574:	b027883a 	mov	r19,r22
1000a578:	003f8a06 	br	1000a3a4 <__alt_data_end+0xf800a3a4>
1000a57c:	300b883a 	mov	r5,r6
1000a580:	dfc00917 	ldw	ra,36(sp)
1000a584:	df000817 	ldw	fp,32(sp)
1000a588:	ddc00717 	ldw	r23,28(sp)
1000a58c:	dd800617 	ldw	r22,24(sp)
1000a590:	dd400517 	ldw	r21,20(sp)
1000a594:	dd000417 	ldw	r20,16(sp)
1000a598:	dcc00317 	ldw	r19,12(sp)
1000a59c:	dc800217 	ldw	r18,8(sp)
1000a5a0:	dc400117 	ldw	r17,4(sp)
1000a5a4:	dc000017 	ldw	r16,0(sp)
1000a5a8:	dec00a04 	addi	sp,sp,40
1000a5ac:	00084f81 	jmpi	100084f8 <_malloc_r>
1000a5b0:	a8c00017 	ldw	r3,0(r21)
1000a5b4:	90c00015 	stw	r3,0(r18)
1000a5b8:	a8c00117 	ldw	r3,4(r21)
1000a5bc:	90c00115 	stw	r3,4(r18)
1000a5c0:	00c006c4 	movi	r3,27
1000a5c4:	19804536 	bltu	r3,r6,1000a6dc <_realloc_r+0x470>
1000a5c8:	90800204 	addi	r2,r18,8
1000a5cc:	a8c00204 	addi	r3,r21,8
1000a5d0:	003f6306 	br	1000a360 <__alt_data_end+0xf800a360>
1000a5d4:	9005883a 	mov	r2,r18
1000a5d8:	a8c00017 	ldw	r3,0(r21)
1000a5dc:	b821883a 	mov	r16,r23
1000a5e0:	b027883a 	mov	r19,r22
1000a5e4:	10c00015 	stw	r3,0(r2)
1000a5e8:	a8c00117 	ldw	r3,4(r21)
1000a5ec:	10c00115 	stw	r3,4(r2)
1000a5f0:	a8c00217 	ldw	r3,8(r21)
1000a5f4:	10c00215 	stw	r3,8(r2)
1000a5f8:	003f6a06 	br	1000a3a4 <__alt_data_end+0xf800a3a4>
1000a5fc:	9c67883a 	add	r19,r19,r17
1000a600:	4445c83a 	sub	r2,r8,r17
1000a604:	e4c00215 	stw	r19,8(fp)
1000a608:	10800054 	ori	r2,r2,1
1000a60c:	98800115 	stw	r2,4(r19)
1000a610:	a8bfff17 	ldw	r2,-4(r21)
1000a614:	a009883a 	mov	r4,r20
1000a618:	1080004c 	andi	r2,r2,1
1000a61c:	1462b03a 	or	r17,r2,r17
1000a620:	ac7fff15 	stw	r17,-4(r21)
1000a624:	00106f40 	call	100106f4 <__malloc_unlock>
1000a628:	a805883a 	mov	r2,r21
1000a62c:	003f6b06 	br	1000a3dc <__alt_data_end+0xf800a3dc>
1000a630:	a80b883a 	mov	r5,r21
1000a634:	9009883a 	mov	r4,r18
1000a638:	0008f300 	call	10008f30 <memmove>
1000a63c:	003f4e06 	br	1000a378 <__alt_data_end+0xf800a378>
1000a640:	89000404 	addi	r4,r17,16
1000a644:	b93fbc16 	blt	r23,r4,1000a538 <__alt_data_end+0xf800a538>
1000a648:	b0800317 	ldw	r2,12(r22)
1000a64c:	b0c00217 	ldw	r3,8(r22)
1000a650:	81bfff04 	addi	r6,r16,-4
1000a654:	01000904 	movi	r4,36
1000a658:	18800315 	stw	r2,12(r3)
1000a65c:	10c00215 	stw	r3,8(r2)
1000a660:	b4800204 	addi	r18,r22,8
1000a664:	21804336 	bltu	r4,r6,1000a774 <_realloc_r+0x508>
1000a668:	008004c4 	movi	r2,19
1000a66c:	11803f2e 	bgeu	r2,r6,1000a76c <_realloc_r+0x500>
1000a670:	a8800017 	ldw	r2,0(r21)
1000a674:	b0800215 	stw	r2,8(r22)
1000a678:	a8800117 	ldw	r2,4(r21)
1000a67c:	b0800315 	stw	r2,12(r22)
1000a680:	008006c4 	movi	r2,27
1000a684:	11803f36 	bltu	r2,r6,1000a784 <_realloc_r+0x518>
1000a688:	b0800404 	addi	r2,r22,16
1000a68c:	ad400204 	addi	r21,r21,8
1000a690:	a8c00017 	ldw	r3,0(r21)
1000a694:	10c00015 	stw	r3,0(r2)
1000a698:	a8c00117 	ldw	r3,4(r21)
1000a69c:	10c00115 	stw	r3,4(r2)
1000a6a0:	a8c00217 	ldw	r3,8(r21)
1000a6a4:	10c00215 	stw	r3,8(r2)
1000a6a8:	b447883a 	add	r3,r22,r17
1000a6ac:	bc45c83a 	sub	r2,r23,r17
1000a6b0:	e0c00215 	stw	r3,8(fp)
1000a6b4:	10800054 	ori	r2,r2,1
1000a6b8:	18800115 	stw	r2,4(r3)
1000a6bc:	b0800117 	ldw	r2,4(r22)
1000a6c0:	a009883a 	mov	r4,r20
1000a6c4:	1080004c 	andi	r2,r2,1
1000a6c8:	1462b03a 	or	r17,r2,r17
1000a6cc:	b4400115 	stw	r17,4(r22)
1000a6d0:	00106f40 	call	100106f4 <__malloc_unlock>
1000a6d4:	9005883a 	mov	r2,r18
1000a6d8:	003f4006 	br	1000a3dc <__alt_data_end+0xf800a3dc>
1000a6dc:	a8c00217 	ldw	r3,8(r21)
1000a6e0:	90c00215 	stw	r3,8(r18)
1000a6e4:	a8c00317 	ldw	r3,12(r21)
1000a6e8:	90c00315 	stw	r3,12(r18)
1000a6ec:	30801126 	beq	r6,r2,1000a734 <_realloc_r+0x4c8>
1000a6f0:	90800404 	addi	r2,r18,16
1000a6f4:	a8c00404 	addi	r3,r21,16
1000a6f8:	003f1906 	br	1000a360 <__alt_data_end+0xf800a360>
1000a6fc:	90ffff17 	ldw	r3,-4(r18)
1000a700:	00bfff04 	movi	r2,-4
1000a704:	a825883a 	mov	r18,r21
1000a708:	1884703a 	and	r2,r3,r2
1000a70c:	80a1883a 	add	r16,r16,r2
1000a710:	003f2406 	br	1000a3a4 <__alt_data_end+0xf800a3a4>
1000a714:	a8800217 	ldw	r2,8(r21)
1000a718:	b0800415 	stw	r2,16(r22)
1000a71c:	a8800317 	ldw	r2,12(r21)
1000a720:	b0800515 	stw	r2,20(r22)
1000a724:	31000a26 	beq	r6,r4,1000a750 <_realloc_r+0x4e4>
1000a728:	b0800604 	addi	r2,r22,24
1000a72c:	ad400404 	addi	r21,r21,16
1000a730:	003fa906 	br	1000a5d8 <__alt_data_end+0xf800a5d8>
1000a734:	a9000417 	ldw	r4,16(r21)
1000a738:	90800604 	addi	r2,r18,24
1000a73c:	a8c00604 	addi	r3,r21,24
1000a740:	91000415 	stw	r4,16(r18)
1000a744:	a9000517 	ldw	r4,20(r21)
1000a748:	91000515 	stw	r4,20(r18)
1000a74c:	003f0406 	br	1000a360 <__alt_data_end+0xf800a360>
1000a750:	a8c00417 	ldw	r3,16(r21)
1000a754:	ad400604 	addi	r21,r21,24
1000a758:	b0800804 	addi	r2,r22,32
1000a75c:	b0c00615 	stw	r3,24(r22)
1000a760:	a8ffff17 	ldw	r3,-4(r21)
1000a764:	b0c00715 	stw	r3,28(r22)
1000a768:	003f9b06 	br	1000a5d8 <__alt_data_end+0xf800a5d8>
1000a76c:	9005883a 	mov	r2,r18
1000a770:	003fc706 	br	1000a690 <__alt_data_end+0xf800a690>
1000a774:	a80b883a 	mov	r5,r21
1000a778:	9009883a 	mov	r4,r18
1000a77c:	0008f300 	call	10008f30 <memmove>
1000a780:	003fc906 	br	1000a6a8 <__alt_data_end+0xf800a6a8>
1000a784:	a8800217 	ldw	r2,8(r21)
1000a788:	b0800415 	stw	r2,16(r22)
1000a78c:	a8800317 	ldw	r2,12(r21)
1000a790:	b0800515 	stw	r2,20(r22)
1000a794:	31000726 	beq	r6,r4,1000a7b4 <_realloc_r+0x548>
1000a798:	b0800604 	addi	r2,r22,24
1000a79c:	ad400404 	addi	r21,r21,16
1000a7a0:	003fbb06 	br	1000a690 <__alt_data_end+0xf800a690>
1000a7a4:	a009883a 	mov	r4,r20
1000a7a8:	00106f40 	call	100106f4 <__malloc_unlock>
1000a7ac:	0005883a 	mov	r2,zero
1000a7b0:	003f0a06 	br	1000a3dc <__alt_data_end+0xf800a3dc>
1000a7b4:	a8c00417 	ldw	r3,16(r21)
1000a7b8:	ad400604 	addi	r21,r21,24
1000a7bc:	b0800804 	addi	r2,r22,32
1000a7c0:	b0c00615 	stw	r3,24(r22)
1000a7c4:	a8ffff17 	ldw	r3,-4(r21)
1000a7c8:	b0c00715 	stw	r3,28(r22)
1000a7cc:	003fb006 	br	1000a690 <__alt_data_end+0xf800a690>

1000a7d0 <__fpclassifyd>:
1000a7d0:	00a00034 	movhi	r2,32768
1000a7d4:	10bfffc4 	addi	r2,r2,-1
1000a7d8:	2884703a 	and	r2,r5,r2
1000a7dc:	10000726 	beq	r2,zero,1000a7fc <__fpclassifyd+0x2c>
1000a7e0:	00fffc34 	movhi	r3,65520
1000a7e4:	019ff834 	movhi	r6,32736
1000a7e8:	28c7883a 	add	r3,r5,r3
1000a7ec:	31bfffc4 	addi	r6,r6,-1
1000a7f0:	30c00536 	bltu	r6,r3,1000a808 <__fpclassifyd+0x38>
1000a7f4:	00800104 	movi	r2,4
1000a7f8:	f800283a 	ret
1000a7fc:	2000021e 	bne	r4,zero,1000a808 <__fpclassifyd+0x38>
1000a800:	00800084 	movi	r2,2
1000a804:	f800283a 	ret
1000a808:	00dffc34 	movhi	r3,32752
1000a80c:	019ff834 	movhi	r6,32736
1000a810:	28cb883a 	add	r5,r5,r3
1000a814:	31bfffc4 	addi	r6,r6,-1
1000a818:	317ff62e 	bgeu	r6,r5,1000a7f4 <__alt_data_end+0xf800a7f4>
1000a81c:	01400434 	movhi	r5,16
1000a820:	297fffc4 	addi	r5,r5,-1
1000a824:	28800236 	bltu	r5,r2,1000a830 <__fpclassifyd+0x60>
1000a828:	008000c4 	movi	r2,3
1000a82c:	f800283a 	ret
1000a830:	10c00226 	beq	r2,r3,1000a83c <__fpclassifyd+0x6c>
1000a834:	0005883a 	mov	r2,zero
1000a838:	f800283a 	ret
1000a83c:	2005003a 	cmpeq	r2,r4,zero
1000a840:	f800283a 	ret

1000a844 <_sbrk_r>:
1000a844:	defffd04 	addi	sp,sp,-12
1000a848:	dc000015 	stw	r16,0(sp)
1000a84c:	04040074 	movhi	r16,4097
1000a850:	dc400115 	stw	r17,4(sp)
1000a854:	841a8804 	addi	r16,r16,27168
1000a858:	2023883a 	mov	r17,r4
1000a85c:	2809883a 	mov	r4,r5
1000a860:	dfc00215 	stw	ra,8(sp)
1000a864:	80000015 	stw	zero,0(r16)
1000a868:	00108dc0 	call	100108dc <sbrk>
1000a86c:	00ffffc4 	movi	r3,-1
1000a870:	10c00526 	beq	r2,r3,1000a888 <_sbrk_r+0x44>
1000a874:	dfc00217 	ldw	ra,8(sp)
1000a878:	dc400117 	ldw	r17,4(sp)
1000a87c:	dc000017 	ldw	r16,0(sp)
1000a880:	dec00304 	addi	sp,sp,12
1000a884:	f800283a 	ret
1000a888:	80c00017 	ldw	r3,0(r16)
1000a88c:	183ff926 	beq	r3,zero,1000a874 <__alt_data_end+0xf800a874>
1000a890:	88c00015 	stw	r3,0(r17)
1000a894:	003ff706 	br	1000a874 <__alt_data_end+0xf800a874>

1000a898 <__sread>:
1000a898:	defffe04 	addi	sp,sp,-8
1000a89c:	dc000015 	stw	r16,0(sp)
1000a8a0:	2821883a 	mov	r16,r5
1000a8a4:	2940038f 	ldh	r5,14(r5)
1000a8a8:	dfc00115 	stw	ra,4(sp)
1000a8ac:	000c7540 	call	1000c754 <_read_r>
1000a8b0:	10000716 	blt	r2,zero,1000a8d0 <__sread+0x38>
1000a8b4:	80c01417 	ldw	r3,80(r16)
1000a8b8:	1887883a 	add	r3,r3,r2
1000a8bc:	80c01415 	stw	r3,80(r16)
1000a8c0:	dfc00117 	ldw	ra,4(sp)
1000a8c4:	dc000017 	ldw	r16,0(sp)
1000a8c8:	dec00204 	addi	sp,sp,8
1000a8cc:	f800283a 	ret
1000a8d0:	80c0030b 	ldhu	r3,12(r16)
1000a8d4:	18fbffcc 	andi	r3,r3,61439
1000a8d8:	80c0030d 	sth	r3,12(r16)
1000a8dc:	dfc00117 	ldw	ra,4(sp)
1000a8e0:	dc000017 	ldw	r16,0(sp)
1000a8e4:	dec00204 	addi	sp,sp,8
1000a8e8:	f800283a 	ret

1000a8ec <__seofread>:
1000a8ec:	0005883a 	mov	r2,zero
1000a8f0:	f800283a 	ret

1000a8f4 <__swrite>:
1000a8f4:	2880030b 	ldhu	r2,12(r5)
1000a8f8:	defffb04 	addi	sp,sp,-20
1000a8fc:	dcc00315 	stw	r19,12(sp)
1000a900:	dc800215 	stw	r18,8(sp)
1000a904:	dc400115 	stw	r17,4(sp)
1000a908:	dc000015 	stw	r16,0(sp)
1000a90c:	dfc00415 	stw	ra,16(sp)
1000a910:	10c0400c 	andi	r3,r2,256
1000a914:	2821883a 	mov	r16,r5
1000a918:	2023883a 	mov	r17,r4
1000a91c:	3025883a 	mov	r18,r6
1000a920:	3827883a 	mov	r19,r7
1000a924:	18000526 	beq	r3,zero,1000a93c <__swrite+0x48>
1000a928:	2940038f 	ldh	r5,14(r5)
1000a92c:	01c00084 	movi	r7,2
1000a930:	000d883a 	mov	r6,zero
1000a934:	000c6f40 	call	1000c6f4 <_lseek_r>
1000a938:	8080030b 	ldhu	r2,12(r16)
1000a93c:	8140038f 	ldh	r5,14(r16)
1000a940:	10bbffcc 	andi	r2,r2,61439
1000a944:	980f883a 	mov	r7,r19
1000a948:	900d883a 	mov	r6,r18
1000a94c:	8809883a 	mov	r4,r17
1000a950:	8080030d 	sth	r2,12(r16)
1000a954:	dfc00417 	ldw	ra,16(sp)
1000a958:	dcc00317 	ldw	r19,12(sp)
1000a95c:	dc800217 	ldw	r18,8(sp)
1000a960:	dc400117 	ldw	r17,4(sp)
1000a964:	dc000017 	ldw	r16,0(sp)
1000a968:	dec00504 	addi	sp,sp,20
1000a96c:	000c1a81 	jmpi	1000c1a8 <_write_r>

1000a970 <__sseek>:
1000a970:	defffe04 	addi	sp,sp,-8
1000a974:	dc000015 	stw	r16,0(sp)
1000a978:	2821883a 	mov	r16,r5
1000a97c:	2940038f 	ldh	r5,14(r5)
1000a980:	dfc00115 	stw	ra,4(sp)
1000a984:	000c6f40 	call	1000c6f4 <_lseek_r>
1000a988:	00ffffc4 	movi	r3,-1
1000a98c:	10c00826 	beq	r2,r3,1000a9b0 <__sseek+0x40>
1000a990:	80c0030b 	ldhu	r3,12(r16)
1000a994:	80801415 	stw	r2,80(r16)
1000a998:	18c40014 	ori	r3,r3,4096
1000a99c:	80c0030d 	sth	r3,12(r16)
1000a9a0:	dfc00117 	ldw	ra,4(sp)
1000a9a4:	dc000017 	ldw	r16,0(sp)
1000a9a8:	dec00204 	addi	sp,sp,8
1000a9ac:	f800283a 	ret
1000a9b0:	80c0030b 	ldhu	r3,12(r16)
1000a9b4:	18fbffcc 	andi	r3,r3,61439
1000a9b8:	80c0030d 	sth	r3,12(r16)
1000a9bc:	dfc00117 	ldw	ra,4(sp)
1000a9c0:	dc000017 	ldw	r16,0(sp)
1000a9c4:	dec00204 	addi	sp,sp,8
1000a9c8:	f800283a 	ret

1000a9cc <__sclose>:
1000a9cc:	2940038f 	ldh	r5,14(r5)
1000a9d0:	000c2081 	jmpi	1000c208 <_close_r>

1000a9d4 <strcmp>:
1000a9d4:	2144b03a 	or	r2,r4,r5
1000a9d8:	108000cc 	andi	r2,r2,3
1000a9dc:	1000171e 	bne	r2,zero,1000aa3c <strcmp+0x68>
1000a9e0:	20800017 	ldw	r2,0(r4)
1000a9e4:	28c00017 	ldw	r3,0(r5)
1000a9e8:	10c0141e 	bne	r2,r3,1000aa3c <strcmp+0x68>
1000a9ec:	027fbff4 	movhi	r9,65279
1000a9f0:	4a7fbfc4 	addi	r9,r9,-257
1000a9f4:	0086303a 	nor	r3,zero,r2
1000a9f8:	02202074 	movhi	r8,32897
1000a9fc:	1245883a 	add	r2,r2,r9
1000aa00:	42202004 	addi	r8,r8,-32640
1000aa04:	10c4703a 	and	r2,r2,r3
1000aa08:	1204703a 	and	r2,r2,r8
1000aa0c:	10000226 	beq	r2,zero,1000aa18 <strcmp+0x44>
1000aa10:	00002306 	br	1000aaa0 <strcmp+0xcc>
1000aa14:	1000221e 	bne	r2,zero,1000aaa0 <strcmp+0xcc>
1000aa18:	21000104 	addi	r4,r4,4
1000aa1c:	20c00017 	ldw	r3,0(r4)
1000aa20:	29400104 	addi	r5,r5,4
1000aa24:	29800017 	ldw	r6,0(r5)
1000aa28:	1a4f883a 	add	r7,r3,r9
1000aa2c:	00c4303a 	nor	r2,zero,r3
1000aa30:	3884703a 	and	r2,r7,r2
1000aa34:	1204703a 	and	r2,r2,r8
1000aa38:	19bff626 	beq	r3,r6,1000aa14 <__alt_data_end+0xf800aa14>
1000aa3c:	20800003 	ldbu	r2,0(r4)
1000aa40:	10c03fcc 	andi	r3,r2,255
1000aa44:	18c0201c 	xori	r3,r3,128
1000aa48:	18ffe004 	addi	r3,r3,-128
1000aa4c:	18000c26 	beq	r3,zero,1000aa80 <strcmp+0xac>
1000aa50:	29800007 	ldb	r6,0(r5)
1000aa54:	19800326 	beq	r3,r6,1000aa64 <strcmp+0x90>
1000aa58:	00001306 	br	1000aaa8 <strcmp+0xd4>
1000aa5c:	29800007 	ldb	r6,0(r5)
1000aa60:	11800b1e 	bne	r2,r6,1000aa90 <strcmp+0xbc>
1000aa64:	21000044 	addi	r4,r4,1
1000aa68:	20c00003 	ldbu	r3,0(r4)
1000aa6c:	29400044 	addi	r5,r5,1
1000aa70:	18803fcc 	andi	r2,r3,255
1000aa74:	1080201c 	xori	r2,r2,128
1000aa78:	10bfe004 	addi	r2,r2,-128
1000aa7c:	103ff71e 	bne	r2,zero,1000aa5c <__alt_data_end+0xf800aa5c>
1000aa80:	0007883a 	mov	r3,zero
1000aa84:	28800003 	ldbu	r2,0(r5)
1000aa88:	1885c83a 	sub	r2,r3,r2
1000aa8c:	f800283a 	ret
1000aa90:	28800003 	ldbu	r2,0(r5)
1000aa94:	18c03fcc 	andi	r3,r3,255
1000aa98:	1885c83a 	sub	r2,r3,r2
1000aa9c:	f800283a 	ret
1000aaa0:	0005883a 	mov	r2,zero
1000aaa4:	f800283a 	ret
1000aaa8:	10c03fcc 	andi	r3,r2,255
1000aaac:	003ff506 	br	1000aa84 <__alt_data_end+0xf800aa84>

1000aab0 <__sprint_r.part.0>:
1000aab0:	28801917 	ldw	r2,100(r5)
1000aab4:	defff604 	addi	sp,sp,-40
1000aab8:	dd400515 	stw	r21,20(sp)
1000aabc:	dfc00915 	stw	ra,36(sp)
1000aac0:	df000815 	stw	fp,32(sp)
1000aac4:	ddc00715 	stw	r23,28(sp)
1000aac8:	dd800615 	stw	r22,24(sp)
1000aacc:	dd000415 	stw	r20,16(sp)
1000aad0:	dcc00315 	stw	r19,12(sp)
1000aad4:	dc800215 	stw	r18,8(sp)
1000aad8:	dc400115 	stw	r17,4(sp)
1000aadc:	dc000015 	stw	r16,0(sp)
1000aae0:	1088000c 	andi	r2,r2,8192
1000aae4:	302b883a 	mov	r21,r6
1000aae8:	10002e26 	beq	r2,zero,1000aba4 <__sprint_r.part.0+0xf4>
1000aaec:	30800217 	ldw	r2,8(r6)
1000aaf0:	35800017 	ldw	r22,0(r6)
1000aaf4:	10002926 	beq	r2,zero,1000ab9c <__sprint_r.part.0+0xec>
1000aaf8:	2827883a 	mov	r19,r5
1000aafc:	2029883a 	mov	r20,r4
1000ab00:	b5c00104 	addi	r23,r22,4
1000ab04:	04bfffc4 	movi	r18,-1
1000ab08:	bc400017 	ldw	r17,0(r23)
1000ab0c:	b4000017 	ldw	r16,0(r22)
1000ab10:	0039883a 	mov	fp,zero
1000ab14:	8822d0ba 	srli	r17,r17,2
1000ab18:	8800031e 	bne	r17,zero,1000ab28 <__sprint_r.part.0+0x78>
1000ab1c:	00001806 	br	1000ab80 <__sprint_r.part.0+0xd0>
1000ab20:	84000104 	addi	r16,r16,4
1000ab24:	8f001526 	beq	r17,fp,1000ab7c <__sprint_r.part.0+0xcc>
1000ab28:	81400017 	ldw	r5,0(r16)
1000ab2c:	980d883a 	mov	r6,r19
1000ab30:	a009883a 	mov	r4,r20
1000ab34:	000c5a00 	call	1000c5a0 <_fputwc_r>
1000ab38:	e7000044 	addi	fp,fp,1
1000ab3c:	14bff81e 	bne	r2,r18,1000ab20 <__alt_data_end+0xf800ab20>
1000ab40:	9005883a 	mov	r2,r18
1000ab44:	a8000215 	stw	zero,8(r21)
1000ab48:	a8000115 	stw	zero,4(r21)
1000ab4c:	dfc00917 	ldw	ra,36(sp)
1000ab50:	df000817 	ldw	fp,32(sp)
1000ab54:	ddc00717 	ldw	r23,28(sp)
1000ab58:	dd800617 	ldw	r22,24(sp)
1000ab5c:	dd400517 	ldw	r21,20(sp)
1000ab60:	dd000417 	ldw	r20,16(sp)
1000ab64:	dcc00317 	ldw	r19,12(sp)
1000ab68:	dc800217 	ldw	r18,8(sp)
1000ab6c:	dc400117 	ldw	r17,4(sp)
1000ab70:	dc000017 	ldw	r16,0(sp)
1000ab74:	dec00a04 	addi	sp,sp,40
1000ab78:	f800283a 	ret
1000ab7c:	a8800217 	ldw	r2,8(r21)
1000ab80:	8c63883a 	add	r17,r17,r17
1000ab84:	8c63883a 	add	r17,r17,r17
1000ab88:	1445c83a 	sub	r2,r2,r17
1000ab8c:	a8800215 	stw	r2,8(r21)
1000ab90:	b5800204 	addi	r22,r22,8
1000ab94:	bdc00204 	addi	r23,r23,8
1000ab98:	103fdb1e 	bne	r2,zero,1000ab08 <__alt_data_end+0xf800ab08>
1000ab9c:	0005883a 	mov	r2,zero
1000aba0:	003fe806 	br	1000ab44 <__alt_data_end+0xf800ab44>
1000aba4:	0007c100 	call	10007c10 <__sfvwrite_r>
1000aba8:	003fe606 	br	1000ab44 <__alt_data_end+0xf800ab44>

1000abac <__sprint_r>:
1000abac:	30c00217 	ldw	r3,8(r6)
1000abb0:	18000126 	beq	r3,zero,1000abb8 <__sprint_r+0xc>
1000abb4:	000aab01 	jmpi	1000aab0 <__sprint_r.part.0>
1000abb8:	30000115 	stw	zero,4(r6)
1000abbc:	0005883a 	mov	r2,zero
1000abc0:	f800283a 	ret

1000abc4 <___vfiprintf_internal_r>:
1000abc4:	deffca04 	addi	sp,sp,-216
1000abc8:	dd403115 	stw	r21,196(sp)
1000abcc:	dfc03515 	stw	ra,212(sp)
1000abd0:	df003415 	stw	fp,208(sp)
1000abd4:	ddc03315 	stw	r23,204(sp)
1000abd8:	dd803215 	stw	r22,200(sp)
1000abdc:	dd003015 	stw	r20,192(sp)
1000abe0:	dcc02f15 	stw	r19,188(sp)
1000abe4:	dc802e15 	stw	r18,184(sp)
1000abe8:	dc402d15 	stw	r17,180(sp)
1000abec:	dc002c15 	stw	r16,176(sp)
1000abf0:	d9002115 	stw	r4,132(sp)
1000abf4:	d9402015 	stw	r5,128(sp)
1000abf8:	d9c02215 	stw	r7,136(sp)
1000abfc:	302b883a 	mov	r21,r6
1000ac00:	20000226 	beq	r4,zero,1000ac0c <___vfiprintf_internal_r+0x48>
1000ac04:	20800e17 	ldw	r2,56(r4)
1000ac08:	1000cf26 	beq	r2,zero,1000af48 <___vfiprintf_internal_r+0x384>
1000ac0c:	d8c02017 	ldw	r3,128(sp)
1000ac10:	1880030b 	ldhu	r2,12(r3)
1000ac14:	10c8000c 	andi	r3,r2,8192
1000ac18:	1800071e 	bne	r3,zero,1000ac38 <___vfiprintf_internal_r+0x74>
1000ac1c:	d9402017 	ldw	r5,128(sp)
1000ac20:	00f7ffc4 	movi	r3,-8193
1000ac24:	10880014 	ori	r2,r2,8192
1000ac28:	29001917 	ldw	r4,100(r5)
1000ac2c:	2880030d 	sth	r2,12(r5)
1000ac30:	20c6703a 	and	r3,r4,r3
1000ac34:	28c01915 	stw	r3,100(r5)
1000ac38:	10c0020c 	andi	r3,r2,8
1000ac3c:	1800a526 	beq	r3,zero,1000aed4 <___vfiprintf_internal_r+0x310>
1000ac40:	d9002017 	ldw	r4,128(sp)
1000ac44:	20c00417 	ldw	r3,16(r4)
1000ac48:	1800a226 	beq	r3,zero,1000aed4 <___vfiprintf_internal_r+0x310>
1000ac4c:	1080068c 	andi	r2,r2,26
1000ac50:	00c00284 	movi	r3,10
1000ac54:	10c0a826 	beq	r2,r3,1000aef8 <___vfiprintf_internal_r+0x334>
1000ac58:	d9001a04 	addi	r4,sp,104
1000ac5c:	d94019c4 	addi	r5,sp,103
1000ac60:	04840074 	movhi	r18,4097
1000ac64:	2145c83a 	sub	r2,r4,r5
1000ac68:	948cb604 	addi	r18,r18,13016
1000ac6c:	d9001e15 	stw	r4,120(sp)
1000ac70:	d9401f15 	stw	r5,124(sp)
1000ac74:	dec01a15 	stw	sp,104(sp)
1000ac78:	d8001c15 	stw	zero,112(sp)
1000ac7c:	d8001b15 	stw	zero,108(sp)
1000ac80:	d811883a 	mov	r8,sp
1000ac84:	d8002615 	stw	zero,152(sp)
1000ac88:	d8002415 	stw	zero,144(sp)
1000ac8c:	d8802815 	stw	r2,160(sp)
1000ac90:	a82d883a 	mov	r22,r21
1000ac94:	b0800007 	ldb	r2,0(r22)
1000ac98:	10040d26 	beq	r2,zero,1000bcd0 <___vfiprintf_internal_r+0x110c>
1000ac9c:	00c00944 	movi	r3,37
1000aca0:	b029883a 	mov	r20,r22
1000aca4:	10c0021e 	bne	r2,r3,1000acb0 <___vfiprintf_internal_r+0xec>
1000aca8:	00001606 	br	1000ad04 <___vfiprintf_internal_r+0x140>
1000acac:	10c00326 	beq	r2,r3,1000acbc <___vfiprintf_internal_r+0xf8>
1000acb0:	a5000044 	addi	r20,r20,1
1000acb4:	a0800007 	ldb	r2,0(r20)
1000acb8:	103ffc1e 	bne	r2,zero,1000acac <__alt_data_end+0xf800acac>
1000acbc:	a5a1c83a 	sub	r16,r20,r22
1000acc0:	80001026 	beq	r16,zero,1000ad04 <___vfiprintf_internal_r+0x140>
1000acc4:	d8c01c17 	ldw	r3,112(sp)
1000acc8:	d8801b17 	ldw	r2,108(sp)
1000accc:	45800015 	stw	r22,0(r8)
1000acd0:	80c7883a 	add	r3,r16,r3
1000acd4:	10800044 	addi	r2,r2,1
1000acd8:	44000115 	stw	r16,4(r8)
1000acdc:	d8c01c15 	stw	r3,112(sp)
1000ace0:	d8801b15 	stw	r2,108(sp)
1000ace4:	010001c4 	movi	r4,7
1000ace8:	2080750e 	bge	r4,r2,1000aec0 <___vfiprintf_internal_r+0x2fc>
1000acec:	1803951e 	bne	r3,zero,1000bb44 <___vfiprintf_internal_r+0xf80>
1000acf0:	d8c02417 	ldw	r3,144(sp)
1000acf4:	d8001b15 	stw	zero,108(sp)
1000acf8:	d811883a 	mov	r8,sp
1000acfc:	1c07883a 	add	r3,r3,r16
1000ad00:	d8c02415 	stw	r3,144(sp)
1000ad04:	a0800007 	ldb	r2,0(r20)
1000ad08:	1002e026 	beq	r2,zero,1000b88c <___vfiprintf_internal_r+0xcc8>
1000ad0c:	a5800044 	addi	r22,r20,1
1000ad10:	a0c00047 	ldb	r3,1(r20)
1000ad14:	d8001d85 	stb	zero,118(sp)
1000ad18:	0027883a 	mov	r19,zero
1000ad1c:	d8002305 	stb	zero,140(sp)
1000ad20:	043fffc4 	movi	r16,-1
1000ad24:	d8002515 	stw	zero,148(sp)
1000ad28:	0023883a 	mov	r17,zero
1000ad2c:	05001604 	movi	r20,88
1000ad30:	05400244 	movi	r21,9
1000ad34:	402f883a 	mov	r23,r8
1000ad38:	b5800044 	addi	r22,r22,1
1000ad3c:	18bff804 	addi	r2,r3,-32
1000ad40:	a0827736 	bltu	r20,r2,1000b720 <___vfiprintf_internal_r+0xb5c>
1000ad44:	100490ba 	slli	r2,r2,2
1000ad48:	01040074 	movhi	r4,4097
1000ad4c:	212b5704 	addi	r4,r4,-21156
1000ad50:	1105883a 	add	r2,r2,r4
1000ad54:	10800017 	ldw	r2,0(r2)
1000ad58:	1000683a 	jmp	r2
1000ad5c:	1000b420 	cmpeqi	zero,r2,720
1000ad60:	1000b720 	cmpeqi	zero,r2,732
1000ad64:	1000b720 	cmpeqi	zero,r2,732
1000ad68:	1000b43c 	xorhi	zero,r2,720
1000ad6c:	1000b720 	cmpeqi	zero,r2,732
1000ad70:	1000b720 	cmpeqi	zero,r2,732
1000ad74:	1000b720 	cmpeqi	zero,r2,732
1000ad78:	1000b720 	cmpeqi	zero,r2,732
1000ad7c:	1000b720 	cmpeqi	zero,r2,732
1000ad80:	1000b720 	cmpeqi	zero,r2,732
1000ad84:	1000b644 	addi	zero,r2,729
1000ad88:	1000b668 	cmpgeui	zero,r2,729
1000ad8c:	1000b720 	cmpeqi	zero,r2,732
1000ad90:	1000af60 	cmpeqi	zero,r2,701
1000ad94:	1000b67c 	xorhi	zero,r2,729
1000ad98:	1000b720 	cmpeqi	zero,r2,732
1000ad9c:	1000b448 	cmpgei	zero,r2,721
1000ada0:	1000b454 	ori	zero,r2,721
1000ada4:	1000b454 	ori	zero,r2,721
1000ada8:	1000b454 	ori	zero,r2,721
1000adac:	1000b454 	ori	zero,r2,721
1000adb0:	1000b454 	ori	zero,r2,721
1000adb4:	1000b454 	ori	zero,r2,721
1000adb8:	1000b454 	ori	zero,r2,721
1000adbc:	1000b454 	ori	zero,r2,721
1000adc0:	1000b454 	ori	zero,r2,721
1000adc4:	1000b720 	cmpeqi	zero,r2,732
1000adc8:	1000b720 	cmpeqi	zero,r2,732
1000adcc:	1000b720 	cmpeqi	zero,r2,732
1000add0:	1000b720 	cmpeqi	zero,r2,732
1000add4:	1000b720 	cmpeqi	zero,r2,732
1000add8:	1000b720 	cmpeqi	zero,r2,732
1000addc:	1000b720 	cmpeqi	zero,r2,732
1000ade0:	1000b720 	cmpeqi	zero,r2,732
1000ade4:	1000b720 	cmpeqi	zero,r2,732
1000ade8:	1000b720 	cmpeqi	zero,r2,732
1000adec:	1000b494 	ori	zero,r2,722
1000adf0:	1000b720 	cmpeqi	zero,r2,732
1000adf4:	1000b720 	cmpeqi	zero,r2,732
1000adf8:	1000b720 	cmpeqi	zero,r2,732
1000adfc:	1000b720 	cmpeqi	zero,r2,732
1000ae00:	1000b720 	cmpeqi	zero,r2,732
1000ae04:	1000b720 	cmpeqi	zero,r2,732
1000ae08:	1000b720 	cmpeqi	zero,r2,732
1000ae0c:	1000b720 	cmpeqi	zero,r2,732
1000ae10:	1000b720 	cmpeqi	zero,r2,732
1000ae14:	1000b720 	cmpeqi	zero,r2,732
1000ae18:	1000b4d0 	cmplti	zero,r2,723
1000ae1c:	1000b720 	cmpeqi	zero,r2,732
1000ae20:	1000b720 	cmpeqi	zero,r2,732
1000ae24:	1000b720 	cmpeqi	zero,r2,732
1000ae28:	1000b720 	cmpeqi	zero,r2,732
1000ae2c:	1000b720 	cmpeqi	zero,r2,732
1000ae30:	1000b52c 	andhi	zero,r2,724
1000ae34:	1000b720 	cmpeqi	zero,r2,732
1000ae38:	1000b720 	cmpeqi	zero,r2,732
1000ae3c:	1000b5a0 	cmpeqi	zero,r2,726
1000ae40:	1000b720 	cmpeqi	zero,r2,732
1000ae44:	1000b720 	cmpeqi	zero,r2,732
1000ae48:	1000b720 	cmpeqi	zero,r2,732
1000ae4c:	1000b720 	cmpeqi	zero,r2,732
1000ae50:	1000b720 	cmpeqi	zero,r2,732
1000ae54:	1000b720 	cmpeqi	zero,r2,732
1000ae58:	1000b720 	cmpeqi	zero,r2,732
1000ae5c:	1000b720 	cmpeqi	zero,r2,732
1000ae60:	1000b720 	cmpeqi	zero,r2,732
1000ae64:	1000b720 	cmpeqi	zero,r2,732
1000ae68:	1000b348 	cmpgei	zero,r2,717
1000ae6c:	1000b378 	rdprs	zero,r2,717
1000ae70:	1000b720 	cmpeqi	zero,r2,732
1000ae74:	1000b720 	cmpeqi	zero,r2,732
1000ae78:	1000b720 	cmpeqi	zero,r2,732
1000ae7c:	1000b6c8 	cmpgei	zero,r2,731
1000ae80:	1000b378 	rdprs	zero,r2,717
1000ae84:	1000b720 	cmpeqi	zero,r2,732
1000ae88:	1000b720 	cmpeqi	zero,r2,732
1000ae8c:	1000b220 	cmpeqi	zero,r2,712
1000ae90:	1000b720 	cmpeqi	zero,r2,732
1000ae94:	1000b234 	orhi	zero,r2,712
1000ae98:	1000b26c 	andhi	zero,r2,713
1000ae9c:	1000af6c 	andhi	zero,r2,701
1000aea0:	1000b214 	ori	zero,r2,712
1000aea4:	1000b720 	cmpeqi	zero,r2,732
1000aea8:	1000b5e0 	cmpeqi	zero,r2,727
1000aeac:	1000b720 	cmpeqi	zero,r2,732
1000aeb0:	1000b62c 	andhi	zero,r2,728
1000aeb4:	1000b720 	cmpeqi	zero,r2,732
1000aeb8:	1000b720 	cmpeqi	zero,r2,732
1000aebc:	1000b2f0 	cmpltui	zero,r2,715
1000aec0:	42000204 	addi	r8,r8,8
1000aec4:	d8c02417 	ldw	r3,144(sp)
1000aec8:	1c07883a 	add	r3,r3,r16
1000aecc:	d8c02415 	stw	r3,144(sp)
1000aed0:	003f8c06 	br	1000ad04 <__alt_data_end+0xf800ad04>
1000aed4:	d9402017 	ldw	r5,128(sp)
1000aed8:	d9002117 	ldw	r4,132(sp)
1000aedc:	00057800 	call	10005780 <__swsetup_r>
1000aee0:	1003c11e 	bne	r2,zero,1000bde8 <___vfiprintf_internal_r+0x1224>
1000aee4:	d9402017 	ldw	r5,128(sp)
1000aee8:	00c00284 	movi	r3,10
1000aeec:	2880030b 	ldhu	r2,12(r5)
1000aef0:	1080068c 	andi	r2,r2,26
1000aef4:	10ff581e 	bne	r2,r3,1000ac58 <__alt_data_end+0xf800ac58>
1000aef8:	d8c02017 	ldw	r3,128(sp)
1000aefc:	1880038f 	ldh	r2,14(r3)
1000af00:	103f5516 	blt	r2,zero,1000ac58 <__alt_data_end+0xf800ac58>
1000af04:	d9c02217 	ldw	r7,136(sp)
1000af08:	d9002117 	ldw	r4,132(sp)
1000af0c:	a80d883a 	mov	r6,r21
1000af10:	180b883a 	mov	r5,r3
1000af14:	000c0ec0 	call	1000c0ec <__sbprintf>
1000af18:	dfc03517 	ldw	ra,212(sp)
1000af1c:	df003417 	ldw	fp,208(sp)
1000af20:	ddc03317 	ldw	r23,204(sp)
1000af24:	dd803217 	ldw	r22,200(sp)
1000af28:	dd403117 	ldw	r21,196(sp)
1000af2c:	dd003017 	ldw	r20,192(sp)
1000af30:	dcc02f17 	ldw	r19,188(sp)
1000af34:	dc802e17 	ldw	r18,184(sp)
1000af38:	dc402d17 	ldw	r17,180(sp)
1000af3c:	dc002c17 	ldw	r16,176(sp)
1000af40:	dec03604 	addi	sp,sp,216
1000af44:	f800283a 	ret
1000af48:	000778c0 	call	1000778c <__sinit>
1000af4c:	003f2f06 	br	1000ac0c <__alt_data_end+0xf800ac0c>
1000af50:	d8c02517 	ldw	r3,148(sp)
1000af54:	d8802215 	stw	r2,136(sp)
1000af58:	00c7c83a 	sub	r3,zero,r3
1000af5c:	d8c02515 	stw	r3,148(sp)
1000af60:	8c400114 	ori	r17,r17,4
1000af64:	b0c00007 	ldb	r3,0(r22)
1000af68:	003f7306 	br	1000ad38 <__alt_data_end+0xf800ad38>
1000af6c:	00800c04 	movi	r2,48
1000af70:	d9402217 	ldw	r5,136(sp)
1000af74:	d8801d05 	stb	r2,116(sp)
1000af78:	00801e04 	movi	r2,120
1000af7c:	d8801d45 	stb	r2,117(sp)
1000af80:	d8001d85 	stb	zero,118(sp)
1000af84:	b811883a 	mov	r8,r23
1000af88:	28c00104 	addi	r3,r5,4
1000af8c:	2cc00017 	ldw	r19,0(r5)
1000af90:	0029883a 	mov	r20,zero
1000af94:	88800094 	ori	r2,r17,2
1000af98:	80032516 	blt	r16,zero,1000bc30 <___vfiprintf_internal_r+0x106c>
1000af9c:	00bfdfc4 	movi	r2,-129
1000afa0:	88a2703a 	and	r17,r17,r2
1000afa4:	d8c02215 	stw	r3,136(sp)
1000afa8:	8c400094 	ori	r17,r17,2
1000afac:	98032a1e 	bne	r19,zero,1000bc58 <___vfiprintf_internal_r+0x1094>
1000afb0:	00840074 	movhi	r2,4097
1000afb4:	108c5504 	addi	r2,r2,12628
1000afb8:	d8802615 	stw	r2,152(sp)
1000afbc:	002b883a 	mov	r21,zero
1000afc0:	8001741e 	bne	r16,zero,1000b594 <___vfiprintf_internal_r+0x9d0>
1000afc4:	0021883a 	mov	r16,zero
1000afc8:	0029883a 	mov	r20,zero
1000afcc:	ddc01a04 	addi	r23,sp,104
1000afd0:	8027883a 	mov	r19,r16
1000afd4:	8500010e 	bge	r16,r20,1000afdc <___vfiprintf_internal_r+0x418>
1000afd8:	a027883a 	mov	r19,r20
1000afdc:	ad403fcc 	andi	r21,r21,255
1000afe0:	ad40201c 	xori	r21,r21,128
1000afe4:	ad7fe004 	addi	r21,r21,-128
1000afe8:	a8000126 	beq	r21,zero,1000aff0 <___vfiprintf_internal_r+0x42c>
1000afec:	9cc00044 	addi	r19,r19,1
1000aff0:	89c0008c 	andi	r7,r17,2
1000aff4:	38000126 	beq	r7,zero,1000affc <___vfiprintf_internal_r+0x438>
1000aff8:	9cc00084 	addi	r19,r19,2
1000affc:	88c0210c 	andi	r3,r17,132
1000b000:	1801dd1e 	bne	r3,zero,1000b778 <___vfiprintf_internal_r+0xbb4>
1000b004:	d9402517 	ldw	r5,148(sp)
1000b008:	2cebc83a 	sub	r21,r5,r19
1000b00c:	0541da0e 	bge	zero,r21,1000b778 <___vfiprintf_internal_r+0xbb4>
1000b010:	07000404 	movi	fp,16
1000b014:	d8801c17 	ldw	r2,112(sp)
1000b018:	e543be0e 	bge	fp,r21,1000bf14 <___vfiprintf_internal_r+0x1350>
1000b01c:	01440074 	movhi	r5,4097
1000b020:	294cba04 	addi	r5,r5,13032
1000b024:	dc002715 	stw	r16,156(sp)
1000b028:	d9801b17 	ldw	r6,108(sp)
1000b02c:	a821883a 	mov	r16,r21
1000b030:	d9402315 	stw	r5,140(sp)
1000b034:	028001c4 	movi	r10,7
1000b038:	d9c02915 	stw	r7,164(sp)
1000b03c:	182b883a 	mov	r21,r3
1000b040:	00000506 	br	1000b058 <___vfiprintf_internal_r+0x494>
1000b044:	31000084 	addi	r4,r6,2
1000b048:	42000204 	addi	r8,r8,8
1000b04c:	180d883a 	mov	r6,r3
1000b050:	843ffc04 	addi	r16,r16,-16
1000b054:	e4000f0e 	bge	fp,r16,1000b094 <___vfiprintf_internal_r+0x4d0>
1000b058:	01040074 	movhi	r4,4097
1000b05c:	10800404 	addi	r2,r2,16
1000b060:	30c00044 	addi	r3,r6,1
1000b064:	210cba04 	addi	r4,r4,13032
1000b068:	41000015 	stw	r4,0(r8)
1000b06c:	47000115 	stw	fp,4(r8)
1000b070:	d8801c15 	stw	r2,112(sp)
1000b074:	d8c01b15 	stw	r3,108(sp)
1000b078:	50fff20e 	bge	r10,r3,1000b044 <__alt_data_end+0xf800b044>
1000b07c:	1001b21e 	bne	r2,zero,1000b748 <___vfiprintf_internal_r+0xb84>
1000b080:	843ffc04 	addi	r16,r16,-16
1000b084:	000d883a 	mov	r6,zero
1000b088:	01000044 	movi	r4,1
1000b08c:	d811883a 	mov	r8,sp
1000b090:	e43ff116 	blt	fp,r16,1000b058 <__alt_data_end+0xf800b058>
1000b094:	a807883a 	mov	r3,r21
1000b098:	d9c02917 	ldw	r7,164(sp)
1000b09c:	802b883a 	mov	r21,r16
1000b0a0:	dc002717 	ldw	r16,156(sp)
1000b0a4:	d9402317 	ldw	r5,140(sp)
1000b0a8:	a885883a 	add	r2,r21,r2
1000b0ac:	45400115 	stw	r21,4(r8)
1000b0b0:	41400015 	stw	r5,0(r8)
1000b0b4:	d8801c15 	stw	r2,112(sp)
1000b0b8:	d9001b15 	stw	r4,108(sp)
1000b0bc:	014001c4 	movi	r5,7
1000b0c0:	29026216 	blt	r5,r4,1000ba4c <___vfiprintf_internal_r+0xe88>
1000b0c4:	d9801d87 	ldb	r6,118(sp)
1000b0c8:	42000204 	addi	r8,r8,8
1000b0cc:	21400044 	addi	r5,r4,1
1000b0d0:	3001ae1e 	bne	r6,zero,1000b78c <___vfiprintf_internal_r+0xbc8>
1000b0d4:	3801bb26 	beq	r7,zero,1000b7c4 <___vfiprintf_internal_r+0xc00>
1000b0d8:	d9001d04 	addi	r4,sp,116
1000b0dc:	10800084 	addi	r2,r2,2
1000b0e0:	41000015 	stw	r4,0(r8)
1000b0e4:	01000084 	movi	r4,2
1000b0e8:	41000115 	stw	r4,4(r8)
1000b0ec:	d8801c15 	stw	r2,112(sp)
1000b0f0:	d9401b15 	stw	r5,108(sp)
1000b0f4:	010001c4 	movi	r4,7
1000b0f8:	2142680e 	bge	r4,r5,1000ba9c <___vfiprintf_internal_r+0xed8>
1000b0fc:	1002b11e 	bne	r2,zero,1000bbc4 <___vfiprintf_internal_r+0x1000>
1000b100:	01802004 	movi	r6,128
1000b104:	01400044 	movi	r5,1
1000b108:	0009883a 	mov	r4,zero
1000b10c:	d811883a 	mov	r8,sp
1000b110:	1981ae1e 	bne	r3,r6,1000b7cc <___vfiprintf_internal_r+0xc08>
1000b114:	d8c02517 	ldw	r3,148(sp)
1000b118:	1cf9c83a 	sub	fp,r3,r19
1000b11c:	0701ab0e 	bge	zero,fp,1000b7cc <___vfiprintf_internal_r+0xc08>
1000b120:	05400404 	movi	r21,16
1000b124:	af03a90e 	bge	r21,fp,1000bfcc <___vfiprintf_internal_r+0x1408>
1000b128:	01440074 	movhi	r5,4097
1000b12c:	294cb604 	addi	r5,r5,13016
1000b130:	d9402315 	stw	r5,140(sp)
1000b134:	01c001c4 	movi	r7,7
1000b138:	00000506 	br	1000b150 <___vfiprintf_internal_r+0x58c>
1000b13c:	21800084 	addi	r6,r4,2
1000b140:	42000204 	addi	r8,r8,8
1000b144:	1809883a 	mov	r4,r3
1000b148:	e73ffc04 	addi	fp,fp,-16
1000b14c:	af000d0e 	bge	r21,fp,1000b184 <___vfiprintf_internal_r+0x5c0>
1000b150:	10800404 	addi	r2,r2,16
1000b154:	20c00044 	addi	r3,r4,1
1000b158:	44800015 	stw	r18,0(r8)
1000b15c:	45400115 	stw	r21,4(r8)
1000b160:	d8801c15 	stw	r2,112(sp)
1000b164:	d8c01b15 	stw	r3,108(sp)
1000b168:	38fff40e 	bge	r7,r3,1000b13c <__alt_data_end+0xf800b13c>
1000b16c:	10022b1e 	bne	r2,zero,1000ba1c <___vfiprintf_internal_r+0xe58>
1000b170:	e73ffc04 	addi	fp,fp,-16
1000b174:	01800044 	movi	r6,1
1000b178:	0009883a 	mov	r4,zero
1000b17c:	d811883a 	mov	r8,sp
1000b180:	af3ff316 	blt	r21,fp,1000b150 <__alt_data_end+0xf800b150>
1000b184:	d8c02317 	ldw	r3,140(sp)
1000b188:	1705883a 	add	r2,r2,fp
1000b18c:	47000115 	stw	fp,4(r8)
1000b190:	40c00015 	stw	r3,0(r8)
1000b194:	d8801c15 	stw	r2,112(sp)
1000b198:	d9801b15 	stw	r6,108(sp)
1000b19c:	00c001c4 	movi	r3,7
1000b1a0:	19829416 	blt	r3,r6,1000bbf4 <___vfiprintf_internal_r+0x1030>
1000b1a4:	8521c83a 	sub	r16,r16,r20
1000b1a8:	42000204 	addi	r8,r8,8
1000b1ac:	31400044 	addi	r5,r6,1
1000b1b0:	3009883a 	mov	r4,r6
1000b1b4:	04018716 	blt	zero,r16,1000b7d4 <___vfiprintf_internal_r+0xc10>
1000b1b8:	a085883a 	add	r2,r20,r2
1000b1bc:	45c00015 	stw	r23,0(r8)
1000b1c0:	45000115 	stw	r20,4(r8)
1000b1c4:	d8801c15 	stw	r2,112(sp)
1000b1c8:	d9401b15 	stw	r5,108(sp)
1000b1cc:	00c001c4 	movi	r3,7
1000b1d0:	1941c20e 	bge	r3,r5,1000b8dc <___vfiprintf_internal_r+0xd18>
1000b1d4:	1002531e 	bne	r2,zero,1000bb24 <___vfiprintf_internal_r+0xf60>
1000b1d8:	d8001b15 	stw	zero,108(sp)
1000b1dc:	8c40010c 	andi	r17,r17,4
1000b1e0:	88023226 	beq	r17,zero,1000baac <___vfiprintf_internal_r+0xee8>
1000b1e4:	d9002517 	ldw	r4,148(sp)
1000b1e8:	24e3c83a 	sub	r17,r4,r19
1000b1ec:	04432916 	blt	zero,r17,1000be94 <___vfiprintf_internal_r+0x12d0>
1000b1f0:	d8802517 	ldw	r2,148(sp)
1000b1f4:	14c0010e 	bge	r2,r19,1000b1fc <___vfiprintf_internal_r+0x638>
1000b1f8:	9805883a 	mov	r2,r19
1000b1fc:	d8c02417 	ldw	r3,144(sp)
1000b200:	1887883a 	add	r3,r3,r2
1000b204:	d8c02415 	stw	r3,144(sp)
1000b208:	d8001b15 	stw	zero,108(sp)
1000b20c:	d811883a 	mov	r8,sp
1000b210:	003ea006 	br	1000ac94 <__alt_data_end+0xf800ac94>
1000b214:	8c400814 	ori	r17,r17,32
1000b218:	b0c00007 	ldb	r3,0(r22)
1000b21c:	003ec606 	br	1000ad38 <__alt_data_end+0xf800ad38>
1000b220:	b0c00007 	ldb	r3,0(r22)
1000b224:	00801b04 	movi	r2,108
1000b228:	18832026 	beq	r3,r2,1000beac <___vfiprintf_internal_r+0x12e8>
1000b22c:	8c400414 	ori	r17,r17,16
1000b230:	003ec106 	br	1000ad38 <__alt_data_end+0xf800ad38>
1000b234:	9cc03fcc 	andi	r19,r19,255
1000b238:	b811883a 	mov	r8,r23
1000b23c:	9803981e 	bne	r19,zero,1000c0a0 <___vfiprintf_internal_r+0x14dc>
1000b240:	8880080c 	andi	r2,r17,32
1000b244:	1002be26 	beq	r2,zero,1000bd40 <___vfiprintf_internal_r+0x117c>
1000b248:	d9002217 	ldw	r4,136(sp)
1000b24c:	d9402417 	ldw	r5,144(sp)
1000b250:	20800017 	ldw	r2,0(r4)
1000b254:	2807d7fa 	srai	r3,r5,31
1000b258:	21000104 	addi	r4,r4,4
1000b25c:	d9002215 	stw	r4,136(sp)
1000b260:	11400015 	stw	r5,0(r2)
1000b264:	10c00115 	stw	r3,4(r2)
1000b268:	003e8a06 	br	1000ac94 <__alt_data_end+0xf800ac94>
1000b26c:	9cc03fcc 	andi	r19,r19,255
1000b270:	b811883a 	mov	r8,r23
1000b274:	9803871e 	bne	r19,zero,1000c094 <___vfiprintf_internal_r+0x14d0>
1000b278:	8880080c 	andi	r2,r17,32
1000b27c:	10009a26 	beq	r2,zero,1000b4e8 <___vfiprintf_internal_r+0x924>
1000b280:	d9002217 	ldw	r4,136(sp)
1000b284:	d8001d85 	stb	zero,118(sp)
1000b288:	20800204 	addi	r2,r4,8
1000b28c:	24c00017 	ldw	r19,0(r4)
1000b290:	25000117 	ldw	r20,4(r4)
1000b294:	8002a416 	blt	r16,zero,1000bd28 <___vfiprintf_internal_r+0x1164>
1000b298:	013fdfc4 	movi	r4,-129
1000b29c:	9d06b03a 	or	r3,r19,r20
1000b2a0:	d8802215 	stw	r2,136(sp)
1000b2a4:	8922703a 	and	r17,r17,r4
1000b2a8:	18009b26 	beq	r3,zero,1000b518 <___vfiprintf_internal_r+0x954>
1000b2ac:	002b883a 	mov	r21,zero
1000b2b0:	ddc01a04 	addi	r23,sp,104
1000b2b4:	9806d0fa 	srli	r3,r19,3
1000b2b8:	a008977a 	slli	r4,r20,29
1000b2bc:	a028d0fa 	srli	r20,r20,3
1000b2c0:	9cc001cc 	andi	r19,r19,7
1000b2c4:	98800c04 	addi	r2,r19,48
1000b2c8:	bdffffc4 	addi	r23,r23,-1
1000b2cc:	20e6b03a 	or	r19,r4,r3
1000b2d0:	b8800005 	stb	r2,0(r23)
1000b2d4:	9d06b03a 	or	r3,r19,r20
1000b2d8:	183ff61e 	bne	r3,zero,1000b2b4 <__alt_data_end+0xf800b2b4>
1000b2dc:	88c0004c 	andi	r3,r17,1
1000b2e0:	18021f1e 	bne	r3,zero,1000bb60 <___vfiprintf_internal_r+0xf9c>
1000b2e4:	d9401e17 	ldw	r5,120(sp)
1000b2e8:	2de9c83a 	sub	r20,r5,r23
1000b2ec:	003f3806 	br	1000afd0 <__alt_data_end+0xf800afd0>
1000b2f0:	9cc03fcc 	andi	r19,r19,255
1000b2f4:	b811883a 	mov	r8,r23
1000b2f8:	98034f1e 	bne	r19,zero,1000c038 <___vfiprintf_internal_r+0x1474>
1000b2fc:	00840074 	movhi	r2,4097
1000b300:	108c5504 	addi	r2,r2,12628
1000b304:	d8802615 	stw	r2,152(sp)
1000b308:	8880080c 	andi	r2,r17,32
1000b30c:	1000ac26 	beq	r2,zero,1000b5c0 <___vfiprintf_internal_r+0x9fc>
1000b310:	d9002217 	ldw	r4,136(sp)
1000b314:	24c00017 	ldw	r19,0(r4)
1000b318:	25000117 	ldw	r20,4(r4)
1000b31c:	21000204 	addi	r4,r4,8
1000b320:	d9002215 	stw	r4,136(sp)
1000b324:	8880004c 	andi	r2,r17,1
1000b328:	1001e726 	beq	r2,zero,1000bac8 <___vfiprintf_internal_r+0xf04>
1000b32c:	9d04b03a 	or	r2,r19,r20
1000b330:	10025c1e 	bne	r2,zero,1000bca4 <___vfiprintf_internal_r+0x10e0>
1000b334:	d8001d85 	stb	zero,118(sp)
1000b338:	80024416 	blt	r16,zero,1000bc4c <___vfiprintf_internal_r+0x1088>
1000b33c:	00bfdfc4 	movi	r2,-129
1000b340:	88a2703a 	and	r17,r17,r2
1000b344:	003f1d06 	br	1000afbc <__alt_data_end+0xf800afbc>
1000b348:	d8c02217 	ldw	r3,136(sp)
1000b34c:	04c00044 	movi	r19,1
1000b350:	b811883a 	mov	r8,r23
1000b354:	18800017 	ldw	r2,0(r3)
1000b358:	18c00104 	addi	r3,r3,4
1000b35c:	d8001d85 	stb	zero,118(sp)
1000b360:	d8801005 	stb	r2,64(sp)
1000b364:	d8c02215 	stw	r3,136(sp)
1000b368:	9829883a 	mov	r20,r19
1000b36c:	ddc01004 	addi	r23,sp,64
1000b370:	0021883a 	mov	r16,zero
1000b374:	003f1e06 	br	1000aff0 <__alt_data_end+0xf800aff0>
1000b378:	9cc03fcc 	andi	r19,r19,255
1000b37c:	b811883a 	mov	r8,r23
1000b380:	9803331e 	bne	r19,zero,1000c050 <___vfiprintf_internal_r+0x148c>
1000b384:	8880080c 	andi	r2,r17,32
1000b388:	10004826 	beq	r2,zero,1000b4ac <___vfiprintf_internal_r+0x8e8>
1000b38c:	d9002217 	ldw	r4,136(sp)
1000b390:	20800117 	ldw	r2,4(r4)
1000b394:	24c00017 	ldw	r19,0(r4)
1000b398:	21000204 	addi	r4,r4,8
1000b39c:	d9002215 	stw	r4,136(sp)
1000b3a0:	1029883a 	mov	r20,r2
1000b3a4:	10024c16 	blt	r2,zero,1000bcd8 <___vfiprintf_internal_r+0x1114>
1000b3a8:	dd401d83 	ldbu	r21,118(sp)
1000b3ac:	80007116 	blt	r16,zero,1000b574 <___vfiprintf_internal_r+0x9b0>
1000b3b0:	00ffdfc4 	movi	r3,-129
1000b3b4:	9d04b03a 	or	r2,r19,r20
1000b3b8:	88e2703a 	and	r17,r17,r3
1000b3bc:	1000d126 	beq	r2,zero,1000b704 <___vfiprintf_internal_r+0xb40>
1000b3c0:	a0023526 	beq	r20,zero,1000bc98 <___vfiprintf_internal_r+0x10d4>
1000b3c4:	ddc01a04 	addi	r23,sp,104
1000b3c8:	4039883a 	mov	fp,r8
1000b3cc:	9809883a 	mov	r4,r19
1000b3d0:	a00b883a 	mov	r5,r20
1000b3d4:	01800284 	movi	r6,10
1000b3d8:	000f883a 	mov	r7,zero
1000b3dc:	000d0f00 	call	1000d0f0 <__umoddi3>
1000b3e0:	10800c04 	addi	r2,r2,48
1000b3e4:	bdffffc4 	addi	r23,r23,-1
1000b3e8:	9809883a 	mov	r4,r19
1000b3ec:	a00b883a 	mov	r5,r20
1000b3f0:	b8800005 	stb	r2,0(r23)
1000b3f4:	01800284 	movi	r6,10
1000b3f8:	000f883a 	mov	r7,zero
1000b3fc:	000caf40 	call	1000caf4 <__udivdi3>
1000b400:	1027883a 	mov	r19,r2
1000b404:	10c4b03a 	or	r2,r2,r3
1000b408:	1829883a 	mov	r20,r3
1000b40c:	103fef1e 	bne	r2,zero,1000b3cc <__alt_data_end+0xf800b3cc>
1000b410:	d9001e17 	ldw	r4,120(sp)
1000b414:	e011883a 	mov	r8,fp
1000b418:	25e9c83a 	sub	r20,r4,r23
1000b41c:	003eec06 	br	1000afd0 <__alt_data_end+0xf800afd0>
1000b420:	d8802307 	ldb	r2,140(sp)
1000b424:	1002361e 	bne	r2,zero,1000bd00 <___vfiprintf_internal_r+0x113c>
1000b428:	00c00804 	movi	r3,32
1000b42c:	d8c02305 	stb	r3,140(sp)
1000b430:	04c00044 	movi	r19,1
1000b434:	b0c00007 	ldb	r3,0(r22)
1000b438:	003e3f06 	br	1000ad38 <__alt_data_end+0xf800ad38>
1000b43c:	8c400054 	ori	r17,r17,1
1000b440:	b0c00007 	ldb	r3,0(r22)
1000b444:	003e3c06 	br	1000ad38 <__alt_data_end+0xf800ad38>
1000b448:	8c402014 	ori	r17,r17,128
1000b44c:	b0c00007 	ldb	r3,0(r22)
1000b450:	003e3906 	br	1000ad38 <__alt_data_end+0xf800ad38>
1000b454:	dc002715 	stw	r16,156(sp)
1000b458:	d8002515 	stw	zero,148(sp)
1000b45c:	1f3ff404 	addi	fp,r3,-48
1000b460:	0009883a 	mov	r4,zero
1000b464:	b021883a 	mov	r16,r22
1000b468:	01400284 	movi	r5,10
1000b46c:	000d8680 	call	1000d868 <__mulsi3>
1000b470:	80c00007 	ldb	r3,0(r16)
1000b474:	e089883a 	add	r4,fp,r2
1000b478:	b5800044 	addi	r22,r22,1
1000b47c:	1f3ff404 	addi	fp,r3,-48
1000b480:	b021883a 	mov	r16,r22
1000b484:	af3ff82e 	bgeu	r21,fp,1000b468 <__alt_data_end+0xf800b468>
1000b488:	d9002515 	stw	r4,148(sp)
1000b48c:	dc002717 	ldw	r16,156(sp)
1000b490:	003e2a06 	br	1000ad3c <__alt_data_end+0xf800ad3c>
1000b494:	9cc03fcc 	andi	r19,r19,255
1000b498:	b811883a 	mov	r8,r23
1000b49c:	9802e91e 	bne	r19,zero,1000c044 <___vfiprintf_internal_r+0x1480>
1000b4a0:	8c400414 	ori	r17,r17,16
1000b4a4:	8880080c 	andi	r2,r17,32
1000b4a8:	103fb81e 	bne	r2,zero,1000b38c <__alt_data_end+0xf800b38c>
1000b4ac:	8880040c 	andi	r2,r17,16
1000b4b0:	10022e26 	beq	r2,zero,1000bd6c <___vfiprintf_internal_r+0x11a8>
1000b4b4:	d9402217 	ldw	r5,136(sp)
1000b4b8:	2cc00017 	ldw	r19,0(r5)
1000b4bc:	29400104 	addi	r5,r5,4
1000b4c0:	d9402215 	stw	r5,136(sp)
1000b4c4:	9829d7fa 	srai	r20,r19,31
1000b4c8:	a005883a 	mov	r2,r20
1000b4cc:	003fb506 	br	1000b3a4 <__alt_data_end+0xf800b3a4>
1000b4d0:	9cc03fcc 	andi	r19,r19,255
1000b4d4:	b811883a 	mov	r8,r23
1000b4d8:	9802fa1e 	bne	r19,zero,1000c0c4 <___vfiprintf_internal_r+0x1500>
1000b4dc:	8c400414 	ori	r17,r17,16
1000b4e0:	8880080c 	andi	r2,r17,32
1000b4e4:	103f661e 	bne	r2,zero,1000b280 <__alt_data_end+0xf800b280>
1000b4e8:	8880040c 	andi	r2,r17,16
1000b4ec:	10020626 	beq	r2,zero,1000bd08 <___vfiprintf_internal_r+0x1144>
1000b4f0:	d9402217 	ldw	r5,136(sp)
1000b4f4:	d8001d85 	stb	zero,118(sp)
1000b4f8:	0029883a 	mov	r20,zero
1000b4fc:	28800104 	addi	r2,r5,4
1000b500:	2cc00017 	ldw	r19,0(r5)
1000b504:	80020816 	blt	r16,zero,1000bd28 <___vfiprintf_internal_r+0x1164>
1000b508:	00ffdfc4 	movi	r3,-129
1000b50c:	d8802215 	stw	r2,136(sp)
1000b510:	88e2703a 	and	r17,r17,r3
1000b514:	983f651e 	bne	r19,zero,1000b2ac <__alt_data_end+0xf800b2ac>
1000b518:	002b883a 	mov	r21,zero
1000b51c:	8002cf26 	beq	r16,zero,1000c05c <___vfiprintf_internal_r+0x1498>
1000b520:	0027883a 	mov	r19,zero
1000b524:	0029883a 	mov	r20,zero
1000b528:	003f6106 	br	1000b2b0 <__alt_data_end+0xf800b2b0>
1000b52c:	9cc03fcc 	andi	r19,r19,255
1000b530:	b811883a 	mov	r8,r23
1000b534:	9802e01e 	bne	r19,zero,1000c0b8 <___vfiprintf_internal_r+0x14f4>
1000b538:	8c400414 	ori	r17,r17,16
1000b53c:	8880080c 	andi	r2,r17,32
1000b540:	1000641e 	bne	r2,zero,1000b6d4 <___vfiprintf_internal_r+0xb10>
1000b544:	8880040c 	andi	r2,r17,16
1000b548:	1001c81e 	bne	r2,zero,1000bc6c <___vfiprintf_internal_r+0x10a8>
1000b54c:	8880100c 	andi	r2,r17,64
1000b550:	d8001d85 	stb	zero,118(sp)
1000b554:	1002281e 	bne	r2,zero,1000bdf8 <___vfiprintf_internal_r+0x1234>
1000b558:	d9002217 	ldw	r4,136(sp)
1000b55c:	0029883a 	mov	r20,zero
1000b560:	20800104 	addi	r2,r4,4
1000b564:	24c00017 	ldw	r19,0(r4)
1000b568:	8001c60e 	bge	r16,zero,1000bc84 <___vfiprintf_internal_r+0x10c0>
1000b56c:	d8802215 	stw	r2,136(sp)
1000b570:	002b883a 	mov	r21,zero
1000b574:	9d04b03a 	or	r2,r19,r20
1000b578:	103f911e 	bne	r2,zero,1000b3c0 <__alt_data_end+0xf800b3c0>
1000b57c:	00800044 	movi	r2,1
1000b580:	10803fcc 	andi	r2,r2,255
1000b584:	00c00044 	movi	r3,1
1000b588:	10c05f26 	beq	r2,r3,1000b708 <___vfiprintf_internal_r+0xb44>
1000b58c:	00c00084 	movi	r3,2
1000b590:	10ffe31e 	bne	r2,r3,1000b520 <__alt_data_end+0xf800b520>
1000b594:	0027883a 	mov	r19,zero
1000b598:	0029883a 	mov	r20,zero
1000b59c:	00015106 	br	1000bae4 <___vfiprintf_internal_r+0xf20>
1000b5a0:	9cc03fcc 	andi	r19,r19,255
1000b5a4:	b811883a 	mov	r8,r23
1000b5a8:	9802c01e 	bne	r19,zero,1000c0ac <___vfiprintf_internal_r+0x14e8>
1000b5ac:	01440074 	movhi	r5,4097
1000b5b0:	294c5004 	addi	r5,r5,12608
1000b5b4:	d9402615 	stw	r5,152(sp)
1000b5b8:	8880080c 	andi	r2,r17,32
1000b5bc:	103f541e 	bne	r2,zero,1000b310 <__alt_data_end+0xf800b310>
1000b5c0:	8880040c 	andi	r2,r17,16
1000b5c4:	1001f226 	beq	r2,zero,1000bd90 <___vfiprintf_internal_r+0x11cc>
1000b5c8:	d9402217 	ldw	r5,136(sp)
1000b5cc:	0029883a 	mov	r20,zero
1000b5d0:	2cc00017 	ldw	r19,0(r5)
1000b5d4:	29400104 	addi	r5,r5,4
1000b5d8:	d9402215 	stw	r5,136(sp)
1000b5dc:	003f5106 	br	1000b324 <__alt_data_end+0xf800b324>
1000b5e0:	d8c02217 	ldw	r3,136(sp)
1000b5e4:	b811883a 	mov	r8,r23
1000b5e8:	d8001d85 	stb	zero,118(sp)
1000b5ec:	1dc00017 	ldw	r23,0(r3)
1000b5f0:	1f000104 	addi	fp,r3,4
1000b5f4:	b8025926 	beq	r23,zero,1000bf5c <___vfiprintf_internal_r+0x1398>
1000b5f8:	80023316 	blt	r16,zero,1000bec8 <___vfiprintf_internal_r+0x1304>
1000b5fc:	800d883a 	mov	r6,r16
1000b600:	000b883a 	mov	r5,zero
1000b604:	b809883a 	mov	r4,r23
1000b608:	da002a15 	stw	r8,168(sp)
1000b60c:	0008d040 	call	10008d04 <memchr>
1000b610:	da002a17 	ldw	r8,168(sp)
1000b614:	10026826 	beq	r2,zero,1000bfb8 <___vfiprintf_internal_r+0x13f4>
1000b618:	15e9c83a 	sub	r20,r2,r23
1000b61c:	dd401d83 	ldbu	r21,118(sp)
1000b620:	df002215 	stw	fp,136(sp)
1000b624:	0021883a 	mov	r16,zero
1000b628:	003e6906 	br	1000afd0 <__alt_data_end+0xf800afd0>
1000b62c:	9cc03fcc 	andi	r19,r19,255
1000b630:	b811883a 	mov	r8,r23
1000b634:	983fc126 	beq	r19,zero,1000b53c <__alt_data_end+0xf800b53c>
1000b638:	d8c02303 	ldbu	r3,140(sp)
1000b63c:	d8c01d85 	stb	r3,118(sp)
1000b640:	003fbe06 	br	1000b53c <__alt_data_end+0xf800b53c>
1000b644:	d9002217 	ldw	r4,136(sp)
1000b648:	d9402217 	ldw	r5,136(sp)
1000b64c:	21000017 	ldw	r4,0(r4)
1000b650:	28800104 	addi	r2,r5,4
1000b654:	d9002515 	stw	r4,148(sp)
1000b658:	203e3d16 	blt	r4,zero,1000af50 <__alt_data_end+0xf800af50>
1000b65c:	d8802215 	stw	r2,136(sp)
1000b660:	b0c00007 	ldb	r3,0(r22)
1000b664:	003db406 	br	1000ad38 <__alt_data_end+0xf800ad38>
1000b668:	00c00ac4 	movi	r3,43
1000b66c:	d8c02305 	stb	r3,140(sp)
1000b670:	04c00044 	movi	r19,1
1000b674:	b0c00007 	ldb	r3,0(r22)
1000b678:	003daf06 	br	1000ad38 <__alt_data_end+0xf800ad38>
1000b67c:	b0c00007 	ldb	r3,0(r22)
1000b680:	01000a84 	movi	r4,42
1000b684:	b4000044 	addi	r16,r22,1
1000b688:	19025e26 	beq	r3,r4,1000c004 <___vfiprintf_internal_r+0x1440>
1000b68c:	1f3ff404 	addi	fp,r3,-48
1000b690:	0009883a 	mov	r4,zero
1000b694:	af025236 	bltu	r21,fp,1000bfe0 <___vfiprintf_internal_r+0x141c>
1000b698:	01400284 	movi	r5,10
1000b69c:	000d8680 	call	1000d868 <__mulsi3>
1000b6a0:	80c00007 	ldb	r3,0(r16)
1000b6a4:	1709883a 	add	r4,r2,fp
1000b6a8:	85800044 	addi	r22,r16,1
1000b6ac:	1f3ff404 	addi	fp,r3,-48
1000b6b0:	b021883a 	mov	r16,r22
1000b6b4:	af3ff82e 	bgeu	r21,fp,1000b698 <__alt_data_end+0xf800b698>
1000b6b8:	2021883a 	mov	r16,r4
1000b6bc:	203d9f0e 	bge	r4,zero,1000ad3c <__alt_data_end+0xf800ad3c>
1000b6c0:	043fffc4 	movi	r16,-1
1000b6c4:	003d9d06 	br	1000ad3c <__alt_data_end+0xf800ad3c>
1000b6c8:	8c401014 	ori	r17,r17,64
1000b6cc:	b0c00007 	ldb	r3,0(r22)
1000b6d0:	003d9906 	br	1000ad38 <__alt_data_end+0xf800ad38>
1000b6d4:	d9002217 	ldw	r4,136(sp)
1000b6d8:	d8001d85 	stb	zero,118(sp)
1000b6dc:	20c00204 	addi	r3,r4,8
1000b6e0:	24c00017 	ldw	r19,0(r4)
1000b6e4:	25000117 	ldw	r20,4(r4)
1000b6e8:	8001e716 	blt	r16,zero,1000be88 <___vfiprintf_internal_r+0x12c4>
1000b6ec:	013fdfc4 	movi	r4,-129
1000b6f0:	9d04b03a 	or	r2,r19,r20
1000b6f4:	d8c02215 	stw	r3,136(sp)
1000b6f8:	8922703a 	and	r17,r17,r4
1000b6fc:	002b883a 	mov	r21,zero
1000b700:	103f2f1e 	bne	r2,zero,1000b3c0 <__alt_data_end+0xf800b3c0>
1000b704:	803e2f26 	beq	r16,zero,1000afc4 <__alt_data_end+0xf800afc4>
1000b708:	0027883a 	mov	r19,zero
1000b70c:	9cc00c04 	addi	r19,r19,48
1000b710:	dcc019c5 	stb	r19,103(sp)
1000b714:	dd002817 	ldw	r20,160(sp)
1000b718:	ddc019c4 	addi	r23,sp,103
1000b71c:	003e2c06 	br	1000afd0 <__alt_data_end+0xf800afd0>
1000b720:	9cc03fcc 	andi	r19,r19,255
1000b724:	b811883a 	mov	r8,r23
1000b728:	9802571e 	bne	r19,zero,1000c088 <___vfiprintf_internal_r+0x14c4>
1000b72c:	18005726 	beq	r3,zero,1000b88c <___vfiprintf_internal_r+0xcc8>
1000b730:	04c00044 	movi	r19,1
1000b734:	d8c01005 	stb	r3,64(sp)
1000b738:	d8001d85 	stb	zero,118(sp)
1000b73c:	9829883a 	mov	r20,r19
1000b740:	ddc01004 	addi	r23,sp,64
1000b744:	003f0a06 	br	1000b370 <__alt_data_end+0xf800b370>
1000b748:	d9402017 	ldw	r5,128(sp)
1000b74c:	d9002117 	ldw	r4,132(sp)
1000b750:	d9801a04 	addi	r6,sp,104
1000b754:	da802a15 	stw	r10,168(sp)
1000b758:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000b75c:	da802a17 	ldw	r10,168(sp)
1000b760:	1000501e 	bne	r2,zero,1000b8a4 <___vfiprintf_internal_r+0xce0>
1000b764:	d9801b17 	ldw	r6,108(sp)
1000b768:	d8801c17 	ldw	r2,112(sp)
1000b76c:	d811883a 	mov	r8,sp
1000b770:	31000044 	addi	r4,r6,1
1000b774:	003e3606 	br	1000b050 <__alt_data_end+0xf800b050>
1000b778:	d9001b17 	ldw	r4,108(sp)
1000b77c:	d8801c17 	ldw	r2,112(sp)
1000b780:	21400044 	addi	r5,r4,1
1000b784:	d9801d87 	ldb	r6,118(sp)
1000b788:	303e5226 	beq	r6,zero,1000b0d4 <__alt_data_end+0xf800b0d4>
1000b78c:	01800044 	movi	r6,1
1000b790:	d9001d84 	addi	r4,sp,118
1000b794:	1185883a 	add	r2,r2,r6
1000b798:	41000015 	stw	r4,0(r8)
1000b79c:	41800115 	stw	r6,4(r8)
1000b7a0:	d8801c15 	stw	r2,112(sp)
1000b7a4:	d9401b15 	stw	r5,108(sp)
1000b7a8:	010001c4 	movi	r4,7
1000b7ac:	2140b00e 	bge	r4,r5,1000ba70 <___vfiprintf_internal_r+0xeac>
1000b7b0:	1000f61e 	bne	r2,zero,1000bb8c <___vfiprintf_internal_r+0xfc8>
1000b7b4:	3800b31e 	bne	r7,zero,1000ba84 <___vfiprintf_internal_r+0xec0>
1000b7b8:	0009883a 	mov	r4,zero
1000b7bc:	300b883a 	mov	r5,r6
1000b7c0:	d811883a 	mov	r8,sp
1000b7c4:	01802004 	movi	r6,128
1000b7c8:	19be5226 	beq	r3,r6,1000b114 <__alt_data_end+0xf800b114>
1000b7cc:	8521c83a 	sub	r16,r16,r20
1000b7d0:	043e790e 	bge	zero,r16,1000b1b8 <__alt_data_end+0xf800b1b8>
1000b7d4:	05400404 	movi	r21,16
1000b7d8:	ac01b00e 	bge	r21,r16,1000be9c <___vfiprintf_internal_r+0x12d8>
1000b7dc:	01440074 	movhi	r5,4097
1000b7e0:	294cb604 	addi	r5,r5,13016
1000b7e4:	d9402315 	stw	r5,140(sp)
1000b7e8:	070001c4 	movi	fp,7
1000b7ec:	00000506 	br	1000b804 <___vfiprintf_internal_r+0xc40>
1000b7f0:	21400084 	addi	r5,r4,2
1000b7f4:	42000204 	addi	r8,r8,8
1000b7f8:	1809883a 	mov	r4,r3
1000b7fc:	843ffc04 	addi	r16,r16,-16
1000b800:	ac000d0e 	bge	r21,r16,1000b838 <___vfiprintf_internal_r+0xc74>
1000b804:	10800404 	addi	r2,r2,16
1000b808:	20c00044 	addi	r3,r4,1
1000b80c:	44800015 	stw	r18,0(r8)
1000b810:	45400115 	stw	r21,4(r8)
1000b814:	d8801c15 	stw	r2,112(sp)
1000b818:	d8c01b15 	stw	r3,108(sp)
1000b81c:	e0fff40e 	bge	fp,r3,1000b7f0 <__alt_data_end+0xf800b7f0>
1000b820:	1000101e 	bne	r2,zero,1000b864 <___vfiprintf_internal_r+0xca0>
1000b824:	843ffc04 	addi	r16,r16,-16
1000b828:	01400044 	movi	r5,1
1000b82c:	0009883a 	mov	r4,zero
1000b830:	d811883a 	mov	r8,sp
1000b834:	ac3ff316 	blt	r21,r16,1000b804 <__alt_data_end+0xf800b804>
1000b838:	d8c02317 	ldw	r3,140(sp)
1000b83c:	1405883a 	add	r2,r2,r16
1000b840:	44000115 	stw	r16,4(r8)
1000b844:	40c00015 	stw	r3,0(r8)
1000b848:	d8801c15 	stw	r2,112(sp)
1000b84c:	d9401b15 	stw	r5,108(sp)
1000b850:	00c001c4 	movi	r3,7
1000b854:	19401916 	blt	r3,r5,1000b8bc <___vfiprintf_internal_r+0xcf8>
1000b858:	42000204 	addi	r8,r8,8
1000b85c:	29400044 	addi	r5,r5,1
1000b860:	003e5506 	br	1000b1b8 <__alt_data_end+0xf800b1b8>
1000b864:	d9402017 	ldw	r5,128(sp)
1000b868:	d9002117 	ldw	r4,132(sp)
1000b86c:	d9801a04 	addi	r6,sp,104
1000b870:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000b874:	10000b1e 	bne	r2,zero,1000b8a4 <___vfiprintf_internal_r+0xce0>
1000b878:	d9001b17 	ldw	r4,108(sp)
1000b87c:	d8801c17 	ldw	r2,112(sp)
1000b880:	d811883a 	mov	r8,sp
1000b884:	21400044 	addi	r5,r4,1
1000b888:	003fdc06 	br	1000b7fc <__alt_data_end+0xf800b7fc>
1000b88c:	d8801c17 	ldw	r2,112(sp)
1000b890:	10000426 	beq	r2,zero,1000b8a4 <___vfiprintf_internal_r+0xce0>
1000b894:	d9402017 	ldw	r5,128(sp)
1000b898:	d9002117 	ldw	r4,132(sp)
1000b89c:	d9801a04 	addi	r6,sp,104
1000b8a0:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000b8a4:	d9402017 	ldw	r5,128(sp)
1000b8a8:	2880030b 	ldhu	r2,12(r5)
1000b8ac:	1080100c 	andi	r2,r2,64
1000b8b0:	10014d1e 	bne	r2,zero,1000bde8 <___vfiprintf_internal_r+0x1224>
1000b8b4:	d8802417 	ldw	r2,144(sp)
1000b8b8:	003d9706 	br	1000af18 <__alt_data_end+0xf800af18>
1000b8bc:	1000d21e 	bne	r2,zero,1000bc08 <___vfiprintf_internal_r+0x1044>
1000b8c0:	00c00044 	movi	r3,1
1000b8c4:	a005883a 	mov	r2,r20
1000b8c8:	ddc00015 	stw	r23,0(sp)
1000b8cc:	dd000115 	stw	r20,4(sp)
1000b8d0:	dd001c15 	stw	r20,112(sp)
1000b8d4:	d8c01b15 	stw	r3,108(sp)
1000b8d8:	d811883a 	mov	r8,sp
1000b8dc:	42000204 	addi	r8,r8,8
1000b8e0:	8c40010c 	andi	r17,r17,4
1000b8e4:	88004026 	beq	r17,zero,1000b9e8 <___vfiprintf_internal_r+0xe24>
1000b8e8:	d9002517 	ldw	r4,148(sp)
1000b8ec:	24e3c83a 	sub	r17,r4,r19
1000b8f0:	04403d0e 	bge	zero,r17,1000b9e8 <___vfiprintf_internal_r+0xe24>
1000b8f4:	04000404 	movi	r16,16
1000b8f8:	8441a90e 	bge	r16,r17,1000bfa0 <___vfiprintf_internal_r+0x13dc>
1000b8fc:	00c40074 	movhi	r3,4097
1000b900:	18ccba04 	addi	r3,r3,13032
1000b904:	d9001b17 	ldw	r4,108(sp)
1000b908:	d8c02315 	stw	r3,140(sp)
1000b90c:	050001c4 	movi	r20,7
1000b910:	dd402117 	ldw	r21,132(sp)
1000b914:	ddc02017 	ldw	r23,128(sp)
1000b918:	00000506 	br	1000b930 <___vfiprintf_internal_r+0xd6c>
1000b91c:	21400084 	addi	r5,r4,2
1000b920:	42000204 	addi	r8,r8,8
1000b924:	1809883a 	mov	r4,r3
1000b928:	8c7ffc04 	addi	r17,r17,-16
1000b92c:	84400f0e 	bge	r16,r17,1000b96c <___vfiprintf_internal_r+0xda8>
1000b930:	01440074 	movhi	r5,4097
1000b934:	10800404 	addi	r2,r2,16
1000b938:	20c00044 	addi	r3,r4,1
1000b93c:	294cba04 	addi	r5,r5,13032
1000b940:	41400015 	stw	r5,0(r8)
1000b944:	44000115 	stw	r16,4(r8)
1000b948:	d8801c15 	stw	r2,112(sp)
1000b94c:	d8c01b15 	stw	r3,108(sp)
1000b950:	a0fff20e 	bge	r20,r3,1000b91c <__alt_data_end+0xf800b91c>
1000b954:	1000141e 	bne	r2,zero,1000b9a8 <___vfiprintf_internal_r+0xde4>
1000b958:	8c7ffc04 	addi	r17,r17,-16
1000b95c:	01400044 	movi	r5,1
1000b960:	0009883a 	mov	r4,zero
1000b964:	d811883a 	mov	r8,sp
1000b968:	847ff116 	blt	r16,r17,1000b930 <__alt_data_end+0xf800b930>
1000b96c:	d8c02317 	ldw	r3,140(sp)
1000b970:	1445883a 	add	r2,r2,r17
1000b974:	44400115 	stw	r17,4(r8)
1000b978:	40c00015 	stw	r3,0(r8)
1000b97c:	d8801c15 	stw	r2,112(sp)
1000b980:	d9401b15 	stw	r5,108(sp)
1000b984:	00c001c4 	movi	r3,7
1000b988:	1940170e 	bge	r3,r5,1000b9e8 <___vfiprintf_internal_r+0xe24>
1000b98c:	1000101e 	bne	r2,zero,1000b9d0 <___vfiprintf_internal_r+0xe0c>
1000b990:	d8802517 	ldw	r2,148(sp)
1000b994:	14c11616 	blt	r2,r19,1000bdf0 <___vfiprintf_internal_r+0x122c>
1000b998:	d9002417 	ldw	r4,144(sp)
1000b99c:	2089883a 	add	r4,r4,r2
1000b9a0:	d9002415 	stw	r4,144(sp)
1000b9a4:	003e1806 	br	1000b208 <__alt_data_end+0xf800b208>
1000b9a8:	d9801a04 	addi	r6,sp,104
1000b9ac:	b80b883a 	mov	r5,r23
1000b9b0:	a809883a 	mov	r4,r21
1000b9b4:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000b9b8:	103fba1e 	bne	r2,zero,1000b8a4 <__alt_data_end+0xf800b8a4>
1000b9bc:	d9001b17 	ldw	r4,108(sp)
1000b9c0:	d8801c17 	ldw	r2,112(sp)
1000b9c4:	d811883a 	mov	r8,sp
1000b9c8:	21400044 	addi	r5,r4,1
1000b9cc:	003fd606 	br	1000b928 <__alt_data_end+0xf800b928>
1000b9d0:	d9402017 	ldw	r5,128(sp)
1000b9d4:	d9002117 	ldw	r4,132(sp)
1000b9d8:	d9801a04 	addi	r6,sp,104
1000b9dc:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000b9e0:	103fb01e 	bne	r2,zero,1000b8a4 <__alt_data_end+0xf800b8a4>
1000b9e4:	d8801c17 	ldw	r2,112(sp)
1000b9e8:	d8c02517 	ldw	r3,148(sp)
1000b9ec:	1cc0010e 	bge	r3,r19,1000b9f4 <___vfiprintf_internal_r+0xe30>
1000b9f0:	9807883a 	mov	r3,r19
1000b9f4:	d9002417 	ldw	r4,144(sp)
1000b9f8:	20c9883a 	add	r4,r4,r3
1000b9fc:	d9002415 	stw	r4,144(sp)
1000ba00:	103e0126 	beq	r2,zero,1000b208 <__alt_data_end+0xf800b208>
1000ba04:	d9402017 	ldw	r5,128(sp)
1000ba08:	d9002117 	ldw	r4,132(sp)
1000ba0c:	d9801a04 	addi	r6,sp,104
1000ba10:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000ba14:	103dfc26 	beq	r2,zero,1000b208 <__alt_data_end+0xf800b208>
1000ba18:	003fa206 	br	1000b8a4 <__alt_data_end+0xf800b8a4>
1000ba1c:	d9402017 	ldw	r5,128(sp)
1000ba20:	d9002117 	ldw	r4,132(sp)
1000ba24:	d9801a04 	addi	r6,sp,104
1000ba28:	d9c02b15 	stw	r7,172(sp)
1000ba2c:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000ba30:	d9c02b17 	ldw	r7,172(sp)
1000ba34:	103f9b1e 	bne	r2,zero,1000b8a4 <__alt_data_end+0xf800b8a4>
1000ba38:	d9001b17 	ldw	r4,108(sp)
1000ba3c:	d8801c17 	ldw	r2,112(sp)
1000ba40:	d811883a 	mov	r8,sp
1000ba44:	21800044 	addi	r6,r4,1
1000ba48:	003dbf06 	br	1000b148 <__alt_data_end+0xf800b148>
1000ba4c:	1000d81e 	bne	r2,zero,1000bdb0 <___vfiprintf_internal_r+0x11ec>
1000ba50:	d9001d87 	ldb	r4,118(sp)
1000ba54:	20000a26 	beq	r4,zero,1000ba80 <___vfiprintf_internal_r+0xebc>
1000ba58:	00800044 	movi	r2,1
1000ba5c:	d9001d84 	addi	r4,sp,118
1000ba60:	100b883a 	mov	r5,r2
1000ba64:	d9000015 	stw	r4,0(sp)
1000ba68:	d8800115 	stw	r2,4(sp)
1000ba6c:	d811883a 	mov	r8,sp
1000ba70:	2809883a 	mov	r4,r5
1000ba74:	42000204 	addi	r8,r8,8
1000ba78:	29400044 	addi	r5,r5,1
1000ba7c:	003d9506 	br	1000b0d4 <__alt_data_end+0xf800b0d4>
1000ba80:	3800fd26 	beq	r7,zero,1000be78 <___vfiprintf_internal_r+0x12b4>
1000ba84:	00800084 	movi	r2,2
1000ba88:	d9001d04 	addi	r4,sp,116
1000ba8c:	d9000015 	stw	r4,0(sp)
1000ba90:	d8800115 	stw	r2,4(sp)
1000ba94:	01400044 	movi	r5,1
1000ba98:	d811883a 	mov	r8,sp
1000ba9c:	2809883a 	mov	r4,r5
1000baa0:	42000204 	addi	r8,r8,8
1000baa4:	29400044 	addi	r5,r5,1
1000baa8:	003f4606 	br	1000b7c4 <__alt_data_end+0xf800b7c4>
1000baac:	d8802517 	ldw	r2,148(sp)
1000bab0:	14c0010e 	bge	r2,r19,1000bab8 <___vfiprintf_internal_r+0xef4>
1000bab4:	9805883a 	mov	r2,r19
1000bab8:	d9402417 	ldw	r5,144(sp)
1000babc:	288b883a 	add	r5,r5,r2
1000bac0:	d9402415 	stw	r5,144(sp)
1000bac4:	003dd006 	br	1000b208 <__alt_data_end+0xf800b208>
1000bac8:	d8001d85 	stb	zero,118(sp)
1000bacc:	80005d16 	blt	r16,zero,1000bc44 <___vfiprintf_internal_r+0x1080>
1000bad0:	00ffdfc4 	movi	r3,-129
1000bad4:	9d04b03a 	or	r2,r19,r20
1000bad8:	88e2703a 	and	r17,r17,r3
1000badc:	103d3726 	beq	r2,zero,1000afbc <__alt_data_end+0xf800afbc>
1000bae0:	002b883a 	mov	r21,zero
1000bae4:	d9002617 	ldw	r4,152(sp)
1000bae8:	ddc01a04 	addi	r23,sp,104
1000baec:	988003cc 	andi	r2,r19,15
1000baf0:	a006973a 	slli	r3,r20,28
1000baf4:	2085883a 	add	r2,r4,r2
1000baf8:	9826d13a 	srli	r19,r19,4
1000bafc:	10800003 	ldbu	r2,0(r2)
1000bb00:	a028d13a 	srli	r20,r20,4
1000bb04:	bdffffc4 	addi	r23,r23,-1
1000bb08:	1ce6b03a 	or	r19,r3,r19
1000bb0c:	b8800005 	stb	r2,0(r23)
1000bb10:	9d04b03a 	or	r2,r19,r20
1000bb14:	103ff51e 	bne	r2,zero,1000baec <__alt_data_end+0xf800baec>
1000bb18:	d8801e17 	ldw	r2,120(sp)
1000bb1c:	15e9c83a 	sub	r20,r2,r23
1000bb20:	003d2b06 	br	1000afd0 <__alt_data_end+0xf800afd0>
1000bb24:	d9402017 	ldw	r5,128(sp)
1000bb28:	d9002117 	ldw	r4,132(sp)
1000bb2c:	d9801a04 	addi	r6,sp,104
1000bb30:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000bb34:	103f5b1e 	bne	r2,zero,1000b8a4 <__alt_data_end+0xf800b8a4>
1000bb38:	d8801c17 	ldw	r2,112(sp)
1000bb3c:	d811883a 	mov	r8,sp
1000bb40:	003f6706 	br	1000b8e0 <__alt_data_end+0xf800b8e0>
1000bb44:	d9402017 	ldw	r5,128(sp)
1000bb48:	d9002117 	ldw	r4,132(sp)
1000bb4c:	d9801a04 	addi	r6,sp,104
1000bb50:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000bb54:	103f531e 	bne	r2,zero,1000b8a4 <__alt_data_end+0xf800b8a4>
1000bb58:	d811883a 	mov	r8,sp
1000bb5c:	003cd906 	br	1000aec4 <__alt_data_end+0xf800aec4>
1000bb60:	10803fcc 	andi	r2,r2,255
1000bb64:	1080201c 	xori	r2,r2,128
1000bb68:	10bfe004 	addi	r2,r2,-128
1000bb6c:	00c00c04 	movi	r3,48
1000bb70:	10ffe926 	beq	r2,r3,1000bb18 <__alt_data_end+0xf800bb18>
1000bb74:	b8ffffc5 	stb	r3,-1(r23)
1000bb78:	d8c01e17 	ldw	r3,120(sp)
1000bb7c:	b8bfffc4 	addi	r2,r23,-1
1000bb80:	102f883a 	mov	r23,r2
1000bb84:	18a9c83a 	sub	r20,r3,r2
1000bb88:	003d1106 	br	1000afd0 <__alt_data_end+0xf800afd0>
1000bb8c:	d9402017 	ldw	r5,128(sp)
1000bb90:	d9002117 	ldw	r4,132(sp)
1000bb94:	d9801a04 	addi	r6,sp,104
1000bb98:	d8c02a15 	stw	r3,168(sp)
1000bb9c:	d9c02b15 	stw	r7,172(sp)
1000bba0:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000bba4:	d8c02a17 	ldw	r3,168(sp)
1000bba8:	d9c02b17 	ldw	r7,172(sp)
1000bbac:	103f3d1e 	bne	r2,zero,1000b8a4 <__alt_data_end+0xf800b8a4>
1000bbb0:	d9001b17 	ldw	r4,108(sp)
1000bbb4:	d8801c17 	ldw	r2,112(sp)
1000bbb8:	d811883a 	mov	r8,sp
1000bbbc:	21400044 	addi	r5,r4,1
1000bbc0:	003d4406 	br	1000b0d4 <__alt_data_end+0xf800b0d4>
1000bbc4:	d9402017 	ldw	r5,128(sp)
1000bbc8:	d9002117 	ldw	r4,132(sp)
1000bbcc:	d9801a04 	addi	r6,sp,104
1000bbd0:	d8c02a15 	stw	r3,168(sp)
1000bbd4:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000bbd8:	d8c02a17 	ldw	r3,168(sp)
1000bbdc:	103f311e 	bne	r2,zero,1000b8a4 <__alt_data_end+0xf800b8a4>
1000bbe0:	d9001b17 	ldw	r4,108(sp)
1000bbe4:	d8801c17 	ldw	r2,112(sp)
1000bbe8:	d811883a 	mov	r8,sp
1000bbec:	21400044 	addi	r5,r4,1
1000bbf0:	003ef406 	br	1000b7c4 <__alt_data_end+0xf800b7c4>
1000bbf4:	1000bd1e 	bne	r2,zero,1000beec <___vfiprintf_internal_r+0x1328>
1000bbf8:	01400044 	movi	r5,1
1000bbfc:	0009883a 	mov	r4,zero
1000bc00:	d811883a 	mov	r8,sp
1000bc04:	003ef106 	br	1000b7cc <__alt_data_end+0xf800b7cc>
1000bc08:	d9402017 	ldw	r5,128(sp)
1000bc0c:	d9002117 	ldw	r4,132(sp)
1000bc10:	d9801a04 	addi	r6,sp,104
1000bc14:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000bc18:	103f221e 	bne	r2,zero,1000b8a4 <__alt_data_end+0xf800b8a4>
1000bc1c:	d9401b17 	ldw	r5,108(sp)
1000bc20:	d8801c17 	ldw	r2,112(sp)
1000bc24:	d811883a 	mov	r8,sp
1000bc28:	29400044 	addi	r5,r5,1
1000bc2c:	003d6206 	br	1000b1b8 <__alt_data_end+0xf800b1b8>
1000bc30:	01440074 	movhi	r5,4097
1000bc34:	294c5504 	addi	r5,r5,12628
1000bc38:	d9402615 	stw	r5,152(sp)
1000bc3c:	d8c02215 	stw	r3,136(sp)
1000bc40:	1023883a 	mov	r17,r2
1000bc44:	9d04b03a 	or	r2,r19,r20
1000bc48:	103fa51e 	bne	r2,zero,1000bae0 <__alt_data_end+0xf800bae0>
1000bc4c:	002b883a 	mov	r21,zero
1000bc50:	00800084 	movi	r2,2
1000bc54:	003e4a06 	br	1000b580 <__alt_data_end+0xf800b580>
1000bc58:	01440074 	movhi	r5,4097
1000bc5c:	294c5504 	addi	r5,r5,12628
1000bc60:	002b883a 	mov	r21,zero
1000bc64:	d9402615 	stw	r5,152(sp)
1000bc68:	003f9e06 	br	1000bae4 <__alt_data_end+0xf800bae4>
1000bc6c:	d9402217 	ldw	r5,136(sp)
1000bc70:	d8001d85 	stb	zero,118(sp)
1000bc74:	0029883a 	mov	r20,zero
1000bc78:	28800104 	addi	r2,r5,4
1000bc7c:	2cc00017 	ldw	r19,0(r5)
1000bc80:	803e3a16 	blt	r16,zero,1000b56c <__alt_data_end+0xf800b56c>
1000bc84:	00ffdfc4 	movi	r3,-129
1000bc88:	d8802215 	stw	r2,136(sp)
1000bc8c:	88e2703a 	and	r17,r17,r3
1000bc90:	002b883a 	mov	r21,zero
1000bc94:	983e9b26 	beq	r19,zero,1000b704 <__alt_data_end+0xf800b704>
1000bc98:	00800244 	movi	r2,9
1000bc9c:	14fdc936 	bltu	r2,r19,1000b3c4 <__alt_data_end+0xf800b3c4>
1000bca0:	003e9a06 	br	1000b70c <__alt_data_end+0xf800b70c>
1000bca4:	00800c04 	movi	r2,48
1000bca8:	d8c01d45 	stb	r3,117(sp)
1000bcac:	d8801d05 	stb	r2,116(sp)
1000bcb0:	d8001d85 	stb	zero,118(sp)
1000bcb4:	88c00094 	ori	r3,r17,2
1000bcb8:	80009c16 	blt	r16,zero,1000bf2c <___vfiprintf_internal_r+0x1368>
1000bcbc:	00bfdfc4 	movi	r2,-129
1000bcc0:	88a2703a 	and	r17,r17,r2
1000bcc4:	8c400094 	ori	r17,r17,2
1000bcc8:	002b883a 	mov	r21,zero
1000bccc:	003f8506 	br	1000bae4 <__alt_data_end+0xf800bae4>
1000bcd0:	b029883a 	mov	r20,r22
1000bcd4:	003c0b06 	br	1000ad04 <__alt_data_end+0xf800ad04>
1000bcd8:	04e7c83a 	sub	r19,zero,r19
1000bcdc:	05400b44 	movi	r21,45
1000bce0:	9804c03a 	cmpne	r2,r19,zero
1000bce4:	0529c83a 	sub	r20,zero,r20
1000bce8:	dd401d85 	stb	r21,118(sp)
1000bcec:	a0a9c83a 	sub	r20,r20,r2
1000bcf0:	80009716 	blt	r16,zero,1000bf50 <___vfiprintf_internal_r+0x138c>
1000bcf4:	00bfdfc4 	movi	r2,-129
1000bcf8:	88a2703a 	and	r17,r17,r2
1000bcfc:	003db006 	br	1000b3c0 <__alt_data_end+0xf800b3c0>
1000bd00:	b0c00007 	ldb	r3,0(r22)
1000bd04:	003c0c06 	br	1000ad38 <__alt_data_end+0xf800ad38>
1000bd08:	8880100c 	andi	r2,r17,64
1000bd0c:	d8001d85 	stb	zero,118(sp)
1000bd10:	1000461e 	bne	r2,zero,1000be2c <___vfiprintf_internal_r+0x1268>
1000bd14:	d9002217 	ldw	r4,136(sp)
1000bd18:	0029883a 	mov	r20,zero
1000bd1c:	20800104 	addi	r2,r4,4
1000bd20:	24c00017 	ldw	r19,0(r4)
1000bd24:	803df80e 	bge	r16,zero,1000b508 <__alt_data_end+0xf800b508>
1000bd28:	9d06b03a 	or	r3,r19,r20
1000bd2c:	d8802215 	stw	r2,136(sp)
1000bd30:	183d5e1e 	bne	r3,zero,1000b2ac <__alt_data_end+0xf800b2ac>
1000bd34:	002b883a 	mov	r21,zero
1000bd38:	0005883a 	mov	r2,zero
1000bd3c:	003e1006 	br	1000b580 <__alt_data_end+0xf800b580>
1000bd40:	8880040c 	andi	r2,r17,16
1000bd44:	1000321e 	bne	r2,zero,1000be10 <___vfiprintf_internal_r+0x124c>
1000bd48:	8c40100c 	andi	r17,r17,64
1000bd4c:	88008d26 	beq	r17,zero,1000bf84 <___vfiprintf_internal_r+0x13c0>
1000bd50:	d9402217 	ldw	r5,136(sp)
1000bd54:	d8c02417 	ldw	r3,144(sp)
1000bd58:	28800017 	ldw	r2,0(r5)
1000bd5c:	29400104 	addi	r5,r5,4
1000bd60:	d9402215 	stw	r5,136(sp)
1000bd64:	10c0000d 	sth	r3,0(r2)
1000bd68:	003bca06 	br	1000ac94 <__alt_data_end+0xf800ac94>
1000bd6c:	8880100c 	andi	r2,r17,64
1000bd70:	10003a26 	beq	r2,zero,1000be5c <___vfiprintf_internal_r+0x1298>
1000bd74:	d8802217 	ldw	r2,136(sp)
1000bd78:	14c0000f 	ldh	r19,0(r2)
1000bd7c:	10800104 	addi	r2,r2,4
1000bd80:	d8802215 	stw	r2,136(sp)
1000bd84:	9829d7fa 	srai	r20,r19,31
1000bd88:	a005883a 	mov	r2,r20
1000bd8c:	003d8506 	br	1000b3a4 <__alt_data_end+0xf800b3a4>
1000bd90:	8880100c 	andi	r2,r17,64
1000bd94:	10002b26 	beq	r2,zero,1000be44 <___vfiprintf_internal_r+0x1280>
1000bd98:	d8802217 	ldw	r2,136(sp)
1000bd9c:	0029883a 	mov	r20,zero
1000bda0:	14c0000b 	ldhu	r19,0(r2)
1000bda4:	10800104 	addi	r2,r2,4
1000bda8:	d8802215 	stw	r2,136(sp)
1000bdac:	003d5d06 	br	1000b324 <__alt_data_end+0xf800b324>
1000bdb0:	d9402017 	ldw	r5,128(sp)
1000bdb4:	d9002117 	ldw	r4,132(sp)
1000bdb8:	d9801a04 	addi	r6,sp,104
1000bdbc:	d8c02a15 	stw	r3,168(sp)
1000bdc0:	d9c02b15 	stw	r7,172(sp)
1000bdc4:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000bdc8:	d8c02a17 	ldw	r3,168(sp)
1000bdcc:	d9c02b17 	ldw	r7,172(sp)
1000bdd0:	103eb41e 	bne	r2,zero,1000b8a4 <__alt_data_end+0xf800b8a4>
1000bdd4:	d9001b17 	ldw	r4,108(sp)
1000bdd8:	d8801c17 	ldw	r2,112(sp)
1000bddc:	d811883a 	mov	r8,sp
1000bde0:	21400044 	addi	r5,r4,1
1000bde4:	003e6706 	br	1000b784 <__alt_data_end+0xf800b784>
1000bde8:	00bfffc4 	movi	r2,-1
1000bdec:	003c4a06 	br	1000af18 <__alt_data_end+0xf800af18>
1000bdf0:	9805883a 	mov	r2,r19
1000bdf4:	003ee806 	br	1000b998 <__alt_data_end+0xf800b998>
1000bdf8:	d8c02217 	ldw	r3,136(sp)
1000bdfc:	0029883a 	mov	r20,zero
1000be00:	18800104 	addi	r2,r3,4
1000be04:	1cc0000b 	ldhu	r19,0(r3)
1000be08:	803f9e0e 	bge	r16,zero,1000bc84 <__alt_data_end+0xf800bc84>
1000be0c:	003dd706 	br	1000b56c <__alt_data_end+0xf800b56c>
1000be10:	d8c02217 	ldw	r3,136(sp)
1000be14:	d9002417 	ldw	r4,144(sp)
1000be18:	18800017 	ldw	r2,0(r3)
1000be1c:	18c00104 	addi	r3,r3,4
1000be20:	d8c02215 	stw	r3,136(sp)
1000be24:	11000015 	stw	r4,0(r2)
1000be28:	003b9a06 	br	1000ac94 <__alt_data_end+0xf800ac94>
1000be2c:	d8c02217 	ldw	r3,136(sp)
1000be30:	0029883a 	mov	r20,zero
1000be34:	18800104 	addi	r2,r3,4
1000be38:	1cc0000b 	ldhu	r19,0(r3)
1000be3c:	803db20e 	bge	r16,zero,1000b508 <__alt_data_end+0xf800b508>
1000be40:	003fb906 	br	1000bd28 <__alt_data_end+0xf800bd28>
1000be44:	d9002217 	ldw	r4,136(sp)
1000be48:	0029883a 	mov	r20,zero
1000be4c:	24c00017 	ldw	r19,0(r4)
1000be50:	21000104 	addi	r4,r4,4
1000be54:	d9002215 	stw	r4,136(sp)
1000be58:	003d3206 	br	1000b324 <__alt_data_end+0xf800b324>
1000be5c:	d8c02217 	ldw	r3,136(sp)
1000be60:	1cc00017 	ldw	r19,0(r3)
1000be64:	18c00104 	addi	r3,r3,4
1000be68:	d8c02215 	stw	r3,136(sp)
1000be6c:	9829d7fa 	srai	r20,r19,31
1000be70:	a005883a 	mov	r2,r20
1000be74:	003d4b06 	br	1000b3a4 <__alt_data_end+0xf800b3a4>
1000be78:	0009883a 	mov	r4,zero
1000be7c:	01400044 	movi	r5,1
1000be80:	d811883a 	mov	r8,sp
1000be84:	003e4f06 	br	1000b7c4 <__alt_data_end+0xf800b7c4>
1000be88:	d8c02215 	stw	r3,136(sp)
1000be8c:	002b883a 	mov	r21,zero
1000be90:	003db806 	br	1000b574 <__alt_data_end+0xf800b574>
1000be94:	d811883a 	mov	r8,sp
1000be98:	003e9606 	br	1000b8f4 <__alt_data_end+0xf800b8f4>
1000be9c:	01040074 	movhi	r4,4097
1000bea0:	210cb604 	addi	r4,r4,13016
1000bea4:	d9002315 	stw	r4,140(sp)
1000bea8:	003e6306 	br	1000b838 <__alt_data_end+0xf800b838>
1000beac:	b0c00043 	ldbu	r3,1(r22)
1000beb0:	8c400814 	ori	r17,r17,32
1000beb4:	b5800044 	addi	r22,r22,1
1000beb8:	18c03fcc 	andi	r3,r3,255
1000bebc:	18c0201c 	xori	r3,r3,128
1000bec0:	18ffe004 	addi	r3,r3,-128
1000bec4:	003b9c06 	br	1000ad38 <__alt_data_end+0xf800ad38>
1000bec8:	b809883a 	mov	r4,r23
1000becc:	da002a15 	stw	r8,168(sp)
1000bed0:	00033340 	call	10003334 <strlen>
1000bed4:	1029883a 	mov	r20,r2
1000bed8:	dd401d83 	ldbu	r21,118(sp)
1000bedc:	df002215 	stw	fp,136(sp)
1000bee0:	0021883a 	mov	r16,zero
1000bee4:	da002a17 	ldw	r8,168(sp)
1000bee8:	003c3906 	br	1000afd0 <__alt_data_end+0xf800afd0>
1000beec:	d9402017 	ldw	r5,128(sp)
1000bef0:	d9002117 	ldw	r4,132(sp)
1000bef4:	d9801a04 	addi	r6,sp,104
1000bef8:	000aab00 	call	1000aab0 <__sprint_r.part.0>
1000befc:	103e691e 	bne	r2,zero,1000b8a4 <__alt_data_end+0xf800b8a4>
1000bf00:	d9001b17 	ldw	r4,108(sp)
1000bf04:	d8801c17 	ldw	r2,112(sp)
1000bf08:	d811883a 	mov	r8,sp
1000bf0c:	21400044 	addi	r5,r4,1
1000bf10:	003e2e06 	br	1000b7cc <__alt_data_end+0xf800b7cc>
1000bf14:	01040074 	movhi	r4,4097
1000bf18:	210cba04 	addi	r4,r4,13032
1000bf1c:	d9002315 	stw	r4,140(sp)
1000bf20:	d9001b17 	ldw	r4,108(sp)
1000bf24:	21000044 	addi	r4,r4,1
1000bf28:	003c5e06 	br	1000b0a4 <__alt_data_end+0xf800b0a4>
1000bf2c:	002b883a 	mov	r21,zero
1000bf30:	00800084 	movi	r2,2
1000bf34:	10803fcc 	andi	r2,r2,255
1000bf38:	01000044 	movi	r4,1
1000bf3c:	11002b26 	beq	r2,r4,1000bfec <___vfiprintf_internal_r+0x1428>
1000bf40:	01000084 	movi	r4,2
1000bf44:	11002b1e 	bne	r2,r4,1000bff4 <___vfiprintf_internal_r+0x1430>
1000bf48:	1823883a 	mov	r17,r3
1000bf4c:	003ee506 	br	1000bae4 <__alt_data_end+0xf800bae4>
1000bf50:	8807883a 	mov	r3,r17
1000bf54:	00800044 	movi	r2,1
1000bf58:	003ff606 	br	1000bf34 <__alt_data_end+0xf800bf34>
1000bf5c:	00800184 	movi	r2,6
1000bf60:	1400012e 	bgeu	r2,r16,1000bf68 <___vfiprintf_internal_r+0x13a4>
1000bf64:	1021883a 	mov	r16,r2
1000bf68:	8029883a 	mov	r20,r16
1000bf6c:	8027883a 	mov	r19,r16
1000bf70:	80002216 	blt	r16,zero,1000bffc <___vfiprintf_internal_r+0x1438>
1000bf74:	05c40074 	movhi	r23,4097
1000bf78:	df002215 	stw	fp,136(sp)
1000bf7c:	bdcc5a04 	addi	r23,r23,12648
1000bf80:	003cfb06 	br	1000b370 <__alt_data_end+0xf800b370>
1000bf84:	d9002217 	ldw	r4,136(sp)
1000bf88:	d9402417 	ldw	r5,144(sp)
1000bf8c:	20800017 	ldw	r2,0(r4)
1000bf90:	21000104 	addi	r4,r4,4
1000bf94:	d9002215 	stw	r4,136(sp)
1000bf98:	11400015 	stw	r5,0(r2)
1000bf9c:	003b3d06 	br	1000ac94 <__alt_data_end+0xf800ac94>
1000bfa0:	01440074 	movhi	r5,4097
1000bfa4:	294cba04 	addi	r5,r5,13032
1000bfa8:	d9402315 	stw	r5,140(sp)
1000bfac:	d9401b17 	ldw	r5,108(sp)
1000bfb0:	29400044 	addi	r5,r5,1
1000bfb4:	003e6d06 	br	1000b96c <__alt_data_end+0xf800b96c>
1000bfb8:	8029883a 	mov	r20,r16
1000bfbc:	dd401d83 	ldbu	r21,118(sp)
1000bfc0:	df002215 	stw	fp,136(sp)
1000bfc4:	0021883a 	mov	r16,zero
1000bfc8:	003c0106 	br	1000afd0 <__alt_data_end+0xf800afd0>
1000bfcc:	00c40074 	movhi	r3,4097
1000bfd0:	18ccb604 	addi	r3,r3,13016
1000bfd4:	d8c02315 	stw	r3,140(sp)
1000bfd8:	280d883a 	mov	r6,r5
1000bfdc:	003c6906 	br	1000b184 <__alt_data_end+0xf800b184>
1000bfe0:	802d883a 	mov	r22,r16
1000bfe4:	0021883a 	mov	r16,zero
1000bfe8:	003b5406 	br	1000ad3c <__alt_data_end+0xf800ad3c>
1000bfec:	1823883a 	mov	r17,r3
1000bff0:	003cf306 	br	1000b3c0 <__alt_data_end+0xf800b3c0>
1000bff4:	1823883a 	mov	r17,r3
1000bff8:	003cad06 	br	1000b2b0 <__alt_data_end+0xf800b2b0>
1000bffc:	0027883a 	mov	r19,zero
1000c000:	003fdc06 	br	1000bf74 <__alt_data_end+0xf800bf74>
1000c004:	d9402217 	ldw	r5,136(sp)
1000c008:	8005883a 	mov	r2,r16
1000c00c:	b0c00043 	ldbu	r3,1(r22)
1000c010:	2c000017 	ldw	r16,0(r5)
1000c014:	29000104 	addi	r4,r5,4
1000c018:	d9002215 	stw	r4,136(sp)
1000c01c:	102d883a 	mov	r22,r2
1000c020:	803fa50e 	bge	r16,zero,1000beb8 <__alt_data_end+0xf800beb8>
1000c024:	18c03fcc 	andi	r3,r3,255
1000c028:	18c0201c 	xori	r3,r3,128
1000c02c:	043fffc4 	movi	r16,-1
1000c030:	18ffe004 	addi	r3,r3,-128
1000c034:	003b4006 	br	1000ad38 <__alt_data_end+0xf800ad38>
1000c038:	d9402303 	ldbu	r5,140(sp)
1000c03c:	d9401d85 	stb	r5,118(sp)
1000c040:	003cae06 	br	1000b2fc <__alt_data_end+0xf800b2fc>
1000c044:	d8c02303 	ldbu	r3,140(sp)
1000c048:	d8c01d85 	stb	r3,118(sp)
1000c04c:	003d1406 	br	1000b4a0 <__alt_data_end+0xf800b4a0>
1000c050:	d8c02303 	ldbu	r3,140(sp)
1000c054:	d8c01d85 	stb	r3,118(sp)
1000c058:	003cca06 	br	1000b384 <__alt_data_end+0xf800b384>
1000c05c:	8880004c 	andi	r2,r17,1
1000c060:	002b883a 	mov	r21,zero
1000c064:	10000526 	beq	r2,zero,1000c07c <___vfiprintf_internal_r+0x14b8>
1000c068:	00800c04 	movi	r2,48
1000c06c:	d88019c5 	stb	r2,103(sp)
1000c070:	dd002817 	ldw	r20,160(sp)
1000c074:	ddc019c4 	addi	r23,sp,103
1000c078:	003bd506 	br	1000afd0 <__alt_data_end+0xf800afd0>
1000c07c:	0029883a 	mov	r20,zero
1000c080:	ddc01a04 	addi	r23,sp,104
1000c084:	003bd206 	br	1000afd0 <__alt_data_end+0xf800afd0>
1000c088:	d9002303 	ldbu	r4,140(sp)
1000c08c:	d9001d85 	stb	r4,118(sp)
1000c090:	003da606 	br	1000b72c <__alt_data_end+0xf800b72c>
1000c094:	d8c02303 	ldbu	r3,140(sp)
1000c098:	d8c01d85 	stb	r3,118(sp)
1000c09c:	003c7606 	br	1000b278 <__alt_data_end+0xf800b278>
1000c0a0:	d8c02303 	ldbu	r3,140(sp)
1000c0a4:	d8c01d85 	stb	r3,118(sp)
1000c0a8:	003c6506 	br	1000b240 <__alt_data_end+0xf800b240>
1000c0ac:	d9002303 	ldbu	r4,140(sp)
1000c0b0:	d9001d85 	stb	r4,118(sp)
1000c0b4:	003d3d06 	br	1000b5ac <__alt_data_end+0xf800b5ac>
1000c0b8:	d8c02303 	ldbu	r3,140(sp)
1000c0bc:	d8c01d85 	stb	r3,118(sp)
1000c0c0:	003d1d06 	br	1000b538 <__alt_data_end+0xf800b538>
1000c0c4:	d8c02303 	ldbu	r3,140(sp)
1000c0c8:	d8c01d85 	stb	r3,118(sp)
1000c0cc:	003d0306 	br	1000b4dc <__alt_data_end+0xf800b4dc>

1000c0d0 <__vfiprintf_internal>:
1000c0d0:	00840074 	movhi	r2,4097
1000c0d4:	1093b704 	addi	r2,r2,20188
1000c0d8:	300f883a 	mov	r7,r6
1000c0dc:	280d883a 	mov	r6,r5
1000c0e0:	200b883a 	mov	r5,r4
1000c0e4:	11000017 	ldw	r4,0(r2)
1000c0e8:	000abc41 	jmpi	1000abc4 <___vfiprintf_internal_r>

1000c0ec <__sbprintf>:
1000c0ec:	2880030b 	ldhu	r2,12(r5)
1000c0f0:	2ac01917 	ldw	r11,100(r5)
1000c0f4:	2a80038b 	ldhu	r10,14(r5)
1000c0f8:	2a400717 	ldw	r9,28(r5)
1000c0fc:	2a000917 	ldw	r8,36(r5)
1000c100:	defee204 	addi	sp,sp,-1144
1000c104:	00c10004 	movi	r3,1024
1000c108:	dc011a15 	stw	r16,1128(sp)
1000c10c:	10bfff4c 	andi	r2,r2,65533
1000c110:	2821883a 	mov	r16,r5
1000c114:	d8cb883a 	add	r5,sp,r3
1000c118:	dc811c15 	stw	r18,1136(sp)
1000c11c:	dc411b15 	stw	r17,1132(sp)
1000c120:	dfc11d15 	stw	ra,1140(sp)
1000c124:	2025883a 	mov	r18,r4
1000c128:	d881030d 	sth	r2,1036(sp)
1000c12c:	dac11915 	stw	r11,1124(sp)
1000c130:	da81038d 	sth	r10,1038(sp)
1000c134:	da410715 	stw	r9,1052(sp)
1000c138:	da010915 	stw	r8,1060(sp)
1000c13c:	dec10015 	stw	sp,1024(sp)
1000c140:	dec10415 	stw	sp,1040(sp)
1000c144:	d8c10215 	stw	r3,1032(sp)
1000c148:	d8c10515 	stw	r3,1044(sp)
1000c14c:	d8010615 	stw	zero,1048(sp)
1000c150:	000abc40 	call	1000abc4 <___vfiprintf_internal_r>
1000c154:	1023883a 	mov	r17,r2
1000c158:	10000416 	blt	r2,zero,1000c16c <__sbprintf+0x80>
1000c15c:	d9410004 	addi	r5,sp,1024
1000c160:	9009883a 	mov	r4,r18
1000c164:	00073a00 	call	100073a0 <_fflush_r>
1000c168:	10000d1e 	bne	r2,zero,1000c1a0 <__sbprintf+0xb4>
1000c16c:	d881030b 	ldhu	r2,1036(sp)
1000c170:	1080100c 	andi	r2,r2,64
1000c174:	10000326 	beq	r2,zero,1000c184 <__sbprintf+0x98>
1000c178:	8080030b 	ldhu	r2,12(r16)
1000c17c:	10801014 	ori	r2,r2,64
1000c180:	8080030d 	sth	r2,12(r16)
1000c184:	8805883a 	mov	r2,r17
1000c188:	dfc11d17 	ldw	ra,1140(sp)
1000c18c:	dc811c17 	ldw	r18,1136(sp)
1000c190:	dc411b17 	ldw	r17,1132(sp)
1000c194:	dc011a17 	ldw	r16,1128(sp)
1000c198:	dec11e04 	addi	sp,sp,1144
1000c19c:	f800283a 	ret
1000c1a0:	047fffc4 	movi	r17,-1
1000c1a4:	003ff106 	br	1000c16c <__alt_data_end+0xf800c16c>

1000c1a8 <_write_r>:
1000c1a8:	defffd04 	addi	sp,sp,-12
1000c1ac:	2805883a 	mov	r2,r5
1000c1b0:	dc000015 	stw	r16,0(sp)
1000c1b4:	04040074 	movhi	r16,4097
1000c1b8:	dc400115 	stw	r17,4(sp)
1000c1bc:	300b883a 	mov	r5,r6
1000c1c0:	841a8804 	addi	r16,r16,27168
1000c1c4:	2023883a 	mov	r17,r4
1000c1c8:	380d883a 	mov	r6,r7
1000c1cc:	1009883a 	mov	r4,r2
1000c1d0:	dfc00215 	stw	ra,8(sp)
1000c1d4:	80000015 	stw	zero,0(r16)
1000c1d8:	00109f80 	call	100109f8 <write>
1000c1dc:	00ffffc4 	movi	r3,-1
1000c1e0:	10c00526 	beq	r2,r3,1000c1f8 <_write_r+0x50>
1000c1e4:	dfc00217 	ldw	ra,8(sp)
1000c1e8:	dc400117 	ldw	r17,4(sp)
1000c1ec:	dc000017 	ldw	r16,0(sp)
1000c1f0:	dec00304 	addi	sp,sp,12
1000c1f4:	f800283a 	ret
1000c1f8:	80c00017 	ldw	r3,0(r16)
1000c1fc:	183ff926 	beq	r3,zero,1000c1e4 <__alt_data_end+0xf800c1e4>
1000c200:	88c00015 	stw	r3,0(r17)
1000c204:	003ff706 	br	1000c1e4 <__alt_data_end+0xf800c1e4>

1000c208 <_close_r>:
1000c208:	defffd04 	addi	sp,sp,-12
1000c20c:	dc000015 	stw	r16,0(sp)
1000c210:	04040074 	movhi	r16,4097
1000c214:	dc400115 	stw	r17,4(sp)
1000c218:	841a8804 	addi	r16,r16,27168
1000c21c:	2023883a 	mov	r17,r4
1000c220:	2809883a 	mov	r4,r5
1000c224:	dfc00215 	stw	ra,8(sp)
1000c228:	80000015 	stw	zero,0(r16)
1000c22c:	00101700 	call	10010170 <close>
1000c230:	00ffffc4 	movi	r3,-1
1000c234:	10c00526 	beq	r2,r3,1000c24c <_close_r+0x44>
1000c238:	dfc00217 	ldw	ra,8(sp)
1000c23c:	dc400117 	ldw	r17,4(sp)
1000c240:	dc000017 	ldw	r16,0(sp)
1000c244:	dec00304 	addi	sp,sp,12
1000c248:	f800283a 	ret
1000c24c:	80c00017 	ldw	r3,0(r16)
1000c250:	183ff926 	beq	r3,zero,1000c238 <__alt_data_end+0xf800c238>
1000c254:	88c00015 	stw	r3,0(r17)
1000c258:	003ff706 	br	1000c238 <__alt_data_end+0xf800c238>

1000c25c <_calloc_r>:
1000c25c:	defffe04 	addi	sp,sp,-8
1000c260:	2805883a 	mov	r2,r5
1000c264:	dc000015 	stw	r16,0(sp)
1000c268:	300b883a 	mov	r5,r6
1000c26c:	2021883a 	mov	r16,r4
1000c270:	1009883a 	mov	r4,r2
1000c274:	dfc00115 	stw	ra,4(sp)
1000c278:	000d8680 	call	1000d868 <__mulsi3>
1000c27c:	100b883a 	mov	r5,r2
1000c280:	8009883a 	mov	r4,r16
1000c284:	00084f80 	call	100084f8 <_malloc_r>
1000c288:	10002926 	beq	r2,zero,1000c330 <_calloc_r+0xd4>
1000c28c:	11bfff17 	ldw	r6,-4(r2)
1000c290:	1021883a 	mov	r16,r2
1000c294:	00bfff04 	movi	r2,-4
1000c298:	308c703a 	and	r6,r6,r2
1000c29c:	00c00904 	movi	r3,36
1000c2a0:	308d883a 	add	r6,r6,r2
1000c2a4:	19801636 	bltu	r3,r6,1000c300 <_calloc_r+0xa4>
1000c2a8:	008004c4 	movi	r2,19
1000c2ac:	11800b2e 	bgeu	r2,r6,1000c2dc <_calloc_r+0x80>
1000c2b0:	80000015 	stw	zero,0(r16)
1000c2b4:	80000115 	stw	zero,4(r16)
1000c2b8:	008006c4 	movi	r2,27
1000c2bc:	11801a2e 	bgeu	r2,r6,1000c328 <_calloc_r+0xcc>
1000c2c0:	80000215 	stw	zero,8(r16)
1000c2c4:	80000315 	stw	zero,12(r16)
1000c2c8:	30c0151e 	bne	r6,r3,1000c320 <_calloc_r+0xc4>
1000c2cc:	80000415 	stw	zero,16(r16)
1000c2d0:	80800604 	addi	r2,r16,24
1000c2d4:	80000515 	stw	zero,20(r16)
1000c2d8:	00000106 	br	1000c2e0 <_calloc_r+0x84>
1000c2dc:	8005883a 	mov	r2,r16
1000c2e0:	10000015 	stw	zero,0(r2)
1000c2e4:	10000115 	stw	zero,4(r2)
1000c2e8:	10000215 	stw	zero,8(r2)
1000c2ec:	8005883a 	mov	r2,r16
1000c2f0:	dfc00117 	ldw	ra,4(sp)
1000c2f4:	dc000017 	ldw	r16,0(sp)
1000c2f8:	dec00204 	addi	sp,sp,8
1000c2fc:	f800283a 	ret
1000c300:	000b883a 	mov	r5,zero
1000c304:	8009883a 	mov	r4,r16
1000c308:	000908c0 	call	1000908c <memset>
1000c30c:	8005883a 	mov	r2,r16
1000c310:	dfc00117 	ldw	ra,4(sp)
1000c314:	dc000017 	ldw	r16,0(sp)
1000c318:	dec00204 	addi	sp,sp,8
1000c31c:	f800283a 	ret
1000c320:	80800404 	addi	r2,r16,16
1000c324:	003fee06 	br	1000c2e0 <__alt_data_end+0xf800c2e0>
1000c328:	80800204 	addi	r2,r16,8
1000c32c:	003fec06 	br	1000c2e0 <__alt_data_end+0xf800c2e0>
1000c330:	0005883a 	mov	r2,zero
1000c334:	003fee06 	br	1000c2f0 <__alt_data_end+0xf800c2f0>

1000c338 <_fclose_r>:
1000c338:	28003926 	beq	r5,zero,1000c420 <_fclose_r+0xe8>
1000c33c:	defffc04 	addi	sp,sp,-16
1000c340:	dc400115 	stw	r17,4(sp)
1000c344:	dc000015 	stw	r16,0(sp)
1000c348:	dfc00315 	stw	ra,12(sp)
1000c34c:	dc800215 	stw	r18,8(sp)
1000c350:	2023883a 	mov	r17,r4
1000c354:	2821883a 	mov	r16,r5
1000c358:	20000226 	beq	r4,zero,1000c364 <_fclose_r+0x2c>
1000c35c:	20800e17 	ldw	r2,56(r4)
1000c360:	10002726 	beq	r2,zero,1000c400 <_fclose_r+0xc8>
1000c364:	8080030f 	ldh	r2,12(r16)
1000c368:	1000071e 	bne	r2,zero,1000c388 <_fclose_r+0x50>
1000c36c:	0005883a 	mov	r2,zero
1000c370:	dfc00317 	ldw	ra,12(sp)
1000c374:	dc800217 	ldw	r18,8(sp)
1000c378:	dc400117 	ldw	r17,4(sp)
1000c37c:	dc000017 	ldw	r16,0(sp)
1000c380:	dec00404 	addi	sp,sp,16
1000c384:	f800283a 	ret
1000c388:	800b883a 	mov	r5,r16
1000c38c:	8809883a 	mov	r4,r17
1000c390:	00071840 	call	10007184 <__sflush_r>
1000c394:	1025883a 	mov	r18,r2
1000c398:	80800b17 	ldw	r2,44(r16)
1000c39c:	10000426 	beq	r2,zero,1000c3b0 <_fclose_r+0x78>
1000c3a0:	81400717 	ldw	r5,28(r16)
1000c3a4:	8809883a 	mov	r4,r17
1000c3a8:	103ee83a 	callr	r2
1000c3ac:	10001616 	blt	r2,zero,1000c408 <_fclose_r+0xd0>
1000c3b0:	8080030b 	ldhu	r2,12(r16)
1000c3b4:	1080200c 	andi	r2,r2,128
1000c3b8:	1000151e 	bne	r2,zero,1000c410 <_fclose_r+0xd8>
1000c3bc:	81400c17 	ldw	r5,48(r16)
1000c3c0:	28000526 	beq	r5,zero,1000c3d8 <_fclose_r+0xa0>
1000c3c4:	80801004 	addi	r2,r16,64
1000c3c8:	28800226 	beq	r5,r2,1000c3d4 <_fclose_r+0x9c>
1000c3cc:	8809883a 	mov	r4,r17
1000c3d0:	00079000 	call	10007900 <_free_r>
1000c3d4:	80000c15 	stw	zero,48(r16)
1000c3d8:	81401117 	ldw	r5,68(r16)
1000c3dc:	28000326 	beq	r5,zero,1000c3ec <_fclose_r+0xb4>
1000c3e0:	8809883a 	mov	r4,r17
1000c3e4:	00079000 	call	10007900 <_free_r>
1000c3e8:	80001115 	stw	zero,68(r16)
1000c3ec:	000779c0 	call	1000779c <__sfp_lock_acquire>
1000c3f0:	8000030d 	sth	zero,12(r16)
1000c3f4:	00077a00 	call	100077a0 <__sfp_lock_release>
1000c3f8:	9005883a 	mov	r2,r18
1000c3fc:	003fdc06 	br	1000c370 <__alt_data_end+0xf800c370>
1000c400:	000778c0 	call	1000778c <__sinit>
1000c404:	003fd706 	br	1000c364 <__alt_data_end+0xf800c364>
1000c408:	04bfffc4 	movi	r18,-1
1000c40c:	003fe806 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000c410:	81400417 	ldw	r5,16(r16)
1000c414:	8809883a 	mov	r4,r17
1000c418:	00079000 	call	10007900 <_free_r>
1000c41c:	003fe706 	br	1000c3bc <__alt_data_end+0xf800c3bc>
1000c420:	0005883a 	mov	r2,zero
1000c424:	f800283a 	ret

1000c428 <fclose>:
1000c428:	00840074 	movhi	r2,4097
1000c42c:	1093b704 	addi	r2,r2,20188
1000c430:	200b883a 	mov	r5,r4
1000c434:	11000017 	ldw	r4,0(r2)
1000c438:	000c3381 	jmpi	1000c338 <_fclose_r>

1000c43c <__fputwc>:
1000c43c:	defff804 	addi	sp,sp,-32
1000c440:	dcc00415 	stw	r19,16(sp)
1000c444:	dc800315 	stw	r18,12(sp)
1000c448:	dc000115 	stw	r16,4(sp)
1000c44c:	dfc00715 	stw	ra,28(sp)
1000c450:	dd400615 	stw	r21,24(sp)
1000c454:	dd000515 	stw	r20,20(sp)
1000c458:	dc400215 	stw	r17,8(sp)
1000c45c:	2027883a 	mov	r19,r4
1000c460:	2825883a 	mov	r18,r5
1000c464:	3021883a 	mov	r16,r6
1000c468:	00082e80 	call	100082e8 <__locale_mb_cur_max>
1000c46c:	00c00044 	movi	r3,1
1000c470:	10c03e26 	beq	r2,r3,1000c56c <__fputwc+0x130>
1000c474:	81c01704 	addi	r7,r16,92
1000c478:	900d883a 	mov	r6,r18
1000c47c:	d80b883a 	mov	r5,sp
1000c480:	9809883a 	mov	r4,r19
1000c484:	000c90c0 	call	1000c90c <_wcrtomb_r>
1000c488:	1029883a 	mov	r20,r2
1000c48c:	00bfffc4 	movi	r2,-1
1000c490:	a0802026 	beq	r20,r2,1000c514 <__fputwc+0xd8>
1000c494:	d9400003 	ldbu	r5,0(sp)
1000c498:	a0001c26 	beq	r20,zero,1000c50c <__fputwc+0xd0>
1000c49c:	0023883a 	mov	r17,zero
1000c4a0:	05400284 	movi	r21,10
1000c4a4:	00000906 	br	1000c4cc <__fputwc+0x90>
1000c4a8:	80800017 	ldw	r2,0(r16)
1000c4ac:	11400005 	stb	r5,0(r2)
1000c4b0:	80c00017 	ldw	r3,0(r16)
1000c4b4:	18c00044 	addi	r3,r3,1
1000c4b8:	80c00015 	stw	r3,0(r16)
1000c4bc:	8c400044 	addi	r17,r17,1
1000c4c0:	dc45883a 	add	r2,sp,r17
1000c4c4:	8d00112e 	bgeu	r17,r20,1000c50c <__fputwc+0xd0>
1000c4c8:	11400003 	ldbu	r5,0(r2)
1000c4cc:	80c00217 	ldw	r3,8(r16)
1000c4d0:	18ffffc4 	addi	r3,r3,-1
1000c4d4:	80c00215 	stw	r3,8(r16)
1000c4d8:	183ff30e 	bge	r3,zero,1000c4a8 <__alt_data_end+0xf800c4a8>
1000c4dc:	80800617 	ldw	r2,24(r16)
1000c4e0:	18801916 	blt	r3,r2,1000c548 <__fputwc+0x10c>
1000c4e4:	80800017 	ldw	r2,0(r16)
1000c4e8:	11400005 	stb	r5,0(r2)
1000c4ec:	80800017 	ldw	r2,0(r16)
1000c4f0:	10c00003 	ldbu	r3,0(r2)
1000c4f4:	10800044 	addi	r2,r2,1
1000c4f8:	1d402326 	beq	r3,r21,1000c588 <__fputwc+0x14c>
1000c4fc:	80800015 	stw	r2,0(r16)
1000c500:	8c400044 	addi	r17,r17,1
1000c504:	dc45883a 	add	r2,sp,r17
1000c508:	8d3fef36 	bltu	r17,r20,1000c4c8 <__alt_data_end+0xf800c4c8>
1000c50c:	9005883a 	mov	r2,r18
1000c510:	00000406 	br	1000c524 <__fputwc+0xe8>
1000c514:	80c0030b 	ldhu	r3,12(r16)
1000c518:	a005883a 	mov	r2,r20
1000c51c:	18c01014 	ori	r3,r3,64
1000c520:	80c0030d 	sth	r3,12(r16)
1000c524:	dfc00717 	ldw	ra,28(sp)
1000c528:	dd400617 	ldw	r21,24(sp)
1000c52c:	dd000517 	ldw	r20,20(sp)
1000c530:	dcc00417 	ldw	r19,16(sp)
1000c534:	dc800317 	ldw	r18,12(sp)
1000c538:	dc400217 	ldw	r17,8(sp)
1000c53c:	dc000117 	ldw	r16,4(sp)
1000c540:	dec00804 	addi	sp,sp,32
1000c544:	f800283a 	ret
1000c548:	800d883a 	mov	r6,r16
1000c54c:	29403fcc 	andi	r5,r5,255
1000c550:	9809883a 	mov	r4,r19
1000c554:	000c7b40 	call	1000c7b4 <__swbuf_r>
1000c558:	10bfffe0 	cmpeqi	r2,r2,-1
1000c55c:	10803fcc 	andi	r2,r2,255
1000c560:	103fd626 	beq	r2,zero,1000c4bc <__alt_data_end+0xf800c4bc>
1000c564:	00bfffc4 	movi	r2,-1
1000c568:	003fee06 	br	1000c524 <__alt_data_end+0xf800c524>
1000c56c:	90ffffc4 	addi	r3,r18,-1
1000c570:	01003f84 	movi	r4,254
1000c574:	20ffbf36 	bltu	r4,r3,1000c474 <__alt_data_end+0xf800c474>
1000c578:	900b883a 	mov	r5,r18
1000c57c:	dc800005 	stb	r18,0(sp)
1000c580:	1029883a 	mov	r20,r2
1000c584:	003fc506 	br	1000c49c <__alt_data_end+0xf800c49c>
1000c588:	800d883a 	mov	r6,r16
1000c58c:	a80b883a 	mov	r5,r21
1000c590:	9809883a 	mov	r4,r19
1000c594:	000c7b40 	call	1000c7b4 <__swbuf_r>
1000c598:	10bfffe0 	cmpeqi	r2,r2,-1
1000c59c:	003fef06 	br	1000c55c <__alt_data_end+0xf800c55c>

1000c5a0 <_fputwc_r>:
1000c5a0:	3080030b 	ldhu	r2,12(r6)
1000c5a4:	10c8000c 	andi	r3,r2,8192
1000c5a8:	1800051e 	bne	r3,zero,1000c5c0 <_fputwc_r+0x20>
1000c5ac:	30c01917 	ldw	r3,100(r6)
1000c5b0:	10880014 	ori	r2,r2,8192
1000c5b4:	3080030d 	sth	r2,12(r6)
1000c5b8:	18880014 	ori	r2,r3,8192
1000c5bc:	30801915 	stw	r2,100(r6)
1000c5c0:	000c43c1 	jmpi	1000c43c <__fputwc>

1000c5c4 <fputwc>:
1000c5c4:	00840074 	movhi	r2,4097
1000c5c8:	defffc04 	addi	sp,sp,-16
1000c5cc:	1093b704 	addi	r2,r2,20188
1000c5d0:	dc000115 	stw	r16,4(sp)
1000c5d4:	14000017 	ldw	r16,0(r2)
1000c5d8:	dc400215 	stw	r17,8(sp)
1000c5dc:	dfc00315 	stw	ra,12(sp)
1000c5e0:	2023883a 	mov	r17,r4
1000c5e4:	80000226 	beq	r16,zero,1000c5f0 <fputwc+0x2c>
1000c5e8:	80800e17 	ldw	r2,56(r16)
1000c5ec:	10001026 	beq	r2,zero,1000c630 <fputwc+0x6c>
1000c5f0:	2880030b 	ldhu	r2,12(r5)
1000c5f4:	10c8000c 	andi	r3,r2,8192
1000c5f8:	1800051e 	bne	r3,zero,1000c610 <fputwc+0x4c>
1000c5fc:	28c01917 	ldw	r3,100(r5)
1000c600:	10880014 	ori	r2,r2,8192
1000c604:	2880030d 	sth	r2,12(r5)
1000c608:	18880014 	ori	r2,r3,8192
1000c60c:	28801915 	stw	r2,100(r5)
1000c610:	280d883a 	mov	r6,r5
1000c614:	8009883a 	mov	r4,r16
1000c618:	880b883a 	mov	r5,r17
1000c61c:	dfc00317 	ldw	ra,12(sp)
1000c620:	dc400217 	ldw	r17,8(sp)
1000c624:	dc000117 	ldw	r16,4(sp)
1000c628:	dec00404 	addi	sp,sp,16
1000c62c:	000c43c1 	jmpi	1000c43c <__fputwc>
1000c630:	8009883a 	mov	r4,r16
1000c634:	d9400015 	stw	r5,0(sp)
1000c638:	000778c0 	call	1000778c <__sinit>
1000c63c:	d9400017 	ldw	r5,0(sp)
1000c640:	003feb06 	br	1000c5f0 <__alt_data_end+0xf800c5f0>

1000c644 <_fstat_r>:
1000c644:	defffd04 	addi	sp,sp,-12
1000c648:	2805883a 	mov	r2,r5
1000c64c:	dc000015 	stw	r16,0(sp)
1000c650:	04040074 	movhi	r16,4097
1000c654:	dc400115 	stw	r17,4(sp)
1000c658:	841a8804 	addi	r16,r16,27168
1000c65c:	2023883a 	mov	r17,r4
1000c660:	300b883a 	mov	r5,r6
1000c664:	1009883a 	mov	r4,r2
1000c668:	dfc00215 	stw	ra,8(sp)
1000c66c:	80000015 	stw	zero,0(r16)
1000c670:	00102b00 	call	100102b0 <fstat>
1000c674:	00ffffc4 	movi	r3,-1
1000c678:	10c00526 	beq	r2,r3,1000c690 <_fstat_r+0x4c>
1000c67c:	dfc00217 	ldw	ra,8(sp)
1000c680:	dc400117 	ldw	r17,4(sp)
1000c684:	dc000017 	ldw	r16,0(sp)
1000c688:	dec00304 	addi	sp,sp,12
1000c68c:	f800283a 	ret
1000c690:	80c00017 	ldw	r3,0(r16)
1000c694:	183ff926 	beq	r3,zero,1000c67c <__alt_data_end+0xf800c67c>
1000c698:	88c00015 	stw	r3,0(r17)
1000c69c:	003ff706 	br	1000c67c <__alt_data_end+0xf800c67c>

1000c6a0 <_isatty_r>:
1000c6a0:	defffd04 	addi	sp,sp,-12
1000c6a4:	dc000015 	stw	r16,0(sp)
1000c6a8:	04040074 	movhi	r16,4097
1000c6ac:	dc400115 	stw	r17,4(sp)
1000c6b0:	841a8804 	addi	r16,r16,27168
1000c6b4:	2023883a 	mov	r17,r4
1000c6b8:	2809883a 	mov	r4,r5
1000c6bc:	dfc00215 	stw	ra,8(sp)
1000c6c0:	80000015 	stw	zero,0(r16)
1000c6c4:	00103a40 	call	100103a4 <isatty>
1000c6c8:	00ffffc4 	movi	r3,-1
1000c6cc:	10c00526 	beq	r2,r3,1000c6e4 <_isatty_r+0x44>
1000c6d0:	dfc00217 	ldw	ra,8(sp)
1000c6d4:	dc400117 	ldw	r17,4(sp)
1000c6d8:	dc000017 	ldw	r16,0(sp)
1000c6dc:	dec00304 	addi	sp,sp,12
1000c6e0:	f800283a 	ret
1000c6e4:	80c00017 	ldw	r3,0(r16)
1000c6e8:	183ff926 	beq	r3,zero,1000c6d0 <__alt_data_end+0xf800c6d0>
1000c6ec:	88c00015 	stw	r3,0(r17)
1000c6f0:	003ff706 	br	1000c6d0 <__alt_data_end+0xf800c6d0>

1000c6f4 <_lseek_r>:
1000c6f4:	defffd04 	addi	sp,sp,-12
1000c6f8:	2805883a 	mov	r2,r5
1000c6fc:	dc000015 	stw	r16,0(sp)
1000c700:	04040074 	movhi	r16,4097
1000c704:	dc400115 	stw	r17,4(sp)
1000c708:	300b883a 	mov	r5,r6
1000c70c:	841a8804 	addi	r16,r16,27168
1000c710:	2023883a 	mov	r17,r4
1000c714:	380d883a 	mov	r6,r7
1000c718:	1009883a 	mov	r4,r2
1000c71c:	dfc00215 	stw	ra,8(sp)
1000c720:	80000015 	stw	zero,0(r16)
1000c724:	00105780 	call	10010578 <lseek>
1000c728:	00ffffc4 	movi	r3,-1
1000c72c:	10c00526 	beq	r2,r3,1000c744 <_lseek_r+0x50>
1000c730:	dfc00217 	ldw	ra,8(sp)
1000c734:	dc400117 	ldw	r17,4(sp)
1000c738:	dc000017 	ldw	r16,0(sp)
1000c73c:	dec00304 	addi	sp,sp,12
1000c740:	f800283a 	ret
1000c744:	80c00017 	ldw	r3,0(r16)
1000c748:	183ff926 	beq	r3,zero,1000c730 <__alt_data_end+0xf800c730>
1000c74c:	88c00015 	stw	r3,0(r17)
1000c750:	003ff706 	br	1000c730 <__alt_data_end+0xf800c730>

1000c754 <_read_r>:
1000c754:	defffd04 	addi	sp,sp,-12
1000c758:	2805883a 	mov	r2,r5
1000c75c:	dc000015 	stw	r16,0(sp)
1000c760:	04040074 	movhi	r16,4097
1000c764:	dc400115 	stw	r17,4(sp)
1000c768:	300b883a 	mov	r5,r6
1000c76c:	841a8804 	addi	r16,r16,27168
1000c770:	2023883a 	mov	r17,r4
1000c774:	380d883a 	mov	r6,r7
1000c778:	1009883a 	mov	r4,r2
1000c77c:	dfc00215 	stw	ra,8(sp)
1000c780:	80000015 	stw	zero,0(r16)
1000c784:	00107540 	call	10010754 <read>
1000c788:	00ffffc4 	movi	r3,-1
1000c78c:	10c00526 	beq	r2,r3,1000c7a4 <_read_r+0x50>
1000c790:	dfc00217 	ldw	ra,8(sp)
1000c794:	dc400117 	ldw	r17,4(sp)
1000c798:	dc000017 	ldw	r16,0(sp)
1000c79c:	dec00304 	addi	sp,sp,12
1000c7a0:	f800283a 	ret
1000c7a4:	80c00017 	ldw	r3,0(r16)
1000c7a8:	183ff926 	beq	r3,zero,1000c790 <__alt_data_end+0xf800c790>
1000c7ac:	88c00015 	stw	r3,0(r17)
1000c7b0:	003ff706 	br	1000c790 <__alt_data_end+0xf800c790>

1000c7b4 <__swbuf_r>:
1000c7b4:	defffb04 	addi	sp,sp,-20
1000c7b8:	dcc00315 	stw	r19,12(sp)
1000c7bc:	dc800215 	stw	r18,8(sp)
1000c7c0:	dc000015 	stw	r16,0(sp)
1000c7c4:	dfc00415 	stw	ra,16(sp)
1000c7c8:	dc400115 	stw	r17,4(sp)
1000c7cc:	2025883a 	mov	r18,r4
1000c7d0:	2827883a 	mov	r19,r5
1000c7d4:	3021883a 	mov	r16,r6
1000c7d8:	20000226 	beq	r4,zero,1000c7e4 <__swbuf_r+0x30>
1000c7dc:	20800e17 	ldw	r2,56(r4)
1000c7e0:	10004226 	beq	r2,zero,1000c8ec <__swbuf_r+0x138>
1000c7e4:	80800617 	ldw	r2,24(r16)
1000c7e8:	8100030b 	ldhu	r4,12(r16)
1000c7ec:	80800215 	stw	r2,8(r16)
1000c7f0:	2080020c 	andi	r2,r4,8
1000c7f4:	10003626 	beq	r2,zero,1000c8d0 <__swbuf_r+0x11c>
1000c7f8:	80c00417 	ldw	r3,16(r16)
1000c7fc:	18003426 	beq	r3,zero,1000c8d0 <__swbuf_r+0x11c>
1000c800:	2088000c 	andi	r2,r4,8192
1000c804:	9c403fcc 	andi	r17,r19,255
1000c808:	10001a26 	beq	r2,zero,1000c874 <__swbuf_r+0xc0>
1000c80c:	80800017 	ldw	r2,0(r16)
1000c810:	81000517 	ldw	r4,20(r16)
1000c814:	10c7c83a 	sub	r3,r2,r3
1000c818:	1900200e 	bge	r3,r4,1000c89c <__swbuf_r+0xe8>
1000c81c:	18c00044 	addi	r3,r3,1
1000c820:	81000217 	ldw	r4,8(r16)
1000c824:	11400044 	addi	r5,r2,1
1000c828:	81400015 	stw	r5,0(r16)
1000c82c:	213fffc4 	addi	r4,r4,-1
1000c830:	81000215 	stw	r4,8(r16)
1000c834:	14c00005 	stb	r19,0(r2)
1000c838:	80800517 	ldw	r2,20(r16)
1000c83c:	10c01e26 	beq	r2,r3,1000c8b8 <__swbuf_r+0x104>
1000c840:	8080030b 	ldhu	r2,12(r16)
1000c844:	1080004c 	andi	r2,r2,1
1000c848:	10000226 	beq	r2,zero,1000c854 <__swbuf_r+0xa0>
1000c84c:	00800284 	movi	r2,10
1000c850:	88801926 	beq	r17,r2,1000c8b8 <__swbuf_r+0x104>
1000c854:	8805883a 	mov	r2,r17
1000c858:	dfc00417 	ldw	ra,16(sp)
1000c85c:	dcc00317 	ldw	r19,12(sp)
1000c860:	dc800217 	ldw	r18,8(sp)
1000c864:	dc400117 	ldw	r17,4(sp)
1000c868:	dc000017 	ldw	r16,0(sp)
1000c86c:	dec00504 	addi	sp,sp,20
1000c870:	f800283a 	ret
1000c874:	81401917 	ldw	r5,100(r16)
1000c878:	00b7ffc4 	movi	r2,-8193
1000c87c:	21080014 	ori	r4,r4,8192
1000c880:	2884703a 	and	r2,r5,r2
1000c884:	80801915 	stw	r2,100(r16)
1000c888:	80800017 	ldw	r2,0(r16)
1000c88c:	8100030d 	sth	r4,12(r16)
1000c890:	81000517 	ldw	r4,20(r16)
1000c894:	10c7c83a 	sub	r3,r2,r3
1000c898:	193fe016 	blt	r3,r4,1000c81c <__alt_data_end+0xf800c81c>
1000c89c:	800b883a 	mov	r5,r16
1000c8a0:	9009883a 	mov	r4,r18
1000c8a4:	00073a00 	call	100073a0 <_fflush_r>
1000c8a8:	1000071e 	bne	r2,zero,1000c8c8 <__swbuf_r+0x114>
1000c8ac:	80800017 	ldw	r2,0(r16)
1000c8b0:	00c00044 	movi	r3,1
1000c8b4:	003fda06 	br	1000c820 <__alt_data_end+0xf800c820>
1000c8b8:	800b883a 	mov	r5,r16
1000c8bc:	9009883a 	mov	r4,r18
1000c8c0:	00073a00 	call	100073a0 <_fflush_r>
1000c8c4:	103fe326 	beq	r2,zero,1000c854 <__alt_data_end+0xf800c854>
1000c8c8:	00bfffc4 	movi	r2,-1
1000c8cc:	003fe206 	br	1000c858 <__alt_data_end+0xf800c858>
1000c8d0:	800b883a 	mov	r5,r16
1000c8d4:	9009883a 	mov	r4,r18
1000c8d8:	00057800 	call	10005780 <__swsetup_r>
1000c8dc:	103ffa1e 	bne	r2,zero,1000c8c8 <__alt_data_end+0xf800c8c8>
1000c8e0:	8100030b 	ldhu	r4,12(r16)
1000c8e4:	80c00417 	ldw	r3,16(r16)
1000c8e8:	003fc506 	br	1000c800 <__alt_data_end+0xf800c800>
1000c8ec:	000778c0 	call	1000778c <__sinit>
1000c8f0:	003fbc06 	br	1000c7e4 <__alt_data_end+0xf800c7e4>

1000c8f4 <__swbuf>:
1000c8f4:	00840074 	movhi	r2,4097
1000c8f8:	1093b704 	addi	r2,r2,20188
1000c8fc:	280d883a 	mov	r6,r5
1000c900:	200b883a 	mov	r5,r4
1000c904:	11000017 	ldw	r4,0(r2)
1000c908:	000c7b41 	jmpi	1000c7b4 <__swbuf_r>

1000c90c <_wcrtomb_r>:
1000c90c:	defff604 	addi	sp,sp,-40
1000c910:	00840074 	movhi	r2,4097
1000c914:	dc800815 	stw	r18,32(sp)
1000c918:	dc400715 	stw	r17,28(sp)
1000c91c:	dc000615 	stw	r16,24(sp)
1000c920:	1093bb04 	addi	r2,r2,20204
1000c924:	dfc00915 	stw	ra,36(sp)
1000c928:	2021883a 	mov	r16,r4
1000c92c:	3823883a 	mov	r17,r7
1000c930:	14800017 	ldw	r18,0(r2)
1000c934:	28001426 	beq	r5,zero,1000c988 <_wcrtomb_r+0x7c>
1000c938:	d9400415 	stw	r5,16(sp)
1000c93c:	d9800515 	stw	r6,20(sp)
1000c940:	00082dc0 	call	100082dc <__locale_charset>
1000c944:	d9800517 	ldw	r6,20(sp)
1000c948:	d9400417 	ldw	r5,16(sp)
1000c94c:	100f883a 	mov	r7,r2
1000c950:	dc400015 	stw	r17,0(sp)
1000c954:	8009883a 	mov	r4,r16
1000c958:	903ee83a 	callr	r18
1000c95c:	00ffffc4 	movi	r3,-1
1000c960:	10c0031e 	bne	r2,r3,1000c970 <_wcrtomb_r+0x64>
1000c964:	88000015 	stw	zero,0(r17)
1000c968:	00c02284 	movi	r3,138
1000c96c:	80c00015 	stw	r3,0(r16)
1000c970:	dfc00917 	ldw	ra,36(sp)
1000c974:	dc800817 	ldw	r18,32(sp)
1000c978:	dc400717 	ldw	r17,28(sp)
1000c97c:	dc000617 	ldw	r16,24(sp)
1000c980:	dec00a04 	addi	sp,sp,40
1000c984:	f800283a 	ret
1000c988:	00082dc0 	call	100082dc <__locale_charset>
1000c98c:	100f883a 	mov	r7,r2
1000c990:	dc400015 	stw	r17,0(sp)
1000c994:	000d883a 	mov	r6,zero
1000c998:	d9400104 	addi	r5,sp,4
1000c99c:	8009883a 	mov	r4,r16
1000c9a0:	903ee83a 	callr	r18
1000c9a4:	003fed06 	br	1000c95c <__alt_data_end+0xf800c95c>

1000c9a8 <wcrtomb>:
1000c9a8:	defff604 	addi	sp,sp,-40
1000c9ac:	00840074 	movhi	r2,4097
1000c9b0:	dc800615 	stw	r18,24(sp)
1000c9b4:	dc400515 	stw	r17,20(sp)
1000c9b8:	1093b704 	addi	r2,r2,20188
1000c9bc:	dfc00915 	stw	ra,36(sp)
1000c9c0:	dd000815 	stw	r20,32(sp)
1000c9c4:	dcc00715 	stw	r19,28(sp)
1000c9c8:	dc000415 	stw	r16,16(sp)
1000c9cc:	3025883a 	mov	r18,r6
1000c9d0:	14400017 	ldw	r17,0(r2)
1000c9d4:	20001926 	beq	r4,zero,1000ca3c <wcrtomb+0x94>
1000c9d8:	00840074 	movhi	r2,4097
1000c9dc:	1093bb04 	addi	r2,r2,20204
1000c9e0:	15000017 	ldw	r20,0(r2)
1000c9e4:	2021883a 	mov	r16,r4
1000c9e8:	2827883a 	mov	r19,r5
1000c9ec:	00082dc0 	call	100082dc <__locale_charset>
1000c9f0:	100f883a 	mov	r7,r2
1000c9f4:	dc800015 	stw	r18,0(sp)
1000c9f8:	980d883a 	mov	r6,r19
1000c9fc:	800b883a 	mov	r5,r16
1000ca00:	8809883a 	mov	r4,r17
1000ca04:	a03ee83a 	callr	r20
1000ca08:	00ffffc4 	movi	r3,-1
1000ca0c:	10c0031e 	bne	r2,r3,1000ca1c <wcrtomb+0x74>
1000ca10:	90000015 	stw	zero,0(r18)
1000ca14:	00c02284 	movi	r3,138
1000ca18:	88c00015 	stw	r3,0(r17)
1000ca1c:	dfc00917 	ldw	ra,36(sp)
1000ca20:	dd000817 	ldw	r20,32(sp)
1000ca24:	dcc00717 	ldw	r19,28(sp)
1000ca28:	dc800617 	ldw	r18,24(sp)
1000ca2c:	dc400517 	ldw	r17,20(sp)
1000ca30:	dc000417 	ldw	r16,16(sp)
1000ca34:	dec00a04 	addi	sp,sp,40
1000ca38:	f800283a 	ret
1000ca3c:	00840074 	movhi	r2,4097
1000ca40:	1093bb04 	addi	r2,r2,20204
1000ca44:	14000017 	ldw	r16,0(r2)
1000ca48:	00082dc0 	call	100082dc <__locale_charset>
1000ca4c:	100f883a 	mov	r7,r2
1000ca50:	dc800015 	stw	r18,0(sp)
1000ca54:	000d883a 	mov	r6,zero
1000ca58:	d9400104 	addi	r5,sp,4
1000ca5c:	8809883a 	mov	r4,r17
1000ca60:	803ee83a 	callr	r16
1000ca64:	003fe806 	br	1000ca08 <__alt_data_end+0xf800ca08>

1000ca68 <__ascii_wctomb>:
1000ca68:	28000526 	beq	r5,zero,1000ca80 <__ascii_wctomb+0x18>
1000ca6c:	00803fc4 	movi	r2,255
1000ca70:	11800536 	bltu	r2,r6,1000ca88 <__ascii_wctomb+0x20>
1000ca74:	29800005 	stb	r6,0(r5)
1000ca78:	00800044 	movi	r2,1
1000ca7c:	f800283a 	ret
1000ca80:	0005883a 	mov	r2,zero
1000ca84:	f800283a 	ret
1000ca88:	00802284 	movi	r2,138
1000ca8c:	20800015 	stw	r2,0(r4)
1000ca90:	00bfffc4 	movi	r2,-1
1000ca94:	f800283a 	ret

1000ca98 <_wctomb_r>:
1000ca98:	00840074 	movhi	r2,4097
1000ca9c:	defff904 	addi	sp,sp,-28
1000caa0:	1093bb04 	addi	r2,r2,20204
1000caa4:	dfc00615 	stw	ra,24(sp)
1000caa8:	dc400515 	stw	r17,20(sp)
1000caac:	dc000415 	stw	r16,16(sp)
1000cab0:	3823883a 	mov	r17,r7
1000cab4:	14000017 	ldw	r16,0(r2)
1000cab8:	d9000115 	stw	r4,4(sp)
1000cabc:	d9400215 	stw	r5,8(sp)
1000cac0:	d9800315 	stw	r6,12(sp)
1000cac4:	00082dc0 	call	100082dc <__locale_charset>
1000cac8:	d9800317 	ldw	r6,12(sp)
1000cacc:	d9400217 	ldw	r5,8(sp)
1000cad0:	d9000117 	ldw	r4,4(sp)
1000cad4:	100f883a 	mov	r7,r2
1000cad8:	dc400015 	stw	r17,0(sp)
1000cadc:	803ee83a 	callr	r16
1000cae0:	dfc00617 	ldw	ra,24(sp)
1000cae4:	dc400517 	ldw	r17,20(sp)
1000cae8:	dc000417 	ldw	r16,16(sp)
1000caec:	dec00704 	addi	sp,sp,28
1000caf0:	f800283a 	ret

1000caf4 <__udivdi3>:
1000caf4:	defff404 	addi	sp,sp,-48
1000caf8:	dcc00515 	stw	r19,20(sp)
1000cafc:	dc000215 	stw	r16,8(sp)
1000cb00:	dfc00b15 	stw	ra,44(sp)
1000cb04:	df000a15 	stw	fp,40(sp)
1000cb08:	ddc00915 	stw	r23,36(sp)
1000cb0c:	dd800815 	stw	r22,32(sp)
1000cb10:	dd400715 	stw	r21,28(sp)
1000cb14:	dd000615 	stw	r20,24(sp)
1000cb18:	dc800415 	stw	r18,16(sp)
1000cb1c:	dc400315 	stw	r17,12(sp)
1000cb20:	2027883a 	mov	r19,r4
1000cb24:	2821883a 	mov	r16,r5
1000cb28:	3800461e 	bne	r7,zero,1000cc44 <__udivdi3+0x150>
1000cb2c:	3023883a 	mov	r17,r6
1000cb30:	2025883a 	mov	r18,r4
1000cb34:	2980572e 	bgeu	r5,r6,1000cc94 <__udivdi3+0x1a0>
1000cb38:	00bfffd4 	movui	r2,65535
1000cb3c:	282d883a 	mov	r22,r5
1000cb40:	1180b236 	bltu	r2,r6,1000ce0c <__udivdi3+0x318>
1000cb44:	00803fc4 	movi	r2,255
1000cb48:	1185803a 	cmpltu	r2,r2,r6
1000cb4c:	100490fa 	slli	r2,r2,3
1000cb50:	3086d83a 	srl	r3,r6,r2
1000cb54:	01040074 	movhi	r4,4097
1000cb58:	210cbe04 	addi	r4,r4,13048
1000cb5c:	20c7883a 	add	r3,r4,r3
1000cb60:	18c00003 	ldbu	r3,0(r3)
1000cb64:	1885883a 	add	r2,r3,r2
1000cb68:	00c00804 	movi	r3,32
1000cb6c:	1887c83a 	sub	r3,r3,r2
1000cb70:	18000526 	beq	r3,zero,1000cb88 <__udivdi3+0x94>
1000cb74:	80e0983a 	sll	r16,r16,r3
1000cb78:	9884d83a 	srl	r2,r19,r2
1000cb7c:	30e2983a 	sll	r17,r6,r3
1000cb80:	98e4983a 	sll	r18,r19,r3
1000cb84:	142cb03a 	or	r22,r2,r16
1000cb88:	882ad43a 	srli	r21,r17,16
1000cb8c:	b009883a 	mov	r4,r22
1000cb90:	8d3fffcc 	andi	r20,r17,65535
1000cb94:	a80b883a 	mov	r5,r21
1000cb98:	000d8100 	call	1000d810 <__umodsi3>
1000cb9c:	b009883a 	mov	r4,r22
1000cba0:	a80b883a 	mov	r5,r21
1000cba4:	1027883a 	mov	r19,r2
1000cba8:	000d7ac0 	call	1000d7ac <__udivsi3>
1000cbac:	100b883a 	mov	r5,r2
1000cbb0:	a009883a 	mov	r4,r20
1000cbb4:	102d883a 	mov	r22,r2
1000cbb8:	000d8680 	call	1000d868 <__mulsi3>
1000cbbc:	9826943a 	slli	r19,r19,16
1000cbc0:	9006d43a 	srli	r3,r18,16
1000cbc4:	1cc6b03a 	or	r3,r3,r19
1000cbc8:	1880052e 	bgeu	r3,r2,1000cbe0 <__udivdi3+0xec>
1000cbcc:	1c47883a 	add	r3,r3,r17
1000cbd0:	b13fffc4 	addi	r4,r22,-1
1000cbd4:	1c400136 	bltu	r3,r17,1000cbdc <__udivdi3+0xe8>
1000cbd8:	18814236 	bltu	r3,r2,1000d0e4 <__udivdi3+0x5f0>
1000cbdc:	202d883a 	mov	r22,r4
1000cbe0:	18a1c83a 	sub	r16,r3,r2
1000cbe4:	8009883a 	mov	r4,r16
1000cbe8:	a80b883a 	mov	r5,r21
1000cbec:	000d8100 	call	1000d810 <__umodsi3>
1000cbf0:	1027883a 	mov	r19,r2
1000cbf4:	8009883a 	mov	r4,r16
1000cbf8:	a80b883a 	mov	r5,r21
1000cbfc:	9826943a 	slli	r19,r19,16
1000cc00:	000d7ac0 	call	1000d7ac <__udivsi3>
1000cc04:	100b883a 	mov	r5,r2
1000cc08:	a009883a 	mov	r4,r20
1000cc0c:	94bfffcc 	andi	r18,r18,65535
1000cc10:	1021883a 	mov	r16,r2
1000cc14:	94e4b03a 	or	r18,r18,r19
1000cc18:	000d8680 	call	1000d868 <__mulsi3>
1000cc1c:	9080052e 	bgeu	r18,r2,1000cc34 <__udivdi3+0x140>
1000cc20:	8ca5883a 	add	r18,r17,r18
1000cc24:	80ffffc4 	addi	r3,r16,-1
1000cc28:	94410c36 	bltu	r18,r17,1000d05c <__udivdi3+0x568>
1000cc2c:	90810b2e 	bgeu	r18,r2,1000d05c <__udivdi3+0x568>
1000cc30:	843fff84 	addi	r16,r16,-2
1000cc34:	b004943a 	slli	r2,r22,16
1000cc38:	0007883a 	mov	r3,zero
1000cc3c:	1404b03a 	or	r2,r2,r16
1000cc40:	00005e06 	br	1000cdbc <__udivdi3+0x2c8>
1000cc44:	29c05b36 	bltu	r5,r7,1000cdb4 <__udivdi3+0x2c0>
1000cc48:	00bfffd4 	movui	r2,65535
1000cc4c:	11c0672e 	bgeu	r2,r7,1000cdec <__udivdi3+0x2f8>
1000cc50:	00804034 	movhi	r2,256
1000cc54:	10bfffc4 	addi	r2,r2,-1
1000cc58:	11c10a36 	bltu	r2,r7,1000d084 <__udivdi3+0x590>
1000cc5c:	00800404 	movi	r2,16
1000cc60:	3886d83a 	srl	r3,r7,r2
1000cc64:	01040074 	movhi	r4,4097
1000cc68:	210cbe04 	addi	r4,r4,13048
1000cc6c:	20c7883a 	add	r3,r4,r3
1000cc70:	18c00003 	ldbu	r3,0(r3)
1000cc74:	05c00804 	movi	r23,32
1000cc78:	1885883a 	add	r2,r3,r2
1000cc7c:	b8afc83a 	sub	r23,r23,r2
1000cc80:	b800671e 	bne	r23,zero,1000ce20 <__udivdi3+0x32c>
1000cc84:	3c010536 	bltu	r7,r16,1000d09c <__udivdi3+0x5a8>
1000cc88:	9985403a 	cmpgeu	r2,r19,r6
1000cc8c:	0007883a 	mov	r3,zero
1000cc90:	00004a06 	br	1000cdbc <__udivdi3+0x2c8>
1000cc94:	3000041e 	bne	r6,zero,1000cca8 <__udivdi3+0x1b4>
1000cc98:	000b883a 	mov	r5,zero
1000cc9c:	01000044 	movi	r4,1
1000cca0:	000d7ac0 	call	1000d7ac <__udivsi3>
1000cca4:	1023883a 	mov	r17,r2
1000cca8:	00bfffd4 	movui	r2,65535
1000ccac:	1440532e 	bgeu	r2,r17,1000cdfc <__udivdi3+0x308>
1000ccb0:	00804034 	movhi	r2,256
1000ccb4:	10bfffc4 	addi	r2,r2,-1
1000ccb8:	1440f436 	bltu	r2,r17,1000d08c <__udivdi3+0x598>
1000ccbc:	00800404 	movi	r2,16
1000ccc0:	8886d83a 	srl	r3,r17,r2
1000ccc4:	01040074 	movhi	r4,4097
1000ccc8:	210cbe04 	addi	r4,r4,13048
1000cccc:	20c7883a 	add	r3,r4,r3
1000ccd0:	18c00003 	ldbu	r3,0(r3)
1000ccd4:	1885883a 	add	r2,r3,r2
1000ccd8:	00c00804 	movi	r3,32
1000ccdc:	1887c83a 	sub	r3,r3,r2
1000cce0:	1800a51e 	bne	r3,zero,1000cf78 <__udivdi3+0x484>
1000cce4:	882ad43a 	srli	r21,r17,16
1000cce8:	8461c83a 	sub	r16,r16,r17
1000ccec:	8d3fffcc 	andi	r20,r17,65535
1000ccf0:	00c00044 	movi	r3,1
1000ccf4:	a80b883a 	mov	r5,r21
1000ccf8:	8009883a 	mov	r4,r16
1000ccfc:	d8c00115 	stw	r3,4(sp)
1000cd00:	000d8100 	call	1000d810 <__umodsi3>
1000cd04:	a80b883a 	mov	r5,r21
1000cd08:	8009883a 	mov	r4,r16
1000cd0c:	1027883a 	mov	r19,r2
1000cd10:	000d7ac0 	call	1000d7ac <__udivsi3>
1000cd14:	a00b883a 	mov	r5,r20
1000cd18:	1009883a 	mov	r4,r2
1000cd1c:	102d883a 	mov	r22,r2
1000cd20:	000d8680 	call	1000d868 <__mulsi3>
1000cd24:	9826943a 	slli	r19,r19,16
1000cd28:	900ed43a 	srli	r7,r18,16
1000cd2c:	d8c00117 	ldw	r3,4(sp)
1000cd30:	3cceb03a 	or	r7,r7,r19
1000cd34:	3880052e 	bgeu	r7,r2,1000cd4c <__udivdi3+0x258>
1000cd38:	3c4f883a 	add	r7,r7,r17
1000cd3c:	b13fffc4 	addi	r4,r22,-1
1000cd40:	3c400136 	bltu	r7,r17,1000cd48 <__udivdi3+0x254>
1000cd44:	3880e436 	bltu	r7,r2,1000d0d8 <__udivdi3+0x5e4>
1000cd48:	202d883a 	mov	r22,r4
1000cd4c:	38a1c83a 	sub	r16,r7,r2
1000cd50:	8009883a 	mov	r4,r16
1000cd54:	a80b883a 	mov	r5,r21
1000cd58:	d8c00115 	stw	r3,4(sp)
1000cd5c:	000d8100 	call	1000d810 <__umodsi3>
1000cd60:	1027883a 	mov	r19,r2
1000cd64:	8009883a 	mov	r4,r16
1000cd68:	a80b883a 	mov	r5,r21
1000cd6c:	9826943a 	slli	r19,r19,16
1000cd70:	000d7ac0 	call	1000d7ac <__udivsi3>
1000cd74:	a00b883a 	mov	r5,r20
1000cd78:	1009883a 	mov	r4,r2
1000cd7c:	94bfffcc 	andi	r18,r18,65535
1000cd80:	1021883a 	mov	r16,r2
1000cd84:	94e4b03a 	or	r18,r18,r19
1000cd88:	000d8680 	call	1000d868 <__mulsi3>
1000cd8c:	d8c00117 	ldw	r3,4(sp)
1000cd90:	9080052e 	bgeu	r18,r2,1000cda8 <__udivdi3+0x2b4>
1000cd94:	8ca5883a 	add	r18,r17,r18
1000cd98:	813fffc4 	addi	r4,r16,-1
1000cd9c:	9440ad36 	bltu	r18,r17,1000d054 <__udivdi3+0x560>
1000cda0:	9080ac2e 	bgeu	r18,r2,1000d054 <__udivdi3+0x560>
1000cda4:	843fff84 	addi	r16,r16,-2
1000cda8:	b004943a 	slli	r2,r22,16
1000cdac:	1404b03a 	or	r2,r2,r16
1000cdb0:	00000206 	br	1000cdbc <__udivdi3+0x2c8>
1000cdb4:	0007883a 	mov	r3,zero
1000cdb8:	0005883a 	mov	r2,zero
1000cdbc:	dfc00b17 	ldw	ra,44(sp)
1000cdc0:	df000a17 	ldw	fp,40(sp)
1000cdc4:	ddc00917 	ldw	r23,36(sp)
1000cdc8:	dd800817 	ldw	r22,32(sp)
1000cdcc:	dd400717 	ldw	r21,28(sp)
1000cdd0:	dd000617 	ldw	r20,24(sp)
1000cdd4:	dcc00517 	ldw	r19,20(sp)
1000cdd8:	dc800417 	ldw	r18,16(sp)
1000cddc:	dc400317 	ldw	r17,12(sp)
1000cde0:	dc000217 	ldw	r16,8(sp)
1000cde4:	dec00c04 	addi	sp,sp,48
1000cde8:	f800283a 	ret
1000cdec:	00803fc4 	movi	r2,255
1000cdf0:	11c5803a 	cmpltu	r2,r2,r7
1000cdf4:	100490fa 	slli	r2,r2,3
1000cdf8:	003f9906 	br	1000cc60 <__alt_data_end+0xf800cc60>
1000cdfc:	00803fc4 	movi	r2,255
1000ce00:	1445803a 	cmpltu	r2,r2,r17
1000ce04:	100490fa 	slli	r2,r2,3
1000ce08:	003fad06 	br	1000ccc0 <__alt_data_end+0xf800ccc0>
1000ce0c:	00804034 	movhi	r2,256
1000ce10:	10bfffc4 	addi	r2,r2,-1
1000ce14:	11809f36 	bltu	r2,r6,1000d094 <__udivdi3+0x5a0>
1000ce18:	00800404 	movi	r2,16
1000ce1c:	003f4c06 	br	1000cb50 <__alt_data_end+0xf800cb50>
1000ce20:	3dce983a 	sll	r7,r7,r23
1000ce24:	30b8d83a 	srl	fp,r6,r2
1000ce28:	80a2d83a 	srl	r17,r16,r2
1000ce2c:	35cc983a 	sll	r6,r6,r23
1000ce30:	3f38b03a 	or	fp,r7,fp
1000ce34:	e024d43a 	srli	r18,fp,16
1000ce38:	9884d83a 	srl	r2,r19,r2
1000ce3c:	85e0983a 	sll	r16,r16,r23
1000ce40:	8809883a 	mov	r4,r17
1000ce44:	900b883a 	mov	r5,r18
1000ce48:	d9800015 	stw	r6,0(sp)
1000ce4c:	1420b03a 	or	r16,r2,r16
1000ce50:	000d8100 	call	1000d810 <__umodsi3>
1000ce54:	900b883a 	mov	r5,r18
1000ce58:	8809883a 	mov	r4,r17
1000ce5c:	1029883a 	mov	r20,r2
1000ce60:	e5bfffcc 	andi	r22,fp,65535
1000ce64:	000d7ac0 	call	1000d7ac <__udivsi3>
1000ce68:	100b883a 	mov	r5,r2
1000ce6c:	b009883a 	mov	r4,r22
1000ce70:	102b883a 	mov	r21,r2
1000ce74:	000d8680 	call	1000d868 <__mulsi3>
1000ce78:	a028943a 	slli	r20,r20,16
1000ce7c:	8006d43a 	srli	r3,r16,16
1000ce80:	1d06b03a 	or	r3,r3,r20
1000ce84:	1880042e 	bgeu	r3,r2,1000ce98 <__udivdi3+0x3a4>
1000ce88:	1f07883a 	add	r3,r3,fp
1000ce8c:	a93fffc4 	addi	r4,r21,-1
1000ce90:	1f00892e 	bgeu	r3,fp,1000d0b8 <__udivdi3+0x5c4>
1000ce94:	202b883a 	mov	r21,r4
1000ce98:	18a3c83a 	sub	r17,r3,r2
1000ce9c:	8809883a 	mov	r4,r17
1000cea0:	900b883a 	mov	r5,r18
1000cea4:	000d8100 	call	1000d810 <__umodsi3>
1000cea8:	1029883a 	mov	r20,r2
1000ceac:	8809883a 	mov	r4,r17
1000ceb0:	900b883a 	mov	r5,r18
1000ceb4:	a028943a 	slli	r20,r20,16
1000ceb8:	000d7ac0 	call	1000d7ac <__udivsi3>
1000cebc:	100b883a 	mov	r5,r2
1000cec0:	b009883a 	mov	r4,r22
1000cec4:	843fffcc 	andi	r16,r16,65535
1000cec8:	1023883a 	mov	r17,r2
1000cecc:	8520b03a 	or	r16,r16,r20
1000ced0:	000d8680 	call	1000d868 <__mulsi3>
1000ced4:	8080042e 	bgeu	r16,r2,1000cee8 <__udivdi3+0x3f4>
1000ced8:	8721883a 	add	r16,r16,fp
1000cedc:	88ffffc4 	addi	r3,r17,-1
1000cee0:	8700712e 	bgeu	r16,fp,1000d0a8 <__udivdi3+0x5b4>
1000cee4:	1823883a 	mov	r17,r3
1000cee8:	a80e943a 	slli	r7,r21,16
1000ceec:	d8c00017 	ldw	r3,0(sp)
1000cef0:	80a1c83a 	sub	r16,r16,r2
1000cef4:	3c64b03a 	or	r18,r7,r17
1000cef8:	1d3fffcc 	andi	r20,r3,65535
1000cefc:	9022d43a 	srli	r17,r18,16
1000cf00:	95bfffcc 	andi	r22,r18,65535
1000cf04:	a00b883a 	mov	r5,r20
1000cf08:	b009883a 	mov	r4,r22
1000cf0c:	182ad43a 	srli	r21,r3,16
1000cf10:	000d8680 	call	1000d868 <__mulsi3>
1000cf14:	a00b883a 	mov	r5,r20
1000cf18:	8809883a 	mov	r4,r17
1000cf1c:	1039883a 	mov	fp,r2
1000cf20:	000d8680 	call	1000d868 <__mulsi3>
1000cf24:	8809883a 	mov	r4,r17
1000cf28:	a80b883a 	mov	r5,r21
1000cf2c:	1029883a 	mov	r20,r2
1000cf30:	000d8680 	call	1000d868 <__mulsi3>
1000cf34:	a80b883a 	mov	r5,r21
1000cf38:	b009883a 	mov	r4,r22
1000cf3c:	1023883a 	mov	r17,r2
1000cf40:	000d8680 	call	1000d868 <__mulsi3>
1000cf44:	e006d43a 	srli	r3,fp,16
1000cf48:	1505883a 	add	r2,r2,r20
1000cf4c:	1887883a 	add	r3,r3,r2
1000cf50:	1d00022e 	bgeu	r3,r20,1000cf5c <__udivdi3+0x468>
1000cf54:	00800074 	movhi	r2,1
1000cf58:	88a3883a 	add	r17,r17,r2
1000cf5c:	1804d43a 	srli	r2,r3,16
1000cf60:	1463883a 	add	r17,r2,r17
1000cf64:	84404436 	bltu	r16,r17,1000d078 <__udivdi3+0x584>
1000cf68:	84403e26 	beq	r16,r17,1000d064 <__udivdi3+0x570>
1000cf6c:	9005883a 	mov	r2,r18
1000cf70:	0007883a 	mov	r3,zero
1000cf74:	003f9106 	br	1000cdbc <__alt_data_end+0xf800cdbc>
1000cf78:	88e2983a 	sll	r17,r17,r3
1000cf7c:	80aed83a 	srl	r23,r16,r2
1000cf80:	80e0983a 	sll	r16,r16,r3
1000cf84:	882ad43a 	srli	r21,r17,16
1000cf88:	9884d83a 	srl	r2,r19,r2
1000cf8c:	b809883a 	mov	r4,r23
1000cf90:	a80b883a 	mov	r5,r21
1000cf94:	98e4983a 	sll	r18,r19,r3
1000cf98:	142cb03a 	or	r22,r2,r16
1000cf9c:	000d8100 	call	1000d810 <__umodsi3>
1000cfa0:	b809883a 	mov	r4,r23
1000cfa4:	a80b883a 	mov	r5,r21
1000cfa8:	1027883a 	mov	r19,r2
1000cfac:	8d3fffcc 	andi	r20,r17,65535
1000cfb0:	000d7ac0 	call	1000d7ac <__udivsi3>
1000cfb4:	a009883a 	mov	r4,r20
1000cfb8:	100b883a 	mov	r5,r2
1000cfbc:	102f883a 	mov	r23,r2
1000cfc0:	000d8680 	call	1000d868 <__mulsi3>
1000cfc4:	9826943a 	slli	r19,r19,16
1000cfc8:	b008d43a 	srli	r4,r22,16
1000cfcc:	24c8b03a 	or	r4,r4,r19
1000cfd0:	2080062e 	bgeu	r4,r2,1000cfec <__udivdi3+0x4f8>
1000cfd4:	2449883a 	add	r4,r4,r17
1000cfd8:	b8ffffc4 	addi	r3,r23,-1
1000cfdc:	24403c36 	bltu	r4,r17,1000d0d0 <__udivdi3+0x5dc>
1000cfe0:	20803b2e 	bgeu	r4,r2,1000d0d0 <__udivdi3+0x5dc>
1000cfe4:	bdffff84 	addi	r23,r23,-2
1000cfe8:	2449883a 	add	r4,r4,r17
1000cfec:	20a1c83a 	sub	r16,r4,r2
1000cff0:	a80b883a 	mov	r5,r21
1000cff4:	8009883a 	mov	r4,r16
1000cff8:	000d8100 	call	1000d810 <__umodsi3>
1000cffc:	a80b883a 	mov	r5,r21
1000d000:	8009883a 	mov	r4,r16
1000d004:	1027883a 	mov	r19,r2
1000d008:	000d7ac0 	call	1000d7ac <__udivsi3>
1000d00c:	a009883a 	mov	r4,r20
1000d010:	100b883a 	mov	r5,r2
1000d014:	9826943a 	slli	r19,r19,16
1000d018:	1039883a 	mov	fp,r2
1000d01c:	000d8680 	call	1000d868 <__mulsi3>
1000d020:	b13fffcc 	andi	r4,r22,65535
1000d024:	24c8b03a 	or	r4,r4,r19
1000d028:	2080062e 	bgeu	r4,r2,1000d044 <__udivdi3+0x550>
1000d02c:	2449883a 	add	r4,r4,r17
1000d030:	e0ffffc4 	addi	r3,fp,-1
1000d034:	24402436 	bltu	r4,r17,1000d0c8 <__udivdi3+0x5d4>
1000d038:	2080232e 	bgeu	r4,r2,1000d0c8 <__udivdi3+0x5d4>
1000d03c:	e73fff84 	addi	fp,fp,-2
1000d040:	2449883a 	add	r4,r4,r17
1000d044:	b82e943a 	slli	r23,r23,16
1000d048:	20a1c83a 	sub	r16,r4,r2
1000d04c:	bf06b03a 	or	r3,r23,fp
1000d050:	003f2806 	br	1000ccf4 <__alt_data_end+0xf800ccf4>
1000d054:	2021883a 	mov	r16,r4
1000d058:	003f5306 	br	1000cda8 <__alt_data_end+0xf800cda8>
1000d05c:	1821883a 	mov	r16,r3
1000d060:	003ef406 	br	1000cc34 <__alt_data_end+0xf800cc34>
1000d064:	1806943a 	slli	r3,r3,16
1000d068:	9de6983a 	sll	r19,r19,r23
1000d06c:	e73fffcc 	andi	fp,fp,65535
1000d070:	1f07883a 	add	r3,r3,fp
1000d074:	98ffbd2e 	bgeu	r19,r3,1000cf6c <__alt_data_end+0xf800cf6c>
1000d078:	90bfffc4 	addi	r2,r18,-1
1000d07c:	0007883a 	mov	r3,zero
1000d080:	003f4e06 	br	1000cdbc <__alt_data_end+0xf800cdbc>
1000d084:	00800604 	movi	r2,24
1000d088:	003ef506 	br	1000cc60 <__alt_data_end+0xf800cc60>
1000d08c:	00800604 	movi	r2,24
1000d090:	003f0b06 	br	1000ccc0 <__alt_data_end+0xf800ccc0>
1000d094:	00800604 	movi	r2,24
1000d098:	003ead06 	br	1000cb50 <__alt_data_end+0xf800cb50>
1000d09c:	0007883a 	mov	r3,zero
1000d0a0:	00800044 	movi	r2,1
1000d0a4:	003f4506 	br	1000cdbc <__alt_data_end+0xf800cdbc>
1000d0a8:	80bf8e2e 	bgeu	r16,r2,1000cee4 <__alt_data_end+0xf800cee4>
1000d0ac:	8c7fff84 	addi	r17,r17,-2
1000d0b0:	8721883a 	add	r16,r16,fp
1000d0b4:	003f8c06 	br	1000cee8 <__alt_data_end+0xf800cee8>
1000d0b8:	18bf762e 	bgeu	r3,r2,1000ce94 <__alt_data_end+0xf800ce94>
1000d0bc:	ad7fff84 	addi	r21,r21,-2
1000d0c0:	1f07883a 	add	r3,r3,fp
1000d0c4:	003f7406 	br	1000ce98 <__alt_data_end+0xf800ce98>
1000d0c8:	1839883a 	mov	fp,r3
1000d0cc:	003fdd06 	br	1000d044 <__alt_data_end+0xf800d044>
1000d0d0:	182f883a 	mov	r23,r3
1000d0d4:	003fc506 	br	1000cfec <__alt_data_end+0xf800cfec>
1000d0d8:	b5bfff84 	addi	r22,r22,-2
1000d0dc:	3c4f883a 	add	r7,r7,r17
1000d0e0:	003f1a06 	br	1000cd4c <__alt_data_end+0xf800cd4c>
1000d0e4:	b5bfff84 	addi	r22,r22,-2
1000d0e8:	1c47883a 	add	r3,r3,r17
1000d0ec:	003ebc06 	br	1000cbe0 <__alt_data_end+0xf800cbe0>

1000d0f0 <__umoddi3>:
1000d0f0:	defff304 	addi	sp,sp,-52
1000d0f4:	df000b15 	stw	fp,44(sp)
1000d0f8:	dc400415 	stw	r17,16(sp)
1000d0fc:	dc000315 	stw	r16,12(sp)
1000d100:	dfc00c15 	stw	ra,48(sp)
1000d104:	ddc00a15 	stw	r23,40(sp)
1000d108:	dd800915 	stw	r22,36(sp)
1000d10c:	dd400815 	stw	r21,32(sp)
1000d110:	dd000715 	stw	r20,28(sp)
1000d114:	dcc00615 	stw	r19,24(sp)
1000d118:	dc800515 	stw	r18,20(sp)
1000d11c:	2021883a 	mov	r16,r4
1000d120:	2823883a 	mov	r17,r5
1000d124:	2839883a 	mov	fp,r5
1000d128:	3800401e 	bne	r7,zero,1000d22c <__umoddi3+0x13c>
1000d12c:	3027883a 	mov	r19,r6
1000d130:	2029883a 	mov	r20,r4
1000d134:	2980552e 	bgeu	r5,r6,1000d28c <__umoddi3+0x19c>
1000d138:	00bfffd4 	movui	r2,65535
1000d13c:	1180a236 	bltu	r2,r6,1000d3c8 <__umoddi3+0x2d8>
1000d140:	01003fc4 	movi	r4,255
1000d144:	2189803a 	cmpltu	r4,r4,r6
1000d148:	200890fa 	slli	r4,r4,3
1000d14c:	3104d83a 	srl	r2,r6,r4
1000d150:	00c40074 	movhi	r3,4097
1000d154:	18ccbe04 	addi	r3,r3,13048
1000d158:	1885883a 	add	r2,r3,r2
1000d15c:	10c00003 	ldbu	r3,0(r2)
1000d160:	00800804 	movi	r2,32
1000d164:	1909883a 	add	r4,r3,r4
1000d168:	1125c83a 	sub	r18,r2,r4
1000d16c:	90000526 	beq	r18,zero,1000d184 <__umoddi3+0x94>
1000d170:	8ca2983a 	sll	r17,r17,r18
1000d174:	8108d83a 	srl	r4,r16,r4
1000d178:	34a6983a 	sll	r19,r6,r18
1000d17c:	84a8983a 	sll	r20,r16,r18
1000d180:	2478b03a 	or	fp,r4,r17
1000d184:	982cd43a 	srli	r22,r19,16
1000d188:	e009883a 	mov	r4,fp
1000d18c:	9dffffcc 	andi	r23,r19,65535
1000d190:	b00b883a 	mov	r5,r22
1000d194:	000d8100 	call	1000d810 <__umodsi3>
1000d198:	b00b883a 	mov	r5,r22
1000d19c:	e009883a 	mov	r4,fp
1000d1a0:	102b883a 	mov	r21,r2
1000d1a4:	000d7ac0 	call	1000d7ac <__udivsi3>
1000d1a8:	100b883a 	mov	r5,r2
1000d1ac:	b809883a 	mov	r4,r23
1000d1b0:	000d8680 	call	1000d868 <__mulsi3>
1000d1b4:	a82a943a 	slli	r21,r21,16
1000d1b8:	a006d43a 	srli	r3,r20,16
1000d1bc:	1d46b03a 	or	r3,r3,r21
1000d1c0:	1880032e 	bgeu	r3,r2,1000d1d0 <__umoddi3+0xe0>
1000d1c4:	1cc7883a 	add	r3,r3,r19
1000d1c8:	1cc00136 	bltu	r3,r19,1000d1d0 <__umoddi3+0xe0>
1000d1cc:	18813136 	bltu	r3,r2,1000d694 <__umoddi3+0x5a4>
1000d1d0:	18a1c83a 	sub	r16,r3,r2
1000d1d4:	b00b883a 	mov	r5,r22
1000d1d8:	8009883a 	mov	r4,r16
1000d1dc:	000d8100 	call	1000d810 <__umodsi3>
1000d1e0:	b00b883a 	mov	r5,r22
1000d1e4:	8009883a 	mov	r4,r16
1000d1e8:	1023883a 	mov	r17,r2
1000d1ec:	000d7ac0 	call	1000d7ac <__udivsi3>
1000d1f0:	100b883a 	mov	r5,r2
1000d1f4:	b809883a 	mov	r4,r23
1000d1f8:	8822943a 	slli	r17,r17,16
1000d1fc:	000d8680 	call	1000d868 <__mulsi3>
1000d200:	a0ffffcc 	andi	r3,r20,65535
1000d204:	1c46b03a 	or	r3,r3,r17
1000d208:	1880042e 	bgeu	r3,r2,1000d21c <__umoddi3+0x12c>
1000d20c:	1cc7883a 	add	r3,r3,r19
1000d210:	1cc00236 	bltu	r3,r19,1000d21c <__umoddi3+0x12c>
1000d214:	1880012e 	bgeu	r3,r2,1000d21c <__umoddi3+0x12c>
1000d218:	1cc7883a 	add	r3,r3,r19
1000d21c:	1885c83a 	sub	r2,r3,r2
1000d220:	1484d83a 	srl	r2,r2,r18
1000d224:	0007883a 	mov	r3,zero
1000d228:	00005306 	br	1000d378 <__umoddi3+0x288>
1000d22c:	29c05036 	bltu	r5,r7,1000d370 <__umoddi3+0x280>
1000d230:	00bfffd4 	movui	r2,65535
1000d234:	11c05c2e 	bgeu	r2,r7,1000d3a8 <__umoddi3+0x2b8>
1000d238:	00804034 	movhi	r2,256
1000d23c:	10bfffc4 	addi	r2,r2,-1
1000d240:	11c10636 	bltu	r2,r7,1000d65c <__umoddi3+0x56c>
1000d244:	01000404 	movi	r4,16
1000d248:	3904d83a 	srl	r2,r7,r4
1000d24c:	00c40074 	movhi	r3,4097
1000d250:	18ccbe04 	addi	r3,r3,13048
1000d254:	1885883a 	add	r2,r3,r2
1000d258:	14c00003 	ldbu	r19,0(r2)
1000d25c:	00c00804 	movi	r3,32
1000d260:	9927883a 	add	r19,r19,r4
1000d264:	1ce9c83a 	sub	r20,r3,r19
1000d268:	a0005c1e 	bne	r20,zero,1000d3dc <__umoddi3+0x2ec>
1000d26c:	3c400136 	bltu	r7,r17,1000d274 <__umoddi3+0x184>
1000d270:	81810a36 	bltu	r16,r6,1000d69c <__umoddi3+0x5ac>
1000d274:	8185c83a 	sub	r2,r16,r6
1000d278:	89e3c83a 	sub	r17,r17,r7
1000d27c:	8089803a 	cmpltu	r4,r16,r2
1000d280:	8939c83a 	sub	fp,r17,r4
1000d284:	e007883a 	mov	r3,fp
1000d288:	00003b06 	br	1000d378 <__umoddi3+0x288>
1000d28c:	3000041e 	bne	r6,zero,1000d2a0 <__umoddi3+0x1b0>
1000d290:	000b883a 	mov	r5,zero
1000d294:	01000044 	movi	r4,1
1000d298:	000d7ac0 	call	1000d7ac <__udivsi3>
1000d29c:	1027883a 	mov	r19,r2
1000d2a0:	00bfffd4 	movui	r2,65535
1000d2a4:	14c0442e 	bgeu	r2,r19,1000d3b8 <__umoddi3+0x2c8>
1000d2a8:	00804034 	movhi	r2,256
1000d2ac:	10bfffc4 	addi	r2,r2,-1
1000d2b0:	14c0ec36 	bltu	r2,r19,1000d664 <__umoddi3+0x574>
1000d2b4:	00800404 	movi	r2,16
1000d2b8:	9886d83a 	srl	r3,r19,r2
1000d2bc:	01040074 	movhi	r4,4097
1000d2c0:	210cbe04 	addi	r4,r4,13048
1000d2c4:	20c7883a 	add	r3,r4,r3
1000d2c8:	18c00003 	ldbu	r3,0(r3)
1000d2cc:	1887883a 	add	r3,r3,r2
1000d2d0:	00800804 	movi	r2,32
1000d2d4:	10e5c83a 	sub	r18,r2,r3
1000d2d8:	9000ab1e 	bne	r18,zero,1000d588 <__umoddi3+0x498>
1000d2dc:	982cd43a 	srli	r22,r19,16
1000d2e0:	8ce3c83a 	sub	r17,r17,r19
1000d2e4:	9dffffcc 	andi	r23,r19,65535
1000d2e8:	b00b883a 	mov	r5,r22
1000d2ec:	8809883a 	mov	r4,r17
1000d2f0:	000d8100 	call	1000d810 <__umodsi3>
1000d2f4:	b00b883a 	mov	r5,r22
1000d2f8:	8809883a 	mov	r4,r17
1000d2fc:	102b883a 	mov	r21,r2
1000d300:	000d7ac0 	call	1000d7ac <__udivsi3>
1000d304:	b80b883a 	mov	r5,r23
1000d308:	1009883a 	mov	r4,r2
1000d30c:	000d8680 	call	1000d868 <__mulsi3>
1000d310:	a82a943a 	slli	r21,r21,16
1000d314:	a006d43a 	srli	r3,r20,16
1000d318:	1d46b03a 	or	r3,r3,r21
1000d31c:	1880042e 	bgeu	r3,r2,1000d330 <__umoddi3+0x240>
1000d320:	1cc7883a 	add	r3,r3,r19
1000d324:	1cc00236 	bltu	r3,r19,1000d330 <__umoddi3+0x240>
1000d328:	1880012e 	bgeu	r3,r2,1000d330 <__umoddi3+0x240>
1000d32c:	1cc7883a 	add	r3,r3,r19
1000d330:	18a1c83a 	sub	r16,r3,r2
1000d334:	b00b883a 	mov	r5,r22
1000d338:	8009883a 	mov	r4,r16
1000d33c:	000d8100 	call	1000d810 <__umodsi3>
1000d340:	1023883a 	mov	r17,r2
1000d344:	b00b883a 	mov	r5,r22
1000d348:	8009883a 	mov	r4,r16
1000d34c:	000d7ac0 	call	1000d7ac <__udivsi3>
1000d350:	8822943a 	slli	r17,r17,16
1000d354:	b80b883a 	mov	r5,r23
1000d358:	1009883a 	mov	r4,r2
1000d35c:	000d8680 	call	1000d868 <__mulsi3>
1000d360:	a53fffcc 	andi	r20,r20,65535
1000d364:	a446b03a 	or	r3,r20,r17
1000d368:	18bfac2e 	bgeu	r3,r2,1000d21c <__alt_data_end+0xf800d21c>
1000d36c:	003fa706 	br	1000d20c <__alt_data_end+0xf800d20c>
1000d370:	2005883a 	mov	r2,r4
1000d374:	2807883a 	mov	r3,r5
1000d378:	dfc00c17 	ldw	ra,48(sp)
1000d37c:	df000b17 	ldw	fp,44(sp)
1000d380:	ddc00a17 	ldw	r23,40(sp)
1000d384:	dd800917 	ldw	r22,36(sp)
1000d388:	dd400817 	ldw	r21,32(sp)
1000d38c:	dd000717 	ldw	r20,28(sp)
1000d390:	dcc00617 	ldw	r19,24(sp)
1000d394:	dc800517 	ldw	r18,20(sp)
1000d398:	dc400417 	ldw	r17,16(sp)
1000d39c:	dc000317 	ldw	r16,12(sp)
1000d3a0:	dec00d04 	addi	sp,sp,52
1000d3a4:	f800283a 	ret
1000d3a8:	04c03fc4 	movi	r19,255
1000d3ac:	99c9803a 	cmpltu	r4,r19,r7
1000d3b0:	200890fa 	slli	r4,r4,3
1000d3b4:	003fa406 	br	1000d248 <__alt_data_end+0xf800d248>
1000d3b8:	00803fc4 	movi	r2,255
1000d3bc:	14c5803a 	cmpltu	r2,r2,r19
1000d3c0:	100490fa 	slli	r2,r2,3
1000d3c4:	003fbc06 	br	1000d2b8 <__alt_data_end+0xf800d2b8>
1000d3c8:	00804034 	movhi	r2,256
1000d3cc:	10bfffc4 	addi	r2,r2,-1
1000d3d0:	1180a636 	bltu	r2,r6,1000d66c <__umoddi3+0x57c>
1000d3d4:	01000404 	movi	r4,16
1000d3d8:	003f5c06 	br	1000d14c <__alt_data_end+0xf800d14c>
1000d3dc:	3d0e983a 	sll	r7,r7,r20
1000d3e0:	34ead83a 	srl	r21,r6,r19
1000d3e4:	8cc6d83a 	srl	r3,r17,r19
1000d3e8:	8d10983a 	sll	r8,r17,r20
1000d3ec:	3d6ab03a 	or	r21,r7,r21
1000d3f0:	a82cd43a 	srli	r22,r21,16
1000d3f4:	84e2d83a 	srl	r17,r16,r19
1000d3f8:	1809883a 	mov	r4,r3
1000d3fc:	b00b883a 	mov	r5,r22
1000d400:	8a22b03a 	or	r17,r17,r8
1000d404:	3524983a 	sll	r18,r6,r20
1000d408:	dc400015 	stw	r17,0(sp)
1000d40c:	d8c00115 	stw	r3,4(sp)
1000d410:	000d8100 	call	1000d810 <__umodsi3>
1000d414:	d8c00117 	ldw	r3,4(sp)
1000d418:	b00b883a 	mov	r5,r22
1000d41c:	1039883a 	mov	fp,r2
1000d420:	1809883a 	mov	r4,r3
1000d424:	000d7ac0 	call	1000d7ac <__udivsi3>
1000d428:	adffffcc 	andi	r23,r21,65535
1000d42c:	100b883a 	mov	r5,r2
1000d430:	b809883a 	mov	r4,r23
1000d434:	1023883a 	mov	r17,r2
1000d438:	000d8680 	call	1000d868 <__mulsi3>
1000d43c:	d9400017 	ldw	r5,0(sp)
1000d440:	e008943a 	slli	r4,fp,16
1000d444:	8520983a 	sll	r16,r16,r20
1000d448:	2806d43a 	srli	r3,r5,16
1000d44c:	1906b03a 	or	r3,r3,r4
1000d450:	1880042e 	bgeu	r3,r2,1000d464 <__umoddi3+0x374>
1000d454:	1d47883a 	add	r3,r3,r21
1000d458:	893fffc4 	addi	r4,r17,-1
1000d45c:	1d40892e 	bgeu	r3,r21,1000d684 <__umoddi3+0x594>
1000d460:	2023883a 	mov	r17,r4
1000d464:	18b9c83a 	sub	fp,r3,r2
1000d468:	b00b883a 	mov	r5,r22
1000d46c:	e009883a 	mov	r4,fp
1000d470:	000d8100 	call	1000d810 <__umodsi3>
1000d474:	b00b883a 	mov	r5,r22
1000d478:	e009883a 	mov	r4,fp
1000d47c:	d8800215 	stw	r2,8(sp)
1000d480:	000d7ac0 	call	1000d7ac <__udivsi3>
1000d484:	100b883a 	mov	r5,r2
1000d488:	b809883a 	mov	r4,r23
1000d48c:	102d883a 	mov	r22,r2
1000d490:	000d8680 	call	1000d868 <__mulsi3>
1000d494:	d9800217 	ldw	r6,8(sp)
1000d498:	d8c00017 	ldw	r3,0(sp)
1000d49c:	300c943a 	slli	r6,r6,16
1000d4a0:	1a3fffcc 	andi	r8,r3,65535
1000d4a4:	4190b03a 	or	r8,r8,r6
1000d4a8:	4080042e 	bgeu	r8,r2,1000d4bc <__umoddi3+0x3cc>
1000d4ac:	4551883a 	add	r8,r8,r21
1000d4b0:	b0ffffc4 	addi	r3,r22,-1
1000d4b4:	45406f2e 	bgeu	r8,r21,1000d674 <__umoddi3+0x584>
1000d4b8:	182d883a 	mov	r22,r3
1000d4bc:	880e943a 	slli	r7,r17,16
1000d4c0:	9006d43a 	srli	r3,r18,16
1000d4c4:	91bfffcc 	andi	r6,r18,65535
1000d4c8:	3dacb03a 	or	r22,r7,r22
1000d4cc:	b02ed43a 	srli	r23,r22,16
1000d4d0:	b5bfffcc 	andi	r22,r22,65535
1000d4d4:	300b883a 	mov	r5,r6
1000d4d8:	b009883a 	mov	r4,r22
1000d4dc:	40a3c83a 	sub	r17,r8,r2
1000d4e0:	d8c00115 	stw	r3,4(sp)
1000d4e4:	d9800215 	stw	r6,8(sp)
1000d4e8:	000d8680 	call	1000d868 <__mulsi3>
1000d4ec:	d9800217 	ldw	r6,8(sp)
1000d4f0:	b809883a 	mov	r4,r23
1000d4f4:	1039883a 	mov	fp,r2
1000d4f8:	300b883a 	mov	r5,r6
1000d4fc:	000d8680 	call	1000d868 <__mulsi3>
1000d500:	d8c00117 	ldw	r3,4(sp)
1000d504:	b809883a 	mov	r4,r23
1000d508:	d8800215 	stw	r2,8(sp)
1000d50c:	180b883a 	mov	r5,r3
1000d510:	000d8680 	call	1000d868 <__mulsi3>
1000d514:	d8c00117 	ldw	r3,4(sp)
1000d518:	b009883a 	mov	r4,r22
1000d51c:	102f883a 	mov	r23,r2
1000d520:	180b883a 	mov	r5,r3
1000d524:	000d8680 	call	1000d868 <__mulsi3>
1000d528:	d9800217 	ldw	r6,8(sp)
1000d52c:	e006d43a 	srli	r3,fp,16
1000d530:	1185883a 	add	r2,r2,r6
1000d534:	1885883a 	add	r2,r3,r2
1000d538:	1180022e 	bgeu	r2,r6,1000d544 <__umoddi3+0x454>
1000d53c:	00c00074 	movhi	r3,1
1000d540:	b8ef883a 	add	r23,r23,r3
1000d544:	1006d43a 	srli	r3,r2,16
1000d548:	1004943a 	slli	r2,r2,16
1000d54c:	e73fffcc 	andi	fp,fp,65535
1000d550:	1dc7883a 	add	r3,r3,r23
1000d554:	1739883a 	add	fp,r2,fp
1000d558:	88c03a36 	bltu	r17,r3,1000d644 <__umoddi3+0x554>
1000d55c:	88c05126 	beq	r17,r3,1000d6a4 <__umoddi3+0x5b4>
1000d560:	88c9c83a 	sub	r4,r17,r3
1000d564:	e00f883a 	mov	r7,fp
1000d568:	81cfc83a 	sub	r7,r16,r7
1000d56c:	81c7803a 	cmpltu	r3,r16,r7
1000d570:	20c7c83a 	sub	r3,r4,r3
1000d574:	1cc4983a 	sll	r2,r3,r19
1000d578:	3d0ed83a 	srl	r7,r7,r20
1000d57c:	1d06d83a 	srl	r3,r3,r20
1000d580:	11c4b03a 	or	r2,r2,r7
1000d584:	003f7c06 	br	1000d378 <__alt_data_end+0xf800d378>
1000d588:	9ca6983a 	sll	r19,r19,r18
1000d58c:	88f8d83a 	srl	fp,r17,r3
1000d590:	80c4d83a 	srl	r2,r16,r3
1000d594:	982cd43a 	srli	r22,r19,16
1000d598:	8ca2983a 	sll	r17,r17,r18
1000d59c:	e009883a 	mov	r4,fp
1000d5a0:	b00b883a 	mov	r5,r22
1000d5a4:	146ab03a 	or	r21,r2,r17
1000d5a8:	000d8100 	call	1000d810 <__umodsi3>
1000d5ac:	b00b883a 	mov	r5,r22
1000d5b0:	e009883a 	mov	r4,fp
1000d5b4:	1029883a 	mov	r20,r2
1000d5b8:	9dffffcc 	andi	r23,r19,65535
1000d5bc:	000d7ac0 	call	1000d7ac <__udivsi3>
1000d5c0:	b809883a 	mov	r4,r23
1000d5c4:	100b883a 	mov	r5,r2
1000d5c8:	000d8680 	call	1000d868 <__mulsi3>
1000d5cc:	a008943a 	slli	r4,r20,16
1000d5d0:	a806d43a 	srli	r3,r21,16
1000d5d4:	84a8983a 	sll	r20,r16,r18
1000d5d8:	1906b03a 	or	r3,r3,r4
1000d5dc:	1880042e 	bgeu	r3,r2,1000d5f0 <__umoddi3+0x500>
1000d5e0:	1cc7883a 	add	r3,r3,r19
1000d5e4:	1cc00236 	bltu	r3,r19,1000d5f0 <__umoddi3+0x500>
1000d5e8:	1880012e 	bgeu	r3,r2,1000d5f0 <__umoddi3+0x500>
1000d5ec:	1cc7883a 	add	r3,r3,r19
1000d5f0:	18a3c83a 	sub	r17,r3,r2
1000d5f4:	b00b883a 	mov	r5,r22
1000d5f8:	8809883a 	mov	r4,r17
1000d5fc:	000d8100 	call	1000d810 <__umodsi3>
1000d600:	b00b883a 	mov	r5,r22
1000d604:	8809883a 	mov	r4,r17
1000d608:	1021883a 	mov	r16,r2
1000d60c:	000d7ac0 	call	1000d7ac <__udivsi3>
1000d610:	100b883a 	mov	r5,r2
1000d614:	b809883a 	mov	r4,r23
1000d618:	8020943a 	slli	r16,r16,16
1000d61c:	000d8680 	call	1000d868 <__mulsi3>
1000d620:	a8ffffcc 	andi	r3,r21,65535
1000d624:	1c06b03a 	or	r3,r3,r16
1000d628:	1880042e 	bgeu	r3,r2,1000d63c <__umoddi3+0x54c>
1000d62c:	1cc7883a 	add	r3,r3,r19
1000d630:	1cc00236 	bltu	r3,r19,1000d63c <__umoddi3+0x54c>
1000d634:	1880012e 	bgeu	r3,r2,1000d63c <__umoddi3+0x54c>
1000d638:	1cc7883a 	add	r3,r3,r19
1000d63c:	18a3c83a 	sub	r17,r3,r2
1000d640:	003f2906 	br	1000d2e8 <__alt_data_end+0xf800d2e8>
1000d644:	e48fc83a 	sub	r7,fp,r18
1000d648:	1d49c83a 	sub	r4,r3,r21
1000d64c:	e1f9803a 	cmpltu	fp,fp,r7
1000d650:	2739c83a 	sub	fp,r4,fp
1000d654:	8f09c83a 	sub	r4,r17,fp
1000d658:	003fc306 	br	1000d568 <__alt_data_end+0xf800d568>
1000d65c:	01000604 	movi	r4,24
1000d660:	003ef906 	br	1000d248 <__alt_data_end+0xf800d248>
1000d664:	00800604 	movi	r2,24
1000d668:	003f1306 	br	1000d2b8 <__alt_data_end+0xf800d2b8>
1000d66c:	01000604 	movi	r4,24
1000d670:	003eb606 	br	1000d14c <__alt_data_end+0xf800d14c>
1000d674:	40bf902e 	bgeu	r8,r2,1000d4b8 <__alt_data_end+0xf800d4b8>
1000d678:	b5bfff84 	addi	r22,r22,-2
1000d67c:	4551883a 	add	r8,r8,r21
1000d680:	003f8e06 	br	1000d4bc <__alt_data_end+0xf800d4bc>
1000d684:	18bf762e 	bgeu	r3,r2,1000d460 <__alt_data_end+0xf800d460>
1000d688:	8c7fff84 	addi	r17,r17,-2
1000d68c:	1d47883a 	add	r3,r3,r21
1000d690:	003f7406 	br	1000d464 <__alt_data_end+0xf800d464>
1000d694:	1cc7883a 	add	r3,r3,r19
1000d698:	003ecd06 	br	1000d1d0 <__alt_data_end+0xf800d1d0>
1000d69c:	8005883a 	mov	r2,r16
1000d6a0:	003ef806 	br	1000d284 <__alt_data_end+0xf800d284>
1000d6a4:	873fe736 	bltu	r16,fp,1000d644 <__alt_data_end+0xf800d644>
1000d6a8:	e00f883a 	mov	r7,fp
1000d6ac:	0009883a 	mov	r4,zero
1000d6b0:	003fad06 	br	1000d568 <__alt_data_end+0xf800d568>

1000d6b4 <__divsi3>:
1000d6b4:	20001b16 	blt	r4,zero,1000d724 <__divsi3+0x70>
1000d6b8:	000f883a 	mov	r7,zero
1000d6bc:	28001616 	blt	r5,zero,1000d718 <__divsi3+0x64>
1000d6c0:	200d883a 	mov	r6,r4
1000d6c4:	29001a2e 	bgeu	r5,r4,1000d730 <__divsi3+0x7c>
1000d6c8:	00800804 	movi	r2,32
1000d6cc:	00c00044 	movi	r3,1
1000d6d0:	00000106 	br	1000d6d8 <__divsi3+0x24>
1000d6d4:	10000d26 	beq	r2,zero,1000d70c <__divsi3+0x58>
1000d6d8:	294b883a 	add	r5,r5,r5
1000d6dc:	10bfffc4 	addi	r2,r2,-1
1000d6e0:	18c7883a 	add	r3,r3,r3
1000d6e4:	293ffb36 	bltu	r5,r4,1000d6d4 <__alt_data_end+0xf800d6d4>
1000d6e8:	0005883a 	mov	r2,zero
1000d6ec:	18000726 	beq	r3,zero,1000d70c <__divsi3+0x58>
1000d6f0:	0005883a 	mov	r2,zero
1000d6f4:	31400236 	bltu	r6,r5,1000d700 <__divsi3+0x4c>
1000d6f8:	314dc83a 	sub	r6,r6,r5
1000d6fc:	10c4b03a 	or	r2,r2,r3
1000d700:	1806d07a 	srli	r3,r3,1
1000d704:	280ad07a 	srli	r5,r5,1
1000d708:	183ffa1e 	bne	r3,zero,1000d6f4 <__alt_data_end+0xf800d6f4>
1000d70c:	38000126 	beq	r7,zero,1000d714 <__divsi3+0x60>
1000d710:	0085c83a 	sub	r2,zero,r2
1000d714:	f800283a 	ret
1000d718:	014bc83a 	sub	r5,zero,r5
1000d71c:	39c0005c 	xori	r7,r7,1
1000d720:	003fe706 	br	1000d6c0 <__alt_data_end+0xf800d6c0>
1000d724:	0109c83a 	sub	r4,zero,r4
1000d728:	01c00044 	movi	r7,1
1000d72c:	003fe306 	br	1000d6bc <__alt_data_end+0xf800d6bc>
1000d730:	00c00044 	movi	r3,1
1000d734:	003fee06 	br	1000d6f0 <__alt_data_end+0xf800d6f0>

1000d738 <__modsi3>:
1000d738:	20001716 	blt	r4,zero,1000d798 <__modsi3+0x60>
1000d73c:	000f883a 	mov	r7,zero
1000d740:	2005883a 	mov	r2,r4
1000d744:	28001216 	blt	r5,zero,1000d790 <__modsi3+0x58>
1000d748:	2900162e 	bgeu	r5,r4,1000d7a4 <__modsi3+0x6c>
1000d74c:	01800804 	movi	r6,32
1000d750:	00c00044 	movi	r3,1
1000d754:	00000106 	br	1000d75c <__modsi3+0x24>
1000d758:	30000a26 	beq	r6,zero,1000d784 <__modsi3+0x4c>
1000d75c:	294b883a 	add	r5,r5,r5
1000d760:	31bfffc4 	addi	r6,r6,-1
1000d764:	18c7883a 	add	r3,r3,r3
1000d768:	293ffb36 	bltu	r5,r4,1000d758 <__alt_data_end+0xf800d758>
1000d76c:	18000526 	beq	r3,zero,1000d784 <__modsi3+0x4c>
1000d770:	1806d07a 	srli	r3,r3,1
1000d774:	11400136 	bltu	r2,r5,1000d77c <__modsi3+0x44>
1000d778:	1145c83a 	sub	r2,r2,r5
1000d77c:	280ad07a 	srli	r5,r5,1
1000d780:	183ffb1e 	bne	r3,zero,1000d770 <__alt_data_end+0xf800d770>
1000d784:	38000126 	beq	r7,zero,1000d78c <__modsi3+0x54>
1000d788:	0085c83a 	sub	r2,zero,r2
1000d78c:	f800283a 	ret
1000d790:	014bc83a 	sub	r5,zero,r5
1000d794:	003fec06 	br	1000d748 <__alt_data_end+0xf800d748>
1000d798:	0109c83a 	sub	r4,zero,r4
1000d79c:	01c00044 	movi	r7,1
1000d7a0:	003fe706 	br	1000d740 <__alt_data_end+0xf800d740>
1000d7a4:	00c00044 	movi	r3,1
1000d7a8:	003ff106 	br	1000d770 <__alt_data_end+0xf800d770>

1000d7ac <__udivsi3>:
1000d7ac:	200d883a 	mov	r6,r4
1000d7b0:	2900152e 	bgeu	r5,r4,1000d808 <__udivsi3+0x5c>
1000d7b4:	28001416 	blt	r5,zero,1000d808 <__udivsi3+0x5c>
1000d7b8:	00800804 	movi	r2,32
1000d7bc:	00c00044 	movi	r3,1
1000d7c0:	00000206 	br	1000d7cc <__udivsi3+0x20>
1000d7c4:	10000e26 	beq	r2,zero,1000d800 <__udivsi3+0x54>
1000d7c8:	28000516 	blt	r5,zero,1000d7e0 <__udivsi3+0x34>
1000d7cc:	294b883a 	add	r5,r5,r5
1000d7d0:	10bfffc4 	addi	r2,r2,-1
1000d7d4:	18c7883a 	add	r3,r3,r3
1000d7d8:	293ffa36 	bltu	r5,r4,1000d7c4 <__alt_data_end+0xf800d7c4>
1000d7dc:	18000826 	beq	r3,zero,1000d800 <__udivsi3+0x54>
1000d7e0:	0005883a 	mov	r2,zero
1000d7e4:	31400236 	bltu	r6,r5,1000d7f0 <__udivsi3+0x44>
1000d7e8:	314dc83a 	sub	r6,r6,r5
1000d7ec:	10c4b03a 	or	r2,r2,r3
1000d7f0:	1806d07a 	srli	r3,r3,1
1000d7f4:	280ad07a 	srli	r5,r5,1
1000d7f8:	183ffa1e 	bne	r3,zero,1000d7e4 <__alt_data_end+0xf800d7e4>
1000d7fc:	f800283a 	ret
1000d800:	0005883a 	mov	r2,zero
1000d804:	f800283a 	ret
1000d808:	00c00044 	movi	r3,1
1000d80c:	003ff406 	br	1000d7e0 <__alt_data_end+0xf800d7e0>

1000d810 <__umodsi3>:
1000d810:	2005883a 	mov	r2,r4
1000d814:	2900122e 	bgeu	r5,r4,1000d860 <__umodsi3+0x50>
1000d818:	28001116 	blt	r5,zero,1000d860 <__umodsi3+0x50>
1000d81c:	01800804 	movi	r6,32
1000d820:	00c00044 	movi	r3,1
1000d824:	00000206 	br	1000d830 <__umodsi3+0x20>
1000d828:	30000c26 	beq	r6,zero,1000d85c <__umodsi3+0x4c>
1000d82c:	28000516 	blt	r5,zero,1000d844 <__umodsi3+0x34>
1000d830:	294b883a 	add	r5,r5,r5
1000d834:	31bfffc4 	addi	r6,r6,-1
1000d838:	18c7883a 	add	r3,r3,r3
1000d83c:	293ffa36 	bltu	r5,r4,1000d828 <__alt_data_end+0xf800d828>
1000d840:	18000626 	beq	r3,zero,1000d85c <__umodsi3+0x4c>
1000d844:	1806d07a 	srli	r3,r3,1
1000d848:	11400136 	bltu	r2,r5,1000d850 <__umodsi3+0x40>
1000d84c:	1145c83a 	sub	r2,r2,r5
1000d850:	280ad07a 	srli	r5,r5,1
1000d854:	183ffb1e 	bne	r3,zero,1000d844 <__alt_data_end+0xf800d844>
1000d858:	f800283a 	ret
1000d85c:	f800283a 	ret
1000d860:	00c00044 	movi	r3,1
1000d864:	003ff706 	br	1000d844 <__alt_data_end+0xf800d844>

1000d868 <__mulsi3>:
1000d868:	0005883a 	mov	r2,zero
1000d86c:	20000726 	beq	r4,zero,1000d88c <__mulsi3+0x24>
1000d870:	20c0004c 	andi	r3,r4,1
1000d874:	2008d07a 	srli	r4,r4,1
1000d878:	18000126 	beq	r3,zero,1000d880 <__mulsi3+0x18>
1000d87c:	1145883a 	add	r2,r2,r5
1000d880:	294b883a 	add	r5,r5,r5
1000d884:	203ffa1e 	bne	r4,zero,1000d870 <__alt_data_end+0xf800d870>
1000d888:	f800283a 	ret
1000d88c:	f800283a 	ret

1000d890 <__adddf3>:
1000d890:	02c00434 	movhi	r11,16
1000d894:	5affffc4 	addi	r11,r11,-1
1000d898:	2806d7fa 	srli	r3,r5,31
1000d89c:	2ad4703a 	and	r10,r5,r11
1000d8a0:	3ad2703a 	and	r9,r7,r11
1000d8a4:	3804d53a 	srli	r2,r7,20
1000d8a8:	3018d77a 	srli	r12,r6,29
1000d8ac:	280ad53a 	srli	r5,r5,20
1000d8b0:	501490fa 	slli	r10,r10,3
1000d8b4:	2010d77a 	srli	r8,r4,29
1000d8b8:	481290fa 	slli	r9,r9,3
1000d8bc:	380ed7fa 	srli	r7,r7,31
1000d8c0:	defffb04 	addi	sp,sp,-20
1000d8c4:	dc800215 	stw	r18,8(sp)
1000d8c8:	dc400115 	stw	r17,4(sp)
1000d8cc:	dc000015 	stw	r16,0(sp)
1000d8d0:	dfc00415 	stw	ra,16(sp)
1000d8d4:	dcc00315 	stw	r19,12(sp)
1000d8d8:	1c803fcc 	andi	r18,r3,255
1000d8dc:	2c01ffcc 	andi	r16,r5,2047
1000d8e0:	5210b03a 	or	r8,r10,r8
1000d8e4:	202290fa 	slli	r17,r4,3
1000d8e8:	1081ffcc 	andi	r2,r2,2047
1000d8ec:	4b12b03a 	or	r9,r9,r12
1000d8f0:	300c90fa 	slli	r6,r6,3
1000d8f4:	91c07526 	beq	r18,r7,1000dacc <__adddf3+0x23c>
1000d8f8:	8087c83a 	sub	r3,r16,r2
1000d8fc:	00c0ab0e 	bge	zero,r3,1000dbac <__adddf3+0x31c>
1000d900:	10002a1e 	bne	r2,zero,1000d9ac <__adddf3+0x11c>
1000d904:	4984b03a 	or	r2,r9,r6
1000d908:	1000961e 	bne	r2,zero,1000db64 <__adddf3+0x2d4>
1000d90c:	888001cc 	andi	r2,r17,7
1000d910:	10000726 	beq	r2,zero,1000d930 <__adddf3+0xa0>
1000d914:	888003cc 	andi	r2,r17,15
1000d918:	00c00104 	movi	r3,4
1000d91c:	10c00426 	beq	r2,r3,1000d930 <__adddf3+0xa0>
1000d920:	88c7883a 	add	r3,r17,r3
1000d924:	1c63803a 	cmpltu	r17,r3,r17
1000d928:	4451883a 	add	r8,r8,r17
1000d92c:	1823883a 	mov	r17,r3
1000d930:	4080202c 	andhi	r2,r8,128
1000d934:	10005926 	beq	r2,zero,1000da9c <__adddf3+0x20c>
1000d938:	84000044 	addi	r16,r16,1
1000d93c:	0081ffc4 	movi	r2,2047
1000d940:	8080ba26 	beq	r16,r2,1000dc2c <__adddf3+0x39c>
1000d944:	00bfe034 	movhi	r2,65408
1000d948:	10bfffc4 	addi	r2,r2,-1
1000d94c:	4090703a 	and	r8,r8,r2
1000d950:	4004977a 	slli	r2,r8,29
1000d954:	4010927a 	slli	r8,r8,9
1000d958:	8822d0fa 	srli	r17,r17,3
1000d95c:	8401ffcc 	andi	r16,r16,2047
1000d960:	4010d33a 	srli	r8,r8,12
1000d964:	9007883a 	mov	r3,r18
1000d968:	1444b03a 	or	r2,r2,r17
1000d96c:	8401ffcc 	andi	r16,r16,2047
1000d970:	8020953a 	slli	r16,r16,20
1000d974:	18c03fcc 	andi	r3,r3,255
1000d978:	01000434 	movhi	r4,16
1000d97c:	213fffc4 	addi	r4,r4,-1
1000d980:	180697fa 	slli	r3,r3,31
1000d984:	4110703a 	and	r8,r8,r4
1000d988:	4410b03a 	or	r8,r8,r16
1000d98c:	40c6b03a 	or	r3,r8,r3
1000d990:	dfc00417 	ldw	ra,16(sp)
1000d994:	dcc00317 	ldw	r19,12(sp)
1000d998:	dc800217 	ldw	r18,8(sp)
1000d99c:	dc400117 	ldw	r17,4(sp)
1000d9a0:	dc000017 	ldw	r16,0(sp)
1000d9a4:	dec00504 	addi	sp,sp,20
1000d9a8:	f800283a 	ret
1000d9ac:	0081ffc4 	movi	r2,2047
1000d9b0:	80bfd626 	beq	r16,r2,1000d90c <__alt_data_end+0xf800d90c>
1000d9b4:	4a402034 	orhi	r9,r9,128
1000d9b8:	00800e04 	movi	r2,56
1000d9bc:	10c09f16 	blt	r2,r3,1000dc3c <__adddf3+0x3ac>
1000d9c0:	008007c4 	movi	r2,31
1000d9c4:	10c0c216 	blt	r2,r3,1000dcd0 <__adddf3+0x440>
1000d9c8:	00800804 	movi	r2,32
1000d9cc:	10c5c83a 	sub	r2,r2,r3
1000d9d0:	488a983a 	sll	r5,r9,r2
1000d9d4:	30c8d83a 	srl	r4,r6,r3
1000d9d8:	3084983a 	sll	r2,r6,r2
1000d9dc:	48c6d83a 	srl	r3,r9,r3
1000d9e0:	290cb03a 	or	r6,r5,r4
1000d9e4:	1004c03a 	cmpne	r2,r2,zero
1000d9e8:	308cb03a 	or	r6,r6,r2
1000d9ec:	898dc83a 	sub	r6,r17,r6
1000d9f0:	89a3803a 	cmpltu	r17,r17,r6
1000d9f4:	40d1c83a 	sub	r8,r8,r3
1000d9f8:	4451c83a 	sub	r8,r8,r17
1000d9fc:	3023883a 	mov	r17,r6
1000da00:	4080202c 	andhi	r2,r8,128
1000da04:	10002326 	beq	r2,zero,1000da94 <__adddf3+0x204>
1000da08:	04c02034 	movhi	r19,128
1000da0c:	9cffffc4 	addi	r19,r19,-1
1000da10:	44e6703a 	and	r19,r8,r19
1000da14:	98007626 	beq	r19,zero,1000dbf0 <__adddf3+0x360>
1000da18:	9809883a 	mov	r4,r19
1000da1c:	00100d00 	call	100100d0 <__clzsi2>
1000da20:	10fffe04 	addi	r3,r2,-8
1000da24:	010007c4 	movi	r4,31
1000da28:	20c07716 	blt	r4,r3,1000dc08 <__adddf3+0x378>
1000da2c:	00800804 	movi	r2,32
1000da30:	10c5c83a 	sub	r2,r2,r3
1000da34:	8884d83a 	srl	r2,r17,r2
1000da38:	98d0983a 	sll	r8,r19,r3
1000da3c:	88e2983a 	sll	r17,r17,r3
1000da40:	1204b03a 	or	r2,r2,r8
1000da44:	1c007416 	blt	r3,r16,1000dc18 <__adddf3+0x388>
1000da48:	1c21c83a 	sub	r16,r3,r16
1000da4c:	82000044 	addi	r8,r16,1
1000da50:	00c007c4 	movi	r3,31
1000da54:	1a009116 	blt	r3,r8,1000dc9c <__adddf3+0x40c>
1000da58:	00c00804 	movi	r3,32
1000da5c:	1a07c83a 	sub	r3,r3,r8
1000da60:	8a08d83a 	srl	r4,r17,r8
1000da64:	88e2983a 	sll	r17,r17,r3
1000da68:	10c6983a 	sll	r3,r2,r3
1000da6c:	1210d83a 	srl	r8,r2,r8
1000da70:	8804c03a 	cmpne	r2,r17,zero
1000da74:	1906b03a 	or	r3,r3,r4
1000da78:	18a2b03a 	or	r17,r3,r2
1000da7c:	0021883a 	mov	r16,zero
1000da80:	003fa206 	br	1000d90c <__alt_data_end+0xf800d90c>
1000da84:	1890b03a 	or	r8,r3,r2
1000da88:	40017d26 	beq	r8,zero,1000e080 <__adddf3+0x7f0>
1000da8c:	1011883a 	mov	r8,r2
1000da90:	1823883a 	mov	r17,r3
1000da94:	888001cc 	andi	r2,r17,7
1000da98:	103f9e1e 	bne	r2,zero,1000d914 <__alt_data_end+0xf800d914>
1000da9c:	4004977a 	slli	r2,r8,29
1000daa0:	8822d0fa 	srli	r17,r17,3
1000daa4:	4010d0fa 	srli	r8,r8,3
1000daa8:	9007883a 	mov	r3,r18
1000daac:	1444b03a 	or	r2,r2,r17
1000dab0:	0101ffc4 	movi	r4,2047
1000dab4:	81002426 	beq	r16,r4,1000db48 <__adddf3+0x2b8>
1000dab8:	8120703a 	and	r16,r16,r4
1000dabc:	01000434 	movhi	r4,16
1000dac0:	213fffc4 	addi	r4,r4,-1
1000dac4:	4110703a 	and	r8,r8,r4
1000dac8:	003fa806 	br	1000d96c <__alt_data_end+0xf800d96c>
1000dacc:	8089c83a 	sub	r4,r16,r2
1000dad0:	01005e0e 	bge	zero,r4,1000dc4c <__adddf3+0x3bc>
1000dad4:	10002b26 	beq	r2,zero,1000db84 <__adddf3+0x2f4>
1000dad8:	0081ffc4 	movi	r2,2047
1000dadc:	80bf8b26 	beq	r16,r2,1000d90c <__alt_data_end+0xf800d90c>
1000dae0:	4a402034 	orhi	r9,r9,128
1000dae4:	00800e04 	movi	r2,56
1000dae8:	1100a40e 	bge	r2,r4,1000dd7c <__adddf3+0x4ec>
1000daec:	498cb03a 	or	r6,r9,r6
1000daf0:	300ac03a 	cmpne	r5,r6,zero
1000daf4:	0013883a 	mov	r9,zero
1000daf8:	2c4b883a 	add	r5,r5,r17
1000dafc:	2c63803a 	cmpltu	r17,r5,r17
1000db00:	4a11883a 	add	r8,r9,r8
1000db04:	8a11883a 	add	r8,r17,r8
1000db08:	2823883a 	mov	r17,r5
1000db0c:	4080202c 	andhi	r2,r8,128
1000db10:	103fe026 	beq	r2,zero,1000da94 <__alt_data_end+0xf800da94>
1000db14:	84000044 	addi	r16,r16,1
1000db18:	0081ffc4 	movi	r2,2047
1000db1c:	8080d226 	beq	r16,r2,1000de68 <__adddf3+0x5d8>
1000db20:	00bfe034 	movhi	r2,65408
1000db24:	10bfffc4 	addi	r2,r2,-1
1000db28:	4090703a 	and	r8,r8,r2
1000db2c:	880ad07a 	srli	r5,r17,1
1000db30:	400897fa 	slli	r4,r8,31
1000db34:	88c0004c 	andi	r3,r17,1
1000db38:	28e2b03a 	or	r17,r5,r3
1000db3c:	4010d07a 	srli	r8,r8,1
1000db40:	2462b03a 	or	r17,r4,r17
1000db44:	003f7106 	br	1000d90c <__alt_data_end+0xf800d90c>
1000db48:	4088b03a 	or	r4,r8,r2
1000db4c:	20014526 	beq	r4,zero,1000e064 <__adddf3+0x7d4>
1000db50:	01000434 	movhi	r4,16
1000db54:	42000234 	orhi	r8,r8,8
1000db58:	213fffc4 	addi	r4,r4,-1
1000db5c:	4110703a 	and	r8,r8,r4
1000db60:	003f8206 	br	1000d96c <__alt_data_end+0xf800d96c>
1000db64:	18ffffc4 	addi	r3,r3,-1
1000db68:	1800491e 	bne	r3,zero,1000dc90 <__adddf3+0x400>
1000db6c:	898bc83a 	sub	r5,r17,r6
1000db70:	8963803a 	cmpltu	r17,r17,r5
1000db74:	4251c83a 	sub	r8,r8,r9
1000db78:	4451c83a 	sub	r8,r8,r17
1000db7c:	2823883a 	mov	r17,r5
1000db80:	003f9f06 	br	1000da00 <__alt_data_end+0xf800da00>
1000db84:	4984b03a 	or	r2,r9,r6
1000db88:	103f6026 	beq	r2,zero,1000d90c <__alt_data_end+0xf800d90c>
1000db8c:	213fffc4 	addi	r4,r4,-1
1000db90:	2000931e 	bne	r4,zero,1000dde0 <__adddf3+0x550>
1000db94:	898d883a 	add	r6,r17,r6
1000db98:	3463803a 	cmpltu	r17,r6,r17
1000db9c:	4251883a 	add	r8,r8,r9
1000dba0:	8a11883a 	add	r8,r17,r8
1000dba4:	3023883a 	mov	r17,r6
1000dba8:	003fd806 	br	1000db0c <__alt_data_end+0xf800db0c>
1000dbac:	1800541e 	bne	r3,zero,1000dd00 <__adddf3+0x470>
1000dbb0:	80800044 	addi	r2,r16,1
1000dbb4:	1081ffcc 	andi	r2,r2,2047
1000dbb8:	00c00044 	movi	r3,1
1000dbbc:	1880a00e 	bge	r3,r2,1000de40 <__adddf3+0x5b0>
1000dbc0:	8989c83a 	sub	r4,r17,r6
1000dbc4:	8905803a 	cmpltu	r2,r17,r4
1000dbc8:	4267c83a 	sub	r19,r8,r9
1000dbcc:	98a7c83a 	sub	r19,r19,r2
1000dbd0:	9880202c 	andhi	r2,r19,128
1000dbd4:	10006326 	beq	r2,zero,1000dd64 <__adddf3+0x4d4>
1000dbd8:	3463c83a 	sub	r17,r6,r17
1000dbdc:	4a07c83a 	sub	r3,r9,r8
1000dbe0:	344d803a 	cmpltu	r6,r6,r17
1000dbe4:	19a7c83a 	sub	r19,r3,r6
1000dbe8:	3825883a 	mov	r18,r7
1000dbec:	983f8a1e 	bne	r19,zero,1000da18 <__alt_data_end+0xf800da18>
1000dbf0:	8809883a 	mov	r4,r17
1000dbf4:	00100d00 	call	100100d0 <__clzsi2>
1000dbf8:	10800804 	addi	r2,r2,32
1000dbfc:	10fffe04 	addi	r3,r2,-8
1000dc00:	010007c4 	movi	r4,31
1000dc04:	20ff890e 	bge	r4,r3,1000da2c <__alt_data_end+0xf800da2c>
1000dc08:	10bff604 	addi	r2,r2,-40
1000dc0c:	8884983a 	sll	r2,r17,r2
1000dc10:	0023883a 	mov	r17,zero
1000dc14:	1c3f8c0e 	bge	r3,r16,1000da48 <__alt_data_end+0xf800da48>
1000dc18:	023fe034 	movhi	r8,65408
1000dc1c:	423fffc4 	addi	r8,r8,-1
1000dc20:	80e1c83a 	sub	r16,r16,r3
1000dc24:	1210703a 	and	r8,r2,r8
1000dc28:	003f3806 	br	1000d90c <__alt_data_end+0xf800d90c>
1000dc2c:	9007883a 	mov	r3,r18
1000dc30:	0011883a 	mov	r8,zero
1000dc34:	0005883a 	mov	r2,zero
1000dc38:	003f4c06 	br	1000d96c <__alt_data_end+0xf800d96c>
1000dc3c:	498cb03a 	or	r6,r9,r6
1000dc40:	300cc03a 	cmpne	r6,r6,zero
1000dc44:	0007883a 	mov	r3,zero
1000dc48:	003f6806 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000dc4c:	20009c1e 	bne	r4,zero,1000dec0 <__adddf3+0x630>
1000dc50:	80800044 	addi	r2,r16,1
1000dc54:	1141ffcc 	andi	r5,r2,2047
1000dc58:	01000044 	movi	r4,1
1000dc5c:	2140670e 	bge	r4,r5,1000ddfc <__adddf3+0x56c>
1000dc60:	0101ffc4 	movi	r4,2047
1000dc64:	11007f26 	beq	r2,r4,1000de64 <__adddf3+0x5d4>
1000dc68:	898d883a 	add	r6,r17,r6
1000dc6c:	4247883a 	add	r3,r8,r9
1000dc70:	3451803a 	cmpltu	r8,r6,r17
1000dc74:	40d1883a 	add	r8,r8,r3
1000dc78:	402297fa 	slli	r17,r8,31
1000dc7c:	300cd07a 	srli	r6,r6,1
1000dc80:	4010d07a 	srli	r8,r8,1
1000dc84:	1021883a 	mov	r16,r2
1000dc88:	89a2b03a 	or	r17,r17,r6
1000dc8c:	003f1f06 	br	1000d90c <__alt_data_end+0xf800d90c>
1000dc90:	0081ffc4 	movi	r2,2047
1000dc94:	80bf481e 	bne	r16,r2,1000d9b8 <__alt_data_end+0xf800d9b8>
1000dc98:	003f1c06 	br	1000d90c <__alt_data_end+0xf800d90c>
1000dc9c:	843ff844 	addi	r16,r16,-31
1000dca0:	01000804 	movi	r4,32
1000dca4:	1406d83a 	srl	r3,r2,r16
1000dca8:	41005026 	beq	r8,r4,1000ddec <__adddf3+0x55c>
1000dcac:	01001004 	movi	r4,64
1000dcb0:	2211c83a 	sub	r8,r4,r8
1000dcb4:	1204983a 	sll	r2,r2,r8
1000dcb8:	88a2b03a 	or	r17,r17,r2
1000dcbc:	8822c03a 	cmpne	r17,r17,zero
1000dcc0:	1c62b03a 	or	r17,r3,r17
1000dcc4:	0011883a 	mov	r8,zero
1000dcc8:	0021883a 	mov	r16,zero
1000dccc:	003f7106 	br	1000da94 <__alt_data_end+0xf800da94>
1000dcd0:	193ff804 	addi	r4,r3,-32
1000dcd4:	00800804 	movi	r2,32
1000dcd8:	4908d83a 	srl	r4,r9,r4
1000dcdc:	18804526 	beq	r3,r2,1000ddf4 <__adddf3+0x564>
1000dce0:	00801004 	movi	r2,64
1000dce4:	10c5c83a 	sub	r2,r2,r3
1000dce8:	4886983a 	sll	r3,r9,r2
1000dcec:	198cb03a 	or	r6,r3,r6
1000dcf0:	300cc03a 	cmpne	r6,r6,zero
1000dcf4:	218cb03a 	or	r6,r4,r6
1000dcf8:	0007883a 	mov	r3,zero
1000dcfc:	003f3b06 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000dd00:	80002a26 	beq	r16,zero,1000ddac <__adddf3+0x51c>
1000dd04:	0101ffc4 	movi	r4,2047
1000dd08:	11006826 	beq	r2,r4,1000deac <__adddf3+0x61c>
1000dd0c:	00c7c83a 	sub	r3,zero,r3
1000dd10:	42002034 	orhi	r8,r8,128
1000dd14:	01000e04 	movi	r4,56
1000dd18:	20c07c16 	blt	r4,r3,1000df0c <__adddf3+0x67c>
1000dd1c:	010007c4 	movi	r4,31
1000dd20:	20c0da16 	blt	r4,r3,1000e08c <__adddf3+0x7fc>
1000dd24:	01000804 	movi	r4,32
1000dd28:	20c9c83a 	sub	r4,r4,r3
1000dd2c:	4114983a 	sll	r10,r8,r4
1000dd30:	88cad83a 	srl	r5,r17,r3
1000dd34:	8908983a 	sll	r4,r17,r4
1000dd38:	40c6d83a 	srl	r3,r8,r3
1000dd3c:	5162b03a 	or	r17,r10,r5
1000dd40:	2008c03a 	cmpne	r4,r4,zero
1000dd44:	8922b03a 	or	r17,r17,r4
1000dd48:	3463c83a 	sub	r17,r6,r17
1000dd4c:	48c7c83a 	sub	r3,r9,r3
1000dd50:	344d803a 	cmpltu	r6,r6,r17
1000dd54:	1991c83a 	sub	r8,r3,r6
1000dd58:	1021883a 	mov	r16,r2
1000dd5c:	3825883a 	mov	r18,r7
1000dd60:	003f2706 	br	1000da00 <__alt_data_end+0xf800da00>
1000dd64:	24d0b03a 	or	r8,r4,r19
1000dd68:	40001b1e 	bne	r8,zero,1000ddd8 <__adddf3+0x548>
1000dd6c:	0005883a 	mov	r2,zero
1000dd70:	0007883a 	mov	r3,zero
1000dd74:	0021883a 	mov	r16,zero
1000dd78:	003f4d06 	br	1000dab0 <__alt_data_end+0xf800dab0>
1000dd7c:	008007c4 	movi	r2,31
1000dd80:	11003c16 	blt	r2,r4,1000de74 <__adddf3+0x5e4>
1000dd84:	00800804 	movi	r2,32
1000dd88:	1105c83a 	sub	r2,r2,r4
1000dd8c:	488e983a 	sll	r7,r9,r2
1000dd90:	310ad83a 	srl	r5,r6,r4
1000dd94:	3084983a 	sll	r2,r6,r2
1000dd98:	4912d83a 	srl	r9,r9,r4
1000dd9c:	394ab03a 	or	r5,r7,r5
1000dda0:	1004c03a 	cmpne	r2,r2,zero
1000dda4:	288ab03a 	or	r5,r5,r2
1000dda8:	003f5306 	br	1000daf8 <__alt_data_end+0xf800daf8>
1000ddac:	4448b03a 	or	r4,r8,r17
1000ddb0:	20003e26 	beq	r4,zero,1000deac <__adddf3+0x61c>
1000ddb4:	00c6303a 	nor	r3,zero,r3
1000ddb8:	18003a1e 	bne	r3,zero,1000dea4 <__adddf3+0x614>
1000ddbc:	3463c83a 	sub	r17,r6,r17
1000ddc0:	4a07c83a 	sub	r3,r9,r8
1000ddc4:	344d803a 	cmpltu	r6,r6,r17
1000ddc8:	1991c83a 	sub	r8,r3,r6
1000ddcc:	1021883a 	mov	r16,r2
1000ddd0:	3825883a 	mov	r18,r7
1000ddd4:	003f0a06 	br	1000da00 <__alt_data_end+0xf800da00>
1000ddd8:	2023883a 	mov	r17,r4
1000dddc:	003f0d06 	br	1000da14 <__alt_data_end+0xf800da14>
1000dde0:	0081ffc4 	movi	r2,2047
1000dde4:	80bf3f1e 	bne	r16,r2,1000dae4 <__alt_data_end+0xf800dae4>
1000dde8:	003ec806 	br	1000d90c <__alt_data_end+0xf800d90c>
1000ddec:	0005883a 	mov	r2,zero
1000ddf0:	003fb106 	br	1000dcb8 <__alt_data_end+0xf800dcb8>
1000ddf4:	0007883a 	mov	r3,zero
1000ddf8:	003fbc06 	br	1000dcec <__alt_data_end+0xf800dcec>
1000ddfc:	4444b03a 	or	r2,r8,r17
1000de00:	8000871e 	bne	r16,zero,1000e020 <__adddf3+0x790>
1000de04:	1000ba26 	beq	r2,zero,1000e0f0 <__adddf3+0x860>
1000de08:	4984b03a 	or	r2,r9,r6
1000de0c:	103ebf26 	beq	r2,zero,1000d90c <__alt_data_end+0xf800d90c>
1000de10:	8985883a 	add	r2,r17,r6
1000de14:	4247883a 	add	r3,r8,r9
1000de18:	1451803a 	cmpltu	r8,r2,r17
1000de1c:	40d1883a 	add	r8,r8,r3
1000de20:	40c0202c 	andhi	r3,r8,128
1000de24:	1023883a 	mov	r17,r2
1000de28:	183f1a26 	beq	r3,zero,1000da94 <__alt_data_end+0xf800da94>
1000de2c:	00bfe034 	movhi	r2,65408
1000de30:	10bfffc4 	addi	r2,r2,-1
1000de34:	2021883a 	mov	r16,r4
1000de38:	4090703a 	and	r8,r8,r2
1000de3c:	003eb306 	br	1000d90c <__alt_data_end+0xf800d90c>
1000de40:	4444b03a 	or	r2,r8,r17
1000de44:	8000291e 	bne	r16,zero,1000deec <__adddf3+0x65c>
1000de48:	10004b1e 	bne	r2,zero,1000df78 <__adddf3+0x6e8>
1000de4c:	4990b03a 	or	r8,r9,r6
1000de50:	40008b26 	beq	r8,zero,1000e080 <__adddf3+0x7f0>
1000de54:	4811883a 	mov	r8,r9
1000de58:	3023883a 	mov	r17,r6
1000de5c:	3825883a 	mov	r18,r7
1000de60:	003eaa06 	br	1000d90c <__alt_data_end+0xf800d90c>
1000de64:	1021883a 	mov	r16,r2
1000de68:	0011883a 	mov	r8,zero
1000de6c:	0005883a 	mov	r2,zero
1000de70:	003f0f06 	br	1000dab0 <__alt_data_end+0xf800dab0>
1000de74:	217ff804 	addi	r5,r4,-32
1000de78:	00800804 	movi	r2,32
1000de7c:	494ad83a 	srl	r5,r9,r5
1000de80:	20807d26 	beq	r4,r2,1000e078 <__adddf3+0x7e8>
1000de84:	00801004 	movi	r2,64
1000de88:	1109c83a 	sub	r4,r2,r4
1000de8c:	4912983a 	sll	r9,r9,r4
1000de90:	498cb03a 	or	r6,r9,r6
1000de94:	300cc03a 	cmpne	r6,r6,zero
1000de98:	298ab03a 	or	r5,r5,r6
1000de9c:	0013883a 	mov	r9,zero
1000dea0:	003f1506 	br	1000daf8 <__alt_data_end+0xf800daf8>
1000dea4:	0101ffc4 	movi	r4,2047
1000dea8:	113f9a1e 	bne	r2,r4,1000dd14 <__alt_data_end+0xf800dd14>
1000deac:	4811883a 	mov	r8,r9
1000deb0:	3023883a 	mov	r17,r6
1000deb4:	1021883a 	mov	r16,r2
1000deb8:	3825883a 	mov	r18,r7
1000debc:	003e9306 	br	1000d90c <__alt_data_end+0xf800d90c>
1000dec0:	8000161e 	bne	r16,zero,1000df1c <__adddf3+0x68c>
1000dec4:	444ab03a 	or	r5,r8,r17
1000dec8:	28005126 	beq	r5,zero,1000e010 <__adddf3+0x780>
1000decc:	0108303a 	nor	r4,zero,r4
1000ded0:	20004d1e 	bne	r4,zero,1000e008 <__adddf3+0x778>
1000ded4:	89a3883a 	add	r17,r17,r6
1000ded8:	4253883a 	add	r9,r8,r9
1000dedc:	898d803a 	cmpltu	r6,r17,r6
1000dee0:	3251883a 	add	r8,r6,r9
1000dee4:	1021883a 	mov	r16,r2
1000dee8:	003f0806 	br	1000db0c <__alt_data_end+0xf800db0c>
1000deec:	1000301e 	bne	r2,zero,1000dfb0 <__adddf3+0x720>
1000def0:	4984b03a 	or	r2,r9,r6
1000def4:	10007126 	beq	r2,zero,1000e0bc <__adddf3+0x82c>
1000def8:	4811883a 	mov	r8,r9
1000defc:	3023883a 	mov	r17,r6
1000df00:	3825883a 	mov	r18,r7
1000df04:	0401ffc4 	movi	r16,2047
1000df08:	003e8006 	br	1000d90c <__alt_data_end+0xf800d90c>
1000df0c:	4462b03a 	or	r17,r8,r17
1000df10:	8822c03a 	cmpne	r17,r17,zero
1000df14:	0007883a 	mov	r3,zero
1000df18:	003f8b06 	br	1000dd48 <__alt_data_end+0xf800dd48>
1000df1c:	0141ffc4 	movi	r5,2047
1000df20:	11403b26 	beq	r2,r5,1000e010 <__adddf3+0x780>
1000df24:	0109c83a 	sub	r4,zero,r4
1000df28:	42002034 	orhi	r8,r8,128
1000df2c:	01400e04 	movi	r5,56
1000df30:	29006716 	blt	r5,r4,1000e0d0 <__adddf3+0x840>
1000df34:	014007c4 	movi	r5,31
1000df38:	29007016 	blt	r5,r4,1000e0fc <__adddf3+0x86c>
1000df3c:	01400804 	movi	r5,32
1000df40:	290bc83a 	sub	r5,r5,r4
1000df44:	4154983a 	sll	r10,r8,r5
1000df48:	890ed83a 	srl	r7,r17,r4
1000df4c:	894a983a 	sll	r5,r17,r5
1000df50:	4108d83a 	srl	r4,r8,r4
1000df54:	51e2b03a 	or	r17,r10,r7
1000df58:	280ac03a 	cmpne	r5,r5,zero
1000df5c:	8962b03a 	or	r17,r17,r5
1000df60:	89a3883a 	add	r17,r17,r6
1000df64:	2253883a 	add	r9,r4,r9
1000df68:	898d803a 	cmpltu	r6,r17,r6
1000df6c:	3251883a 	add	r8,r6,r9
1000df70:	1021883a 	mov	r16,r2
1000df74:	003ee506 	br	1000db0c <__alt_data_end+0xf800db0c>
1000df78:	4984b03a 	or	r2,r9,r6
1000df7c:	103e6326 	beq	r2,zero,1000d90c <__alt_data_end+0xf800d90c>
1000df80:	8987c83a 	sub	r3,r17,r6
1000df84:	88c9803a 	cmpltu	r4,r17,r3
1000df88:	4245c83a 	sub	r2,r8,r9
1000df8c:	1105c83a 	sub	r2,r2,r4
1000df90:	1100202c 	andhi	r4,r2,128
1000df94:	203ebb26 	beq	r4,zero,1000da84 <__alt_data_end+0xf800da84>
1000df98:	3463c83a 	sub	r17,r6,r17
1000df9c:	4a07c83a 	sub	r3,r9,r8
1000dfa0:	344d803a 	cmpltu	r6,r6,r17
1000dfa4:	1991c83a 	sub	r8,r3,r6
1000dfa8:	3825883a 	mov	r18,r7
1000dfac:	003e5706 	br	1000d90c <__alt_data_end+0xf800d90c>
1000dfb0:	4984b03a 	or	r2,r9,r6
1000dfb4:	10002e26 	beq	r2,zero,1000e070 <__adddf3+0x7e0>
1000dfb8:	4004d0fa 	srli	r2,r8,3
1000dfbc:	8822d0fa 	srli	r17,r17,3
1000dfc0:	4010977a 	slli	r8,r8,29
1000dfc4:	10c0022c 	andhi	r3,r2,8
1000dfc8:	4462b03a 	or	r17,r8,r17
1000dfcc:	18000826 	beq	r3,zero,1000dff0 <__adddf3+0x760>
1000dfd0:	4808d0fa 	srli	r4,r9,3
1000dfd4:	20c0022c 	andhi	r3,r4,8
1000dfd8:	1800051e 	bne	r3,zero,1000dff0 <__adddf3+0x760>
1000dfdc:	300cd0fa 	srli	r6,r6,3
1000dfe0:	4806977a 	slli	r3,r9,29
1000dfe4:	2005883a 	mov	r2,r4
1000dfe8:	3825883a 	mov	r18,r7
1000dfec:	19a2b03a 	or	r17,r3,r6
1000dff0:	8810d77a 	srli	r8,r17,29
1000dff4:	100490fa 	slli	r2,r2,3
1000dff8:	882290fa 	slli	r17,r17,3
1000dffc:	0401ffc4 	movi	r16,2047
1000e000:	4090b03a 	or	r8,r8,r2
1000e004:	003e4106 	br	1000d90c <__alt_data_end+0xf800d90c>
1000e008:	0141ffc4 	movi	r5,2047
1000e00c:	117fc71e 	bne	r2,r5,1000df2c <__alt_data_end+0xf800df2c>
1000e010:	4811883a 	mov	r8,r9
1000e014:	3023883a 	mov	r17,r6
1000e018:	1021883a 	mov	r16,r2
1000e01c:	003e3b06 	br	1000d90c <__alt_data_end+0xf800d90c>
1000e020:	10002f26 	beq	r2,zero,1000e0e0 <__adddf3+0x850>
1000e024:	4984b03a 	or	r2,r9,r6
1000e028:	10001126 	beq	r2,zero,1000e070 <__adddf3+0x7e0>
1000e02c:	4004d0fa 	srli	r2,r8,3
1000e030:	8822d0fa 	srli	r17,r17,3
1000e034:	4010977a 	slli	r8,r8,29
1000e038:	10c0022c 	andhi	r3,r2,8
1000e03c:	4462b03a 	or	r17,r8,r17
1000e040:	183feb26 	beq	r3,zero,1000dff0 <__alt_data_end+0xf800dff0>
1000e044:	4808d0fa 	srli	r4,r9,3
1000e048:	20c0022c 	andhi	r3,r4,8
1000e04c:	183fe81e 	bne	r3,zero,1000dff0 <__alt_data_end+0xf800dff0>
1000e050:	300cd0fa 	srli	r6,r6,3
1000e054:	4806977a 	slli	r3,r9,29
1000e058:	2005883a 	mov	r2,r4
1000e05c:	19a2b03a 	or	r17,r3,r6
1000e060:	003fe306 	br	1000dff0 <__alt_data_end+0xf800dff0>
1000e064:	0011883a 	mov	r8,zero
1000e068:	0005883a 	mov	r2,zero
1000e06c:	003e3f06 	br	1000d96c <__alt_data_end+0xf800d96c>
1000e070:	0401ffc4 	movi	r16,2047
1000e074:	003e2506 	br	1000d90c <__alt_data_end+0xf800d90c>
1000e078:	0013883a 	mov	r9,zero
1000e07c:	003f8406 	br	1000de90 <__alt_data_end+0xf800de90>
1000e080:	0005883a 	mov	r2,zero
1000e084:	0007883a 	mov	r3,zero
1000e088:	003e8906 	br	1000dab0 <__alt_data_end+0xf800dab0>
1000e08c:	197ff804 	addi	r5,r3,-32
1000e090:	01000804 	movi	r4,32
1000e094:	414ad83a 	srl	r5,r8,r5
1000e098:	19002426 	beq	r3,r4,1000e12c <__adddf3+0x89c>
1000e09c:	01001004 	movi	r4,64
1000e0a0:	20c7c83a 	sub	r3,r4,r3
1000e0a4:	40c6983a 	sll	r3,r8,r3
1000e0a8:	1c46b03a 	or	r3,r3,r17
1000e0ac:	1806c03a 	cmpne	r3,r3,zero
1000e0b0:	28e2b03a 	or	r17,r5,r3
1000e0b4:	0007883a 	mov	r3,zero
1000e0b8:	003f2306 	br	1000dd48 <__alt_data_end+0xf800dd48>
1000e0bc:	0007883a 	mov	r3,zero
1000e0c0:	5811883a 	mov	r8,r11
1000e0c4:	00bfffc4 	movi	r2,-1
1000e0c8:	0401ffc4 	movi	r16,2047
1000e0cc:	003e7806 	br	1000dab0 <__alt_data_end+0xf800dab0>
1000e0d0:	4462b03a 	or	r17,r8,r17
1000e0d4:	8822c03a 	cmpne	r17,r17,zero
1000e0d8:	0009883a 	mov	r4,zero
1000e0dc:	003fa006 	br	1000df60 <__alt_data_end+0xf800df60>
1000e0e0:	4811883a 	mov	r8,r9
1000e0e4:	3023883a 	mov	r17,r6
1000e0e8:	0401ffc4 	movi	r16,2047
1000e0ec:	003e0706 	br	1000d90c <__alt_data_end+0xf800d90c>
1000e0f0:	4811883a 	mov	r8,r9
1000e0f4:	3023883a 	mov	r17,r6
1000e0f8:	003e0406 	br	1000d90c <__alt_data_end+0xf800d90c>
1000e0fc:	21fff804 	addi	r7,r4,-32
1000e100:	01400804 	movi	r5,32
1000e104:	41ced83a 	srl	r7,r8,r7
1000e108:	21400a26 	beq	r4,r5,1000e134 <__adddf3+0x8a4>
1000e10c:	01401004 	movi	r5,64
1000e110:	2909c83a 	sub	r4,r5,r4
1000e114:	4108983a 	sll	r4,r8,r4
1000e118:	2448b03a 	or	r4,r4,r17
1000e11c:	2008c03a 	cmpne	r4,r4,zero
1000e120:	3922b03a 	or	r17,r7,r4
1000e124:	0009883a 	mov	r4,zero
1000e128:	003f8d06 	br	1000df60 <__alt_data_end+0xf800df60>
1000e12c:	0007883a 	mov	r3,zero
1000e130:	003fdd06 	br	1000e0a8 <__alt_data_end+0xf800e0a8>
1000e134:	0009883a 	mov	r4,zero
1000e138:	003ff706 	br	1000e118 <__alt_data_end+0xf800e118>

1000e13c <__divdf3>:
1000e13c:	defff004 	addi	sp,sp,-64
1000e140:	dc800815 	stw	r18,32(sp)
1000e144:	2824d53a 	srli	r18,r5,20
1000e148:	dd800c15 	stw	r22,48(sp)
1000e14c:	282cd7fa 	srli	r22,r5,31
1000e150:	dc000615 	stw	r16,24(sp)
1000e154:	04000434 	movhi	r16,16
1000e158:	843fffc4 	addi	r16,r16,-1
1000e15c:	dfc00f15 	stw	ra,60(sp)
1000e160:	df000e15 	stw	fp,56(sp)
1000e164:	ddc00d15 	stw	r23,52(sp)
1000e168:	dd400b15 	stw	r21,44(sp)
1000e16c:	dd000a15 	stw	r20,40(sp)
1000e170:	dcc00915 	stw	r19,36(sp)
1000e174:	dc400715 	stw	r17,28(sp)
1000e178:	9481ffcc 	andi	r18,r18,2047
1000e17c:	2c20703a 	and	r16,r5,r16
1000e180:	b2003fcc 	andi	r8,r22,255
1000e184:	90006126 	beq	r18,zero,1000e30c <__divdf3+0x1d0>
1000e188:	0081ffc4 	movi	r2,2047
1000e18c:	202b883a 	mov	r21,r4
1000e190:	90803726 	beq	r18,r2,1000e270 <__divdf3+0x134>
1000e194:	80800434 	orhi	r2,r16,16
1000e198:	100490fa 	slli	r2,r2,3
1000e19c:	2020d77a 	srli	r16,r4,29
1000e1a0:	202a90fa 	slli	r21,r4,3
1000e1a4:	94bf0044 	addi	r18,r18,-1023
1000e1a8:	80a0b03a 	or	r16,r16,r2
1000e1ac:	0013883a 	mov	r9,zero
1000e1b0:	000b883a 	mov	r5,zero
1000e1b4:	3806d53a 	srli	r3,r7,20
1000e1b8:	382ed7fa 	srli	r23,r7,31
1000e1bc:	04400434 	movhi	r17,16
1000e1c0:	8c7fffc4 	addi	r17,r17,-1
1000e1c4:	18c1ffcc 	andi	r3,r3,2047
1000e1c8:	3029883a 	mov	r20,r6
1000e1cc:	3c62703a 	and	r17,r7,r17
1000e1d0:	bf003fcc 	andi	fp,r23,255
1000e1d4:	18006e26 	beq	r3,zero,1000e390 <__divdf3+0x254>
1000e1d8:	0081ffc4 	movi	r2,2047
1000e1dc:	18806626 	beq	r3,r2,1000e378 <__divdf3+0x23c>
1000e1e0:	88800434 	orhi	r2,r17,16
1000e1e4:	100490fa 	slli	r2,r2,3
1000e1e8:	3022d77a 	srli	r17,r6,29
1000e1ec:	302890fa 	slli	r20,r6,3
1000e1f0:	18ff0044 	addi	r3,r3,-1023
1000e1f4:	88a2b03a 	or	r17,r17,r2
1000e1f8:	000f883a 	mov	r7,zero
1000e1fc:	b5e6f03a 	xor	r19,r22,r23
1000e200:	3a4cb03a 	or	r6,r7,r9
1000e204:	008003c4 	movi	r2,15
1000e208:	9809883a 	mov	r4,r19
1000e20c:	90c7c83a 	sub	r3,r18,r3
1000e210:	9cc03fcc 	andi	r19,r19,255
1000e214:	11809636 	bltu	r2,r6,1000e470 <__divdf3+0x334>
1000e218:	300c90ba 	slli	r6,r6,2
1000e21c:	00840074 	movhi	r2,4097
1000e220:	10b88c04 	addi	r2,r2,-7632
1000e224:	308d883a 	add	r6,r6,r2
1000e228:	30800017 	ldw	r2,0(r6)
1000e22c:	1000683a 	jmp	r2
1000e230:	1000e470 	cmpltui	zero,r2,913
1000e234:	1000e2a8 	cmpgeui	zero,r2,906
1000e238:	1000e460 	cmpeqi	zero,r2,913
1000e23c:	1000e29c 	xori	zero,r2,906
1000e240:	1000e460 	cmpeqi	zero,r2,913
1000e244:	1000e434 	orhi	zero,r2,912
1000e248:	1000e460 	cmpeqi	zero,r2,913
1000e24c:	1000e29c 	xori	zero,r2,906
1000e250:	1000e2a8 	cmpgeui	zero,r2,906
1000e254:	1000e2a8 	cmpgeui	zero,r2,906
1000e258:	1000e434 	orhi	zero,r2,912
1000e25c:	1000e29c 	xori	zero,r2,906
1000e260:	1000e28c 	andi	zero,r2,906
1000e264:	1000e28c 	andi	zero,r2,906
1000e268:	1000e28c 	andi	zero,r2,906
1000e26c:	1000e7f8 	rdprs	zero,r2,927
1000e270:	2404b03a 	or	r2,r4,r16
1000e274:	10006c1e 	bne	r2,zero,1000e428 <__divdf3+0x2ec>
1000e278:	02400204 	movi	r9,8
1000e27c:	0021883a 	mov	r16,zero
1000e280:	002b883a 	mov	r21,zero
1000e284:	01400084 	movi	r5,2
1000e288:	003fca06 	br	1000e1b4 <__alt_data_end+0xf800e1b4>
1000e28c:	8023883a 	mov	r17,r16
1000e290:	a829883a 	mov	r20,r21
1000e294:	4039883a 	mov	fp,r8
1000e298:	280f883a 	mov	r7,r5
1000e29c:	00800084 	movi	r2,2
1000e2a0:	3881601e 	bne	r7,r2,1000e824 <__divdf3+0x6e8>
1000e2a4:	e027883a 	mov	r19,fp
1000e2a8:	9900004c 	andi	r4,r19,1
1000e2ac:	0081ffc4 	movi	r2,2047
1000e2b0:	0021883a 	mov	r16,zero
1000e2b4:	002b883a 	mov	r21,zero
1000e2b8:	1004953a 	slli	r2,r2,20
1000e2bc:	20c03fcc 	andi	r3,r4,255
1000e2c0:	01400434 	movhi	r5,16
1000e2c4:	297fffc4 	addi	r5,r5,-1
1000e2c8:	180697fa 	slli	r3,r3,31
1000e2cc:	8160703a 	and	r16,r16,r5
1000e2d0:	80a0b03a 	or	r16,r16,r2
1000e2d4:	80c6b03a 	or	r3,r16,r3
1000e2d8:	a805883a 	mov	r2,r21
1000e2dc:	dfc00f17 	ldw	ra,60(sp)
1000e2e0:	df000e17 	ldw	fp,56(sp)
1000e2e4:	ddc00d17 	ldw	r23,52(sp)
1000e2e8:	dd800c17 	ldw	r22,48(sp)
1000e2ec:	dd400b17 	ldw	r21,44(sp)
1000e2f0:	dd000a17 	ldw	r20,40(sp)
1000e2f4:	dcc00917 	ldw	r19,36(sp)
1000e2f8:	dc800817 	ldw	r18,32(sp)
1000e2fc:	dc400717 	ldw	r17,28(sp)
1000e300:	dc000617 	ldw	r16,24(sp)
1000e304:	dec01004 	addi	sp,sp,64
1000e308:	f800283a 	ret
1000e30c:	2404b03a 	or	r2,r4,r16
1000e310:	2023883a 	mov	r17,r4
1000e314:	10003f26 	beq	r2,zero,1000e414 <__divdf3+0x2d8>
1000e318:	80015e26 	beq	r16,zero,1000e894 <__divdf3+0x758>
1000e31c:	8009883a 	mov	r4,r16
1000e320:	d9800215 	stw	r6,8(sp)
1000e324:	d9c00515 	stw	r7,20(sp)
1000e328:	da000415 	stw	r8,16(sp)
1000e32c:	00100d00 	call	100100d0 <__clzsi2>
1000e330:	d9800217 	ldw	r6,8(sp)
1000e334:	d9c00517 	ldw	r7,20(sp)
1000e338:	da000417 	ldw	r8,16(sp)
1000e33c:	113ffd44 	addi	r4,r2,-11
1000e340:	00c00704 	movi	r3,28
1000e344:	19014f16 	blt	r3,r4,1000e884 <__divdf3+0x748>
1000e348:	00c00744 	movi	r3,29
1000e34c:	157ffe04 	addi	r21,r2,-8
1000e350:	1907c83a 	sub	r3,r3,r4
1000e354:	8560983a 	sll	r16,r16,r21
1000e358:	88c6d83a 	srl	r3,r17,r3
1000e35c:	8d6a983a 	sll	r21,r17,r21
1000e360:	1c20b03a 	or	r16,r3,r16
1000e364:	1080fcc4 	addi	r2,r2,1011
1000e368:	00a5c83a 	sub	r18,zero,r2
1000e36c:	0013883a 	mov	r9,zero
1000e370:	000b883a 	mov	r5,zero
1000e374:	003f8f06 	br	1000e1b4 <__alt_data_end+0xf800e1b4>
1000e378:	3444b03a 	or	r2,r6,r17
1000e37c:	1000231e 	bne	r2,zero,1000e40c <__divdf3+0x2d0>
1000e380:	0023883a 	mov	r17,zero
1000e384:	0029883a 	mov	r20,zero
1000e388:	01c00084 	movi	r7,2
1000e38c:	003f9b06 	br	1000e1fc <__alt_data_end+0xf800e1fc>
1000e390:	3444b03a 	or	r2,r6,r17
1000e394:	10001926 	beq	r2,zero,1000e3fc <__divdf3+0x2c0>
1000e398:	88014b26 	beq	r17,zero,1000e8c8 <__divdf3+0x78c>
1000e39c:	8809883a 	mov	r4,r17
1000e3a0:	d9400115 	stw	r5,4(sp)
1000e3a4:	d9800215 	stw	r6,8(sp)
1000e3a8:	da000415 	stw	r8,16(sp)
1000e3ac:	da400315 	stw	r9,12(sp)
1000e3b0:	00100d00 	call	100100d0 <__clzsi2>
1000e3b4:	d9400117 	ldw	r5,4(sp)
1000e3b8:	d9800217 	ldw	r6,8(sp)
1000e3bc:	da000417 	ldw	r8,16(sp)
1000e3c0:	da400317 	ldw	r9,12(sp)
1000e3c4:	113ffd44 	addi	r4,r2,-11
1000e3c8:	00c00704 	movi	r3,28
1000e3cc:	19013a16 	blt	r3,r4,1000e8b8 <__divdf3+0x77c>
1000e3d0:	00c00744 	movi	r3,29
1000e3d4:	153ffe04 	addi	r20,r2,-8
1000e3d8:	1907c83a 	sub	r3,r3,r4
1000e3dc:	8d22983a 	sll	r17,r17,r20
1000e3e0:	30c6d83a 	srl	r3,r6,r3
1000e3e4:	3528983a 	sll	r20,r6,r20
1000e3e8:	1c62b03a 	or	r17,r3,r17
1000e3ec:	1080fcc4 	addi	r2,r2,1011
1000e3f0:	0087c83a 	sub	r3,zero,r2
1000e3f4:	000f883a 	mov	r7,zero
1000e3f8:	003f8006 	br	1000e1fc <__alt_data_end+0xf800e1fc>
1000e3fc:	0023883a 	mov	r17,zero
1000e400:	0029883a 	mov	r20,zero
1000e404:	01c00044 	movi	r7,1
1000e408:	003f7c06 	br	1000e1fc <__alt_data_end+0xf800e1fc>
1000e40c:	01c000c4 	movi	r7,3
1000e410:	003f7a06 	br	1000e1fc <__alt_data_end+0xf800e1fc>
1000e414:	02400104 	movi	r9,4
1000e418:	0021883a 	mov	r16,zero
1000e41c:	002b883a 	mov	r21,zero
1000e420:	01400044 	movi	r5,1
1000e424:	003f6306 	br	1000e1b4 <__alt_data_end+0xf800e1b4>
1000e428:	02400304 	movi	r9,12
1000e42c:	014000c4 	movi	r5,3
1000e430:	003f6006 	br	1000e1b4 <__alt_data_end+0xf800e1b4>
1000e434:	04000434 	movhi	r16,16
1000e438:	0009883a 	mov	r4,zero
1000e43c:	843fffc4 	addi	r16,r16,-1
1000e440:	057fffc4 	movi	r21,-1
1000e444:	0081ffc4 	movi	r2,2047
1000e448:	003f9b06 	br	1000e2b8 <__alt_data_end+0xf800e2b8>
1000e44c:	00c00044 	movi	r3,1
1000e450:	1887c83a 	sub	r3,r3,r2
1000e454:	01000e04 	movi	r4,56
1000e458:	20c1530e 	bge	r4,r3,1000e9a8 <__divdf3+0x86c>
1000e45c:	9900004c 	andi	r4,r19,1
1000e460:	0005883a 	mov	r2,zero
1000e464:	0021883a 	mov	r16,zero
1000e468:	002b883a 	mov	r21,zero
1000e46c:	003f9206 	br	1000e2b8 <__alt_data_end+0xf800e2b8>
1000e470:	8c012e36 	bltu	r17,r16,1000e92c <__divdf3+0x7f0>
1000e474:	84412c26 	beq	r16,r17,1000e928 <__divdf3+0x7ec>
1000e478:	a82f883a 	mov	r23,r21
1000e47c:	18ffffc4 	addi	r3,r3,-1
1000e480:	002b883a 	mov	r21,zero
1000e484:	a004d63a 	srli	r2,r20,24
1000e488:	8822923a 	slli	r17,r17,8
1000e48c:	a028923a 	slli	r20,r20,8
1000e490:	8009883a 	mov	r4,r16
1000e494:	88acb03a 	or	r22,r17,r2
1000e498:	dd000015 	stw	r20,0(sp)
1000e49c:	b028d43a 	srli	r20,r22,16
1000e4a0:	d8c00215 	stw	r3,8(sp)
1000e4a4:	b4bfffcc 	andi	r18,r22,65535
1000e4a8:	a00b883a 	mov	r5,r20
1000e4ac:	000d7ac0 	call	1000d7ac <__udivsi3>
1000e4b0:	100b883a 	mov	r5,r2
1000e4b4:	9009883a 	mov	r4,r18
1000e4b8:	1023883a 	mov	r17,r2
1000e4bc:	000d8680 	call	1000d868 <__mulsi3>
1000e4c0:	8009883a 	mov	r4,r16
1000e4c4:	a00b883a 	mov	r5,r20
1000e4c8:	1039883a 	mov	fp,r2
1000e4cc:	000d8100 	call	1000d810 <__umodsi3>
1000e4d0:	1004943a 	slli	r2,r2,16
1000e4d4:	b808d43a 	srli	r4,r23,16
1000e4d8:	d8c00217 	ldw	r3,8(sp)
1000e4dc:	2084b03a 	or	r2,r4,r2
1000e4e0:	1700062e 	bgeu	r2,fp,1000e4fc <__divdf3+0x3c0>
1000e4e4:	1585883a 	add	r2,r2,r22
1000e4e8:	893fffc4 	addi	r4,r17,-1
1000e4ec:	15811d36 	bltu	r2,r22,1000e964 <__divdf3+0x828>
1000e4f0:	17011c2e 	bgeu	r2,fp,1000e964 <__divdf3+0x828>
1000e4f4:	8c7fff84 	addi	r17,r17,-2
1000e4f8:	1585883a 	add	r2,r2,r22
1000e4fc:	1739c83a 	sub	fp,r2,fp
1000e500:	a00b883a 	mov	r5,r20
1000e504:	e009883a 	mov	r4,fp
1000e508:	d8c00215 	stw	r3,8(sp)
1000e50c:	000d7ac0 	call	1000d7ac <__udivsi3>
1000e510:	100b883a 	mov	r5,r2
1000e514:	9009883a 	mov	r4,r18
1000e518:	1021883a 	mov	r16,r2
1000e51c:	000d8680 	call	1000d868 <__mulsi3>
1000e520:	a00b883a 	mov	r5,r20
1000e524:	e009883a 	mov	r4,fp
1000e528:	d8800415 	stw	r2,16(sp)
1000e52c:	000d8100 	call	1000d810 <__umodsi3>
1000e530:	1004943a 	slli	r2,r2,16
1000e534:	da000417 	ldw	r8,16(sp)
1000e538:	bdffffcc 	andi	r23,r23,65535
1000e53c:	b884b03a 	or	r2,r23,r2
1000e540:	d8c00217 	ldw	r3,8(sp)
1000e544:	1200062e 	bgeu	r2,r8,1000e560 <__divdf3+0x424>
1000e548:	1585883a 	add	r2,r2,r22
1000e54c:	813fffc4 	addi	r4,r16,-1
1000e550:	15810236 	bltu	r2,r22,1000e95c <__divdf3+0x820>
1000e554:	1201012e 	bgeu	r2,r8,1000e95c <__divdf3+0x820>
1000e558:	843fff84 	addi	r16,r16,-2
1000e55c:	1585883a 	add	r2,r2,r22
1000e560:	8822943a 	slli	r17,r17,16
1000e564:	d9800017 	ldw	r6,0(sp)
1000e568:	1211c83a 	sub	r8,r2,r8
1000e56c:	8c22b03a 	or	r17,r17,r16
1000e570:	373fffcc 	andi	fp,r6,65535
1000e574:	8abfffcc 	andi	r10,r17,65535
1000e578:	8820d43a 	srli	r16,r17,16
1000e57c:	5009883a 	mov	r4,r10
1000e580:	e00b883a 	mov	r5,fp
1000e584:	302ed43a 	srli	r23,r6,16
1000e588:	d8c00215 	stw	r3,8(sp)
1000e58c:	da000415 	stw	r8,16(sp)
1000e590:	da800115 	stw	r10,4(sp)
1000e594:	000d8680 	call	1000d868 <__mulsi3>
1000e598:	800b883a 	mov	r5,r16
1000e59c:	e009883a 	mov	r4,fp
1000e5a0:	d8800515 	stw	r2,20(sp)
1000e5a4:	000d8680 	call	1000d868 <__mulsi3>
1000e5a8:	8009883a 	mov	r4,r16
1000e5ac:	b80b883a 	mov	r5,r23
1000e5b0:	d8800315 	stw	r2,12(sp)
1000e5b4:	000d8680 	call	1000d868 <__mulsi3>
1000e5b8:	da800117 	ldw	r10,4(sp)
1000e5bc:	b80b883a 	mov	r5,r23
1000e5c0:	1021883a 	mov	r16,r2
1000e5c4:	5009883a 	mov	r4,r10
1000e5c8:	000d8680 	call	1000d868 <__mulsi3>
1000e5cc:	d9c00517 	ldw	r7,20(sp)
1000e5d0:	da400317 	ldw	r9,12(sp)
1000e5d4:	d8c00217 	ldw	r3,8(sp)
1000e5d8:	3808d43a 	srli	r4,r7,16
1000e5dc:	1245883a 	add	r2,r2,r9
1000e5e0:	da000417 	ldw	r8,16(sp)
1000e5e4:	2085883a 	add	r2,r4,r2
1000e5e8:	1240022e 	bgeu	r2,r9,1000e5f4 <__divdf3+0x4b8>
1000e5ec:	01000074 	movhi	r4,1
1000e5f0:	8121883a 	add	r16,r16,r4
1000e5f4:	1008d43a 	srli	r4,r2,16
1000e5f8:	1004943a 	slli	r2,r2,16
1000e5fc:	39ffffcc 	andi	r7,r7,65535
1000e600:	2409883a 	add	r4,r4,r16
1000e604:	11c5883a 	add	r2,r2,r7
1000e608:	4100bb36 	bltu	r8,r4,1000e8f8 <__divdf3+0x7bc>
1000e60c:	4100d726 	beq	r8,r4,1000e96c <__divdf3+0x830>
1000e610:	4109c83a 	sub	r4,r8,r4
1000e614:	a8a1c83a 	sub	r16,r21,r2
1000e618:	ac2b803a 	cmpltu	r21,r21,r16
1000e61c:	256bc83a 	sub	r21,r4,r21
1000e620:	b540d926 	beq	r22,r21,1000e988 <__divdf3+0x84c>
1000e624:	a00b883a 	mov	r5,r20
1000e628:	a809883a 	mov	r4,r21
1000e62c:	d8c00215 	stw	r3,8(sp)
1000e630:	000d7ac0 	call	1000d7ac <__udivsi3>
1000e634:	100b883a 	mov	r5,r2
1000e638:	9009883a 	mov	r4,r18
1000e63c:	d8800515 	stw	r2,20(sp)
1000e640:	000d8680 	call	1000d868 <__mulsi3>
1000e644:	a809883a 	mov	r4,r21
1000e648:	a00b883a 	mov	r5,r20
1000e64c:	d8800415 	stw	r2,16(sp)
1000e650:	000d8100 	call	1000d810 <__umodsi3>
1000e654:	1004943a 	slli	r2,r2,16
1000e658:	8008d43a 	srli	r4,r16,16
1000e65c:	da000417 	ldw	r8,16(sp)
1000e660:	d8c00217 	ldw	r3,8(sp)
1000e664:	2084b03a 	or	r2,r4,r2
1000e668:	d9c00517 	ldw	r7,20(sp)
1000e66c:	1200062e 	bgeu	r2,r8,1000e688 <__divdf3+0x54c>
1000e670:	1585883a 	add	r2,r2,r22
1000e674:	393fffc4 	addi	r4,r7,-1
1000e678:	1580c536 	bltu	r2,r22,1000e990 <__divdf3+0x854>
1000e67c:	1200c42e 	bgeu	r2,r8,1000e990 <__divdf3+0x854>
1000e680:	39ffff84 	addi	r7,r7,-2
1000e684:	1585883a 	add	r2,r2,r22
1000e688:	122bc83a 	sub	r21,r2,r8
1000e68c:	a00b883a 	mov	r5,r20
1000e690:	a809883a 	mov	r4,r21
1000e694:	d8c00215 	stw	r3,8(sp)
1000e698:	d9c00515 	stw	r7,20(sp)
1000e69c:	000d7ac0 	call	1000d7ac <__udivsi3>
1000e6a0:	9009883a 	mov	r4,r18
1000e6a4:	100b883a 	mov	r5,r2
1000e6a8:	d8800415 	stw	r2,16(sp)
1000e6ac:	000d8680 	call	1000d868 <__mulsi3>
1000e6b0:	a809883a 	mov	r4,r21
1000e6b4:	a00b883a 	mov	r5,r20
1000e6b8:	1025883a 	mov	r18,r2
1000e6bc:	000d8100 	call	1000d810 <__umodsi3>
1000e6c0:	1004943a 	slli	r2,r2,16
1000e6c4:	813fffcc 	andi	r4,r16,65535
1000e6c8:	d8c00217 	ldw	r3,8(sp)
1000e6cc:	20a0b03a 	or	r16,r4,r2
1000e6d0:	d9c00517 	ldw	r7,20(sp)
1000e6d4:	da000417 	ldw	r8,16(sp)
1000e6d8:	8480062e 	bgeu	r16,r18,1000e6f4 <__divdf3+0x5b8>
1000e6dc:	85a1883a 	add	r16,r16,r22
1000e6e0:	40bfffc4 	addi	r2,r8,-1
1000e6e4:	8580ac36 	bltu	r16,r22,1000e998 <__divdf3+0x85c>
1000e6e8:	8480ab2e 	bgeu	r16,r18,1000e998 <__divdf3+0x85c>
1000e6ec:	423fff84 	addi	r8,r8,-2
1000e6f0:	85a1883a 	add	r16,r16,r22
1000e6f4:	3804943a 	slli	r2,r7,16
1000e6f8:	84a1c83a 	sub	r16,r16,r18
1000e6fc:	e009883a 	mov	r4,fp
1000e700:	1228b03a 	or	r20,r2,r8
1000e704:	a1ffffcc 	andi	r7,r20,65535
1000e708:	a024d43a 	srli	r18,r20,16
1000e70c:	380b883a 	mov	r5,r7
1000e710:	d8c00215 	stw	r3,8(sp)
1000e714:	d9c00515 	stw	r7,20(sp)
1000e718:	000d8680 	call	1000d868 <__mulsi3>
1000e71c:	900b883a 	mov	r5,r18
1000e720:	e009883a 	mov	r4,fp
1000e724:	102b883a 	mov	r21,r2
1000e728:	000d8680 	call	1000d868 <__mulsi3>
1000e72c:	900b883a 	mov	r5,r18
1000e730:	b809883a 	mov	r4,r23
1000e734:	1039883a 	mov	fp,r2
1000e738:	000d8680 	call	1000d868 <__mulsi3>
1000e73c:	d9c00517 	ldw	r7,20(sp)
1000e740:	b80b883a 	mov	r5,r23
1000e744:	1025883a 	mov	r18,r2
1000e748:	3809883a 	mov	r4,r7
1000e74c:	000d8680 	call	1000d868 <__mulsi3>
1000e750:	a808d43a 	srli	r4,r21,16
1000e754:	1705883a 	add	r2,r2,fp
1000e758:	d8c00217 	ldw	r3,8(sp)
1000e75c:	2085883a 	add	r2,r4,r2
1000e760:	1700022e 	bgeu	r2,fp,1000e76c <__divdf3+0x630>
1000e764:	01000074 	movhi	r4,1
1000e768:	9125883a 	add	r18,r18,r4
1000e76c:	1008d43a 	srli	r4,r2,16
1000e770:	1004943a 	slli	r2,r2,16
1000e774:	ad7fffcc 	andi	r21,r21,65535
1000e778:	2489883a 	add	r4,r4,r18
1000e77c:	1545883a 	add	r2,r2,r21
1000e780:	81003836 	bltu	r16,r4,1000e864 <__divdf3+0x728>
1000e784:	81003626 	beq	r16,r4,1000e860 <__divdf3+0x724>
1000e788:	a5000054 	ori	r20,r20,1
1000e78c:	1880ffc4 	addi	r2,r3,1023
1000e790:	00bf2e0e 	bge	zero,r2,1000e44c <__alt_data_end+0xf800e44c>
1000e794:	a10001cc 	andi	r4,r20,7
1000e798:	20000726 	beq	r4,zero,1000e7b8 <__divdf3+0x67c>
1000e79c:	a10003cc 	andi	r4,r20,15
1000e7a0:	01400104 	movi	r5,4
1000e7a4:	21400426 	beq	r4,r5,1000e7b8 <__divdf3+0x67c>
1000e7a8:	a149883a 	add	r4,r20,r5
1000e7ac:	2529803a 	cmpltu	r20,r4,r20
1000e7b0:	8d23883a 	add	r17,r17,r20
1000e7b4:	2029883a 	mov	r20,r4
1000e7b8:	8900402c 	andhi	r4,r17,256
1000e7bc:	20000426 	beq	r4,zero,1000e7d0 <__divdf3+0x694>
1000e7c0:	18810004 	addi	r2,r3,1024
1000e7c4:	00ffc034 	movhi	r3,65280
1000e7c8:	18ffffc4 	addi	r3,r3,-1
1000e7cc:	88e2703a 	and	r17,r17,r3
1000e7d0:	00c1ff84 	movi	r3,2046
1000e7d4:	18beb416 	blt	r3,r2,1000e2a8 <__alt_data_end+0xf800e2a8>
1000e7d8:	a028d0fa 	srli	r20,r20,3
1000e7dc:	882a977a 	slli	r21,r17,29
1000e7e0:	8820927a 	slli	r16,r17,9
1000e7e4:	1081ffcc 	andi	r2,r2,2047
1000e7e8:	ad2ab03a 	or	r21,r21,r20
1000e7ec:	8020d33a 	srli	r16,r16,12
1000e7f0:	9900004c 	andi	r4,r19,1
1000e7f4:	003eb006 	br	1000e2b8 <__alt_data_end+0xf800e2b8>
1000e7f8:	8080022c 	andhi	r2,r16,8
1000e7fc:	10001226 	beq	r2,zero,1000e848 <__divdf3+0x70c>
1000e800:	8880022c 	andhi	r2,r17,8
1000e804:	1000101e 	bne	r2,zero,1000e848 <__divdf3+0x70c>
1000e808:	00800434 	movhi	r2,16
1000e80c:	8c000234 	orhi	r16,r17,8
1000e810:	10bfffc4 	addi	r2,r2,-1
1000e814:	b809883a 	mov	r4,r23
1000e818:	80a0703a 	and	r16,r16,r2
1000e81c:	a02b883a 	mov	r21,r20
1000e820:	003f0806 	br	1000e444 <__alt_data_end+0xf800e444>
1000e824:	008000c4 	movi	r2,3
1000e828:	3880b126 	beq	r7,r2,1000eaf0 <__divdf3+0x9b4>
1000e82c:	00800044 	movi	r2,1
1000e830:	38805b1e 	bne	r7,r2,1000e9a0 <__divdf3+0x864>
1000e834:	e009883a 	mov	r4,fp
1000e838:	0005883a 	mov	r2,zero
1000e83c:	0021883a 	mov	r16,zero
1000e840:	002b883a 	mov	r21,zero
1000e844:	003e9c06 	br	1000e2b8 <__alt_data_end+0xf800e2b8>
1000e848:	00800434 	movhi	r2,16
1000e84c:	84000234 	orhi	r16,r16,8
1000e850:	10bfffc4 	addi	r2,r2,-1
1000e854:	b009883a 	mov	r4,r22
1000e858:	80a0703a 	and	r16,r16,r2
1000e85c:	003ef906 	br	1000e444 <__alt_data_end+0xf800e444>
1000e860:	103fca26 	beq	r2,zero,1000e78c <__alt_data_end+0xf800e78c>
1000e864:	b421883a 	add	r16,r22,r16
1000e868:	a17fffc4 	addi	r5,r20,-1
1000e86c:	8580422e 	bgeu	r16,r22,1000e978 <__divdf3+0x83c>
1000e870:	2829883a 	mov	r20,r5
1000e874:	813fc41e 	bne	r16,r4,1000e788 <__alt_data_end+0xf800e788>
1000e878:	d9800017 	ldw	r6,0(sp)
1000e87c:	30bfc21e 	bne	r6,r2,1000e788 <__alt_data_end+0xf800e788>
1000e880:	003fc206 	br	1000e78c <__alt_data_end+0xf800e78c>
1000e884:	143ff604 	addi	r16,r2,-40
1000e888:	8c20983a 	sll	r16,r17,r16
1000e88c:	002b883a 	mov	r21,zero
1000e890:	003eb406 	br	1000e364 <__alt_data_end+0xf800e364>
1000e894:	d9800215 	stw	r6,8(sp)
1000e898:	d9c00515 	stw	r7,20(sp)
1000e89c:	da000415 	stw	r8,16(sp)
1000e8a0:	00100d00 	call	100100d0 <__clzsi2>
1000e8a4:	10800804 	addi	r2,r2,32
1000e8a8:	da000417 	ldw	r8,16(sp)
1000e8ac:	d9c00517 	ldw	r7,20(sp)
1000e8b0:	d9800217 	ldw	r6,8(sp)
1000e8b4:	003ea106 	br	1000e33c <__alt_data_end+0xf800e33c>
1000e8b8:	147ff604 	addi	r17,r2,-40
1000e8bc:	3462983a 	sll	r17,r6,r17
1000e8c0:	0029883a 	mov	r20,zero
1000e8c4:	003ec906 	br	1000e3ec <__alt_data_end+0xf800e3ec>
1000e8c8:	3009883a 	mov	r4,r6
1000e8cc:	d9400115 	stw	r5,4(sp)
1000e8d0:	d9800215 	stw	r6,8(sp)
1000e8d4:	da000415 	stw	r8,16(sp)
1000e8d8:	da400315 	stw	r9,12(sp)
1000e8dc:	00100d00 	call	100100d0 <__clzsi2>
1000e8e0:	10800804 	addi	r2,r2,32
1000e8e4:	da400317 	ldw	r9,12(sp)
1000e8e8:	da000417 	ldw	r8,16(sp)
1000e8ec:	d9800217 	ldw	r6,8(sp)
1000e8f0:	d9400117 	ldw	r5,4(sp)
1000e8f4:	003eb306 	br	1000e3c4 <__alt_data_end+0xf800e3c4>
1000e8f8:	d9800017 	ldw	r6,0(sp)
1000e8fc:	a9ab883a 	add	r21,r21,r6
1000e900:	a98b803a 	cmpltu	r5,r21,r6
1000e904:	2d8b883a 	add	r5,r5,r22
1000e908:	2a11883a 	add	r8,r5,r8
1000e90c:	897fffc4 	addi	r5,r17,-1
1000e910:	b2000c2e 	bgeu	r22,r8,1000e944 <__divdf3+0x808>
1000e914:	41003f36 	bltu	r8,r4,1000ea14 <__divdf3+0x8d8>
1000e918:	22006c26 	beq	r4,r8,1000eacc <__divdf3+0x990>
1000e91c:	4109c83a 	sub	r4,r8,r4
1000e920:	2823883a 	mov	r17,r5
1000e924:	003f3b06 	br	1000e614 <__alt_data_end+0xf800e614>
1000e928:	ad3ed336 	bltu	r21,r20,1000e478 <__alt_data_end+0xf800e478>
1000e92c:	a804d07a 	srli	r2,r21,1
1000e930:	802e97fa 	slli	r23,r16,31
1000e934:	a82a97fa 	slli	r21,r21,31
1000e938:	8020d07a 	srli	r16,r16,1
1000e93c:	b8aeb03a 	or	r23,r23,r2
1000e940:	003ed006 	br	1000e484 <__alt_data_end+0xf800e484>
1000e944:	b23ff51e 	bne	r22,r8,1000e91c <__alt_data_end+0xf800e91c>
1000e948:	d9800017 	ldw	r6,0(sp)
1000e94c:	a9bff12e 	bgeu	r21,r6,1000e914 <__alt_data_end+0xf800e914>
1000e950:	b109c83a 	sub	r4,r22,r4
1000e954:	2823883a 	mov	r17,r5
1000e958:	003f2e06 	br	1000e614 <__alt_data_end+0xf800e614>
1000e95c:	2021883a 	mov	r16,r4
1000e960:	003eff06 	br	1000e560 <__alt_data_end+0xf800e560>
1000e964:	2023883a 	mov	r17,r4
1000e968:	003ee406 	br	1000e4fc <__alt_data_end+0xf800e4fc>
1000e96c:	a8bfe236 	bltu	r21,r2,1000e8f8 <__alt_data_end+0xf800e8f8>
1000e970:	0009883a 	mov	r4,zero
1000e974:	003f2706 	br	1000e614 <__alt_data_end+0xf800e614>
1000e978:	81002d36 	bltu	r16,r4,1000ea30 <__divdf3+0x8f4>
1000e97c:	24005626 	beq	r4,r16,1000ead8 <__divdf3+0x99c>
1000e980:	2829883a 	mov	r20,r5
1000e984:	003f8006 	br	1000e788 <__alt_data_end+0xf800e788>
1000e988:	053fffc4 	movi	r20,-1
1000e98c:	003f7f06 	br	1000e78c <__alt_data_end+0xf800e78c>
1000e990:	200f883a 	mov	r7,r4
1000e994:	003f3c06 	br	1000e688 <__alt_data_end+0xf800e688>
1000e998:	1011883a 	mov	r8,r2
1000e99c:	003f5506 	br	1000e6f4 <__alt_data_end+0xf800e6f4>
1000e9a0:	e027883a 	mov	r19,fp
1000e9a4:	003f7906 	br	1000e78c <__alt_data_end+0xf800e78c>
1000e9a8:	010007c4 	movi	r4,31
1000e9ac:	20c02816 	blt	r4,r3,1000ea50 <__divdf3+0x914>
1000e9b0:	00800804 	movi	r2,32
1000e9b4:	10c5c83a 	sub	r2,r2,r3
1000e9b8:	888a983a 	sll	r5,r17,r2
1000e9bc:	a0c8d83a 	srl	r4,r20,r3
1000e9c0:	a084983a 	sll	r2,r20,r2
1000e9c4:	88e2d83a 	srl	r17,r17,r3
1000e9c8:	2906b03a 	or	r3,r5,r4
1000e9cc:	1004c03a 	cmpne	r2,r2,zero
1000e9d0:	1886b03a 	or	r3,r3,r2
1000e9d4:	188001cc 	andi	r2,r3,7
1000e9d8:	10000726 	beq	r2,zero,1000e9f8 <__divdf3+0x8bc>
1000e9dc:	188003cc 	andi	r2,r3,15
1000e9e0:	01000104 	movi	r4,4
1000e9e4:	11000426 	beq	r2,r4,1000e9f8 <__divdf3+0x8bc>
1000e9e8:	1805883a 	mov	r2,r3
1000e9ec:	10c00104 	addi	r3,r2,4
1000e9f0:	1885803a 	cmpltu	r2,r3,r2
1000e9f4:	88a3883a 	add	r17,r17,r2
1000e9f8:	8880202c 	andhi	r2,r17,128
1000e9fc:	10002926 	beq	r2,zero,1000eaa4 <__divdf3+0x968>
1000ea00:	9900004c 	andi	r4,r19,1
1000ea04:	00800044 	movi	r2,1
1000ea08:	0021883a 	mov	r16,zero
1000ea0c:	002b883a 	mov	r21,zero
1000ea10:	003e2906 	br	1000e2b8 <__alt_data_end+0xf800e2b8>
1000ea14:	d9800017 	ldw	r6,0(sp)
1000ea18:	8c7fff84 	addi	r17,r17,-2
1000ea1c:	a9ab883a 	add	r21,r21,r6
1000ea20:	a98b803a 	cmpltu	r5,r21,r6
1000ea24:	2d8b883a 	add	r5,r5,r22
1000ea28:	2a11883a 	add	r8,r5,r8
1000ea2c:	003ef806 	br	1000e610 <__alt_data_end+0xf800e610>
1000ea30:	d9800017 	ldw	r6,0(sp)
1000ea34:	318f883a 	add	r7,r6,r6
1000ea38:	398b803a 	cmpltu	r5,r7,r6
1000ea3c:	2d8d883a 	add	r6,r5,r22
1000ea40:	81a1883a 	add	r16,r16,r6
1000ea44:	a17fff84 	addi	r5,r20,-2
1000ea48:	d9c00015 	stw	r7,0(sp)
1000ea4c:	003f8806 	br	1000e870 <__alt_data_end+0xf800e870>
1000ea50:	013ff844 	movi	r4,-31
1000ea54:	2085c83a 	sub	r2,r4,r2
1000ea58:	8888d83a 	srl	r4,r17,r2
1000ea5c:	00800804 	movi	r2,32
1000ea60:	18802126 	beq	r3,r2,1000eae8 <__divdf3+0x9ac>
1000ea64:	04001004 	movi	r16,64
1000ea68:	80c7c83a 	sub	r3,r16,r3
1000ea6c:	88e0983a 	sll	r16,r17,r3
1000ea70:	8504b03a 	or	r2,r16,r20
1000ea74:	1004c03a 	cmpne	r2,r2,zero
1000ea78:	2084b03a 	or	r2,r4,r2
1000ea7c:	144001cc 	andi	r17,r2,7
1000ea80:	88000d1e 	bne	r17,zero,1000eab8 <__divdf3+0x97c>
1000ea84:	0021883a 	mov	r16,zero
1000ea88:	102ad0fa 	srli	r21,r2,3
1000ea8c:	9900004c 	andi	r4,r19,1
1000ea90:	0005883a 	mov	r2,zero
1000ea94:	ac6ab03a 	or	r21,r21,r17
1000ea98:	003e0706 	br	1000e2b8 <__alt_data_end+0xf800e2b8>
1000ea9c:	1007883a 	mov	r3,r2
1000eaa0:	0023883a 	mov	r17,zero
1000eaa4:	8820927a 	slli	r16,r17,9
1000eaa8:	1805883a 	mov	r2,r3
1000eaac:	8822977a 	slli	r17,r17,29
1000eab0:	8020d33a 	srli	r16,r16,12
1000eab4:	003ff406 	br	1000ea88 <__alt_data_end+0xf800ea88>
1000eab8:	10c003cc 	andi	r3,r2,15
1000eabc:	01000104 	movi	r4,4
1000eac0:	193ff626 	beq	r3,r4,1000ea9c <__alt_data_end+0xf800ea9c>
1000eac4:	0023883a 	mov	r17,zero
1000eac8:	003fc806 	br	1000e9ec <__alt_data_end+0xf800e9ec>
1000eacc:	a8bfd136 	bltu	r21,r2,1000ea14 <__alt_data_end+0xf800ea14>
1000ead0:	2823883a 	mov	r17,r5
1000ead4:	003fa606 	br	1000e970 <__alt_data_end+0xf800e970>
1000ead8:	d9800017 	ldw	r6,0(sp)
1000eadc:	30bfd436 	bltu	r6,r2,1000ea30 <__alt_data_end+0xf800ea30>
1000eae0:	2829883a 	mov	r20,r5
1000eae4:	003f6406 	br	1000e878 <__alt_data_end+0xf800e878>
1000eae8:	0021883a 	mov	r16,zero
1000eaec:	003fe006 	br	1000ea70 <__alt_data_end+0xf800ea70>
1000eaf0:	00800434 	movhi	r2,16
1000eaf4:	8c000234 	orhi	r16,r17,8
1000eaf8:	10bfffc4 	addi	r2,r2,-1
1000eafc:	e009883a 	mov	r4,fp
1000eb00:	80a0703a 	and	r16,r16,r2
1000eb04:	a02b883a 	mov	r21,r20
1000eb08:	003e4e06 	br	1000e444 <__alt_data_end+0xf800e444>

1000eb0c <__eqdf2>:
1000eb0c:	2804d53a 	srli	r2,r5,20
1000eb10:	3806d53a 	srli	r3,r7,20
1000eb14:	02000434 	movhi	r8,16
1000eb18:	423fffc4 	addi	r8,r8,-1
1000eb1c:	1081ffcc 	andi	r2,r2,2047
1000eb20:	0281ffc4 	movi	r10,2047
1000eb24:	2a12703a 	and	r9,r5,r8
1000eb28:	18c1ffcc 	andi	r3,r3,2047
1000eb2c:	3a10703a 	and	r8,r7,r8
1000eb30:	280ad7fa 	srli	r5,r5,31
1000eb34:	380ed7fa 	srli	r7,r7,31
1000eb38:	12801026 	beq	r2,r10,1000eb7c <__eqdf2+0x70>
1000eb3c:	0281ffc4 	movi	r10,2047
1000eb40:	1a800a26 	beq	r3,r10,1000eb6c <__eqdf2+0x60>
1000eb44:	10c00226 	beq	r2,r3,1000eb50 <__eqdf2+0x44>
1000eb48:	00800044 	movi	r2,1
1000eb4c:	f800283a 	ret
1000eb50:	4a3ffd1e 	bne	r9,r8,1000eb48 <__alt_data_end+0xf800eb48>
1000eb54:	21bffc1e 	bne	r4,r6,1000eb48 <__alt_data_end+0xf800eb48>
1000eb58:	29c00c26 	beq	r5,r7,1000eb8c <__eqdf2+0x80>
1000eb5c:	103ffa1e 	bne	r2,zero,1000eb48 <__alt_data_end+0xf800eb48>
1000eb60:	2244b03a 	or	r2,r4,r9
1000eb64:	1004c03a 	cmpne	r2,r2,zero
1000eb68:	f800283a 	ret
1000eb6c:	3214b03a 	or	r10,r6,r8
1000eb70:	503ff426 	beq	r10,zero,1000eb44 <__alt_data_end+0xf800eb44>
1000eb74:	00800044 	movi	r2,1
1000eb78:	f800283a 	ret
1000eb7c:	2254b03a 	or	r10,r4,r9
1000eb80:	503fee26 	beq	r10,zero,1000eb3c <__alt_data_end+0xf800eb3c>
1000eb84:	00800044 	movi	r2,1
1000eb88:	f800283a 	ret
1000eb8c:	0005883a 	mov	r2,zero
1000eb90:	f800283a 	ret

1000eb94 <__gedf2>:
1000eb94:	2804d53a 	srli	r2,r5,20
1000eb98:	3806d53a 	srli	r3,r7,20
1000eb9c:	02000434 	movhi	r8,16
1000eba0:	423fffc4 	addi	r8,r8,-1
1000eba4:	1081ffcc 	andi	r2,r2,2047
1000eba8:	0241ffc4 	movi	r9,2047
1000ebac:	2a14703a 	and	r10,r5,r8
1000ebb0:	18c1ffcc 	andi	r3,r3,2047
1000ebb4:	3a10703a 	and	r8,r7,r8
1000ebb8:	280ad7fa 	srli	r5,r5,31
1000ebbc:	380ed7fa 	srli	r7,r7,31
1000ebc0:	12401d26 	beq	r2,r9,1000ec38 <__gedf2+0xa4>
1000ebc4:	0241ffc4 	movi	r9,2047
1000ebc8:	1a401226 	beq	r3,r9,1000ec14 <__gedf2+0x80>
1000ebcc:	1000081e 	bne	r2,zero,1000ebf0 <__gedf2+0x5c>
1000ebd0:	2296b03a 	or	r11,r4,r10
1000ebd4:	5813003a 	cmpeq	r9,r11,zero
1000ebd8:	1800091e 	bne	r3,zero,1000ec00 <__gedf2+0x6c>
1000ebdc:	3218b03a 	or	r12,r6,r8
1000ebe0:	6000071e 	bne	r12,zero,1000ec00 <__gedf2+0x6c>
1000ebe4:	0005883a 	mov	r2,zero
1000ebe8:	5800101e 	bne	r11,zero,1000ec2c <__gedf2+0x98>
1000ebec:	f800283a 	ret
1000ebf0:	18000c1e 	bne	r3,zero,1000ec24 <__gedf2+0x90>
1000ebf4:	3212b03a 	or	r9,r6,r8
1000ebf8:	48000c26 	beq	r9,zero,1000ec2c <__gedf2+0x98>
1000ebfc:	0013883a 	mov	r9,zero
1000ec00:	39c03fcc 	andi	r7,r7,255
1000ec04:	48000826 	beq	r9,zero,1000ec28 <__gedf2+0x94>
1000ec08:	38000926 	beq	r7,zero,1000ec30 <__gedf2+0x9c>
1000ec0c:	00800044 	movi	r2,1
1000ec10:	f800283a 	ret
1000ec14:	3212b03a 	or	r9,r6,r8
1000ec18:	483fec26 	beq	r9,zero,1000ebcc <__alt_data_end+0xf800ebcc>
1000ec1c:	00bfff84 	movi	r2,-2
1000ec20:	f800283a 	ret
1000ec24:	39c03fcc 	andi	r7,r7,255
1000ec28:	29c00626 	beq	r5,r7,1000ec44 <__gedf2+0xb0>
1000ec2c:	283ff726 	beq	r5,zero,1000ec0c <__alt_data_end+0xf800ec0c>
1000ec30:	00bfffc4 	movi	r2,-1
1000ec34:	f800283a 	ret
1000ec38:	2292b03a 	or	r9,r4,r10
1000ec3c:	483fe126 	beq	r9,zero,1000ebc4 <__alt_data_end+0xf800ebc4>
1000ec40:	003ff606 	br	1000ec1c <__alt_data_end+0xf800ec1c>
1000ec44:	18bff916 	blt	r3,r2,1000ec2c <__alt_data_end+0xf800ec2c>
1000ec48:	10c00316 	blt	r2,r3,1000ec58 <__gedf2+0xc4>
1000ec4c:	42bff736 	bltu	r8,r10,1000ec2c <__alt_data_end+0xf800ec2c>
1000ec50:	52000326 	beq	r10,r8,1000ec60 <__gedf2+0xcc>
1000ec54:	5200042e 	bgeu	r10,r8,1000ec68 <__gedf2+0xd4>
1000ec58:	283fec1e 	bne	r5,zero,1000ec0c <__alt_data_end+0xf800ec0c>
1000ec5c:	003ff406 	br	1000ec30 <__alt_data_end+0xf800ec30>
1000ec60:	313ff236 	bltu	r6,r4,1000ec2c <__alt_data_end+0xf800ec2c>
1000ec64:	21bffc36 	bltu	r4,r6,1000ec58 <__alt_data_end+0xf800ec58>
1000ec68:	0005883a 	mov	r2,zero
1000ec6c:	f800283a 	ret

1000ec70 <__ledf2>:
1000ec70:	2804d53a 	srli	r2,r5,20
1000ec74:	3810d53a 	srli	r8,r7,20
1000ec78:	00c00434 	movhi	r3,16
1000ec7c:	18ffffc4 	addi	r3,r3,-1
1000ec80:	1081ffcc 	andi	r2,r2,2047
1000ec84:	0241ffc4 	movi	r9,2047
1000ec88:	28d4703a 	and	r10,r5,r3
1000ec8c:	4201ffcc 	andi	r8,r8,2047
1000ec90:	38c6703a 	and	r3,r7,r3
1000ec94:	280ad7fa 	srli	r5,r5,31
1000ec98:	380ed7fa 	srli	r7,r7,31
1000ec9c:	12401f26 	beq	r2,r9,1000ed1c <__ledf2+0xac>
1000eca0:	0241ffc4 	movi	r9,2047
1000eca4:	42401426 	beq	r8,r9,1000ecf8 <__ledf2+0x88>
1000eca8:	1000091e 	bne	r2,zero,1000ecd0 <__ledf2+0x60>
1000ecac:	2296b03a 	or	r11,r4,r10
1000ecb0:	5813003a 	cmpeq	r9,r11,zero
1000ecb4:	29403fcc 	andi	r5,r5,255
1000ecb8:	40000a1e 	bne	r8,zero,1000ece4 <__ledf2+0x74>
1000ecbc:	30d8b03a 	or	r12,r6,r3
1000ecc0:	6000081e 	bne	r12,zero,1000ece4 <__ledf2+0x74>
1000ecc4:	0005883a 	mov	r2,zero
1000ecc8:	5800111e 	bne	r11,zero,1000ed10 <__ledf2+0xa0>
1000eccc:	f800283a 	ret
1000ecd0:	29403fcc 	andi	r5,r5,255
1000ecd4:	40000c1e 	bne	r8,zero,1000ed08 <__ledf2+0x98>
1000ecd8:	30d2b03a 	or	r9,r6,r3
1000ecdc:	48000c26 	beq	r9,zero,1000ed10 <__ledf2+0xa0>
1000ece0:	0013883a 	mov	r9,zero
1000ece4:	39c03fcc 	andi	r7,r7,255
1000ece8:	48000826 	beq	r9,zero,1000ed0c <__ledf2+0x9c>
1000ecec:	38001126 	beq	r7,zero,1000ed34 <__ledf2+0xc4>
1000ecf0:	00800044 	movi	r2,1
1000ecf4:	f800283a 	ret
1000ecf8:	30d2b03a 	or	r9,r6,r3
1000ecfc:	483fea26 	beq	r9,zero,1000eca8 <__alt_data_end+0xf800eca8>
1000ed00:	00800084 	movi	r2,2
1000ed04:	f800283a 	ret
1000ed08:	39c03fcc 	andi	r7,r7,255
1000ed0c:	39400726 	beq	r7,r5,1000ed2c <__ledf2+0xbc>
1000ed10:	2800081e 	bne	r5,zero,1000ed34 <__ledf2+0xc4>
1000ed14:	00800044 	movi	r2,1
1000ed18:	f800283a 	ret
1000ed1c:	2292b03a 	or	r9,r4,r10
1000ed20:	483fdf26 	beq	r9,zero,1000eca0 <__alt_data_end+0xf800eca0>
1000ed24:	00800084 	movi	r2,2
1000ed28:	f800283a 	ret
1000ed2c:	4080030e 	bge	r8,r2,1000ed3c <__ledf2+0xcc>
1000ed30:	383fef26 	beq	r7,zero,1000ecf0 <__alt_data_end+0xf800ecf0>
1000ed34:	00bfffc4 	movi	r2,-1
1000ed38:	f800283a 	ret
1000ed3c:	123feb16 	blt	r2,r8,1000ecec <__alt_data_end+0xf800ecec>
1000ed40:	1abff336 	bltu	r3,r10,1000ed10 <__alt_data_end+0xf800ed10>
1000ed44:	50c00326 	beq	r10,r3,1000ed54 <__ledf2+0xe4>
1000ed48:	50c0042e 	bgeu	r10,r3,1000ed5c <__ledf2+0xec>
1000ed4c:	283fe81e 	bne	r5,zero,1000ecf0 <__alt_data_end+0xf800ecf0>
1000ed50:	003ff806 	br	1000ed34 <__alt_data_end+0xf800ed34>
1000ed54:	313fee36 	bltu	r6,r4,1000ed10 <__alt_data_end+0xf800ed10>
1000ed58:	21bffc36 	bltu	r4,r6,1000ed4c <__alt_data_end+0xf800ed4c>
1000ed5c:	0005883a 	mov	r2,zero
1000ed60:	f800283a 	ret

1000ed64 <__muldf3>:
1000ed64:	deffee04 	addi	sp,sp,-72
1000ed68:	dd000c15 	stw	r20,48(sp)
1000ed6c:	2828d53a 	srli	r20,r5,20
1000ed70:	ddc00f15 	stw	r23,60(sp)
1000ed74:	282ed7fa 	srli	r23,r5,31
1000ed78:	dc000815 	stw	r16,32(sp)
1000ed7c:	04000434 	movhi	r16,16
1000ed80:	dcc00b15 	stw	r19,44(sp)
1000ed84:	843fffc4 	addi	r16,r16,-1
1000ed88:	dfc01115 	stw	ra,68(sp)
1000ed8c:	df001015 	stw	fp,64(sp)
1000ed90:	dd800e15 	stw	r22,56(sp)
1000ed94:	dd400d15 	stw	r21,52(sp)
1000ed98:	dc800a15 	stw	r18,40(sp)
1000ed9c:	dc400915 	stw	r17,36(sp)
1000eda0:	a501ffcc 	andi	r20,r20,2047
1000eda4:	2c20703a 	and	r16,r5,r16
1000eda8:	b827883a 	mov	r19,r23
1000edac:	ba403fcc 	andi	r9,r23,255
1000edb0:	a0006026 	beq	r20,zero,1000ef34 <__muldf3+0x1d0>
1000edb4:	0081ffc4 	movi	r2,2047
1000edb8:	202d883a 	mov	r22,r4
1000edbc:	a0803626 	beq	r20,r2,1000ee98 <__muldf3+0x134>
1000edc0:	84000434 	orhi	r16,r16,16
1000edc4:	200ad77a 	srli	r5,r4,29
1000edc8:	800490fa 	slli	r2,r16,3
1000edcc:	202c90fa 	slli	r22,r4,3
1000edd0:	a53f0044 	addi	r20,r20,-1023
1000edd4:	28a0b03a 	or	r16,r5,r2
1000edd8:	002b883a 	mov	r21,zero
1000eddc:	000b883a 	mov	r5,zero
1000ede0:	3804d53a 	srli	r2,r7,20
1000ede4:	3838d7fa 	srli	fp,r7,31
1000ede8:	04400434 	movhi	r17,16
1000edec:	8c7fffc4 	addi	r17,r17,-1
1000edf0:	1081ffcc 	andi	r2,r2,2047
1000edf4:	3025883a 	mov	r18,r6
1000edf8:	3c62703a 	and	r17,r7,r17
1000edfc:	e2803fcc 	andi	r10,fp,255
1000ee00:	10006d26 	beq	r2,zero,1000efb8 <__muldf3+0x254>
1000ee04:	00c1ffc4 	movi	r3,2047
1000ee08:	10c06526 	beq	r2,r3,1000efa0 <__muldf3+0x23c>
1000ee0c:	8c400434 	orhi	r17,r17,16
1000ee10:	300ed77a 	srli	r7,r6,29
1000ee14:	880690fa 	slli	r3,r17,3
1000ee18:	302490fa 	slli	r18,r6,3
1000ee1c:	10bf0044 	addi	r2,r2,-1023
1000ee20:	38e2b03a 	or	r17,r7,r3
1000ee24:	000f883a 	mov	r7,zero
1000ee28:	a087883a 	add	r3,r20,r2
1000ee2c:	010003c4 	movi	r4,15
1000ee30:	3d44b03a 	or	r2,r7,r21
1000ee34:	e5ccf03a 	xor	r6,fp,r23
1000ee38:	1a000044 	addi	r8,r3,1
1000ee3c:	20809b36 	bltu	r4,r2,1000f0ac <__muldf3+0x348>
1000ee40:	100490ba 	slli	r2,r2,2
1000ee44:	01040074 	movhi	r4,4097
1000ee48:	213b9604 	addi	r4,r4,-4520
1000ee4c:	1105883a 	add	r2,r2,r4
1000ee50:	10800017 	ldw	r2,0(r2)
1000ee54:	1000683a 	jmp	r2
1000ee58:	1000f0ac 	andhi	zero,r2,962
1000ee5c:	1000eeb8 	rdprs	zero,r2,954
1000ee60:	1000eeb8 	rdprs	zero,r2,954
1000ee64:	1000eeb4 	orhi	zero,r2,954
1000ee68:	1000f088 	cmpgei	zero,r2,962
1000ee6c:	1000f088 	cmpgei	zero,r2,962
1000ee70:	1000f070 	cmpltui	zero,r2,961
1000ee74:	1000eeb4 	orhi	zero,r2,954
1000ee78:	1000f088 	cmpgei	zero,r2,962
1000ee7c:	1000f070 	cmpltui	zero,r2,961
1000ee80:	1000f088 	cmpgei	zero,r2,962
1000ee84:	1000eeb4 	orhi	zero,r2,954
1000ee88:	1000f098 	cmpnei	zero,r2,962
1000ee8c:	1000f098 	cmpnei	zero,r2,962
1000ee90:	1000f098 	cmpnei	zero,r2,962
1000ee94:	1000f3f8 	rdprs	zero,r2,975
1000ee98:	2404b03a 	or	r2,r4,r16
1000ee9c:	1000711e 	bne	r2,zero,1000f064 <__muldf3+0x300>
1000eea0:	05400204 	movi	r21,8
1000eea4:	0021883a 	mov	r16,zero
1000eea8:	002d883a 	mov	r22,zero
1000eeac:	01400084 	movi	r5,2
1000eeb0:	003fcb06 	br	1000ede0 <__alt_data_end+0xf800ede0>
1000eeb4:	500d883a 	mov	r6,r10
1000eeb8:	00800084 	movi	r2,2
1000eebc:	38805926 	beq	r7,r2,1000f024 <__muldf3+0x2c0>
1000eec0:	008000c4 	movi	r2,3
1000eec4:	3881bb26 	beq	r7,r2,1000f5b4 <__muldf3+0x850>
1000eec8:	00800044 	movi	r2,1
1000eecc:	3881961e 	bne	r7,r2,1000f528 <__muldf3+0x7c4>
1000eed0:	3027883a 	mov	r19,r6
1000eed4:	0005883a 	mov	r2,zero
1000eed8:	0021883a 	mov	r16,zero
1000eedc:	002d883a 	mov	r22,zero
1000eee0:	1004953a 	slli	r2,r2,20
1000eee4:	98c03fcc 	andi	r3,r19,255
1000eee8:	04400434 	movhi	r17,16
1000eeec:	8c7fffc4 	addi	r17,r17,-1
1000eef0:	180697fa 	slli	r3,r3,31
1000eef4:	8460703a 	and	r16,r16,r17
1000eef8:	80a0b03a 	or	r16,r16,r2
1000eefc:	80c6b03a 	or	r3,r16,r3
1000ef00:	b005883a 	mov	r2,r22
1000ef04:	dfc01117 	ldw	ra,68(sp)
1000ef08:	df001017 	ldw	fp,64(sp)
1000ef0c:	ddc00f17 	ldw	r23,60(sp)
1000ef10:	dd800e17 	ldw	r22,56(sp)
1000ef14:	dd400d17 	ldw	r21,52(sp)
1000ef18:	dd000c17 	ldw	r20,48(sp)
1000ef1c:	dcc00b17 	ldw	r19,44(sp)
1000ef20:	dc800a17 	ldw	r18,40(sp)
1000ef24:	dc400917 	ldw	r17,36(sp)
1000ef28:	dc000817 	ldw	r16,32(sp)
1000ef2c:	dec01204 	addi	sp,sp,72
1000ef30:	f800283a 	ret
1000ef34:	2404b03a 	or	r2,r4,r16
1000ef38:	202b883a 	mov	r21,r4
1000ef3c:	10004426 	beq	r2,zero,1000f050 <__muldf3+0x2ec>
1000ef40:	80015126 	beq	r16,zero,1000f488 <__muldf3+0x724>
1000ef44:	8009883a 	mov	r4,r16
1000ef48:	d9800715 	stw	r6,28(sp)
1000ef4c:	d9c00215 	stw	r7,8(sp)
1000ef50:	da400415 	stw	r9,16(sp)
1000ef54:	00100d00 	call	100100d0 <__clzsi2>
1000ef58:	d9800717 	ldw	r6,28(sp)
1000ef5c:	d9c00217 	ldw	r7,8(sp)
1000ef60:	da400417 	ldw	r9,16(sp)
1000ef64:	113ffd44 	addi	r4,r2,-11
1000ef68:	00c00704 	movi	r3,28
1000ef6c:	19014216 	blt	r3,r4,1000f478 <__muldf3+0x714>
1000ef70:	00c00744 	movi	r3,29
1000ef74:	15bffe04 	addi	r22,r2,-8
1000ef78:	1907c83a 	sub	r3,r3,r4
1000ef7c:	85a0983a 	sll	r16,r16,r22
1000ef80:	a8c6d83a 	srl	r3,r21,r3
1000ef84:	adac983a 	sll	r22,r21,r22
1000ef88:	1c20b03a 	or	r16,r3,r16
1000ef8c:	1080fcc4 	addi	r2,r2,1011
1000ef90:	00a9c83a 	sub	r20,zero,r2
1000ef94:	002b883a 	mov	r21,zero
1000ef98:	000b883a 	mov	r5,zero
1000ef9c:	003f9006 	br	1000ede0 <__alt_data_end+0xf800ede0>
1000efa0:	3446b03a 	or	r3,r6,r17
1000efa4:	1800281e 	bne	r3,zero,1000f048 <__muldf3+0x2e4>
1000efa8:	0023883a 	mov	r17,zero
1000efac:	0025883a 	mov	r18,zero
1000efb0:	01c00084 	movi	r7,2
1000efb4:	003f9c06 	br	1000ee28 <__alt_data_end+0xf800ee28>
1000efb8:	3446b03a 	or	r3,r6,r17
1000efbc:	18001e26 	beq	r3,zero,1000f038 <__muldf3+0x2d4>
1000efc0:	88012126 	beq	r17,zero,1000f448 <__muldf3+0x6e4>
1000efc4:	8809883a 	mov	r4,r17
1000efc8:	d9400215 	stw	r5,8(sp)
1000efcc:	d9800715 	stw	r6,28(sp)
1000efd0:	da400415 	stw	r9,16(sp)
1000efd4:	da800315 	stw	r10,12(sp)
1000efd8:	00100d00 	call	100100d0 <__clzsi2>
1000efdc:	d9400217 	ldw	r5,8(sp)
1000efe0:	d9800717 	ldw	r6,28(sp)
1000efe4:	da400417 	ldw	r9,16(sp)
1000efe8:	da800317 	ldw	r10,12(sp)
1000efec:	113ffd44 	addi	r4,r2,-11
1000eff0:	00c00704 	movi	r3,28
1000eff4:	19011016 	blt	r3,r4,1000f438 <__muldf3+0x6d4>
1000eff8:	00c00744 	movi	r3,29
1000effc:	14bffe04 	addi	r18,r2,-8
1000f000:	1907c83a 	sub	r3,r3,r4
1000f004:	8ca2983a 	sll	r17,r17,r18
1000f008:	30c6d83a 	srl	r3,r6,r3
1000f00c:	34a4983a 	sll	r18,r6,r18
1000f010:	1c62b03a 	or	r17,r3,r17
1000f014:	1080fcc4 	addi	r2,r2,1011
1000f018:	0085c83a 	sub	r2,zero,r2
1000f01c:	000f883a 	mov	r7,zero
1000f020:	003f8106 	br	1000ee28 <__alt_data_end+0xf800ee28>
1000f024:	3027883a 	mov	r19,r6
1000f028:	0081ffc4 	movi	r2,2047
1000f02c:	0021883a 	mov	r16,zero
1000f030:	002d883a 	mov	r22,zero
1000f034:	003faa06 	br	1000eee0 <__alt_data_end+0xf800eee0>
1000f038:	0023883a 	mov	r17,zero
1000f03c:	0025883a 	mov	r18,zero
1000f040:	01c00044 	movi	r7,1
1000f044:	003f7806 	br	1000ee28 <__alt_data_end+0xf800ee28>
1000f048:	01c000c4 	movi	r7,3
1000f04c:	003f7606 	br	1000ee28 <__alt_data_end+0xf800ee28>
1000f050:	05400104 	movi	r21,4
1000f054:	0021883a 	mov	r16,zero
1000f058:	002d883a 	mov	r22,zero
1000f05c:	01400044 	movi	r5,1
1000f060:	003f5f06 	br	1000ede0 <__alt_data_end+0xf800ede0>
1000f064:	05400304 	movi	r21,12
1000f068:	014000c4 	movi	r5,3
1000f06c:	003f5c06 	br	1000ede0 <__alt_data_end+0xf800ede0>
1000f070:	04000434 	movhi	r16,16
1000f074:	0027883a 	mov	r19,zero
1000f078:	843fffc4 	addi	r16,r16,-1
1000f07c:	05bfffc4 	movi	r22,-1
1000f080:	0081ffc4 	movi	r2,2047
1000f084:	003f9606 	br	1000eee0 <__alt_data_end+0xf800eee0>
1000f088:	8023883a 	mov	r17,r16
1000f08c:	b025883a 	mov	r18,r22
1000f090:	280f883a 	mov	r7,r5
1000f094:	003f8806 	br	1000eeb8 <__alt_data_end+0xf800eeb8>
1000f098:	8023883a 	mov	r17,r16
1000f09c:	b025883a 	mov	r18,r22
1000f0a0:	480d883a 	mov	r6,r9
1000f0a4:	280f883a 	mov	r7,r5
1000f0a8:	003f8306 	br	1000eeb8 <__alt_data_end+0xf800eeb8>
1000f0ac:	b026d43a 	srli	r19,r22,16
1000f0b0:	902ed43a 	srli	r23,r18,16
1000f0b4:	b5bfffcc 	andi	r22,r22,65535
1000f0b8:	94bfffcc 	andi	r18,r18,65535
1000f0bc:	b00b883a 	mov	r5,r22
1000f0c0:	9009883a 	mov	r4,r18
1000f0c4:	d8c00515 	stw	r3,20(sp)
1000f0c8:	d9800715 	stw	r6,28(sp)
1000f0cc:	da000615 	stw	r8,24(sp)
1000f0d0:	000d8680 	call	1000d868 <__mulsi3>
1000f0d4:	980b883a 	mov	r5,r19
1000f0d8:	9009883a 	mov	r4,r18
1000f0dc:	1029883a 	mov	r20,r2
1000f0e0:	000d8680 	call	1000d868 <__mulsi3>
1000f0e4:	b80b883a 	mov	r5,r23
1000f0e8:	9809883a 	mov	r4,r19
1000f0ec:	102b883a 	mov	r21,r2
1000f0f0:	000d8680 	call	1000d868 <__mulsi3>
1000f0f4:	b809883a 	mov	r4,r23
1000f0f8:	b00b883a 	mov	r5,r22
1000f0fc:	1039883a 	mov	fp,r2
1000f100:	000d8680 	call	1000d868 <__mulsi3>
1000f104:	a008d43a 	srli	r4,r20,16
1000f108:	1545883a 	add	r2,r2,r21
1000f10c:	d8c00517 	ldw	r3,20(sp)
1000f110:	2085883a 	add	r2,r4,r2
1000f114:	d9800717 	ldw	r6,28(sp)
1000f118:	da000617 	ldw	r8,24(sp)
1000f11c:	1540022e 	bgeu	r2,r21,1000f128 <__muldf3+0x3c4>
1000f120:	01000074 	movhi	r4,1
1000f124:	e139883a 	add	fp,fp,r4
1000f128:	100e943a 	slli	r7,r2,16
1000f12c:	1004d43a 	srli	r2,r2,16
1000f130:	882ad43a 	srli	r21,r17,16
1000f134:	a53fffcc 	andi	r20,r20,65535
1000f138:	8c7fffcc 	andi	r17,r17,65535
1000f13c:	3d29883a 	add	r20,r7,r20
1000f140:	b00b883a 	mov	r5,r22
1000f144:	8809883a 	mov	r4,r17
1000f148:	d8c00515 	stw	r3,20(sp)
1000f14c:	d9800715 	stw	r6,28(sp)
1000f150:	da000615 	stw	r8,24(sp)
1000f154:	dd000115 	stw	r20,4(sp)
1000f158:	d8800015 	stw	r2,0(sp)
1000f15c:	000d8680 	call	1000d868 <__mulsi3>
1000f160:	980b883a 	mov	r5,r19
1000f164:	8809883a 	mov	r4,r17
1000f168:	d8800215 	stw	r2,8(sp)
1000f16c:	000d8680 	call	1000d868 <__mulsi3>
1000f170:	9809883a 	mov	r4,r19
1000f174:	a80b883a 	mov	r5,r21
1000f178:	1029883a 	mov	r20,r2
1000f17c:	000d8680 	call	1000d868 <__mulsi3>
1000f180:	b00b883a 	mov	r5,r22
1000f184:	a809883a 	mov	r4,r21
1000f188:	d8800415 	stw	r2,16(sp)
1000f18c:	000d8680 	call	1000d868 <__mulsi3>
1000f190:	d9c00217 	ldw	r7,8(sp)
1000f194:	1505883a 	add	r2,r2,r20
1000f198:	d8c00517 	ldw	r3,20(sp)
1000f19c:	3826d43a 	srli	r19,r7,16
1000f1a0:	d9800717 	ldw	r6,28(sp)
1000f1a4:	da000617 	ldw	r8,24(sp)
1000f1a8:	9885883a 	add	r2,r19,r2
1000f1ac:	da400417 	ldw	r9,16(sp)
1000f1b0:	1500022e 	bgeu	r2,r20,1000f1bc <__muldf3+0x458>
1000f1b4:	01000074 	movhi	r4,1
1000f1b8:	4913883a 	add	r9,r9,r4
1000f1bc:	1028d43a 	srli	r20,r2,16
1000f1c0:	1004943a 	slli	r2,r2,16
1000f1c4:	802cd43a 	srli	r22,r16,16
1000f1c8:	843fffcc 	andi	r16,r16,65535
1000f1cc:	3cffffcc 	andi	r19,r7,65535
1000f1d0:	9009883a 	mov	r4,r18
1000f1d4:	800b883a 	mov	r5,r16
1000f1d8:	a269883a 	add	r20,r20,r9
1000f1dc:	d8c00515 	stw	r3,20(sp)
1000f1e0:	d9800715 	stw	r6,28(sp)
1000f1e4:	da000615 	stw	r8,24(sp)
1000f1e8:	14e7883a 	add	r19,r2,r19
1000f1ec:	000d8680 	call	1000d868 <__mulsi3>
1000f1f0:	9009883a 	mov	r4,r18
1000f1f4:	b00b883a 	mov	r5,r22
1000f1f8:	d8800315 	stw	r2,12(sp)
1000f1fc:	000d8680 	call	1000d868 <__mulsi3>
1000f200:	b809883a 	mov	r4,r23
1000f204:	b00b883a 	mov	r5,r22
1000f208:	d8800215 	stw	r2,8(sp)
1000f20c:	000d8680 	call	1000d868 <__mulsi3>
1000f210:	b80b883a 	mov	r5,r23
1000f214:	8009883a 	mov	r4,r16
1000f218:	d8800415 	stw	r2,16(sp)
1000f21c:	000d8680 	call	1000d868 <__mulsi3>
1000f220:	da800317 	ldw	r10,12(sp)
1000f224:	d9c00217 	ldw	r7,8(sp)
1000f228:	d9000017 	ldw	r4,0(sp)
1000f22c:	502ed43a 	srli	r23,r10,16
1000f230:	11c5883a 	add	r2,r2,r7
1000f234:	24e5883a 	add	r18,r4,r19
1000f238:	b885883a 	add	r2,r23,r2
1000f23c:	d8c00517 	ldw	r3,20(sp)
1000f240:	d9800717 	ldw	r6,28(sp)
1000f244:	da000617 	ldw	r8,24(sp)
1000f248:	da400417 	ldw	r9,16(sp)
1000f24c:	11c0022e 	bgeu	r2,r7,1000f258 <__muldf3+0x4f4>
1000f250:	01000074 	movhi	r4,1
1000f254:	4913883a 	add	r9,r9,r4
1000f258:	100ed43a 	srli	r7,r2,16
1000f25c:	1004943a 	slli	r2,r2,16
1000f260:	55ffffcc 	andi	r23,r10,65535
1000f264:	3a53883a 	add	r9,r7,r9
1000f268:	8809883a 	mov	r4,r17
1000f26c:	800b883a 	mov	r5,r16
1000f270:	d8c00515 	stw	r3,20(sp)
1000f274:	d9800715 	stw	r6,28(sp)
1000f278:	da000615 	stw	r8,24(sp)
1000f27c:	da400415 	stw	r9,16(sp)
1000f280:	15ef883a 	add	r23,r2,r23
1000f284:	000d8680 	call	1000d868 <__mulsi3>
1000f288:	8809883a 	mov	r4,r17
1000f28c:	b00b883a 	mov	r5,r22
1000f290:	d8800215 	stw	r2,8(sp)
1000f294:	000d8680 	call	1000d868 <__mulsi3>
1000f298:	b00b883a 	mov	r5,r22
1000f29c:	a809883a 	mov	r4,r21
1000f2a0:	d8800315 	stw	r2,12(sp)
1000f2a4:	000d8680 	call	1000d868 <__mulsi3>
1000f2a8:	8009883a 	mov	r4,r16
1000f2ac:	a80b883a 	mov	r5,r21
1000f2b0:	1023883a 	mov	r17,r2
1000f2b4:	000d8680 	call	1000d868 <__mulsi3>
1000f2b8:	d9c00217 	ldw	r7,8(sp)
1000f2bc:	da800317 	ldw	r10,12(sp)
1000f2c0:	d8c00517 	ldw	r3,20(sp)
1000f2c4:	3808d43a 	srli	r4,r7,16
1000f2c8:	1285883a 	add	r2,r2,r10
1000f2cc:	d9800717 	ldw	r6,28(sp)
1000f2d0:	2085883a 	add	r2,r4,r2
1000f2d4:	da000617 	ldw	r8,24(sp)
1000f2d8:	da400417 	ldw	r9,16(sp)
1000f2dc:	1280022e 	bgeu	r2,r10,1000f2e8 <__muldf3+0x584>
1000f2e0:	01000074 	movhi	r4,1
1000f2e4:	8923883a 	add	r17,r17,r4
1000f2e8:	1008943a 	slli	r4,r2,16
1000f2ec:	39ffffcc 	andi	r7,r7,65535
1000f2f0:	e4b9883a 	add	fp,fp,r18
1000f2f4:	21cf883a 	add	r7,r4,r7
1000f2f8:	e4e7803a 	cmpltu	r19,fp,r19
1000f2fc:	3d0f883a 	add	r7,r7,r20
1000f300:	bf39883a 	add	fp,r23,fp
1000f304:	99c9883a 	add	r4,r19,r7
1000f308:	e5ef803a 	cmpltu	r23,fp,r23
1000f30c:	490b883a 	add	r5,r9,r4
1000f310:	1004d43a 	srli	r2,r2,16
1000f314:	b965883a 	add	r18,r23,r5
1000f318:	24c9803a 	cmpltu	r4,r4,r19
1000f31c:	3d29803a 	cmpltu	r20,r7,r20
1000f320:	a128b03a 	or	r20,r20,r4
1000f324:	95ef803a 	cmpltu	r23,r18,r23
1000f328:	2a53803a 	cmpltu	r9,r5,r9
1000f32c:	a0a9883a 	add	r20,r20,r2
1000f330:	4deeb03a 	or	r23,r9,r23
1000f334:	a5ef883a 	add	r23,r20,r23
1000f338:	bc63883a 	add	r17,r23,r17
1000f33c:	e004927a 	slli	r2,fp,9
1000f340:	d9000117 	ldw	r4,4(sp)
1000f344:	882e927a 	slli	r23,r17,9
1000f348:	9022d5fa 	srli	r17,r18,23
1000f34c:	e038d5fa 	srli	fp,fp,23
1000f350:	1104b03a 	or	r2,r2,r4
1000f354:	9024927a 	slli	r18,r18,9
1000f358:	1004c03a 	cmpne	r2,r2,zero
1000f35c:	bc62b03a 	or	r17,r23,r17
1000f360:	1738b03a 	or	fp,r2,fp
1000f364:	8880402c 	andhi	r2,r17,256
1000f368:	e4a4b03a 	or	r18,fp,r18
1000f36c:	10000726 	beq	r2,zero,1000f38c <__muldf3+0x628>
1000f370:	9006d07a 	srli	r3,r18,1
1000f374:	880497fa 	slli	r2,r17,31
1000f378:	9480004c 	andi	r18,r18,1
1000f37c:	8822d07a 	srli	r17,r17,1
1000f380:	1ca4b03a 	or	r18,r3,r18
1000f384:	14a4b03a 	or	r18,r2,r18
1000f388:	4007883a 	mov	r3,r8
1000f38c:	1880ffc4 	addi	r2,r3,1023
1000f390:	0080460e 	bge	zero,r2,1000f4ac <__muldf3+0x748>
1000f394:	910001cc 	andi	r4,r18,7
1000f398:	20000726 	beq	r4,zero,1000f3b8 <__muldf3+0x654>
1000f39c:	910003cc 	andi	r4,r18,15
1000f3a0:	01400104 	movi	r5,4
1000f3a4:	21400426 	beq	r4,r5,1000f3b8 <__muldf3+0x654>
1000f3a8:	9149883a 	add	r4,r18,r5
1000f3ac:	24a5803a 	cmpltu	r18,r4,r18
1000f3b0:	8ca3883a 	add	r17,r17,r18
1000f3b4:	2025883a 	mov	r18,r4
1000f3b8:	8900402c 	andhi	r4,r17,256
1000f3bc:	20000426 	beq	r4,zero,1000f3d0 <__muldf3+0x66c>
1000f3c0:	18810004 	addi	r2,r3,1024
1000f3c4:	00ffc034 	movhi	r3,65280
1000f3c8:	18ffffc4 	addi	r3,r3,-1
1000f3cc:	88e2703a 	and	r17,r17,r3
1000f3d0:	00c1ff84 	movi	r3,2046
1000f3d4:	18bf1316 	blt	r3,r2,1000f024 <__alt_data_end+0xf800f024>
1000f3d8:	882c977a 	slli	r22,r17,29
1000f3dc:	9024d0fa 	srli	r18,r18,3
1000f3e0:	8822927a 	slli	r17,r17,9
1000f3e4:	1081ffcc 	andi	r2,r2,2047
1000f3e8:	b4acb03a 	or	r22,r22,r18
1000f3ec:	8820d33a 	srli	r16,r17,12
1000f3f0:	3027883a 	mov	r19,r6
1000f3f4:	003eba06 	br	1000eee0 <__alt_data_end+0xf800eee0>
1000f3f8:	8080022c 	andhi	r2,r16,8
1000f3fc:	10000926 	beq	r2,zero,1000f424 <__muldf3+0x6c0>
1000f400:	8880022c 	andhi	r2,r17,8
1000f404:	1000071e 	bne	r2,zero,1000f424 <__muldf3+0x6c0>
1000f408:	00800434 	movhi	r2,16
1000f40c:	8c000234 	orhi	r16,r17,8
1000f410:	10bfffc4 	addi	r2,r2,-1
1000f414:	e027883a 	mov	r19,fp
1000f418:	80a0703a 	and	r16,r16,r2
1000f41c:	902d883a 	mov	r22,r18
1000f420:	003f1706 	br	1000f080 <__alt_data_end+0xf800f080>
1000f424:	00800434 	movhi	r2,16
1000f428:	84000234 	orhi	r16,r16,8
1000f42c:	10bfffc4 	addi	r2,r2,-1
1000f430:	80a0703a 	and	r16,r16,r2
1000f434:	003f1206 	br	1000f080 <__alt_data_end+0xf800f080>
1000f438:	147ff604 	addi	r17,r2,-40
1000f43c:	3462983a 	sll	r17,r6,r17
1000f440:	0025883a 	mov	r18,zero
1000f444:	003ef306 	br	1000f014 <__alt_data_end+0xf800f014>
1000f448:	3009883a 	mov	r4,r6
1000f44c:	d9400215 	stw	r5,8(sp)
1000f450:	d9800715 	stw	r6,28(sp)
1000f454:	da400415 	stw	r9,16(sp)
1000f458:	da800315 	stw	r10,12(sp)
1000f45c:	00100d00 	call	100100d0 <__clzsi2>
1000f460:	10800804 	addi	r2,r2,32
1000f464:	da800317 	ldw	r10,12(sp)
1000f468:	da400417 	ldw	r9,16(sp)
1000f46c:	d9800717 	ldw	r6,28(sp)
1000f470:	d9400217 	ldw	r5,8(sp)
1000f474:	003edd06 	br	1000efec <__alt_data_end+0xf800efec>
1000f478:	143ff604 	addi	r16,r2,-40
1000f47c:	ac20983a 	sll	r16,r21,r16
1000f480:	002d883a 	mov	r22,zero
1000f484:	003ec106 	br	1000ef8c <__alt_data_end+0xf800ef8c>
1000f488:	d9800715 	stw	r6,28(sp)
1000f48c:	d9c00215 	stw	r7,8(sp)
1000f490:	da400415 	stw	r9,16(sp)
1000f494:	00100d00 	call	100100d0 <__clzsi2>
1000f498:	10800804 	addi	r2,r2,32
1000f49c:	da400417 	ldw	r9,16(sp)
1000f4a0:	d9c00217 	ldw	r7,8(sp)
1000f4a4:	d9800717 	ldw	r6,28(sp)
1000f4a8:	003eae06 	br	1000ef64 <__alt_data_end+0xf800ef64>
1000f4ac:	00c00044 	movi	r3,1
1000f4b0:	1887c83a 	sub	r3,r3,r2
1000f4b4:	01000e04 	movi	r4,56
1000f4b8:	20fe8516 	blt	r4,r3,1000eed0 <__alt_data_end+0xf800eed0>
1000f4bc:	010007c4 	movi	r4,31
1000f4c0:	20c01b16 	blt	r4,r3,1000f530 <__muldf3+0x7cc>
1000f4c4:	00800804 	movi	r2,32
1000f4c8:	10c5c83a 	sub	r2,r2,r3
1000f4cc:	888a983a 	sll	r5,r17,r2
1000f4d0:	90c8d83a 	srl	r4,r18,r3
1000f4d4:	9084983a 	sll	r2,r18,r2
1000f4d8:	88e2d83a 	srl	r17,r17,r3
1000f4dc:	2906b03a 	or	r3,r5,r4
1000f4e0:	1004c03a 	cmpne	r2,r2,zero
1000f4e4:	1886b03a 	or	r3,r3,r2
1000f4e8:	188001cc 	andi	r2,r3,7
1000f4ec:	10000726 	beq	r2,zero,1000f50c <__muldf3+0x7a8>
1000f4f0:	188003cc 	andi	r2,r3,15
1000f4f4:	01000104 	movi	r4,4
1000f4f8:	11000426 	beq	r2,r4,1000f50c <__muldf3+0x7a8>
1000f4fc:	1805883a 	mov	r2,r3
1000f500:	10c00104 	addi	r3,r2,4
1000f504:	1885803a 	cmpltu	r2,r3,r2
1000f508:	88a3883a 	add	r17,r17,r2
1000f50c:	8880202c 	andhi	r2,r17,128
1000f510:	10001c26 	beq	r2,zero,1000f584 <__muldf3+0x820>
1000f514:	3027883a 	mov	r19,r6
1000f518:	00800044 	movi	r2,1
1000f51c:	0021883a 	mov	r16,zero
1000f520:	002d883a 	mov	r22,zero
1000f524:	003e6e06 	br	1000eee0 <__alt_data_end+0xf800eee0>
1000f528:	4007883a 	mov	r3,r8
1000f52c:	003f9706 	br	1000f38c <__alt_data_end+0xf800f38c>
1000f530:	017ff844 	movi	r5,-31
1000f534:	2885c83a 	sub	r2,r5,r2
1000f538:	888ad83a 	srl	r5,r17,r2
1000f53c:	00800804 	movi	r2,32
1000f540:	18801a26 	beq	r3,r2,1000f5ac <__muldf3+0x848>
1000f544:	01001004 	movi	r4,64
1000f548:	20c7c83a 	sub	r3,r4,r3
1000f54c:	88e2983a 	sll	r17,r17,r3
1000f550:	8ca4b03a 	or	r18,r17,r18
1000f554:	9004c03a 	cmpne	r2,r18,zero
1000f558:	2884b03a 	or	r2,r5,r2
1000f55c:	144001cc 	andi	r17,r2,7
1000f560:	88000d1e 	bne	r17,zero,1000f598 <__muldf3+0x834>
1000f564:	0021883a 	mov	r16,zero
1000f568:	102cd0fa 	srli	r22,r2,3
1000f56c:	3027883a 	mov	r19,r6
1000f570:	0005883a 	mov	r2,zero
1000f574:	b46cb03a 	or	r22,r22,r17
1000f578:	003e5906 	br	1000eee0 <__alt_data_end+0xf800eee0>
1000f57c:	1007883a 	mov	r3,r2
1000f580:	0023883a 	mov	r17,zero
1000f584:	8820927a 	slli	r16,r17,9
1000f588:	1805883a 	mov	r2,r3
1000f58c:	8822977a 	slli	r17,r17,29
1000f590:	8020d33a 	srli	r16,r16,12
1000f594:	003ff406 	br	1000f568 <__alt_data_end+0xf800f568>
1000f598:	10c003cc 	andi	r3,r2,15
1000f59c:	01000104 	movi	r4,4
1000f5a0:	193ff626 	beq	r3,r4,1000f57c <__alt_data_end+0xf800f57c>
1000f5a4:	0023883a 	mov	r17,zero
1000f5a8:	003fd506 	br	1000f500 <__alt_data_end+0xf800f500>
1000f5ac:	0023883a 	mov	r17,zero
1000f5b0:	003fe706 	br	1000f550 <__alt_data_end+0xf800f550>
1000f5b4:	00800434 	movhi	r2,16
1000f5b8:	8c000234 	orhi	r16,r17,8
1000f5bc:	10bfffc4 	addi	r2,r2,-1
1000f5c0:	3027883a 	mov	r19,r6
1000f5c4:	80a0703a 	and	r16,r16,r2
1000f5c8:	902d883a 	mov	r22,r18
1000f5cc:	003eac06 	br	1000f080 <__alt_data_end+0xf800f080>

1000f5d0 <__subdf3>:
1000f5d0:	02000434 	movhi	r8,16
1000f5d4:	423fffc4 	addi	r8,r8,-1
1000f5d8:	defffb04 	addi	sp,sp,-20
1000f5dc:	2a14703a 	and	r10,r5,r8
1000f5e0:	3812d53a 	srli	r9,r7,20
1000f5e4:	3a10703a 	and	r8,r7,r8
1000f5e8:	2006d77a 	srli	r3,r4,29
1000f5ec:	3004d77a 	srli	r2,r6,29
1000f5f0:	dc000015 	stw	r16,0(sp)
1000f5f4:	501490fa 	slli	r10,r10,3
1000f5f8:	2820d53a 	srli	r16,r5,20
1000f5fc:	401090fa 	slli	r8,r8,3
1000f600:	dc800215 	stw	r18,8(sp)
1000f604:	dc400115 	stw	r17,4(sp)
1000f608:	dfc00415 	stw	ra,16(sp)
1000f60c:	202290fa 	slli	r17,r4,3
1000f610:	dcc00315 	stw	r19,12(sp)
1000f614:	4a41ffcc 	andi	r9,r9,2047
1000f618:	0101ffc4 	movi	r4,2047
1000f61c:	2824d7fa 	srli	r18,r5,31
1000f620:	8401ffcc 	andi	r16,r16,2047
1000f624:	50c6b03a 	or	r3,r10,r3
1000f628:	380ed7fa 	srli	r7,r7,31
1000f62c:	408ab03a 	or	r5,r8,r2
1000f630:	300c90fa 	slli	r6,r6,3
1000f634:	49009626 	beq	r9,r4,1000f890 <__subdf3+0x2c0>
1000f638:	39c0005c 	xori	r7,r7,1
1000f63c:	8245c83a 	sub	r2,r16,r9
1000f640:	3c807426 	beq	r7,r18,1000f814 <__subdf3+0x244>
1000f644:	0080af0e 	bge	zero,r2,1000f904 <__subdf3+0x334>
1000f648:	48002a1e 	bne	r9,zero,1000f6f4 <__subdf3+0x124>
1000f64c:	2988b03a 	or	r4,r5,r6
1000f650:	20009a1e 	bne	r4,zero,1000f8bc <__subdf3+0x2ec>
1000f654:	888001cc 	andi	r2,r17,7
1000f658:	10000726 	beq	r2,zero,1000f678 <__subdf3+0xa8>
1000f65c:	888003cc 	andi	r2,r17,15
1000f660:	01000104 	movi	r4,4
1000f664:	11000426 	beq	r2,r4,1000f678 <__subdf3+0xa8>
1000f668:	890b883a 	add	r5,r17,r4
1000f66c:	2c63803a 	cmpltu	r17,r5,r17
1000f670:	1c47883a 	add	r3,r3,r17
1000f674:	2823883a 	mov	r17,r5
1000f678:	1880202c 	andhi	r2,r3,128
1000f67c:	10005926 	beq	r2,zero,1000f7e4 <__subdf3+0x214>
1000f680:	84000044 	addi	r16,r16,1
1000f684:	0081ffc4 	movi	r2,2047
1000f688:	8080be26 	beq	r16,r2,1000f984 <__subdf3+0x3b4>
1000f68c:	017fe034 	movhi	r5,65408
1000f690:	297fffc4 	addi	r5,r5,-1
1000f694:	1946703a 	and	r3,r3,r5
1000f698:	1804977a 	slli	r2,r3,29
1000f69c:	1806927a 	slli	r3,r3,9
1000f6a0:	8822d0fa 	srli	r17,r17,3
1000f6a4:	8401ffcc 	andi	r16,r16,2047
1000f6a8:	180ad33a 	srli	r5,r3,12
1000f6ac:	9100004c 	andi	r4,r18,1
1000f6b0:	1444b03a 	or	r2,r2,r17
1000f6b4:	80c1ffcc 	andi	r3,r16,2047
1000f6b8:	1820953a 	slli	r16,r3,20
1000f6bc:	20c03fcc 	andi	r3,r4,255
1000f6c0:	180897fa 	slli	r4,r3,31
1000f6c4:	00c00434 	movhi	r3,16
1000f6c8:	18ffffc4 	addi	r3,r3,-1
1000f6cc:	28c6703a 	and	r3,r5,r3
1000f6d0:	1c06b03a 	or	r3,r3,r16
1000f6d4:	1906b03a 	or	r3,r3,r4
1000f6d8:	dfc00417 	ldw	ra,16(sp)
1000f6dc:	dcc00317 	ldw	r19,12(sp)
1000f6e0:	dc800217 	ldw	r18,8(sp)
1000f6e4:	dc400117 	ldw	r17,4(sp)
1000f6e8:	dc000017 	ldw	r16,0(sp)
1000f6ec:	dec00504 	addi	sp,sp,20
1000f6f0:	f800283a 	ret
1000f6f4:	0101ffc4 	movi	r4,2047
1000f6f8:	813fd626 	beq	r16,r4,1000f654 <__alt_data_end+0xf800f654>
1000f6fc:	29402034 	orhi	r5,r5,128
1000f700:	01000e04 	movi	r4,56
1000f704:	2080a316 	blt	r4,r2,1000f994 <__subdf3+0x3c4>
1000f708:	010007c4 	movi	r4,31
1000f70c:	2080c616 	blt	r4,r2,1000fa28 <__subdf3+0x458>
1000f710:	01000804 	movi	r4,32
1000f714:	2089c83a 	sub	r4,r4,r2
1000f718:	2910983a 	sll	r8,r5,r4
1000f71c:	308ed83a 	srl	r7,r6,r2
1000f720:	3108983a 	sll	r4,r6,r4
1000f724:	2884d83a 	srl	r2,r5,r2
1000f728:	41ccb03a 	or	r6,r8,r7
1000f72c:	2008c03a 	cmpne	r4,r4,zero
1000f730:	310cb03a 	or	r6,r6,r4
1000f734:	898dc83a 	sub	r6,r17,r6
1000f738:	89a3803a 	cmpltu	r17,r17,r6
1000f73c:	1887c83a 	sub	r3,r3,r2
1000f740:	1c47c83a 	sub	r3,r3,r17
1000f744:	3023883a 	mov	r17,r6
1000f748:	1880202c 	andhi	r2,r3,128
1000f74c:	10002326 	beq	r2,zero,1000f7dc <__subdf3+0x20c>
1000f750:	04c02034 	movhi	r19,128
1000f754:	9cffffc4 	addi	r19,r19,-1
1000f758:	1ce6703a 	and	r19,r3,r19
1000f75c:	98007a26 	beq	r19,zero,1000f948 <__subdf3+0x378>
1000f760:	9809883a 	mov	r4,r19
1000f764:	00100d00 	call	100100d0 <__clzsi2>
1000f768:	113ffe04 	addi	r4,r2,-8
1000f76c:	00c007c4 	movi	r3,31
1000f770:	19007b16 	blt	r3,r4,1000f960 <__subdf3+0x390>
1000f774:	00800804 	movi	r2,32
1000f778:	1105c83a 	sub	r2,r2,r4
1000f77c:	8884d83a 	srl	r2,r17,r2
1000f780:	9906983a 	sll	r3,r19,r4
1000f784:	8922983a 	sll	r17,r17,r4
1000f788:	10c4b03a 	or	r2,r2,r3
1000f78c:	24007816 	blt	r4,r16,1000f970 <__subdf3+0x3a0>
1000f790:	2421c83a 	sub	r16,r4,r16
1000f794:	80c00044 	addi	r3,r16,1
1000f798:	010007c4 	movi	r4,31
1000f79c:	20c09516 	blt	r4,r3,1000f9f4 <__subdf3+0x424>
1000f7a0:	01400804 	movi	r5,32
1000f7a4:	28cbc83a 	sub	r5,r5,r3
1000f7a8:	88c8d83a 	srl	r4,r17,r3
1000f7ac:	8962983a 	sll	r17,r17,r5
1000f7b0:	114a983a 	sll	r5,r2,r5
1000f7b4:	10c6d83a 	srl	r3,r2,r3
1000f7b8:	8804c03a 	cmpne	r2,r17,zero
1000f7bc:	290ab03a 	or	r5,r5,r4
1000f7c0:	28a2b03a 	or	r17,r5,r2
1000f7c4:	0021883a 	mov	r16,zero
1000f7c8:	003fa206 	br	1000f654 <__alt_data_end+0xf800f654>
1000f7cc:	2090b03a 	or	r8,r4,r2
1000f7d0:	40018e26 	beq	r8,zero,1000fe0c <__subdf3+0x83c>
1000f7d4:	1007883a 	mov	r3,r2
1000f7d8:	2023883a 	mov	r17,r4
1000f7dc:	888001cc 	andi	r2,r17,7
1000f7e0:	103f9e1e 	bne	r2,zero,1000f65c <__alt_data_end+0xf800f65c>
1000f7e4:	1804977a 	slli	r2,r3,29
1000f7e8:	8822d0fa 	srli	r17,r17,3
1000f7ec:	1810d0fa 	srli	r8,r3,3
1000f7f0:	9100004c 	andi	r4,r18,1
1000f7f4:	1444b03a 	or	r2,r2,r17
1000f7f8:	00c1ffc4 	movi	r3,2047
1000f7fc:	80c02826 	beq	r16,r3,1000f8a0 <__subdf3+0x2d0>
1000f800:	01400434 	movhi	r5,16
1000f804:	297fffc4 	addi	r5,r5,-1
1000f808:	80e0703a 	and	r16,r16,r3
1000f80c:	414a703a 	and	r5,r8,r5
1000f810:	003fa806 	br	1000f6b4 <__alt_data_end+0xf800f6b4>
1000f814:	0080630e 	bge	zero,r2,1000f9a4 <__subdf3+0x3d4>
1000f818:	48003026 	beq	r9,zero,1000f8dc <__subdf3+0x30c>
1000f81c:	0101ffc4 	movi	r4,2047
1000f820:	813f8c26 	beq	r16,r4,1000f654 <__alt_data_end+0xf800f654>
1000f824:	29402034 	orhi	r5,r5,128
1000f828:	01000e04 	movi	r4,56
1000f82c:	2080a90e 	bge	r4,r2,1000fad4 <__subdf3+0x504>
1000f830:	298cb03a 	or	r6,r5,r6
1000f834:	3012c03a 	cmpne	r9,r6,zero
1000f838:	0005883a 	mov	r2,zero
1000f83c:	4c53883a 	add	r9,r9,r17
1000f840:	4c63803a 	cmpltu	r17,r9,r17
1000f844:	10c7883a 	add	r3,r2,r3
1000f848:	88c7883a 	add	r3,r17,r3
1000f84c:	4823883a 	mov	r17,r9
1000f850:	1880202c 	andhi	r2,r3,128
1000f854:	1000d026 	beq	r2,zero,1000fb98 <__subdf3+0x5c8>
1000f858:	84000044 	addi	r16,r16,1
1000f85c:	0081ffc4 	movi	r2,2047
1000f860:	8080fe26 	beq	r16,r2,1000fc5c <__subdf3+0x68c>
1000f864:	00bfe034 	movhi	r2,65408
1000f868:	10bfffc4 	addi	r2,r2,-1
1000f86c:	1886703a 	and	r3,r3,r2
1000f870:	880ad07a 	srli	r5,r17,1
1000f874:	180497fa 	slli	r2,r3,31
1000f878:	8900004c 	andi	r4,r17,1
1000f87c:	2922b03a 	or	r17,r5,r4
1000f880:	1806d07a 	srli	r3,r3,1
1000f884:	1462b03a 	or	r17,r2,r17
1000f888:	3825883a 	mov	r18,r7
1000f88c:	003f7106 	br	1000f654 <__alt_data_end+0xf800f654>
1000f890:	2984b03a 	or	r2,r5,r6
1000f894:	103f6826 	beq	r2,zero,1000f638 <__alt_data_end+0xf800f638>
1000f898:	39c03fcc 	andi	r7,r7,255
1000f89c:	003f6706 	br	1000f63c <__alt_data_end+0xf800f63c>
1000f8a0:	4086b03a 	or	r3,r8,r2
1000f8a4:	18015226 	beq	r3,zero,1000fdf0 <__subdf3+0x820>
1000f8a8:	00c00434 	movhi	r3,16
1000f8ac:	41400234 	orhi	r5,r8,8
1000f8b0:	18ffffc4 	addi	r3,r3,-1
1000f8b4:	28ca703a 	and	r5,r5,r3
1000f8b8:	003f7e06 	br	1000f6b4 <__alt_data_end+0xf800f6b4>
1000f8bc:	10bfffc4 	addi	r2,r2,-1
1000f8c0:	1000491e 	bne	r2,zero,1000f9e8 <__subdf3+0x418>
1000f8c4:	898fc83a 	sub	r7,r17,r6
1000f8c8:	89e3803a 	cmpltu	r17,r17,r7
1000f8cc:	1947c83a 	sub	r3,r3,r5
1000f8d0:	1c47c83a 	sub	r3,r3,r17
1000f8d4:	3823883a 	mov	r17,r7
1000f8d8:	003f9b06 	br	1000f748 <__alt_data_end+0xf800f748>
1000f8dc:	2988b03a 	or	r4,r5,r6
1000f8e0:	203f5c26 	beq	r4,zero,1000f654 <__alt_data_end+0xf800f654>
1000f8e4:	10bfffc4 	addi	r2,r2,-1
1000f8e8:	1000931e 	bne	r2,zero,1000fb38 <__subdf3+0x568>
1000f8ec:	898d883a 	add	r6,r17,r6
1000f8f0:	3463803a 	cmpltu	r17,r6,r17
1000f8f4:	1947883a 	add	r3,r3,r5
1000f8f8:	88c7883a 	add	r3,r17,r3
1000f8fc:	3023883a 	mov	r17,r6
1000f900:	003fd306 	br	1000f850 <__alt_data_end+0xf800f850>
1000f904:	1000541e 	bne	r2,zero,1000fa58 <__subdf3+0x488>
1000f908:	80800044 	addi	r2,r16,1
1000f90c:	1081ffcc 	andi	r2,r2,2047
1000f910:	01000044 	movi	r4,1
1000f914:	2080a20e 	bge	r4,r2,1000fba0 <__subdf3+0x5d0>
1000f918:	8989c83a 	sub	r4,r17,r6
1000f91c:	8905803a 	cmpltu	r2,r17,r4
1000f920:	1967c83a 	sub	r19,r3,r5
1000f924:	98a7c83a 	sub	r19,r19,r2
1000f928:	9880202c 	andhi	r2,r19,128
1000f92c:	10006326 	beq	r2,zero,1000fabc <__subdf3+0x4ec>
1000f930:	3463c83a 	sub	r17,r6,r17
1000f934:	28c7c83a 	sub	r3,r5,r3
1000f938:	344d803a 	cmpltu	r6,r6,r17
1000f93c:	19a7c83a 	sub	r19,r3,r6
1000f940:	3825883a 	mov	r18,r7
1000f944:	983f861e 	bne	r19,zero,1000f760 <__alt_data_end+0xf800f760>
1000f948:	8809883a 	mov	r4,r17
1000f94c:	00100d00 	call	100100d0 <__clzsi2>
1000f950:	10800804 	addi	r2,r2,32
1000f954:	113ffe04 	addi	r4,r2,-8
1000f958:	00c007c4 	movi	r3,31
1000f95c:	193f850e 	bge	r3,r4,1000f774 <__alt_data_end+0xf800f774>
1000f960:	10bff604 	addi	r2,r2,-40
1000f964:	8884983a 	sll	r2,r17,r2
1000f968:	0023883a 	mov	r17,zero
1000f96c:	243f880e 	bge	r4,r16,1000f790 <__alt_data_end+0xf800f790>
1000f970:	00ffe034 	movhi	r3,65408
1000f974:	18ffffc4 	addi	r3,r3,-1
1000f978:	8121c83a 	sub	r16,r16,r4
1000f97c:	10c6703a 	and	r3,r2,r3
1000f980:	003f3406 	br	1000f654 <__alt_data_end+0xf800f654>
1000f984:	9100004c 	andi	r4,r18,1
1000f988:	000b883a 	mov	r5,zero
1000f98c:	0005883a 	mov	r2,zero
1000f990:	003f4806 	br	1000f6b4 <__alt_data_end+0xf800f6b4>
1000f994:	298cb03a 	or	r6,r5,r6
1000f998:	300cc03a 	cmpne	r6,r6,zero
1000f99c:	0005883a 	mov	r2,zero
1000f9a0:	003f6406 	br	1000f734 <__alt_data_end+0xf800f734>
1000f9a4:	10009a1e 	bne	r2,zero,1000fc10 <__subdf3+0x640>
1000f9a8:	82400044 	addi	r9,r16,1
1000f9ac:	4881ffcc 	andi	r2,r9,2047
1000f9b0:	02800044 	movi	r10,1
1000f9b4:	5080670e 	bge	r10,r2,1000fb54 <__subdf3+0x584>
1000f9b8:	0081ffc4 	movi	r2,2047
1000f9bc:	4880af26 	beq	r9,r2,1000fc7c <__subdf3+0x6ac>
1000f9c0:	898d883a 	add	r6,r17,r6
1000f9c4:	1945883a 	add	r2,r3,r5
1000f9c8:	3447803a 	cmpltu	r3,r6,r17
1000f9cc:	1887883a 	add	r3,r3,r2
1000f9d0:	182297fa 	slli	r17,r3,31
1000f9d4:	300cd07a 	srli	r6,r6,1
1000f9d8:	1806d07a 	srli	r3,r3,1
1000f9dc:	4821883a 	mov	r16,r9
1000f9e0:	89a2b03a 	or	r17,r17,r6
1000f9e4:	003f1b06 	br	1000f654 <__alt_data_end+0xf800f654>
1000f9e8:	0101ffc4 	movi	r4,2047
1000f9ec:	813f441e 	bne	r16,r4,1000f700 <__alt_data_end+0xf800f700>
1000f9f0:	003f1806 	br	1000f654 <__alt_data_end+0xf800f654>
1000f9f4:	843ff844 	addi	r16,r16,-31
1000f9f8:	01400804 	movi	r5,32
1000f9fc:	1408d83a 	srl	r4,r2,r16
1000fa00:	19405026 	beq	r3,r5,1000fb44 <__subdf3+0x574>
1000fa04:	01401004 	movi	r5,64
1000fa08:	28c7c83a 	sub	r3,r5,r3
1000fa0c:	10c4983a 	sll	r2,r2,r3
1000fa10:	88a2b03a 	or	r17,r17,r2
1000fa14:	8822c03a 	cmpne	r17,r17,zero
1000fa18:	2462b03a 	or	r17,r4,r17
1000fa1c:	0007883a 	mov	r3,zero
1000fa20:	0021883a 	mov	r16,zero
1000fa24:	003f6d06 	br	1000f7dc <__alt_data_end+0xf800f7dc>
1000fa28:	11fff804 	addi	r7,r2,-32
1000fa2c:	01000804 	movi	r4,32
1000fa30:	29ced83a 	srl	r7,r5,r7
1000fa34:	11004526 	beq	r2,r4,1000fb4c <__subdf3+0x57c>
1000fa38:	01001004 	movi	r4,64
1000fa3c:	2089c83a 	sub	r4,r4,r2
1000fa40:	2904983a 	sll	r2,r5,r4
1000fa44:	118cb03a 	or	r6,r2,r6
1000fa48:	300cc03a 	cmpne	r6,r6,zero
1000fa4c:	398cb03a 	or	r6,r7,r6
1000fa50:	0005883a 	mov	r2,zero
1000fa54:	003f3706 	br	1000f734 <__alt_data_end+0xf800f734>
1000fa58:	80002a26 	beq	r16,zero,1000fb04 <__subdf3+0x534>
1000fa5c:	0101ffc4 	movi	r4,2047
1000fa60:	49006626 	beq	r9,r4,1000fbfc <__subdf3+0x62c>
1000fa64:	0085c83a 	sub	r2,zero,r2
1000fa68:	18c02034 	orhi	r3,r3,128
1000fa6c:	01000e04 	movi	r4,56
1000fa70:	20807e16 	blt	r4,r2,1000fc6c <__subdf3+0x69c>
1000fa74:	010007c4 	movi	r4,31
1000fa78:	2080e716 	blt	r4,r2,1000fe18 <__subdf3+0x848>
1000fa7c:	01000804 	movi	r4,32
1000fa80:	2089c83a 	sub	r4,r4,r2
1000fa84:	1914983a 	sll	r10,r3,r4
1000fa88:	8890d83a 	srl	r8,r17,r2
1000fa8c:	8908983a 	sll	r4,r17,r4
1000fa90:	1884d83a 	srl	r2,r3,r2
1000fa94:	5222b03a 	or	r17,r10,r8
1000fa98:	2006c03a 	cmpne	r3,r4,zero
1000fa9c:	88e2b03a 	or	r17,r17,r3
1000faa0:	3463c83a 	sub	r17,r6,r17
1000faa4:	2885c83a 	sub	r2,r5,r2
1000faa8:	344d803a 	cmpltu	r6,r6,r17
1000faac:	1187c83a 	sub	r3,r2,r6
1000fab0:	4821883a 	mov	r16,r9
1000fab4:	3825883a 	mov	r18,r7
1000fab8:	003f2306 	br	1000f748 <__alt_data_end+0xf800f748>
1000fabc:	24d0b03a 	or	r8,r4,r19
1000fac0:	40001b1e 	bne	r8,zero,1000fb30 <__subdf3+0x560>
1000fac4:	0005883a 	mov	r2,zero
1000fac8:	0009883a 	mov	r4,zero
1000facc:	0021883a 	mov	r16,zero
1000fad0:	003f4906 	br	1000f7f8 <__alt_data_end+0xf800f7f8>
1000fad4:	010007c4 	movi	r4,31
1000fad8:	20803a16 	blt	r4,r2,1000fbc4 <__subdf3+0x5f4>
1000fadc:	01000804 	movi	r4,32
1000fae0:	2089c83a 	sub	r4,r4,r2
1000fae4:	2912983a 	sll	r9,r5,r4
1000fae8:	3090d83a 	srl	r8,r6,r2
1000faec:	3108983a 	sll	r4,r6,r4
1000faf0:	2884d83a 	srl	r2,r5,r2
1000faf4:	4a12b03a 	or	r9,r9,r8
1000faf8:	2008c03a 	cmpne	r4,r4,zero
1000fafc:	4912b03a 	or	r9,r9,r4
1000fb00:	003f4e06 	br	1000f83c <__alt_data_end+0xf800f83c>
1000fb04:	1c48b03a 	or	r4,r3,r17
1000fb08:	20003c26 	beq	r4,zero,1000fbfc <__subdf3+0x62c>
1000fb0c:	0084303a 	nor	r2,zero,r2
1000fb10:	1000381e 	bne	r2,zero,1000fbf4 <__subdf3+0x624>
1000fb14:	3463c83a 	sub	r17,r6,r17
1000fb18:	28c5c83a 	sub	r2,r5,r3
1000fb1c:	344d803a 	cmpltu	r6,r6,r17
1000fb20:	1187c83a 	sub	r3,r2,r6
1000fb24:	4821883a 	mov	r16,r9
1000fb28:	3825883a 	mov	r18,r7
1000fb2c:	003f0606 	br	1000f748 <__alt_data_end+0xf800f748>
1000fb30:	2023883a 	mov	r17,r4
1000fb34:	003f0906 	br	1000f75c <__alt_data_end+0xf800f75c>
1000fb38:	0101ffc4 	movi	r4,2047
1000fb3c:	813f3a1e 	bne	r16,r4,1000f828 <__alt_data_end+0xf800f828>
1000fb40:	003ec406 	br	1000f654 <__alt_data_end+0xf800f654>
1000fb44:	0005883a 	mov	r2,zero
1000fb48:	003fb106 	br	1000fa10 <__alt_data_end+0xf800fa10>
1000fb4c:	0005883a 	mov	r2,zero
1000fb50:	003fbc06 	br	1000fa44 <__alt_data_end+0xf800fa44>
1000fb54:	1c44b03a 	or	r2,r3,r17
1000fb58:	80008e1e 	bne	r16,zero,1000fd94 <__subdf3+0x7c4>
1000fb5c:	1000c826 	beq	r2,zero,1000fe80 <__subdf3+0x8b0>
1000fb60:	2984b03a 	or	r2,r5,r6
1000fb64:	103ebb26 	beq	r2,zero,1000f654 <__alt_data_end+0xf800f654>
1000fb68:	8989883a 	add	r4,r17,r6
1000fb6c:	1945883a 	add	r2,r3,r5
1000fb70:	2447803a 	cmpltu	r3,r4,r17
1000fb74:	1887883a 	add	r3,r3,r2
1000fb78:	1880202c 	andhi	r2,r3,128
1000fb7c:	2023883a 	mov	r17,r4
1000fb80:	103f1626 	beq	r2,zero,1000f7dc <__alt_data_end+0xf800f7dc>
1000fb84:	00bfe034 	movhi	r2,65408
1000fb88:	10bfffc4 	addi	r2,r2,-1
1000fb8c:	5021883a 	mov	r16,r10
1000fb90:	1886703a 	and	r3,r3,r2
1000fb94:	003eaf06 	br	1000f654 <__alt_data_end+0xf800f654>
1000fb98:	3825883a 	mov	r18,r7
1000fb9c:	003f0f06 	br	1000f7dc <__alt_data_end+0xf800f7dc>
1000fba0:	1c44b03a 	or	r2,r3,r17
1000fba4:	8000251e 	bne	r16,zero,1000fc3c <__subdf3+0x66c>
1000fba8:	1000661e 	bne	r2,zero,1000fd44 <__subdf3+0x774>
1000fbac:	2990b03a 	or	r8,r5,r6
1000fbb0:	40009626 	beq	r8,zero,1000fe0c <__subdf3+0x83c>
1000fbb4:	2807883a 	mov	r3,r5
1000fbb8:	3023883a 	mov	r17,r6
1000fbbc:	3825883a 	mov	r18,r7
1000fbc0:	003ea406 	br	1000f654 <__alt_data_end+0xf800f654>
1000fbc4:	127ff804 	addi	r9,r2,-32
1000fbc8:	01000804 	movi	r4,32
1000fbcc:	2a52d83a 	srl	r9,r5,r9
1000fbd0:	11008c26 	beq	r2,r4,1000fe04 <__subdf3+0x834>
1000fbd4:	01001004 	movi	r4,64
1000fbd8:	2085c83a 	sub	r2,r4,r2
1000fbdc:	2884983a 	sll	r2,r5,r2
1000fbe0:	118cb03a 	or	r6,r2,r6
1000fbe4:	300cc03a 	cmpne	r6,r6,zero
1000fbe8:	4992b03a 	or	r9,r9,r6
1000fbec:	0005883a 	mov	r2,zero
1000fbf0:	003f1206 	br	1000f83c <__alt_data_end+0xf800f83c>
1000fbf4:	0101ffc4 	movi	r4,2047
1000fbf8:	493f9c1e 	bne	r9,r4,1000fa6c <__alt_data_end+0xf800fa6c>
1000fbfc:	2807883a 	mov	r3,r5
1000fc00:	3023883a 	mov	r17,r6
1000fc04:	4821883a 	mov	r16,r9
1000fc08:	3825883a 	mov	r18,r7
1000fc0c:	003e9106 	br	1000f654 <__alt_data_end+0xf800f654>
1000fc10:	80001f1e 	bne	r16,zero,1000fc90 <__subdf3+0x6c0>
1000fc14:	1c48b03a 	or	r4,r3,r17
1000fc18:	20005a26 	beq	r4,zero,1000fd84 <__subdf3+0x7b4>
1000fc1c:	0084303a 	nor	r2,zero,r2
1000fc20:	1000561e 	bne	r2,zero,1000fd7c <__subdf3+0x7ac>
1000fc24:	89a3883a 	add	r17,r17,r6
1000fc28:	1945883a 	add	r2,r3,r5
1000fc2c:	898d803a 	cmpltu	r6,r17,r6
1000fc30:	3087883a 	add	r3,r6,r2
1000fc34:	4821883a 	mov	r16,r9
1000fc38:	003f0506 	br	1000f850 <__alt_data_end+0xf800f850>
1000fc3c:	10002b1e 	bne	r2,zero,1000fcec <__subdf3+0x71c>
1000fc40:	2984b03a 	or	r2,r5,r6
1000fc44:	10008026 	beq	r2,zero,1000fe48 <__subdf3+0x878>
1000fc48:	2807883a 	mov	r3,r5
1000fc4c:	3023883a 	mov	r17,r6
1000fc50:	3825883a 	mov	r18,r7
1000fc54:	0401ffc4 	movi	r16,2047
1000fc58:	003e7e06 	br	1000f654 <__alt_data_end+0xf800f654>
1000fc5c:	3809883a 	mov	r4,r7
1000fc60:	0011883a 	mov	r8,zero
1000fc64:	0005883a 	mov	r2,zero
1000fc68:	003ee306 	br	1000f7f8 <__alt_data_end+0xf800f7f8>
1000fc6c:	1c62b03a 	or	r17,r3,r17
1000fc70:	8822c03a 	cmpne	r17,r17,zero
1000fc74:	0005883a 	mov	r2,zero
1000fc78:	003f8906 	br	1000faa0 <__alt_data_end+0xf800faa0>
1000fc7c:	3809883a 	mov	r4,r7
1000fc80:	4821883a 	mov	r16,r9
1000fc84:	0011883a 	mov	r8,zero
1000fc88:	0005883a 	mov	r2,zero
1000fc8c:	003eda06 	br	1000f7f8 <__alt_data_end+0xf800f7f8>
1000fc90:	0101ffc4 	movi	r4,2047
1000fc94:	49003b26 	beq	r9,r4,1000fd84 <__subdf3+0x7b4>
1000fc98:	0085c83a 	sub	r2,zero,r2
1000fc9c:	18c02034 	orhi	r3,r3,128
1000fca0:	01000e04 	movi	r4,56
1000fca4:	20806e16 	blt	r4,r2,1000fe60 <__subdf3+0x890>
1000fca8:	010007c4 	movi	r4,31
1000fcac:	20807716 	blt	r4,r2,1000fe8c <__subdf3+0x8bc>
1000fcb0:	01000804 	movi	r4,32
1000fcb4:	2089c83a 	sub	r4,r4,r2
1000fcb8:	1914983a 	sll	r10,r3,r4
1000fcbc:	8890d83a 	srl	r8,r17,r2
1000fcc0:	8908983a 	sll	r4,r17,r4
1000fcc4:	1884d83a 	srl	r2,r3,r2
1000fcc8:	5222b03a 	or	r17,r10,r8
1000fccc:	2006c03a 	cmpne	r3,r4,zero
1000fcd0:	88e2b03a 	or	r17,r17,r3
1000fcd4:	89a3883a 	add	r17,r17,r6
1000fcd8:	1145883a 	add	r2,r2,r5
1000fcdc:	898d803a 	cmpltu	r6,r17,r6
1000fce0:	3087883a 	add	r3,r6,r2
1000fce4:	4821883a 	mov	r16,r9
1000fce8:	003ed906 	br	1000f850 <__alt_data_end+0xf800f850>
1000fcec:	2984b03a 	or	r2,r5,r6
1000fcf0:	10004226 	beq	r2,zero,1000fdfc <__subdf3+0x82c>
1000fcf4:	1808d0fa 	srli	r4,r3,3
1000fcf8:	8822d0fa 	srli	r17,r17,3
1000fcfc:	1806977a 	slli	r3,r3,29
1000fd00:	2080022c 	andhi	r2,r4,8
1000fd04:	1c62b03a 	or	r17,r3,r17
1000fd08:	10000826 	beq	r2,zero,1000fd2c <__subdf3+0x75c>
1000fd0c:	2812d0fa 	srli	r9,r5,3
1000fd10:	4880022c 	andhi	r2,r9,8
1000fd14:	1000051e 	bne	r2,zero,1000fd2c <__subdf3+0x75c>
1000fd18:	300cd0fa 	srli	r6,r6,3
1000fd1c:	2804977a 	slli	r2,r5,29
1000fd20:	4809883a 	mov	r4,r9
1000fd24:	3825883a 	mov	r18,r7
1000fd28:	11a2b03a 	or	r17,r2,r6
1000fd2c:	8806d77a 	srli	r3,r17,29
1000fd30:	200890fa 	slli	r4,r4,3
1000fd34:	882290fa 	slli	r17,r17,3
1000fd38:	0401ffc4 	movi	r16,2047
1000fd3c:	1906b03a 	or	r3,r3,r4
1000fd40:	003e4406 	br	1000f654 <__alt_data_end+0xf800f654>
1000fd44:	2984b03a 	or	r2,r5,r6
1000fd48:	103e4226 	beq	r2,zero,1000f654 <__alt_data_end+0xf800f654>
1000fd4c:	8989c83a 	sub	r4,r17,r6
1000fd50:	8911803a 	cmpltu	r8,r17,r4
1000fd54:	1945c83a 	sub	r2,r3,r5
1000fd58:	1205c83a 	sub	r2,r2,r8
1000fd5c:	1200202c 	andhi	r8,r2,128
1000fd60:	403e9a26 	beq	r8,zero,1000f7cc <__alt_data_end+0xf800f7cc>
1000fd64:	3463c83a 	sub	r17,r6,r17
1000fd68:	28c5c83a 	sub	r2,r5,r3
1000fd6c:	344d803a 	cmpltu	r6,r6,r17
1000fd70:	1187c83a 	sub	r3,r2,r6
1000fd74:	3825883a 	mov	r18,r7
1000fd78:	003e3606 	br	1000f654 <__alt_data_end+0xf800f654>
1000fd7c:	0101ffc4 	movi	r4,2047
1000fd80:	493fc71e 	bne	r9,r4,1000fca0 <__alt_data_end+0xf800fca0>
1000fd84:	2807883a 	mov	r3,r5
1000fd88:	3023883a 	mov	r17,r6
1000fd8c:	4821883a 	mov	r16,r9
1000fd90:	003e3006 	br	1000f654 <__alt_data_end+0xf800f654>
1000fd94:	10003626 	beq	r2,zero,1000fe70 <__subdf3+0x8a0>
1000fd98:	2984b03a 	or	r2,r5,r6
1000fd9c:	10001726 	beq	r2,zero,1000fdfc <__subdf3+0x82c>
1000fda0:	1808d0fa 	srli	r4,r3,3
1000fda4:	8822d0fa 	srli	r17,r17,3
1000fda8:	1806977a 	slli	r3,r3,29
1000fdac:	2080022c 	andhi	r2,r4,8
1000fdb0:	1c62b03a 	or	r17,r3,r17
1000fdb4:	10000726 	beq	r2,zero,1000fdd4 <__subdf3+0x804>
1000fdb8:	2812d0fa 	srli	r9,r5,3
1000fdbc:	4880022c 	andhi	r2,r9,8
1000fdc0:	1000041e 	bne	r2,zero,1000fdd4 <__subdf3+0x804>
1000fdc4:	300cd0fa 	srli	r6,r6,3
1000fdc8:	2804977a 	slli	r2,r5,29
1000fdcc:	4809883a 	mov	r4,r9
1000fdd0:	11a2b03a 	or	r17,r2,r6
1000fdd4:	8806d77a 	srli	r3,r17,29
1000fdd8:	200890fa 	slli	r4,r4,3
1000fddc:	882290fa 	slli	r17,r17,3
1000fde0:	3825883a 	mov	r18,r7
1000fde4:	1906b03a 	or	r3,r3,r4
1000fde8:	0401ffc4 	movi	r16,2047
1000fdec:	003e1906 	br	1000f654 <__alt_data_end+0xf800f654>
1000fdf0:	000b883a 	mov	r5,zero
1000fdf4:	0005883a 	mov	r2,zero
1000fdf8:	003e2e06 	br	1000f6b4 <__alt_data_end+0xf800f6b4>
1000fdfc:	0401ffc4 	movi	r16,2047
1000fe00:	003e1406 	br	1000f654 <__alt_data_end+0xf800f654>
1000fe04:	0005883a 	mov	r2,zero
1000fe08:	003f7506 	br	1000fbe0 <__alt_data_end+0xf800fbe0>
1000fe0c:	0005883a 	mov	r2,zero
1000fe10:	0009883a 	mov	r4,zero
1000fe14:	003e7806 	br	1000f7f8 <__alt_data_end+0xf800f7f8>
1000fe18:	123ff804 	addi	r8,r2,-32
1000fe1c:	01000804 	movi	r4,32
1000fe20:	1a10d83a 	srl	r8,r3,r8
1000fe24:	11002526 	beq	r2,r4,1000febc <__subdf3+0x8ec>
1000fe28:	01001004 	movi	r4,64
1000fe2c:	2085c83a 	sub	r2,r4,r2
1000fe30:	1884983a 	sll	r2,r3,r2
1000fe34:	1444b03a 	or	r2,r2,r17
1000fe38:	1004c03a 	cmpne	r2,r2,zero
1000fe3c:	40a2b03a 	or	r17,r8,r2
1000fe40:	0005883a 	mov	r2,zero
1000fe44:	003f1606 	br	1000faa0 <__alt_data_end+0xf800faa0>
1000fe48:	02000434 	movhi	r8,16
1000fe4c:	0009883a 	mov	r4,zero
1000fe50:	423fffc4 	addi	r8,r8,-1
1000fe54:	00bfffc4 	movi	r2,-1
1000fe58:	0401ffc4 	movi	r16,2047
1000fe5c:	003e6606 	br	1000f7f8 <__alt_data_end+0xf800f7f8>
1000fe60:	1c62b03a 	or	r17,r3,r17
1000fe64:	8822c03a 	cmpne	r17,r17,zero
1000fe68:	0005883a 	mov	r2,zero
1000fe6c:	003f9906 	br	1000fcd4 <__alt_data_end+0xf800fcd4>
1000fe70:	2807883a 	mov	r3,r5
1000fe74:	3023883a 	mov	r17,r6
1000fe78:	0401ffc4 	movi	r16,2047
1000fe7c:	003df506 	br	1000f654 <__alt_data_end+0xf800f654>
1000fe80:	2807883a 	mov	r3,r5
1000fe84:	3023883a 	mov	r17,r6
1000fe88:	003df206 	br	1000f654 <__alt_data_end+0xf800f654>
1000fe8c:	123ff804 	addi	r8,r2,-32
1000fe90:	01000804 	movi	r4,32
1000fe94:	1a10d83a 	srl	r8,r3,r8
1000fe98:	11000a26 	beq	r2,r4,1000fec4 <__subdf3+0x8f4>
1000fe9c:	01001004 	movi	r4,64
1000fea0:	2085c83a 	sub	r2,r4,r2
1000fea4:	1884983a 	sll	r2,r3,r2
1000fea8:	1444b03a 	or	r2,r2,r17
1000feac:	1004c03a 	cmpne	r2,r2,zero
1000feb0:	40a2b03a 	or	r17,r8,r2
1000feb4:	0005883a 	mov	r2,zero
1000feb8:	003f8606 	br	1000fcd4 <__alt_data_end+0xf800fcd4>
1000febc:	0005883a 	mov	r2,zero
1000fec0:	003fdc06 	br	1000fe34 <__alt_data_end+0xf800fe34>
1000fec4:	0005883a 	mov	r2,zero
1000fec8:	003ff706 	br	1000fea8 <__alt_data_end+0xf800fea8>

1000fecc <__fixdfsi>:
1000fecc:	280cd53a 	srli	r6,r5,20
1000fed0:	00c00434 	movhi	r3,16
1000fed4:	18ffffc4 	addi	r3,r3,-1
1000fed8:	3181ffcc 	andi	r6,r6,2047
1000fedc:	01c0ff84 	movi	r7,1022
1000fee0:	28c6703a 	and	r3,r5,r3
1000fee4:	280ad7fa 	srli	r5,r5,31
1000fee8:	3980120e 	bge	r7,r6,1000ff34 <__fixdfsi+0x68>
1000feec:	00810744 	movi	r2,1053
1000fef0:	11800c16 	blt	r2,r6,1000ff24 <__fixdfsi+0x58>
1000fef4:	00810cc4 	movi	r2,1075
1000fef8:	1185c83a 	sub	r2,r2,r6
1000fefc:	01c007c4 	movi	r7,31
1000ff00:	18c00434 	orhi	r3,r3,16
1000ff04:	38800d16 	blt	r7,r2,1000ff3c <__fixdfsi+0x70>
1000ff08:	31befb44 	addi	r6,r6,-1043
1000ff0c:	2084d83a 	srl	r2,r4,r2
1000ff10:	1986983a 	sll	r3,r3,r6
1000ff14:	1884b03a 	or	r2,r3,r2
1000ff18:	28000726 	beq	r5,zero,1000ff38 <__fixdfsi+0x6c>
1000ff1c:	0085c83a 	sub	r2,zero,r2
1000ff20:	f800283a 	ret
1000ff24:	00a00034 	movhi	r2,32768
1000ff28:	10bfffc4 	addi	r2,r2,-1
1000ff2c:	2885883a 	add	r2,r5,r2
1000ff30:	f800283a 	ret
1000ff34:	0005883a 	mov	r2,zero
1000ff38:	f800283a 	ret
1000ff3c:	008104c4 	movi	r2,1043
1000ff40:	1185c83a 	sub	r2,r2,r6
1000ff44:	1884d83a 	srl	r2,r3,r2
1000ff48:	003ff306 	br	1000ff18 <__alt_data_end+0xf800ff18>

1000ff4c <__floatsidf>:
1000ff4c:	defffd04 	addi	sp,sp,-12
1000ff50:	dfc00215 	stw	ra,8(sp)
1000ff54:	dc400115 	stw	r17,4(sp)
1000ff58:	dc000015 	stw	r16,0(sp)
1000ff5c:	20002b26 	beq	r4,zero,1001000c <__floatsidf+0xc0>
1000ff60:	2023883a 	mov	r17,r4
1000ff64:	2020d7fa 	srli	r16,r4,31
1000ff68:	20002d16 	blt	r4,zero,10010020 <__floatsidf+0xd4>
1000ff6c:	8809883a 	mov	r4,r17
1000ff70:	00100d00 	call	100100d0 <__clzsi2>
1000ff74:	01410784 	movi	r5,1054
1000ff78:	288bc83a 	sub	r5,r5,r2
1000ff7c:	01010cc4 	movi	r4,1075
1000ff80:	2149c83a 	sub	r4,r4,r5
1000ff84:	00c007c4 	movi	r3,31
1000ff88:	1900160e 	bge	r3,r4,1000ffe4 <__floatsidf+0x98>
1000ff8c:	00c104c4 	movi	r3,1043
1000ff90:	1947c83a 	sub	r3,r3,r5
1000ff94:	88c6983a 	sll	r3,r17,r3
1000ff98:	00800434 	movhi	r2,16
1000ff9c:	10bfffc4 	addi	r2,r2,-1
1000ffa0:	1886703a 	and	r3,r3,r2
1000ffa4:	2941ffcc 	andi	r5,r5,2047
1000ffa8:	800d883a 	mov	r6,r16
1000ffac:	0005883a 	mov	r2,zero
1000ffb0:	280a953a 	slli	r5,r5,20
1000ffb4:	31803fcc 	andi	r6,r6,255
1000ffb8:	01000434 	movhi	r4,16
1000ffbc:	300c97fa 	slli	r6,r6,31
1000ffc0:	213fffc4 	addi	r4,r4,-1
1000ffc4:	1906703a 	and	r3,r3,r4
1000ffc8:	1946b03a 	or	r3,r3,r5
1000ffcc:	1986b03a 	or	r3,r3,r6
1000ffd0:	dfc00217 	ldw	ra,8(sp)
1000ffd4:	dc400117 	ldw	r17,4(sp)
1000ffd8:	dc000017 	ldw	r16,0(sp)
1000ffdc:	dec00304 	addi	sp,sp,12
1000ffe0:	f800283a 	ret
1000ffe4:	00c002c4 	movi	r3,11
1000ffe8:	1887c83a 	sub	r3,r3,r2
1000ffec:	88c6d83a 	srl	r3,r17,r3
1000fff0:	8904983a 	sll	r2,r17,r4
1000fff4:	01000434 	movhi	r4,16
1000fff8:	213fffc4 	addi	r4,r4,-1
1000fffc:	2941ffcc 	andi	r5,r5,2047
10010000:	1906703a 	and	r3,r3,r4
10010004:	800d883a 	mov	r6,r16
10010008:	003fe906 	br	1000ffb0 <__alt_data_end+0xf800ffb0>
1001000c:	000d883a 	mov	r6,zero
10010010:	000b883a 	mov	r5,zero
10010014:	0007883a 	mov	r3,zero
10010018:	0005883a 	mov	r2,zero
1001001c:	003fe406 	br	1000ffb0 <__alt_data_end+0xf800ffb0>
10010020:	0123c83a 	sub	r17,zero,r4
10010024:	003fd106 	br	1000ff6c <__alt_data_end+0xf800ff6c>

10010028 <__floatunsidf>:
10010028:	defffe04 	addi	sp,sp,-8
1001002c:	dc000015 	stw	r16,0(sp)
10010030:	dfc00115 	stw	ra,4(sp)
10010034:	2021883a 	mov	r16,r4
10010038:	20002226 	beq	r4,zero,100100c4 <__floatunsidf+0x9c>
1001003c:	00100d00 	call	100100d0 <__clzsi2>
10010040:	01010784 	movi	r4,1054
10010044:	2089c83a 	sub	r4,r4,r2
10010048:	01810cc4 	movi	r6,1075
1001004c:	310dc83a 	sub	r6,r6,r4
10010050:	00c007c4 	movi	r3,31
10010054:	1980120e 	bge	r3,r6,100100a0 <__floatunsidf+0x78>
10010058:	00c104c4 	movi	r3,1043
1001005c:	1907c83a 	sub	r3,r3,r4
10010060:	80ca983a 	sll	r5,r16,r3
10010064:	00800434 	movhi	r2,16
10010068:	10bfffc4 	addi	r2,r2,-1
1001006c:	2101ffcc 	andi	r4,r4,2047
10010070:	0021883a 	mov	r16,zero
10010074:	288a703a 	and	r5,r5,r2
10010078:	2008953a 	slli	r4,r4,20
1001007c:	00c00434 	movhi	r3,16
10010080:	18ffffc4 	addi	r3,r3,-1
10010084:	28c6703a 	and	r3,r5,r3
10010088:	8005883a 	mov	r2,r16
1001008c:	1906b03a 	or	r3,r3,r4
10010090:	dfc00117 	ldw	ra,4(sp)
10010094:	dc000017 	ldw	r16,0(sp)
10010098:	dec00204 	addi	sp,sp,8
1001009c:	f800283a 	ret
100100a0:	00c002c4 	movi	r3,11
100100a4:	188bc83a 	sub	r5,r3,r2
100100a8:	814ad83a 	srl	r5,r16,r5
100100ac:	00c00434 	movhi	r3,16
100100b0:	18ffffc4 	addi	r3,r3,-1
100100b4:	81a0983a 	sll	r16,r16,r6
100100b8:	2101ffcc 	andi	r4,r4,2047
100100bc:	28ca703a 	and	r5,r5,r3
100100c0:	003fed06 	br	10010078 <__alt_data_end+0xf8010078>
100100c4:	0009883a 	mov	r4,zero
100100c8:	000b883a 	mov	r5,zero
100100cc:	003fea06 	br	10010078 <__alt_data_end+0xf8010078>

100100d0 <__clzsi2>:
100100d0:	00bfffd4 	movui	r2,65535
100100d4:	11000536 	bltu	r2,r4,100100ec <__clzsi2+0x1c>
100100d8:	00803fc4 	movi	r2,255
100100dc:	11000f36 	bltu	r2,r4,1001011c <__clzsi2+0x4c>
100100e0:	00800804 	movi	r2,32
100100e4:	0007883a 	mov	r3,zero
100100e8:	00000506 	br	10010100 <__clzsi2+0x30>
100100ec:	00804034 	movhi	r2,256
100100f0:	10bfffc4 	addi	r2,r2,-1
100100f4:	11000c2e 	bgeu	r2,r4,10010128 <__clzsi2+0x58>
100100f8:	00800204 	movi	r2,8
100100fc:	00c00604 	movi	r3,24
10010100:	20c8d83a 	srl	r4,r4,r3
10010104:	00c40074 	movhi	r3,4097
10010108:	18ccbe04 	addi	r3,r3,13048
1001010c:	1909883a 	add	r4,r3,r4
10010110:	20c00003 	ldbu	r3,0(r4)
10010114:	10c5c83a 	sub	r2,r2,r3
10010118:	f800283a 	ret
1001011c:	00800604 	movi	r2,24
10010120:	00c00204 	movi	r3,8
10010124:	003ff606 	br	10010100 <__alt_data_end+0xf8010100>
10010128:	00800404 	movi	r2,16
1001012c:	1007883a 	mov	r3,r2
10010130:	003ff306 	br	10010100 <__alt_data_end+0xf8010100>

10010134 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010134:	defffe04 	addi	sp,sp,-8
10010138:	dfc00115 	stw	ra,4(sp)
1001013c:	df000015 	stw	fp,0(sp)
10010140:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010144:	d0a00b17 	ldw	r2,-32724(gp)
10010148:	10000326 	beq	r2,zero,10010158 <alt_get_errno+0x24>
1001014c:	d0a00b17 	ldw	r2,-32724(gp)
10010150:	103ee83a 	callr	r2
10010154:	00000106 	br	1001015c <alt_get_errno+0x28>
10010158:	d0a6d204 	addi	r2,gp,-25784
}
1001015c:	e037883a 	mov	sp,fp
10010160:	dfc00117 	ldw	ra,4(sp)
10010164:	df000017 	ldw	fp,0(sp)
10010168:	dec00204 	addi	sp,sp,8
1001016c:	f800283a 	ret

10010170 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10010170:	defffb04 	addi	sp,sp,-20
10010174:	dfc00415 	stw	ra,16(sp)
10010178:	df000315 	stw	fp,12(sp)
1001017c:	df000304 	addi	fp,sp,12
10010180:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10010184:	e0bfff17 	ldw	r2,-4(fp)
10010188:	10000816 	blt	r2,zero,100101ac <close+0x3c>
1001018c:	01400304 	movi	r5,12
10010190:	e13fff17 	ldw	r4,-4(fp)
10010194:	000d8680 	call	1000d868 <__mulsi3>
10010198:	1007883a 	mov	r3,r2
1001019c:	00840074 	movhi	r2,4097
100101a0:	108f3e04 	addi	r2,r2,15608
100101a4:	1885883a 	add	r2,r3,r2
100101a8:	00000106 	br	100101b0 <close+0x40>
100101ac:	0005883a 	mov	r2,zero
100101b0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100101b4:	e0bffd17 	ldw	r2,-12(fp)
100101b8:	10001926 	beq	r2,zero,10010220 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100101bc:	e0bffd17 	ldw	r2,-12(fp)
100101c0:	10800017 	ldw	r2,0(r2)
100101c4:	10800417 	ldw	r2,16(r2)
100101c8:	10000626 	beq	r2,zero,100101e4 <close+0x74>
100101cc:	e0bffd17 	ldw	r2,-12(fp)
100101d0:	10800017 	ldw	r2,0(r2)
100101d4:	10800417 	ldw	r2,16(r2)
100101d8:	e13ffd17 	ldw	r4,-12(fp)
100101dc:	103ee83a 	callr	r2
100101e0:	00000106 	br	100101e8 <close+0x78>
100101e4:	0005883a 	mov	r2,zero
100101e8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100101ec:	e13fff17 	ldw	r4,-4(fp)
100101f0:	00108580 	call	10010858 <alt_release_fd>
    if (rval < 0)
100101f4:	e0bffe17 	ldw	r2,-8(fp)
100101f8:	1000070e 	bge	r2,zero,10010218 <close+0xa8>
    {
      ALT_ERRNO = -rval;
100101fc:	00101340 	call	10010134 <alt_get_errno>
10010200:	1007883a 	mov	r3,r2
10010204:	e0bffe17 	ldw	r2,-8(fp)
10010208:	0085c83a 	sub	r2,zero,r2
1001020c:	18800015 	stw	r2,0(r3)
      return -1;
10010210:	00bfffc4 	movi	r2,-1
10010214:	00000706 	br	10010234 <close+0xc4>
    }
    return 0;
10010218:	0005883a 	mov	r2,zero
1001021c:	00000506 	br	10010234 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010220:	00101340 	call	10010134 <alt_get_errno>
10010224:	1007883a 	mov	r3,r2
10010228:	00801444 	movi	r2,81
1001022c:	18800015 	stw	r2,0(r3)
    return -1;
10010230:	00bfffc4 	movi	r2,-1
  }
}
10010234:	e037883a 	mov	sp,fp
10010238:	dfc00117 	ldw	ra,4(sp)
1001023c:	df000017 	ldw	fp,0(sp)
10010240:	dec00204 	addi	sp,sp,8
10010244:	f800283a 	ret

10010248 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10010248:	defffc04 	addi	sp,sp,-16
1001024c:	df000315 	stw	fp,12(sp)
10010250:	df000304 	addi	fp,sp,12
10010254:	e13ffd15 	stw	r4,-12(fp)
10010258:	e17ffe15 	stw	r5,-8(fp)
1001025c:	e1bfff15 	stw	r6,-4(fp)
  return len;
10010260:	e0bfff17 	ldw	r2,-4(fp)
}
10010264:	e037883a 	mov	sp,fp
10010268:	df000017 	ldw	fp,0(sp)
1001026c:	dec00104 	addi	sp,sp,4
10010270:	f800283a 	ret

10010274 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010274:	defffe04 	addi	sp,sp,-8
10010278:	dfc00115 	stw	ra,4(sp)
1001027c:	df000015 	stw	fp,0(sp)
10010280:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010284:	d0a00b17 	ldw	r2,-32724(gp)
10010288:	10000326 	beq	r2,zero,10010298 <alt_get_errno+0x24>
1001028c:	d0a00b17 	ldw	r2,-32724(gp)
10010290:	103ee83a 	callr	r2
10010294:	00000106 	br	1001029c <alt_get_errno+0x28>
10010298:	d0a6d204 	addi	r2,gp,-25784
}
1001029c:	e037883a 	mov	sp,fp
100102a0:	dfc00117 	ldw	ra,4(sp)
100102a4:	df000017 	ldw	fp,0(sp)
100102a8:	dec00204 	addi	sp,sp,8
100102ac:	f800283a 	ret

100102b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100102b0:	defffb04 	addi	sp,sp,-20
100102b4:	dfc00415 	stw	ra,16(sp)
100102b8:	df000315 	stw	fp,12(sp)
100102bc:	df000304 	addi	fp,sp,12
100102c0:	e13ffe15 	stw	r4,-8(fp)
100102c4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100102c8:	e0bffe17 	ldw	r2,-8(fp)
100102cc:	10000816 	blt	r2,zero,100102f0 <fstat+0x40>
100102d0:	01400304 	movi	r5,12
100102d4:	e13ffe17 	ldw	r4,-8(fp)
100102d8:	000d8680 	call	1000d868 <__mulsi3>
100102dc:	1007883a 	mov	r3,r2
100102e0:	00840074 	movhi	r2,4097
100102e4:	108f3e04 	addi	r2,r2,15608
100102e8:	1885883a 	add	r2,r3,r2
100102ec:	00000106 	br	100102f4 <fstat+0x44>
100102f0:	0005883a 	mov	r2,zero
100102f4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
100102f8:	e0bffd17 	ldw	r2,-12(fp)
100102fc:	10001026 	beq	r2,zero,10010340 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10010300:	e0bffd17 	ldw	r2,-12(fp)
10010304:	10800017 	ldw	r2,0(r2)
10010308:	10800817 	ldw	r2,32(r2)
1001030c:	10000726 	beq	r2,zero,1001032c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10010310:	e0bffd17 	ldw	r2,-12(fp)
10010314:	10800017 	ldw	r2,0(r2)
10010318:	10800817 	ldw	r2,32(r2)
1001031c:	e17fff17 	ldw	r5,-4(fp)
10010320:	e13ffd17 	ldw	r4,-12(fp)
10010324:	103ee83a 	callr	r2
10010328:	00000a06 	br	10010354 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1001032c:	e0bfff17 	ldw	r2,-4(fp)
10010330:	00c80004 	movi	r3,8192
10010334:	10c00115 	stw	r3,4(r2)
      return 0;
10010338:	0005883a 	mov	r2,zero
1001033c:	00000506 	br	10010354 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010340:	00102740 	call	10010274 <alt_get_errno>
10010344:	1007883a 	mov	r3,r2
10010348:	00801444 	movi	r2,81
1001034c:	18800015 	stw	r2,0(r3)
    return -1;
10010350:	00bfffc4 	movi	r2,-1
  }
}
10010354:	e037883a 	mov	sp,fp
10010358:	dfc00117 	ldw	ra,4(sp)
1001035c:	df000017 	ldw	fp,0(sp)
10010360:	dec00204 	addi	sp,sp,8
10010364:	f800283a 	ret

10010368 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010368:	defffe04 	addi	sp,sp,-8
1001036c:	dfc00115 	stw	ra,4(sp)
10010370:	df000015 	stw	fp,0(sp)
10010374:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010378:	d0a00b17 	ldw	r2,-32724(gp)
1001037c:	10000326 	beq	r2,zero,1001038c <alt_get_errno+0x24>
10010380:	d0a00b17 	ldw	r2,-32724(gp)
10010384:	103ee83a 	callr	r2
10010388:	00000106 	br	10010390 <alt_get_errno+0x28>
1001038c:	d0a6d204 	addi	r2,gp,-25784
}
10010390:	e037883a 	mov	sp,fp
10010394:	dfc00117 	ldw	ra,4(sp)
10010398:	df000017 	ldw	fp,0(sp)
1001039c:	dec00204 	addi	sp,sp,8
100103a0:	f800283a 	ret

100103a4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100103a4:	deffed04 	addi	sp,sp,-76
100103a8:	dfc01215 	stw	ra,72(sp)
100103ac:	df001115 	stw	fp,68(sp)
100103b0:	df001104 	addi	fp,sp,68
100103b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100103b8:	e0bfff17 	ldw	r2,-4(fp)
100103bc:	10000816 	blt	r2,zero,100103e0 <isatty+0x3c>
100103c0:	01400304 	movi	r5,12
100103c4:	e13fff17 	ldw	r4,-4(fp)
100103c8:	000d8680 	call	1000d868 <__mulsi3>
100103cc:	1007883a 	mov	r3,r2
100103d0:	00840074 	movhi	r2,4097
100103d4:	108f3e04 	addi	r2,r2,15608
100103d8:	1885883a 	add	r2,r3,r2
100103dc:	00000106 	br	100103e4 <isatty+0x40>
100103e0:	0005883a 	mov	r2,zero
100103e4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
100103e8:	e0bfef17 	ldw	r2,-68(fp)
100103ec:	10000e26 	beq	r2,zero,10010428 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100103f0:	e0bfef17 	ldw	r2,-68(fp)
100103f4:	10800017 	ldw	r2,0(r2)
100103f8:	10800817 	ldw	r2,32(r2)
100103fc:	1000021e 	bne	r2,zero,10010408 <isatty+0x64>
    {
      return 1;
10010400:	00800044 	movi	r2,1
10010404:	00000d06 	br	1001043c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10010408:	e0bff004 	addi	r2,fp,-64
1001040c:	100b883a 	mov	r5,r2
10010410:	e13fff17 	ldw	r4,-4(fp)
10010414:	00102b00 	call	100102b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10010418:	e0bff117 	ldw	r2,-60(fp)
1001041c:	10880020 	cmpeqi	r2,r2,8192
10010420:	10803fcc 	andi	r2,r2,255
10010424:	00000506 	br	1001043c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010428:	00103680 	call	10010368 <alt_get_errno>
1001042c:	1007883a 	mov	r3,r2
10010430:	00801444 	movi	r2,81
10010434:	18800015 	stw	r2,0(r3)
    return 0;
10010438:	0005883a 	mov	r2,zero
  }
}
1001043c:	e037883a 	mov	sp,fp
10010440:	dfc00117 	ldw	ra,4(sp)
10010444:	df000017 	ldw	fp,0(sp)
10010448:	dec00204 	addi	sp,sp,8
1001044c:	f800283a 	ret

10010450 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10010450:	defffc04 	addi	sp,sp,-16
10010454:	df000315 	stw	fp,12(sp)
10010458:	df000304 	addi	fp,sp,12
1001045c:	e13ffd15 	stw	r4,-12(fp)
10010460:	e17ffe15 	stw	r5,-8(fp)
10010464:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10010468:	e0fffe17 	ldw	r3,-8(fp)
1001046c:	e0bffd17 	ldw	r2,-12(fp)
10010470:	18800c26 	beq	r3,r2,100104a4 <alt_load_section+0x54>
  {
    while( to != end )
10010474:	00000806 	br	10010498 <alt_load_section+0x48>
    {
      *to++ = *from++;
10010478:	e0bffe17 	ldw	r2,-8(fp)
1001047c:	10c00104 	addi	r3,r2,4
10010480:	e0fffe15 	stw	r3,-8(fp)
10010484:	e0fffd17 	ldw	r3,-12(fp)
10010488:	19000104 	addi	r4,r3,4
1001048c:	e13ffd15 	stw	r4,-12(fp)
10010490:	18c00017 	ldw	r3,0(r3)
10010494:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10010498:	e0fffe17 	ldw	r3,-8(fp)
1001049c:	e0bfff17 	ldw	r2,-4(fp)
100104a0:	18bff51e 	bne	r3,r2,10010478 <__alt_data_end+0xf8010478>
    {
      *to++ = *from++;
    }
  }
}
100104a4:	0001883a 	nop
100104a8:	e037883a 	mov	sp,fp
100104ac:	df000017 	ldw	fp,0(sp)
100104b0:	dec00104 	addi	sp,sp,4
100104b4:	f800283a 	ret

100104b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
100104b8:	defffe04 	addi	sp,sp,-8
100104bc:	dfc00115 	stw	ra,4(sp)
100104c0:	df000015 	stw	fp,0(sp)
100104c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
100104c8:	01840074 	movhi	r6,4097
100104cc:	3193c604 	addi	r6,r6,20248
100104d0:	01440074 	movhi	r5,4097
100104d4:	294d0b04 	addi	r5,r5,13356
100104d8:	01040074 	movhi	r4,4097
100104dc:	2113c604 	addi	r4,r4,20248
100104e0:	00104500 	call	10010450 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
100104e4:	01840034 	movhi	r6,4096
100104e8:	31808c04 	addi	r6,r6,560
100104ec:	01440034 	movhi	r5,4096
100104f0:	29400804 	addi	r5,r5,32
100104f4:	01040034 	movhi	r4,4096
100104f8:	21000804 	addi	r4,r4,32
100104fc:	00104500 	call	10010450 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10010500:	01840074 	movhi	r6,4097
10010504:	318d0b04 	addi	r6,r6,13356
10010508:	01440074 	movhi	r5,4097
1001050c:	294a9704 	addi	r5,r5,10844
10010510:	01040074 	movhi	r4,4097
10010514:	210a9704 	addi	r4,r4,10844
10010518:	00104500 	call	10010450 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1001051c:	00119a40 	call	100119a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
10010520:	0011b640 	call	10011b64 <alt_icache_flush_all>
}
10010524:	0001883a 	nop
10010528:	e037883a 	mov	sp,fp
1001052c:	dfc00117 	ldw	ra,4(sp)
10010530:	df000017 	ldw	fp,0(sp)
10010534:	dec00204 	addi	sp,sp,8
10010538:	f800283a 	ret

1001053c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001053c:	defffe04 	addi	sp,sp,-8
10010540:	dfc00115 	stw	ra,4(sp)
10010544:	df000015 	stw	fp,0(sp)
10010548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001054c:	d0a00b17 	ldw	r2,-32724(gp)
10010550:	10000326 	beq	r2,zero,10010560 <alt_get_errno+0x24>
10010554:	d0a00b17 	ldw	r2,-32724(gp)
10010558:	103ee83a 	callr	r2
1001055c:	00000106 	br	10010564 <alt_get_errno+0x28>
10010560:	d0a6d204 	addi	r2,gp,-25784
}
10010564:	e037883a 	mov	sp,fp
10010568:	dfc00117 	ldw	ra,4(sp)
1001056c:	df000017 	ldw	fp,0(sp)
10010570:	dec00204 	addi	sp,sp,8
10010574:	f800283a 	ret

10010578 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10010578:	defff904 	addi	sp,sp,-28
1001057c:	dfc00615 	stw	ra,24(sp)
10010580:	df000515 	stw	fp,20(sp)
10010584:	df000504 	addi	fp,sp,20
10010588:	e13ffd15 	stw	r4,-12(fp)
1001058c:	e17ffe15 	stw	r5,-8(fp)
10010590:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10010594:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010598:	e0bffd17 	ldw	r2,-12(fp)
1001059c:	10000816 	blt	r2,zero,100105c0 <lseek+0x48>
100105a0:	01400304 	movi	r5,12
100105a4:	e13ffd17 	ldw	r4,-12(fp)
100105a8:	000d8680 	call	1000d868 <__mulsi3>
100105ac:	1007883a 	mov	r3,r2
100105b0:	00840074 	movhi	r2,4097
100105b4:	108f3e04 	addi	r2,r2,15608
100105b8:	1885883a 	add	r2,r3,r2
100105bc:	00000106 	br	100105c4 <lseek+0x4c>
100105c0:	0005883a 	mov	r2,zero
100105c4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
100105c8:	e0bffc17 	ldw	r2,-16(fp)
100105cc:	10001026 	beq	r2,zero,10010610 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100105d0:	e0bffc17 	ldw	r2,-16(fp)
100105d4:	10800017 	ldw	r2,0(r2)
100105d8:	10800717 	ldw	r2,28(r2)
100105dc:	10000926 	beq	r2,zero,10010604 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100105e0:	e0bffc17 	ldw	r2,-16(fp)
100105e4:	10800017 	ldw	r2,0(r2)
100105e8:	10800717 	ldw	r2,28(r2)
100105ec:	e1bfff17 	ldw	r6,-4(fp)
100105f0:	e17ffe17 	ldw	r5,-8(fp)
100105f4:	e13ffc17 	ldw	r4,-16(fp)
100105f8:	103ee83a 	callr	r2
100105fc:	e0bffb15 	stw	r2,-20(fp)
10010600:	00000506 	br	10010618 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10010604:	00bfde84 	movi	r2,-134
10010608:	e0bffb15 	stw	r2,-20(fp)
1001060c:	00000206 	br	10010618 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10010610:	00bfebc4 	movi	r2,-81
10010614:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10010618:	e0bffb17 	ldw	r2,-20(fp)
1001061c:	1000070e 	bge	r2,zero,1001063c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10010620:	001053c0 	call	1001053c <alt_get_errno>
10010624:	1007883a 	mov	r3,r2
10010628:	e0bffb17 	ldw	r2,-20(fp)
1001062c:	0085c83a 	sub	r2,zero,r2
10010630:	18800015 	stw	r2,0(r3)
    rc = -1;
10010634:	00bfffc4 	movi	r2,-1
10010638:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1001063c:	e0bffb17 	ldw	r2,-20(fp)
}
10010640:	e037883a 	mov	sp,fp
10010644:	dfc00117 	ldw	ra,4(sp)
10010648:	df000017 	ldw	fp,0(sp)
1001064c:	dec00204 	addi	sp,sp,8
10010650:	f800283a 	ret

10010654 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10010654:	defffd04 	addi	sp,sp,-12
10010658:	dfc00215 	stw	ra,8(sp)
1001065c:	df000115 	stw	fp,4(sp)
10010660:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10010664:	0009883a 	mov	r4,zero
10010668:	0010b2c0 	call	10010b2c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1001066c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10010670:	0010b640 	call	10010b64 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10010674:	01840074 	movhi	r6,4097
10010678:	318d0104 	addi	r6,r6,13316
1001067c:	01440074 	movhi	r5,4097
10010680:	294d0104 	addi	r5,r5,13316
10010684:	01040074 	movhi	r4,4097
10010688:	210d0104 	addi	r4,r4,13316
1001068c:	0011f080 	call	10011f08 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10010690:	0011aa40 	call	10011aa4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10010694:	01040074 	movhi	r4,4097
10010698:	2106c104 	addi	r4,r4,6916
1001069c:	00126c80 	call	100126c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100106a0:	d0a6d317 	ldw	r2,-25780(gp)
100106a4:	d0e6d417 	ldw	r3,-25776(gp)
100106a8:	d126d517 	ldw	r4,-25772(gp)
100106ac:	200d883a 	mov	r6,r4
100106b0:	180b883a 	mov	r5,r3
100106b4:	1009883a 	mov	r4,r2
100106b8:	00003f40 	call	100003f4 <main>
100106bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100106c0:	01000044 	movi	r4,1
100106c4:	00101700 	call	10010170 <close>
  exit (result);
100106c8:	e13fff17 	ldw	r4,-4(fp)
100106cc:	00126dc0 	call	100126dc <exit>

100106d0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
100106d0:	defffe04 	addi	sp,sp,-8
100106d4:	df000115 	stw	fp,4(sp)
100106d8:	df000104 	addi	fp,sp,4
100106dc:	e13fff15 	stw	r4,-4(fp)
}
100106e0:	0001883a 	nop
100106e4:	e037883a 	mov	sp,fp
100106e8:	df000017 	ldw	fp,0(sp)
100106ec:	dec00104 	addi	sp,sp,4
100106f0:	f800283a 	ret

100106f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100106f4:	defffe04 	addi	sp,sp,-8
100106f8:	df000115 	stw	fp,4(sp)
100106fc:	df000104 	addi	fp,sp,4
10010700:	e13fff15 	stw	r4,-4(fp)
}
10010704:	0001883a 	nop
10010708:	e037883a 	mov	sp,fp
1001070c:	df000017 	ldw	fp,0(sp)
10010710:	dec00104 	addi	sp,sp,4
10010714:	f800283a 	ret

10010718 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010718:	defffe04 	addi	sp,sp,-8
1001071c:	dfc00115 	stw	ra,4(sp)
10010720:	df000015 	stw	fp,0(sp)
10010724:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010728:	d0a00b17 	ldw	r2,-32724(gp)
1001072c:	10000326 	beq	r2,zero,1001073c <alt_get_errno+0x24>
10010730:	d0a00b17 	ldw	r2,-32724(gp)
10010734:	103ee83a 	callr	r2
10010738:	00000106 	br	10010740 <alt_get_errno+0x28>
1001073c:	d0a6d204 	addi	r2,gp,-25784
}
10010740:	e037883a 	mov	sp,fp
10010744:	dfc00117 	ldw	ra,4(sp)
10010748:	df000017 	ldw	fp,0(sp)
1001074c:	dec00204 	addi	sp,sp,8
10010750:	f800283a 	ret

10010754 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10010754:	defff904 	addi	sp,sp,-28
10010758:	dfc00615 	stw	ra,24(sp)
1001075c:	df000515 	stw	fp,20(sp)
10010760:	df000504 	addi	fp,sp,20
10010764:	e13ffd15 	stw	r4,-12(fp)
10010768:	e17ffe15 	stw	r5,-8(fp)
1001076c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010770:	e0bffd17 	ldw	r2,-12(fp)
10010774:	10000816 	blt	r2,zero,10010798 <read+0x44>
10010778:	01400304 	movi	r5,12
1001077c:	e13ffd17 	ldw	r4,-12(fp)
10010780:	000d8680 	call	1000d868 <__mulsi3>
10010784:	1007883a 	mov	r3,r2
10010788:	00840074 	movhi	r2,4097
1001078c:	108f3e04 	addi	r2,r2,15608
10010790:	1885883a 	add	r2,r3,r2
10010794:	00000106 	br	1001079c <read+0x48>
10010798:	0005883a 	mov	r2,zero
1001079c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100107a0:	e0bffb17 	ldw	r2,-20(fp)
100107a4:	10002226 	beq	r2,zero,10010830 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100107a8:	e0bffb17 	ldw	r2,-20(fp)
100107ac:	10800217 	ldw	r2,8(r2)
100107b0:	108000cc 	andi	r2,r2,3
100107b4:	10800060 	cmpeqi	r2,r2,1
100107b8:	1000181e 	bne	r2,zero,1001081c <read+0xc8>
        (fd->dev->read))
100107bc:	e0bffb17 	ldw	r2,-20(fp)
100107c0:	10800017 	ldw	r2,0(r2)
100107c4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100107c8:	10001426 	beq	r2,zero,1001081c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
100107cc:	e0bffb17 	ldw	r2,-20(fp)
100107d0:	10800017 	ldw	r2,0(r2)
100107d4:	10800517 	ldw	r2,20(r2)
100107d8:	e0ffff17 	ldw	r3,-4(fp)
100107dc:	180d883a 	mov	r6,r3
100107e0:	e17ffe17 	ldw	r5,-8(fp)
100107e4:	e13ffb17 	ldw	r4,-20(fp)
100107e8:	103ee83a 	callr	r2
100107ec:	e0bffc15 	stw	r2,-16(fp)
100107f0:	e0bffc17 	ldw	r2,-16(fp)
100107f4:	1000070e 	bge	r2,zero,10010814 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100107f8:	00107180 	call	10010718 <alt_get_errno>
100107fc:	1007883a 	mov	r3,r2
10010800:	e0bffc17 	ldw	r2,-16(fp)
10010804:	0085c83a 	sub	r2,zero,r2
10010808:	18800015 	stw	r2,0(r3)
          return -1;
1001080c:	00bfffc4 	movi	r2,-1
10010810:	00000c06 	br	10010844 <read+0xf0>
        }
        return rval;
10010814:	e0bffc17 	ldw	r2,-16(fp)
10010818:	00000a06 	br	10010844 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1001081c:	00107180 	call	10010718 <alt_get_errno>
10010820:	1007883a 	mov	r3,r2
10010824:	00800344 	movi	r2,13
10010828:	18800015 	stw	r2,0(r3)
1001082c:	00000406 	br	10010840 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10010830:	00107180 	call	10010718 <alt_get_errno>
10010834:	1007883a 	mov	r3,r2
10010838:	00801444 	movi	r2,81
1001083c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010840:	00bfffc4 	movi	r2,-1
}
10010844:	e037883a 	mov	sp,fp
10010848:	dfc00117 	ldw	ra,4(sp)
1001084c:	df000017 	ldw	fp,0(sp)
10010850:	dec00204 	addi	sp,sp,8
10010854:	f800283a 	ret

10010858 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10010858:	defffc04 	addi	sp,sp,-16
1001085c:	dfc00315 	stw	ra,12(sp)
10010860:	df000215 	stw	fp,8(sp)
10010864:	dc000115 	stw	r16,4(sp)
10010868:	df000204 	addi	fp,sp,8
1001086c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10010870:	e0bffe17 	ldw	r2,-8(fp)
10010874:	108000d0 	cmplti	r2,r2,3
10010878:	1000111e 	bne	r2,zero,100108c0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1001087c:	04040074 	movhi	r16,4097
10010880:	840f3e04 	addi	r16,r16,15608
10010884:	e0bffe17 	ldw	r2,-8(fp)
10010888:	01400304 	movi	r5,12
1001088c:	1009883a 	mov	r4,r2
10010890:	000d8680 	call	1000d868 <__mulsi3>
10010894:	8085883a 	add	r2,r16,r2
10010898:	10800204 	addi	r2,r2,8
1001089c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
100108a0:	04040074 	movhi	r16,4097
100108a4:	840f3e04 	addi	r16,r16,15608
100108a8:	e0bffe17 	ldw	r2,-8(fp)
100108ac:	01400304 	movi	r5,12
100108b0:	1009883a 	mov	r4,r2
100108b4:	000d8680 	call	1000d868 <__mulsi3>
100108b8:	8085883a 	add	r2,r16,r2
100108bc:	10000015 	stw	zero,0(r2)
  }
}
100108c0:	0001883a 	nop
100108c4:	e6ffff04 	addi	sp,fp,-4
100108c8:	dfc00217 	ldw	ra,8(sp)
100108cc:	df000117 	ldw	fp,4(sp)
100108d0:	dc000017 	ldw	r16,0(sp)
100108d4:	dec00304 	addi	sp,sp,12
100108d8:	f800283a 	ret

100108dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100108dc:	defff904 	addi	sp,sp,-28
100108e0:	df000615 	stw	fp,24(sp)
100108e4:	df000604 	addi	fp,sp,24
100108e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100108ec:	0005303a 	rdctl	r2,status
100108f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100108f4:	e0fffe17 	ldw	r3,-8(fp)
100108f8:	00bfff84 	movi	r2,-2
100108fc:	1884703a 	and	r2,r3,r2
10010900:	1001703a 	wrctl	status,r2
  
  return context;
10010904:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10010908:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1001090c:	d0a00c17 	ldw	r2,-32720(gp)
10010910:	10c000c4 	addi	r3,r2,3
10010914:	00bfff04 	movi	r2,-4
10010918:	1884703a 	and	r2,r3,r2
1001091c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10010920:	d0e00c17 	ldw	r3,-32720(gp)
10010924:	e0bfff17 	ldw	r2,-4(fp)
10010928:	1887883a 	add	r3,r3,r2
1001092c:	00860034 	movhi	r2,6144
10010930:	10800004 	addi	r2,r2,0
10010934:	10c0062e 	bgeu	r2,r3,10010950 <sbrk+0x74>
10010938:	e0bffb17 	ldw	r2,-20(fp)
1001093c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010940:	e0bffa17 	ldw	r2,-24(fp)
10010944:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10010948:	00bfffc4 	movi	r2,-1
1001094c:	00000b06 	br	1001097c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010950:	d0a00c17 	ldw	r2,-32720(gp)
10010954:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10010958:	d0e00c17 	ldw	r3,-32720(gp)
1001095c:	e0bfff17 	ldw	r2,-4(fp)
10010960:	1885883a 	add	r2,r3,r2
10010964:	d0a00c15 	stw	r2,-32720(gp)
10010968:	e0bffb17 	ldw	r2,-20(fp)
1001096c:	e0bffc15 	stw	r2,-16(fp)
10010970:	e0bffc17 	ldw	r2,-16(fp)
10010974:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10010978:	e0bffd17 	ldw	r2,-12(fp)
} 
1001097c:	e037883a 	mov	sp,fp
10010980:	df000017 	ldw	fp,0(sp)
10010984:	dec00104 	addi	sp,sp,4
10010988:	f800283a 	ret

1001098c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1001098c:	defffd04 	addi	sp,sp,-12
10010990:	dfc00215 	stw	ra,8(sp)
10010994:	df000115 	stw	fp,4(sp)
10010998:	df000104 	addi	fp,sp,4
1001099c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
100109a0:	e13fff17 	ldw	r4,-4(fp)
100109a4:	001184c0 	call	1001184c <alt_busy_sleep>
}
100109a8:	e037883a 	mov	sp,fp
100109ac:	dfc00117 	ldw	ra,4(sp)
100109b0:	df000017 	ldw	fp,0(sp)
100109b4:	dec00204 	addi	sp,sp,8
100109b8:	f800283a 	ret

100109bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100109bc:	defffe04 	addi	sp,sp,-8
100109c0:	dfc00115 	stw	ra,4(sp)
100109c4:	df000015 	stw	fp,0(sp)
100109c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100109cc:	d0a00b17 	ldw	r2,-32724(gp)
100109d0:	10000326 	beq	r2,zero,100109e0 <alt_get_errno+0x24>
100109d4:	d0a00b17 	ldw	r2,-32724(gp)
100109d8:	103ee83a 	callr	r2
100109dc:	00000106 	br	100109e4 <alt_get_errno+0x28>
100109e0:	d0a6d204 	addi	r2,gp,-25784
}
100109e4:	e037883a 	mov	sp,fp
100109e8:	dfc00117 	ldw	ra,4(sp)
100109ec:	df000017 	ldw	fp,0(sp)
100109f0:	dec00204 	addi	sp,sp,8
100109f4:	f800283a 	ret

100109f8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100109f8:	defff904 	addi	sp,sp,-28
100109fc:	dfc00615 	stw	ra,24(sp)
10010a00:	df000515 	stw	fp,20(sp)
10010a04:	df000504 	addi	fp,sp,20
10010a08:	e13ffd15 	stw	r4,-12(fp)
10010a0c:	e17ffe15 	stw	r5,-8(fp)
10010a10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010a14:	e0bffd17 	ldw	r2,-12(fp)
10010a18:	10000816 	blt	r2,zero,10010a3c <write+0x44>
10010a1c:	01400304 	movi	r5,12
10010a20:	e13ffd17 	ldw	r4,-12(fp)
10010a24:	000d8680 	call	1000d868 <__mulsi3>
10010a28:	1007883a 	mov	r3,r2
10010a2c:	00840074 	movhi	r2,4097
10010a30:	108f3e04 	addi	r2,r2,15608
10010a34:	1885883a 	add	r2,r3,r2
10010a38:	00000106 	br	10010a40 <write+0x48>
10010a3c:	0005883a 	mov	r2,zero
10010a40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010a44:	e0bffb17 	ldw	r2,-20(fp)
10010a48:	10002126 	beq	r2,zero,10010ad0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010a4c:	e0bffb17 	ldw	r2,-20(fp)
10010a50:	10800217 	ldw	r2,8(r2)
10010a54:	108000cc 	andi	r2,r2,3
10010a58:	10001826 	beq	r2,zero,10010abc <write+0xc4>
10010a5c:	e0bffb17 	ldw	r2,-20(fp)
10010a60:	10800017 	ldw	r2,0(r2)
10010a64:	10800617 	ldw	r2,24(r2)
10010a68:	10001426 	beq	r2,zero,10010abc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010a6c:	e0bffb17 	ldw	r2,-20(fp)
10010a70:	10800017 	ldw	r2,0(r2)
10010a74:	10800617 	ldw	r2,24(r2)
10010a78:	e0ffff17 	ldw	r3,-4(fp)
10010a7c:	180d883a 	mov	r6,r3
10010a80:	e17ffe17 	ldw	r5,-8(fp)
10010a84:	e13ffb17 	ldw	r4,-20(fp)
10010a88:	103ee83a 	callr	r2
10010a8c:	e0bffc15 	stw	r2,-16(fp)
10010a90:	e0bffc17 	ldw	r2,-16(fp)
10010a94:	1000070e 	bge	r2,zero,10010ab4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10010a98:	00109bc0 	call	100109bc <alt_get_errno>
10010a9c:	1007883a 	mov	r3,r2
10010aa0:	e0bffc17 	ldw	r2,-16(fp)
10010aa4:	0085c83a 	sub	r2,zero,r2
10010aa8:	18800015 	stw	r2,0(r3)
        return -1;
10010aac:	00bfffc4 	movi	r2,-1
10010ab0:	00000c06 	br	10010ae4 <write+0xec>
      }
      return rval;
10010ab4:	e0bffc17 	ldw	r2,-16(fp)
10010ab8:	00000a06 	br	10010ae4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10010abc:	00109bc0 	call	100109bc <alt_get_errno>
10010ac0:	1007883a 	mov	r3,r2
10010ac4:	00800344 	movi	r2,13
10010ac8:	18800015 	stw	r2,0(r3)
10010acc:	00000406 	br	10010ae0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10010ad0:	00109bc0 	call	100109bc <alt_get_errno>
10010ad4:	1007883a 	mov	r3,r2
10010ad8:	00801444 	movi	r2,81
10010adc:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010ae0:	00bfffc4 	movi	r2,-1
}
10010ae4:	e037883a 	mov	sp,fp
10010ae8:	dfc00117 	ldw	ra,4(sp)
10010aec:	df000017 	ldw	fp,0(sp)
10010af0:	dec00204 	addi	sp,sp,8
10010af4:	f800283a 	ret

10010af8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010af8:	defffd04 	addi	sp,sp,-12
10010afc:	dfc00215 	stw	ra,8(sp)
10010b00:	df000115 	stw	fp,4(sp)
10010b04:	df000104 	addi	fp,sp,4
10010b08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10010b0c:	d1600804 	addi	r5,gp,-32736
10010b10:	e13fff17 	ldw	r4,-4(fp)
10010b14:	0011a000 	call	10011a00 <alt_dev_llist_insert>
}
10010b18:	e037883a 	mov	sp,fp
10010b1c:	dfc00117 	ldw	ra,4(sp)
10010b20:	df000017 	ldw	fp,0(sp)
10010b24:	dec00204 	addi	sp,sp,8
10010b28:	f800283a 	ret

10010b2c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10010b2c:	defffd04 	addi	sp,sp,-12
10010b30:	dfc00215 	stw	ra,8(sp)
10010b34:	df000115 	stw	fp,4(sp)
10010b38:	df000104 	addi	fp,sp,4
10010b3c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10010b40:	00123ac0 	call	100123ac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010b44:	00800044 	movi	r2,1
10010b48:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010b4c:	0001883a 	nop
10010b50:	e037883a 	mov	sp,fp
10010b54:	dfc00117 	ldw	ra,4(sp)
10010b58:	df000017 	ldw	fp,0(sp)
10010b5c:	dec00204 	addi	sp,sp,8
10010b60:	f800283a 	ret

10010b64 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010b64:	defffe04 	addi	sp,sp,-8
10010b68:	dfc00115 	stw	ra,4(sp)
10010b6c:	df000015 	stw	fp,0(sp)
10010b70:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
10010b74:	01c0fa04 	movi	r7,1000
10010b78:	000d883a 	mov	r6,zero
10010b7c:	000b883a 	mov	r5,zero
10010b80:	01001004 	movi	r4,64
10010b84:	00116a40 	call	100116a4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010b88:	01800144 	movi	r6,5
10010b8c:	000b883a 	mov	r5,zero
10010b90:	01040074 	movhi	r4,4097
10010b94:	210fa804 	addi	r4,r4,16032
10010b98:	0010d280 	call	10010d28 <altera_avalon_jtag_uart_init>
10010b9c:	01040074 	movhi	r4,4097
10010ba0:	210f9e04 	addi	r4,r4,15992
10010ba4:	0010af80 	call	10010af8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010ba8:	0001883a 	nop
}
10010bac:	0001883a 	nop
10010bb0:	e037883a 	mov	sp,fp
10010bb4:	dfc00117 	ldw	ra,4(sp)
10010bb8:	df000017 	ldw	fp,0(sp)
10010bbc:	dec00204 	addi	sp,sp,8
10010bc0:	f800283a 	ret

10010bc4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10010bc4:	defffa04 	addi	sp,sp,-24
10010bc8:	dfc00515 	stw	ra,20(sp)
10010bcc:	df000415 	stw	fp,16(sp)
10010bd0:	df000404 	addi	fp,sp,16
10010bd4:	e13ffd15 	stw	r4,-12(fp)
10010bd8:	e17ffe15 	stw	r5,-8(fp)
10010bdc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010be0:	e0bffd17 	ldw	r2,-12(fp)
10010be4:	10800017 	ldw	r2,0(r2)
10010be8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010bec:	e0bffc17 	ldw	r2,-16(fp)
10010bf0:	10c00a04 	addi	r3,r2,40
10010bf4:	e0bffd17 	ldw	r2,-12(fp)
10010bf8:	10800217 	ldw	r2,8(r2)
10010bfc:	100f883a 	mov	r7,r2
10010c00:	e1bfff17 	ldw	r6,-4(fp)
10010c04:	e17ffe17 	ldw	r5,-8(fp)
10010c08:	1809883a 	mov	r4,r3
10010c0c:	00111ec0 	call	100111ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010c10:	e037883a 	mov	sp,fp
10010c14:	dfc00117 	ldw	ra,4(sp)
10010c18:	df000017 	ldw	fp,0(sp)
10010c1c:	dec00204 	addi	sp,sp,8
10010c20:	f800283a 	ret

10010c24 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10010c24:	defffa04 	addi	sp,sp,-24
10010c28:	dfc00515 	stw	ra,20(sp)
10010c2c:	df000415 	stw	fp,16(sp)
10010c30:	df000404 	addi	fp,sp,16
10010c34:	e13ffd15 	stw	r4,-12(fp)
10010c38:	e17ffe15 	stw	r5,-8(fp)
10010c3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010c40:	e0bffd17 	ldw	r2,-12(fp)
10010c44:	10800017 	ldw	r2,0(r2)
10010c48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010c4c:	e0bffc17 	ldw	r2,-16(fp)
10010c50:	10c00a04 	addi	r3,r2,40
10010c54:	e0bffd17 	ldw	r2,-12(fp)
10010c58:	10800217 	ldw	r2,8(r2)
10010c5c:	100f883a 	mov	r7,r2
10010c60:	e1bfff17 	ldw	r6,-4(fp)
10010c64:	e17ffe17 	ldw	r5,-8(fp)
10010c68:	1809883a 	mov	r4,r3
10010c6c:	00114080 	call	10011408 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010c70:	e037883a 	mov	sp,fp
10010c74:	dfc00117 	ldw	ra,4(sp)
10010c78:	df000017 	ldw	fp,0(sp)
10010c7c:	dec00204 	addi	sp,sp,8
10010c80:	f800283a 	ret

10010c84 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010c84:	defffc04 	addi	sp,sp,-16
10010c88:	dfc00315 	stw	ra,12(sp)
10010c8c:	df000215 	stw	fp,8(sp)
10010c90:	df000204 	addi	fp,sp,8
10010c94:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010c98:	e0bfff17 	ldw	r2,-4(fp)
10010c9c:	10800017 	ldw	r2,0(r2)
10010ca0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10010ca4:	e0bffe17 	ldw	r2,-8(fp)
10010ca8:	10c00a04 	addi	r3,r2,40
10010cac:	e0bfff17 	ldw	r2,-4(fp)
10010cb0:	10800217 	ldw	r2,8(r2)
10010cb4:	100b883a 	mov	r5,r2
10010cb8:	1809883a 	mov	r4,r3
10010cbc:	00110940 	call	10011094 <altera_avalon_jtag_uart_close>
}
10010cc0:	e037883a 	mov	sp,fp
10010cc4:	dfc00117 	ldw	ra,4(sp)
10010cc8:	df000017 	ldw	fp,0(sp)
10010ccc:	dec00204 	addi	sp,sp,8
10010cd0:	f800283a 	ret

10010cd4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10010cd4:	defffa04 	addi	sp,sp,-24
10010cd8:	dfc00515 	stw	ra,20(sp)
10010cdc:	df000415 	stw	fp,16(sp)
10010ce0:	df000404 	addi	fp,sp,16
10010ce4:	e13ffd15 	stw	r4,-12(fp)
10010ce8:	e17ffe15 	stw	r5,-8(fp)
10010cec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10010cf0:	e0bffd17 	ldw	r2,-12(fp)
10010cf4:	10800017 	ldw	r2,0(r2)
10010cf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10010cfc:	e0bffc17 	ldw	r2,-16(fp)
10010d00:	10800a04 	addi	r2,r2,40
10010d04:	e1bfff17 	ldw	r6,-4(fp)
10010d08:	e17ffe17 	ldw	r5,-8(fp)
10010d0c:	1009883a 	mov	r4,r2
10010d10:	00110fc0 	call	100110fc <altera_avalon_jtag_uart_ioctl>
}
10010d14:	e037883a 	mov	sp,fp
10010d18:	dfc00117 	ldw	ra,4(sp)
10010d1c:	df000017 	ldw	fp,0(sp)
10010d20:	dec00204 	addi	sp,sp,8
10010d24:	f800283a 	ret

10010d28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010d28:	defffa04 	addi	sp,sp,-24
10010d2c:	dfc00515 	stw	ra,20(sp)
10010d30:	df000415 	stw	fp,16(sp)
10010d34:	df000404 	addi	fp,sp,16
10010d38:	e13ffd15 	stw	r4,-12(fp)
10010d3c:	e17ffe15 	stw	r5,-8(fp)
10010d40:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010d44:	e0bffd17 	ldw	r2,-12(fp)
10010d48:	00c00044 	movi	r3,1
10010d4c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010d50:	e0bffd17 	ldw	r2,-12(fp)
10010d54:	10800017 	ldw	r2,0(r2)
10010d58:	10800104 	addi	r2,r2,4
10010d5c:	1007883a 	mov	r3,r2
10010d60:	e0bffd17 	ldw	r2,-12(fp)
10010d64:	10800817 	ldw	r2,32(r2)
10010d68:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010d6c:	e0bffe17 	ldw	r2,-8(fp)
10010d70:	e0ffff17 	ldw	r3,-4(fp)
10010d74:	d8000015 	stw	zero,0(sp)
10010d78:	e1fffd17 	ldw	r7,-12(fp)
10010d7c:	01840074 	movhi	r6,4097
10010d80:	31837a04 	addi	r6,r6,3560
10010d84:	180b883a 	mov	r5,r3
10010d88:	1009883a 	mov	r4,r2
10010d8c:	0011b840 	call	10011b84 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010d90:	e0bffd17 	ldw	r2,-12(fp)
10010d94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010d98:	e0bffd17 	ldw	r2,-12(fp)
10010d9c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010da0:	d0e6d717 	ldw	r3,-25764(gp)
10010da4:	e1fffd17 	ldw	r7,-12(fp)
10010da8:	01840074 	movhi	r6,4097
10010dac:	3183fd04 	addi	r6,r6,4084
10010db0:	180b883a 	mov	r5,r3
10010db4:	1009883a 	mov	r4,r2
10010db8:	00117200 	call	10011720 <alt_alarm_start>
10010dbc:	1000040e 	bge	r2,zero,10010dd0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010dc0:	e0fffd17 	ldw	r3,-12(fp)
10010dc4:	00a00034 	movhi	r2,32768
10010dc8:	10bfffc4 	addi	r2,r2,-1
10010dcc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010dd0:	0001883a 	nop
10010dd4:	e037883a 	mov	sp,fp
10010dd8:	dfc00117 	ldw	ra,4(sp)
10010ddc:	df000017 	ldw	fp,0(sp)
10010de0:	dec00204 	addi	sp,sp,8
10010de4:	f800283a 	ret

10010de8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010de8:	defff804 	addi	sp,sp,-32
10010dec:	df000715 	stw	fp,28(sp)
10010df0:	df000704 	addi	fp,sp,28
10010df4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010df8:	e0bfff17 	ldw	r2,-4(fp)
10010dfc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10010e00:	e0bffb17 	ldw	r2,-20(fp)
10010e04:	10800017 	ldw	r2,0(r2)
10010e08:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010e0c:	e0bffc17 	ldw	r2,-16(fp)
10010e10:	10800104 	addi	r2,r2,4
10010e14:	10800037 	ldwio	r2,0(r2)
10010e18:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010e1c:	e0bffd17 	ldw	r2,-12(fp)
10010e20:	1080c00c 	andi	r2,r2,768
10010e24:	10006d26 	beq	r2,zero,10010fdc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010e28:	e0bffd17 	ldw	r2,-12(fp)
10010e2c:	1080400c 	andi	r2,r2,256
10010e30:	10003526 	beq	r2,zero,10010f08 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10010e34:	00800074 	movhi	r2,1
10010e38:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010e3c:	e0bffb17 	ldw	r2,-20(fp)
10010e40:	10800a17 	ldw	r2,40(r2)
10010e44:	10800044 	addi	r2,r2,1
10010e48:	1081ffcc 	andi	r2,r2,2047
10010e4c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10010e50:	e0bffb17 	ldw	r2,-20(fp)
10010e54:	10c00b17 	ldw	r3,44(r2)
10010e58:	e0bffe17 	ldw	r2,-8(fp)
10010e5c:	18801526 	beq	r3,r2,10010eb4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010e60:	e0bffc17 	ldw	r2,-16(fp)
10010e64:	10800037 	ldwio	r2,0(r2)
10010e68:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010e6c:	e0bff917 	ldw	r2,-28(fp)
10010e70:	10a0000c 	andi	r2,r2,32768
10010e74:	10001126 	beq	r2,zero,10010ebc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010e78:	e0bffb17 	ldw	r2,-20(fp)
10010e7c:	10800a17 	ldw	r2,40(r2)
10010e80:	e0fff917 	ldw	r3,-28(fp)
10010e84:	1809883a 	mov	r4,r3
10010e88:	e0fffb17 	ldw	r3,-20(fp)
10010e8c:	1885883a 	add	r2,r3,r2
10010e90:	10800e04 	addi	r2,r2,56
10010e94:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010e98:	e0bffb17 	ldw	r2,-20(fp)
10010e9c:	10800a17 	ldw	r2,40(r2)
10010ea0:	10800044 	addi	r2,r2,1
10010ea4:	10c1ffcc 	andi	r3,r2,2047
10010ea8:	e0bffb17 	ldw	r2,-20(fp)
10010eac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010eb0:	003fe206 	br	10010e3c <__alt_data_end+0xf8010e3c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10010eb4:	0001883a 	nop
10010eb8:	00000106 	br	10010ec0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10010ebc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010ec0:	e0bff917 	ldw	r2,-28(fp)
10010ec4:	10bfffec 	andhi	r2,r2,65535
10010ec8:	10000f26 	beq	r2,zero,10010f08 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010ecc:	e0bffb17 	ldw	r2,-20(fp)
10010ed0:	10c00817 	ldw	r3,32(r2)
10010ed4:	00bfff84 	movi	r2,-2
10010ed8:	1886703a 	and	r3,r3,r2
10010edc:	e0bffb17 	ldw	r2,-20(fp)
10010ee0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10010ee4:	e0bffc17 	ldw	r2,-16(fp)
10010ee8:	10800104 	addi	r2,r2,4
10010eec:	1007883a 	mov	r3,r2
10010ef0:	e0bffb17 	ldw	r2,-20(fp)
10010ef4:	10800817 	ldw	r2,32(r2)
10010ef8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010efc:	e0bffc17 	ldw	r2,-16(fp)
10010f00:	10800104 	addi	r2,r2,4
10010f04:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10010f08:	e0bffd17 	ldw	r2,-12(fp)
10010f0c:	1080800c 	andi	r2,r2,512
10010f10:	103fbe26 	beq	r2,zero,10010e0c <__alt_data_end+0xf8010e0c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10010f14:	e0bffd17 	ldw	r2,-12(fp)
10010f18:	1004d43a 	srli	r2,r2,16
10010f1c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010f20:	00001406 	br	10010f74 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10010f24:	e0bffc17 	ldw	r2,-16(fp)
10010f28:	e0fffb17 	ldw	r3,-20(fp)
10010f2c:	18c00d17 	ldw	r3,52(r3)
10010f30:	e13ffb17 	ldw	r4,-20(fp)
10010f34:	20c7883a 	add	r3,r4,r3
10010f38:	18c20e04 	addi	r3,r3,2104
10010f3c:	18c00003 	ldbu	r3,0(r3)
10010f40:	18c03fcc 	andi	r3,r3,255
10010f44:	18c0201c 	xori	r3,r3,128
10010f48:	18ffe004 	addi	r3,r3,-128
10010f4c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010f50:	e0bffb17 	ldw	r2,-20(fp)
10010f54:	10800d17 	ldw	r2,52(r2)
10010f58:	10800044 	addi	r2,r2,1
10010f5c:	10c1ffcc 	andi	r3,r2,2047
10010f60:	e0bffb17 	ldw	r2,-20(fp)
10010f64:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010f68:	e0bffa17 	ldw	r2,-24(fp)
10010f6c:	10bfffc4 	addi	r2,r2,-1
10010f70:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010f74:	e0bffa17 	ldw	r2,-24(fp)
10010f78:	10000526 	beq	r2,zero,10010f90 <altera_avalon_jtag_uart_irq+0x1a8>
10010f7c:	e0bffb17 	ldw	r2,-20(fp)
10010f80:	10c00d17 	ldw	r3,52(r2)
10010f84:	e0bffb17 	ldw	r2,-20(fp)
10010f88:	10800c17 	ldw	r2,48(r2)
10010f8c:	18bfe51e 	bne	r3,r2,10010f24 <__alt_data_end+0xf8010f24>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010f90:	e0bffa17 	ldw	r2,-24(fp)
10010f94:	103f9d26 	beq	r2,zero,10010e0c <__alt_data_end+0xf8010e0c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010f98:	e0bffb17 	ldw	r2,-20(fp)
10010f9c:	10c00817 	ldw	r3,32(r2)
10010fa0:	00bfff44 	movi	r2,-3
10010fa4:	1886703a 	and	r3,r3,r2
10010fa8:	e0bffb17 	ldw	r2,-20(fp)
10010fac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010fb0:	e0bffb17 	ldw	r2,-20(fp)
10010fb4:	10800017 	ldw	r2,0(r2)
10010fb8:	10800104 	addi	r2,r2,4
10010fbc:	1007883a 	mov	r3,r2
10010fc0:	e0bffb17 	ldw	r2,-20(fp)
10010fc4:	10800817 	ldw	r2,32(r2)
10010fc8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010fcc:	e0bffc17 	ldw	r2,-16(fp)
10010fd0:	10800104 	addi	r2,r2,4
10010fd4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010fd8:	003f8c06 	br	10010e0c <__alt_data_end+0xf8010e0c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10010fdc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10010fe0:	0001883a 	nop
10010fe4:	e037883a 	mov	sp,fp
10010fe8:	df000017 	ldw	fp,0(sp)
10010fec:	dec00104 	addi	sp,sp,4
10010ff0:	f800283a 	ret

10010ff4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010ff4:	defff804 	addi	sp,sp,-32
10010ff8:	df000715 	stw	fp,28(sp)
10010ffc:	df000704 	addi	fp,sp,28
10011000:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10011004:	e0bffb17 	ldw	r2,-20(fp)
10011008:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1001100c:	e0bff917 	ldw	r2,-28(fp)
10011010:	10800017 	ldw	r2,0(r2)
10011014:	10800104 	addi	r2,r2,4
10011018:	10800037 	ldwio	r2,0(r2)
1001101c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10011020:	e0bffa17 	ldw	r2,-24(fp)
10011024:	1081000c 	andi	r2,r2,1024
10011028:	10000b26 	beq	r2,zero,10011058 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1001102c:	e0bff917 	ldw	r2,-28(fp)
10011030:	10800017 	ldw	r2,0(r2)
10011034:	10800104 	addi	r2,r2,4
10011038:	1007883a 	mov	r3,r2
1001103c:	e0bff917 	ldw	r2,-28(fp)
10011040:	10800817 	ldw	r2,32(r2)
10011044:	10810014 	ori	r2,r2,1024
10011048:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1001104c:	e0bff917 	ldw	r2,-28(fp)
10011050:	10000915 	stw	zero,36(r2)
10011054:	00000a06 	br	10011080 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10011058:	e0bff917 	ldw	r2,-28(fp)
1001105c:	10c00917 	ldw	r3,36(r2)
10011060:	00a00034 	movhi	r2,32768
10011064:	10bfff04 	addi	r2,r2,-4
10011068:	10c00536 	bltu	r2,r3,10011080 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1001106c:	e0bff917 	ldw	r2,-28(fp)
10011070:	10800917 	ldw	r2,36(r2)
10011074:	10c00044 	addi	r3,r2,1
10011078:	e0bff917 	ldw	r2,-28(fp)
1001107c:	10c00915 	stw	r3,36(r2)
10011080:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10011084:	e037883a 	mov	sp,fp
10011088:	df000017 	ldw	fp,0(sp)
1001108c:	dec00104 	addi	sp,sp,4
10011090:	f800283a 	ret

10011094 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10011094:	defffd04 	addi	sp,sp,-12
10011098:	df000215 	stw	fp,8(sp)
1001109c:	df000204 	addi	fp,sp,8
100110a0:	e13ffe15 	stw	r4,-8(fp)
100110a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100110a8:	00000506 	br	100110c0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100110ac:	e0bfff17 	ldw	r2,-4(fp)
100110b0:	1090000c 	andi	r2,r2,16384
100110b4:	10000226 	beq	r2,zero,100110c0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100110b8:	00bffd44 	movi	r2,-11
100110bc:	00000b06 	br	100110ec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100110c0:	e0bffe17 	ldw	r2,-8(fp)
100110c4:	10c00d17 	ldw	r3,52(r2)
100110c8:	e0bffe17 	ldw	r2,-8(fp)
100110cc:	10800c17 	ldw	r2,48(r2)
100110d0:	18800526 	beq	r3,r2,100110e8 <altera_avalon_jtag_uart_close+0x54>
100110d4:	e0bffe17 	ldw	r2,-8(fp)
100110d8:	10c00917 	ldw	r3,36(r2)
100110dc:	e0bffe17 	ldw	r2,-8(fp)
100110e0:	10800117 	ldw	r2,4(r2)
100110e4:	18bff136 	bltu	r3,r2,100110ac <__alt_data_end+0xf80110ac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100110e8:	0005883a 	mov	r2,zero
}
100110ec:	e037883a 	mov	sp,fp
100110f0:	df000017 	ldw	fp,0(sp)
100110f4:	dec00104 	addi	sp,sp,4
100110f8:	f800283a 	ret

100110fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100110fc:	defffa04 	addi	sp,sp,-24
10011100:	df000515 	stw	fp,20(sp)
10011104:	df000504 	addi	fp,sp,20
10011108:	e13ffd15 	stw	r4,-12(fp)
1001110c:	e17ffe15 	stw	r5,-8(fp)
10011110:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10011114:	00bff9c4 	movi	r2,-25
10011118:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1001111c:	e0bffe17 	ldw	r2,-8(fp)
10011120:	10da8060 	cmpeqi	r3,r2,27137
10011124:	1800031e 	bne	r3,zero,10011134 <altera_avalon_jtag_uart_ioctl+0x38>
10011128:	109a80a0 	cmpeqi	r2,r2,27138
1001112c:	1000181e 	bne	r2,zero,10011190 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10011130:	00002906 	br	100111d8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10011134:	e0bffd17 	ldw	r2,-12(fp)
10011138:	10c00117 	ldw	r3,4(r2)
1001113c:	00a00034 	movhi	r2,32768
10011140:	10bfffc4 	addi	r2,r2,-1
10011144:	18802126 	beq	r3,r2,100111cc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10011148:	e0bfff17 	ldw	r2,-4(fp)
1001114c:	10800017 	ldw	r2,0(r2)
10011150:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10011154:	e0bffc17 	ldw	r2,-16(fp)
10011158:	10800090 	cmplti	r2,r2,2
1001115c:	1000061e 	bne	r2,zero,10011178 <altera_avalon_jtag_uart_ioctl+0x7c>
10011160:	e0fffc17 	ldw	r3,-16(fp)
10011164:	00a00034 	movhi	r2,32768
10011168:	10bfffc4 	addi	r2,r2,-1
1001116c:	18800226 	beq	r3,r2,10011178 <altera_avalon_jtag_uart_ioctl+0x7c>
10011170:	e0bffc17 	ldw	r2,-16(fp)
10011174:	00000206 	br	10011180 <altera_avalon_jtag_uart_ioctl+0x84>
10011178:	00a00034 	movhi	r2,32768
1001117c:	10bfff84 	addi	r2,r2,-2
10011180:	e0fffd17 	ldw	r3,-12(fp)
10011184:	18800115 	stw	r2,4(r3)
      rc = 0;
10011188:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1001118c:	00000f06 	br	100111cc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10011190:	e0bffd17 	ldw	r2,-12(fp)
10011194:	10c00117 	ldw	r3,4(r2)
10011198:	00a00034 	movhi	r2,32768
1001119c:	10bfffc4 	addi	r2,r2,-1
100111a0:	18800c26 	beq	r3,r2,100111d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100111a4:	e0bffd17 	ldw	r2,-12(fp)
100111a8:	10c00917 	ldw	r3,36(r2)
100111ac:	e0bffd17 	ldw	r2,-12(fp)
100111b0:	10800117 	ldw	r2,4(r2)
100111b4:	1885803a 	cmpltu	r2,r3,r2
100111b8:	10c03fcc 	andi	r3,r2,255
100111bc:	e0bfff17 	ldw	r2,-4(fp)
100111c0:	10c00015 	stw	r3,0(r2)
      rc = 0;
100111c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100111c8:	00000206 	br	100111d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
100111cc:	0001883a 	nop
100111d0:	00000106 	br	100111d8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
100111d4:	0001883a 	nop

  default:
    break;
  }

  return rc;
100111d8:	e0bffb17 	ldw	r2,-20(fp)
}
100111dc:	e037883a 	mov	sp,fp
100111e0:	df000017 	ldw	fp,0(sp)
100111e4:	dec00104 	addi	sp,sp,4
100111e8:	f800283a 	ret

100111ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100111ec:	defff304 	addi	sp,sp,-52
100111f0:	dfc00c15 	stw	ra,48(sp)
100111f4:	df000b15 	stw	fp,44(sp)
100111f8:	df000b04 	addi	fp,sp,44
100111fc:	e13ffc15 	stw	r4,-16(fp)
10011200:	e17ffd15 	stw	r5,-12(fp)
10011204:	e1bffe15 	stw	r6,-8(fp)
10011208:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1001120c:	e0bffd17 	ldw	r2,-12(fp)
10011210:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10011214:	00004706 	br	10011334 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10011218:	e0bffc17 	ldw	r2,-16(fp)
1001121c:	10800a17 	ldw	r2,40(r2)
10011220:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10011224:	e0bffc17 	ldw	r2,-16(fp)
10011228:	10800b17 	ldw	r2,44(r2)
1001122c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10011230:	e0fff717 	ldw	r3,-36(fp)
10011234:	e0bff817 	ldw	r2,-32(fp)
10011238:	18800536 	bltu	r3,r2,10011250 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1001123c:	e0fff717 	ldw	r3,-36(fp)
10011240:	e0bff817 	ldw	r2,-32(fp)
10011244:	1885c83a 	sub	r2,r3,r2
10011248:	e0bff615 	stw	r2,-40(fp)
1001124c:	00000406 	br	10011260 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10011250:	00c20004 	movi	r3,2048
10011254:	e0bff817 	ldw	r2,-32(fp)
10011258:	1885c83a 	sub	r2,r3,r2
1001125c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10011260:	e0bff617 	ldw	r2,-40(fp)
10011264:	10001e26 	beq	r2,zero,100112e0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10011268:	e0fffe17 	ldw	r3,-8(fp)
1001126c:	e0bff617 	ldw	r2,-40(fp)
10011270:	1880022e 	bgeu	r3,r2,1001127c <altera_avalon_jtag_uart_read+0x90>
        n = space;
10011274:	e0bffe17 	ldw	r2,-8(fp)
10011278:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1001127c:	e0bffc17 	ldw	r2,-16(fp)
10011280:	10c00e04 	addi	r3,r2,56
10011284:	e0bff817 	ldw	r2,-32(fp)
10011288:	1885883a 	add	r2,r3,r2
1001128c:	e1bff617 	ldw	r6,-40(fp)
10011290:	100b883a 	mov	r5,r2
10011294:	e13ff517 	ldw	r4,-44(fp)
10011298:	0008de80 	call	10008de8 <memcpy>
      ptr   += n;
1001129c:	e0fff517 	ldw	r3,-44(fp)
100112a0:	e0bff617 	ldw	r2,-40(fp)
100112a4:	1885883a 	add	r2,r3,r2
100112a8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100112ac:	e0fffe17 	ldw	r3,-8(fp)
100112b0:	e0bff617 	ldw	r2,-40(fp)
100112b4:	1885c83a 	sub	r2,r3,r2
100112b8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100112bc:	e0fff817 	ldw	r3,-32(fp)
100112c0:	e0bff617 	ldw	r2,-40(fp)
100112c4:	1885883a 	add	r2,r3,r2
100112c8:	10c1ffcc 	andi	r3,r2,2047
100112cc:	e0bffc17 	ldw	r2,-16(fp)
100112d0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
100112d4:	e0bffe17 	ldw	r2,-8(fp)
100112d8:	00bfcf16 	blt	zero,r2,10011218 <__alt_data_end+0xf8011218>
100112dc:	00000106 	br	100112e4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
100112e0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
100112e4:	e0fff517 	ldw	r3,-44(fp)
100112e8:	e0bffd17 	ldw	r2,-12(fp)
100112ec:	1880141e 	bne	r3,r2,10011340 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100112f0:	e0bfff17 	ldw	r2,-4(fp)
100112f4:	1090000c 	andi	r2,r2,16384
100112f8:	1000131e 	bne	r2,zero,10011348 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100112fc:	0001883a 	nop
10011300:	e0bffc17 	ldw	r2,-16(fp)
10011304:	10c00a17 	ldw	r3,40(r2)
10011308:	e0bff717 	ldw	r2,-36(fp)
1001130c:	1880051e 	bne	r3,r2,10011324 <altera_avalon_jtag_uart_read+0x138>
10011310:	e0bffc17 	ldw	r2,-16(fp)
10011314:	10c00917 	ldw	r3,36(r2)
10011318:	e0bffc17 	ldw	r2,-16(fp)
1001131c:	10800117 	ldw	r2,4(r2)
10011320:	18bff736 	bltu	r3,r2,10011300 <__alt_data_end+0xf8011300>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10011324:	e0bffc17 	ldw	r2,-16(fp)
10011328:	10c00a17 	ldw	r3,40(r2)
1001132c:	e0bff717 	ldw	r2,-36(fp)
10011330:	18800726 	beq	r3,r2,10011350 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10011334:	e0bffe17 	ldw	r2,-8(fp)
10011338:	00bfb716 	blt	zero,r2,10011218 <__alt_data_end+0xf8011218>
1001133c:	00000506 	br	10011354 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10011340:	0001883a 	nop
10011344:	00000306 	br	10011354 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10011348:	0001883a 	nop
1001134c:	00000106 	br	10011354 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10011350:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10011354:	e0fff517 	ldw	r3,-44(fp)
10011358:	e0bffd17 	ldw	r2,-12(fp)
1001135c:	18801826 	beq	r3,r2,100113c0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011360:	0005303a 	rdctl	r2,status
10011364:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011368:	e0fffb17 	ldw	r3,-20(fp)
1001136c:	00bfff84 	movi	r2,-2
10011370:	1884703a 	and	r2,r3,r2
10011374:	1001703a 	wrctl	status,r2
  
  return context;
10011378:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1001137c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011380:	e0bffc17 	ldw	r2,-16(fp)
10011384:	10800817 	ldw	r2,32(r2)
10011388:	10c00054 	ori	r3,r2,1
1001138c:	e0bffc17 	ldw	r2,-16(fp)
10011390:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011394:	e0bffc17 	ldw	r2,-16(fp)
10011398:	10800017 	ldw	r2,0(r2)
1001139c:	10800104 	addi	r2,r2,4
100113a0:	1007883a 	mov	r3,r2
100113a4:	e0bffc17 	ldw	r2,-16(fp)
100113a8:	10800817 	ldw	r2,32(r2)
100113ac:	18800035 	stwio	r2,0(r3)
100113b0:	e0bffa17 	ldw	r2,-24(fp)
100113b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100113b8:	e0bff917 	ldw	r2,-28(fp)
100113bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100113c0:	e0fff517 	ldw	r3,-44(fp)
100113c4:	e0bffd17 	ldw	r2,-12(fp)
100113c8:	18800426 	beq	r3,r2,100113dc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
100113cc:	e0fff517 	ldw	r3,-44(fp)
100113d0:	e0bffd17 	ldw	r2,-12(fp)
100113d4:	1885c83a 	sub	r2,r3,r2
100113d8:	00000606 	br	100113f4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
100113dc:	e0bfff17 	ldw	r2,-4(fp)
100113e0:	1090000c 	andi	r2,r2,16384
100113e4:	10000226 	beq	r2,zero,100113f0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
100113e8:	00bffd44 	movi	r2,-11
100113ec:	00000106 	br	100113f4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
100113f0:	00bffec4 	movi	r2,-5
}
100113f4:	e037883a 	mov	sp,fp
100113f8:	dfc00117 	ldw	ra,4(sp)
100113fc:	df000017 	ldw	fp,0(sp)
10011400:	dec00204 	addi	sp,sp,8
10011404:	f800283a 	ret

10011408 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10011408:	defff304 	addi	sp,sp,-52
1001140c:	dfc00c15 	stw	ra,48(sp)
10011410:	df000b15 	stw	fp,44(sp)
10011414:	df000b04 	addi	fp,sp,44
10011418:	e13ffc15 	stw	r4,-16(fp)
1001141c:	e17ffd15 	stw	r5,-12(fp)
10011420:	e1bffe15 	stw	r6,-8(fp)
10011424:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10011428:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1001142c:	e0bffd17 	ldw	r2,-12(fp)
10011430:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10011434:	00003706 	br	10011514 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10011438:	e0bffc17 	ldw	r2,-16(fp)
1001143c:	10800c17 	ldw	r2,48(r2)
10011440:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10011444:	e0bffc17 	ldw	r2,-16(fp)
10011448:	10800d17 	ldw	r2,52(r2)
1001144c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10011450:	e0fff917 	ldw	r3,-28(fp)
10011454:	e0bff517 	ldw	r2,-44(fp)
10011458:	1880062e 	bgeu	r3,r2,10011474 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1001145c:	e0fff517 	ldw	r3,-44(fp)
10011460:	e0bff917 	ldw	r2,-28(fp)
10011464:	1885c83a 	sub	r2,r3,r2
10011468:	10bfffc4 	addi	r2,r2,-1
1001146c:	e0bff615 	stw	r2,-40(fp)
10011470:	00000b06 	br	100114a0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10011474:	e0bff517 	ldw	r2,-44(fp)
10011478:	10000526 	beq	r2,zero,10011490 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1001147c:	00c20004 	movi	r3,2048
10011480:	e0bff917 	ldw	r2,-28(fp)
10011484:	1885c83a 	sub	r2,r3,r2
10011488:	e0bff615 	stw	r2,-40(fp)
1001148c:	00000406 	br	100114a0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10011490:	00c1ffc4 	movi	r3,2047
10011494:	e0bff917 	ldw	r2,-28(fp)
10011498:	1885c83a 	sub	r2,r3,r2
1001149c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100114a0:	e0bff617 	ldw	r2,-40(fp)
100114a4:	10001e26 	beq	r2,zero,10011520 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
100114a8:	e0fffe17 	ldw	r3,-8(fp)
100114ac:	e0bff617 	ldw	r2,-40(fp)
100114b0:	1880022e 	bgeu	r3,r2,100114bc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
100114b4:	e0bffe17 	ldw	r2,-8(fp)
100114b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100114bc:	e0bffc17 	ldw	r2,-16(fp)
100114c0:	10c20e04 	addi	r3,r2,2104
100114c4:	e0bff917 	ldw	r2,-28(fp)
100114c8:	1885883a 	add	r2,r3,r2
100114cc:	e1bff617 	ldw	r6,-40(fp)
100114d0:	e17ffd17 	ldw	r5,-12(fp)
100114d4:	1009883a 	mov	r4,r2
100114d8:	0008de80 	call	10008de8 <memcpy>
      ptr   += n;
100114dc:	e0fffd17 	ldw	r3,-12(fp)
100114e0:	e0bff617 	ldw	r2,-40(fp)
100114e4:	1885883a 	add	r2,r3,r2
100114e8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
100114ec:	e0fffe17 	ldw	r3,-8(fp)
100114f0:	e0bff617 	ldw	r2,-40(fp)
100114f4:	1885c83a 	sub	r2,r3,r2
100114f8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100114fc:	e0fff917 	ldw	r3,-28(fp)
10011500:	e0bff617 	ldw	r2,-40(fp)
10011504:	1885883a 	add	r2,r3,r2
10011508:	10c1ffcc 	andi	r3,r2,2047
1001150c:	e0bffc17 	ldw	r2,-16(fp)
10011510:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10011514:	e0bffe17 	ldw	r2,-8(fp)
10011518:	00bfc716 	blt	zero,r2,10011438 <__alt_data_end+0xf8011438>
1001151c:	00000106 	br	10011524 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10011520:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011524:	0005303a 	rdctl	r2,status
10011528:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001152c:	e0fffb17 	ldw	r3,-20(fp)
10011530:	00bfff84 	movi	r2,-2
10011534:	1884703a 	and	r2,r3,r2
10011538:	1001703a 	wrctl	status,r2
  
  return context;
1001153c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10011540:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10011544:	e0bffc17 	ldw	r2,-16(fp)
10011548:	10800817 	ldw	r2,32(r2)
1001154c:	10c00094 	ori	r3,r2,2
10011550:	e0bffc17 	ldw	r2,-16(fp)
10011554:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011558:	e0bffc17 	ldw	r2,-16(fp)
1001155c:	10800017 	ldw	r2,0(r2)
10011560:	10800104 	addi	r2,r2,4
10011564:	1007883a 	mov	r3,r2
10011568:	e0bffc17 	ldw	r2,-16(fp)
1001156c:	10800817 	ldw	r2,32(r2)
10011570:	18800035 	stwio	r2,0(r3)
10011574:	e0bffa17 	ldw	r2,-24(fp)
10011578:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001157c:	e0bff817 	ldw	r2,-32(fp)
10011580:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10011584:	e0bffe17 	ldw	r2,-8(fp)
10011588:	0080100e 	bge	zero,r2,100115cc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1001158c:	e0bfff17 	ldw	r2,-4(fp)
10011590:	1090000c 	andi	r2,r2,16384
10011594:	1000101e 	bne	r2,zero,100115d8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10011598:	0001883a 	nop
1001159c:	e0bffc17 	ldw	r2,-16(fp)
100115a0:	10c00d17 	ldw	r3,52(r2)
100115a4:	e0bff517 	ldw	r2,-44(fp)
100115a8:	1880051e 	bne	r3,r2,100115c0 <altera_avalon_jtag_uart_write+0x1b8>
100115ac:	e0bffc17 	ldw	r2,-16(fp)
100115b0:	10c00917 	ldw	r3,36(r2)
100115b4:	e0bffc17 	ldw	r2,-16(fp)
100115b8:	10800117 	ldw	r2,4(r2)
100115bc:	18bff736 	bltu	r3,r2,1001159c <__alt_data_end+0xf801159c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100115c0:	e0bffc17 	ldw	r2,-16(fp)
100115c4:	10800917 	ldw	r2,36(r2)
100115c8:	1000051e 	bne	r2,zero,100115e0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
100115cc:	e0bffe17 	ldw	r2,-8(fp)
100115d0:	00bfd016 	blt	zero,r2,10011514 <__alt_data_end+0xf8011514>
100115d4:	00000306 	br	100115e4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
100115d8:	0001883a 	nop
100115dc:	00000106 	br	100115e4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
100115e0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100115e4:	e0fffd17 	ldw	r3,-12(fp)
100115e8:	e0bff717 	ldw	r2,-36(fp)
100115ec:	18800426 	beq	r3,r2,10011600 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
100115f0:	e0fffd17 	ldw	r3,-12(fp)
100115f4:	e0bff717 	ldw	r2,-36(fp)
100115f8:	1885c83a 	sub	r2,r3,r2
100115fc:	00000606 	br	10011618 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10011600:	e0bfff17 	ldw	r2,-4(fp)
10011604:	1090000c 	andi	r2,r2,16384
10011608:	10000226 	beq	r2,zero,10011614 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1001160c:	00bffd44 	movi	r2,-11
10011610:	00000106 	br	10011618 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10011614:	00bffec4 	movi	r2,-5
}
10011618:	e037883a 	mov	sp,fp
1001161c:	dfc00117 	ldw	ra,4(sp)
10011620:	df000017 	ldw	fp,0(sp)
10011624:	dec00204 	addi	sp,sp,8
10011628:	f800283a 	ret

1001162c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
1001162c:	defffa04 	addi	sp,sp,-24
10011630:	dfc00515 	stw	ra,20(sp)
10011634:	df000415 	stw	fp,16(sp)
10011638:	df000404 	addi	fp,sp,16
1001163c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
10011640:	0007883a 	mov	r3,zero
10011644:	e0bfff17 	ldw	r2,-4(fp)
10011648:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
1001164c:	e0bfff17 	ldw	r2,-4(fp)
10011650:	10800104 	addi	r2,r2,4
10011654:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011658:	0005303a 	rdctl	r2,status
1001165c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011660:	e0fffd17 	ldw	r3,-12(fp)
10011664:	00bfff84 	movi	r2,-2
10011668:	1884703a 	and	r2,r3,r2
1001166c:	1001703a 	wrctl	status,r2
  
  return context;
10011670:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
10011674:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
10011678:	00122a40 	call	100122a4 <alt_tick>
1001167c:	e0bffc17 	ldw	r2,-16(fp)
10011680:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011684:	e0bffe17 	ldw	r2,-8(fp)
10011688:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
1001168c:	0001883a 	nop
10011690:	e037883a 	mov	sp,fp
10011694:	dfc00117 	ldw	ra,4(sp)
10011698:	df000017 	ldw	fp,0(sp)
1001169c:	dec00204 	addi	sp,sp,8
100116a0:	f800283a 	ret

100116a4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
100116a4:	defff804 	addi	sp,sp,-32
100116a8:	dfc00715 	stw	ra,28(sp)
100116ac:	df000615 	stw	fp,24(sp)
100116b0:	df000604 	addi	fp,sp,24
100116b4:	e13ffc15 	stw	r4,-16(fp)
100116b8:	e17ffd15 	stw	r5,-12(fp)
100116bc:	e1bffe15 	stw	r6,-8(fp)
100116c0:	e1ffff15 	stw	r7,-4(fp)
100116c4:	e0bfff17 	ldw	r2,-4(fp)
100116c8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
100116cc:	d0a6d717 	ldw	r2,-25764(gp)
100116d0:	1000021e 	bne	r2,zero,100116dc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
100116d4:	e0bffb17 	ldw	r2,-20(fp)
100116d8:	d0a6d715 	stw	r2,-25764(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
100116dc:	e0bffc17 	ldw	r2,-16(fp)
100116e0:	10800104 	addi	r2,r2,4
100116e4:	00c001c4 	movi	r3,7
100116e8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
100116ec:	d8000015 	stw	zero,0(sp)
100116f0:	e1fffc17 	ldw	r7,-16(fp)
100116f4:	01840074 	movhi	r6,4097
100116f8:	31858b04 	addi	r6,r6,5676
100116fc:	e17ffe17 	ldw	r5,-8(fp)
10011700:	e13ffd17 	ldw	r4,-12(fp)
10011704:	0011b840 	call	10011b84 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
10011708:	0001883a 	nop
1001170c:	e037883a 	mov	sp,fp
10011710:	dfc00117 	ldw	ra,4(sp)
10011714:	df000017 	ldw	fp,0(sp)
10011718:	dec00204 	addi	sp,sp,8
1001171c:	f800283a 	ret

10011720 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10011720:	defff504 	addi	sp,sp,-44
10011724:	df000a15 	stw	fp,40(sp)
10011728:	df000a04 	addi	fp,sp,40
1001172c:	e13ffc15 	stw	r4,-16(fp)
10011730:	e17ffd15 	stw	r5,-12(fp)
10011734:	e1bffe15 	stw	r6,-8(fp)
10011738:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1001173c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10011740:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
10011744:	10003c26 	beq	r2,zero,10011838 <alt_alarm_start+0x118>
  {
    if (alarm)
10011748:	e0bffc17 	ldw	r2,-16(fp)
1001174c:	10003826 	beq	r2,zero,10011830 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10011750:	e0bffc17 	ldw	r2,-16(fp)
10011754:	e0fffe17 	ldw	r3,-8(fp)
10011758:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1001175c:	e0bffc17 	ldw	r2,-16(fp)
10011760:	e0ffff17 	ldw	r3,-4(fp)
10011764:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011768:	0005303a 	rdctl	r2,status
1001176c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011770:	e0fff917 	ldw	r3,-28(fp)
10011774:	00bfff84 	movi	r2,-2
10011778:	1884703a 	and	r2,r3,r2
1001177c:	1001703a 	wrctl	status,r2
  
  return context;
10011780:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10011784:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10011788:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
1001178c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10011790:	e0fffd17 	ldw	r3,-12(fp)
10011794:	e0bff617 	ldw	r2,-40(fp)
10011798:	1885883a 	add	r2,r3,r2
1001179c:	10c00044 	addi	r3,r2,1
100117a0:	e0bffc17 	ldw	r2,-16(fp)
100117a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100117a8:	e0bffc17 	ldw	r2,-16(fp)
100117ac:	10c00217 	ldw	r3,8(r2)
100117b0:	e0bff617 	ldw	r2,-40(fp)
100117b4:	1880042e 	bgeu	r3,r2,100117c8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
100117b8:	e0bffc17 	ldw	r2,-16(fp)
100117bc:	00c00044 	movi	r3,1
100117c0:	10c00405 	stb	r3,16(r2)
100117c4:	00000206 	br	100117d0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
100117c8:	e0bffc17 	ldw	r2,-16(fp)
100117cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100117d0:	e0bffc17 	ldw	r2,-16(fp)
100117d4:	d0e00e04 	addi	r3,gp,-32712
100117d8:	e0fffa15 	stw	r3,-24(fp)
100117dc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100117e0:	e0bffb17 	ldw	r2,-20(fp)
100117e4:	e0fffa17 	ldw	r3,-24(fp)
100117e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100117ec:	e0bffa17 	ldw	r2,-24(fp)
100117f0:	10c00017 	ldw	r3,0(r2)
100117f4:	e0bffb17 	ldw	r2,-20(fp)
100117f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100117fc:	e0bffa17 	ldw	r2,-24(fp)
10011800:	10800017 	ldw	r2,0(r2)
10011804:	e0fffb17 	ldw	r3,-20(fp)
10011808:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001180c:	e0bffa17 	ldw	r2,-24(fp)
10011810:	e0fffb17 	ldw	r3,-20(fp)
10011814:	10c00015 	stw	r3,0(r2)
10011818:	e0bff817 	ldw	r2,-32(fp)
1001181c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011820:	e0bff717 	ldw	r2,-36(fp)
10011824:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10011828:	0005883a 	mov	r2,zero
1001182c:	00000306 	br	1001183c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10011830:	00bffa84 	movi	r2,-22
10011834:	00000106 	br	1001183c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10011838:	00bfde84 	movi	r2,-134
  }
}
1001183c:	e037883a 	mov	sp,fp
10011840:	df000017 	ldw	fp,0(sp)
10011844:	dec00104 	addi	sp,sp,4
10011848:	f800283a 	ret

1001184c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1001184c:	defffa04 	addi	sp,sp,-24
10011850:	dfc00515 	stw	ra,20(sp)
10011854:	df000415 	stw	fp,16(sp)
10011858:	df000404 	addi	fp,sp,16
1001185c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10011860:	00800244 	movi	r2,9
10011864:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10011868:	014003f4 	movhi	r5,15
1001186c:	29509004 	addi	r5,r5,16960
10011870:	e13ffd17 	ldw	r4,-12(fp)
10011874:	000d8680 	call	1000d868 <__mulsi3>
10011878:	100b883a 	mov	r5,r2
1001187c:	0100bef4 	movhi	r4,763
10011880:	213c2004 	addi	r4,r4,-3968
10011884:	000d7ac0 	call	1000d7ac <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10011888:	100b883a 	mov	r5,r2
1001188c:	01200034 	movhi	r4,32768
10011890:	213fffc4 	addi	r4,r4,-1
10011894:	000d7ac0 	call	1000d7ac <__udivsi3>
10011898:	100b883a 	mov	r5,r2
1001189c:	e13fff17 	ldw	r4,-4(fp)
100118a0:	000d7ac0 	call	1000d7ac <__udivsi3>
100118a4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
100118a8:	e0bffe17 	ldw	r2,-8(fp)
100118ac:	10002a26 	beq	r2,zero,10011958 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
100118b0:	e03ffc15 	stw	zero,-16(fp)
100118b4:	00001706 	br	10011914 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
100118b8:	00a00034 	movhi	r2,32768
100118bc:	10bfffc4 	addi	r2,r2,-1
100118c0:	10bfffc4 	addi	r2,r2,-1
100118c4:	103ffe1e 	bne	r2,zero,100118c0 <__alt_data_end+0xf80118c0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
100118c8:	014003f4 	movhi	r5,15
100118cc:	29509004 	addi	r5,r5,16960
100118d0:	e13ffd17 	ldw	r4,-12(fp)
100118d4:	000d8680 	call	1000d868 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
100118d8:	100b883a 	mov	r5,r2
100118dc:	0100bef4 	movhi	r4,763
100118e0:	213c2004 	addi	r4,r4,-3968
100118e4:	000d7ac0 	call	1000d7ac <__udivsi3>
100118e8:	100b883a 	mov	r5,r2
100118ec:	01200034 	movhi	r4,32768
100118f0:	213fffc4 	addi	r4,r4,-1
100118f4:	000d7ac0 	call	1000d7ac <__udivsi3>
100118f8:	1007883a 	mov	r3,r2
100118fc:	e0bfff17 	ldw	r2,-4(fp)
10011900:	10c5c83a 	sub	r2,r2,r3
10011904:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10011908:	e0bffc17 	ldw	r2,-16(fp)
1001190c:	10800044 	addi	r2,r2,1
10011910:	e0bffc15 	stw	r2,-16(fp)
10011914:	e0fffc17 	ldw	r3,-16(fp)
10011918:	e0bffe17 	ldw	r2,-8(fp)
1001191c:	18bfe616 	blt	r3,r2,100118b8 <__alt_data_end+0xf80118b8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10011920:	014003f4 	movhi	r5,15
10011924:	29509004 	addi	r5,r5,16960
10011928:	e13ffd17 	ldw	r4,-12(fp)
1001192c:	000d8680 	call	1000d868 <__mulsi3>
10011930:	100b883a 	mov	r5,r2
10011934:	0100bef4 	movhi	r4,763
10011938:	213c2004 	addi	r4,r4,-3968
1001193c:	000d7ac0 	call	1000d7ac <__udivsi3>
10011940:	e17fff17 	ldw	r5,-4(fp)
10011944:	1009883a 	mov	r4,r2
10011948:	000d8680 	call	1000d868 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1001194c:	10bfffc4 	addi	r2,r2,-1
10011950:	103ffe1e 	bne	r2,zero,1001194c <__alt_data_end+0xf801194c>
10011954:	00000d06 	br	1001198c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10011958:	014003f4 	movhi	r5,15
1001195c:	29509004 	addi	r5,r5,16960
10011960:	e13ffd17 	ldw	r4,-12(fp)
10011964:	000d8680 	call	1000d868 <__mulsi3>
10011968:	100b883a 	mov	r5,r2
1001196c:	0100bef4 	movhi	r4,763
10011970:	213c2004 	addi	r4,r4,-3968
10011974:	000d7ac0 	call	1000d7ac <__udivsi3>
10011978:	e17fff17 	ldw	r5,-4(fp)
1001197c:	1009883a 	mov	r4,r2
10011980:	000d8680 	call	1000d868 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10011984:	10bfffc4 	addi	r2,r2,-1
10011988:	00bffe16 	blt	zero,r2,10011984 <__alt_data_end+0xf8011984>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
1001198c:	0005883a 	mov	r2,zero
}
10011990:	e037883a 	mov	sp,fp
10011994:	dfc00117 	ldw	ra,4(sp)
10011998:	df000017 	ldw	fp,0(sp)
1001199c:	dec00204 	addi	sp,sp,8
100119a0:	f800283a 	ret

100119a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100119a4:	deffff04 	addi	sp,sp,-4
100119a8:	df000015 	stw	fp,0(sp)
100119ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100119b0:	0001883a 	nop
100119b4:	e037883a 	mov	sp,fp
100119b8:	df000017 	ldw	fp,0(sp)
100119bc:	dec00104 	addi	sp,sp,4
100119c0:	f800283a 	ret

100119c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100119c4:	defffe04 	addi	sp,sp,-8
100119c8:	dfc00115 	stw	ra,4(sp)
100119cc:	df000015 	stw	fp,0(sp)
100119d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100119d4:	d0a00b17 	ldw	r2,-32724(gp)
100119d8:	10000326 	beq	r2,zero,100119e8 <alt_get_errno+0x24>
100119dc:	d0a00b17 	ldw	r2,-32724(gp)
100119e0:	103ee83a 	callr	r2
100119e4:	00000106 	br	100119ec <alt_get_errno+0x28>
100119e8:	d0a6d204 	addi	r2,gp,-25784
}
100119ec:	e037883a 	mov	sp,fp
100119f0:	dfc00117 	ldw	ra,4(sp)
100119f4:	df000017 	ldw	fp,0(sp)
100119f8:	dec00204 	addi	sp,sp,8
100119fc:	f800283a 	ret

10011a00 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10011a00:	defffa04 	addi	sp,sp,-24
10011a04:	dfc00515 	stw	ra,20(sp)
10011a08:	df000415 	stw	fp,16(sp)
10011a0c:	df000404 	addi	fp,sp,16
10011a10:	e13ffe15 	stw	r4,-8(fp)
10011a14:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10011a18:	e0bffe17 	ldw	r2,-8(fp)
10011a1c:	10000326 	beq	r2,zero,10011a2c <alt_dev_llist_insert+0x2c>
10011a20:	e0bffe17 	ldw	r2,-8(fp)
10011a24:	10800217 	ldw	r2,8(r2)
10011a28:	1000061e 	bne	r2,zero,10011a44 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10011a2c:	00119c40 	call	100119c4 <alt_get_errno>
10011a30:	1007883a 	mov	r3,r2
10011a34:	00800584 	movi	r2,22
10011a38:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10011a3c:	00bffa84 	movi	r2,-22
10011a40:	00001306 	br	10011a90 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10011a44:	e0bffe17 	ldw	r2,-8(fp)
10011a48:	e0ffff17 	ldw	r3,-4(fp)
10011a4c:	e0fffc15 	stw	r3,-16(fp)
10011a50:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011a54:	e0bffd17 	ldw	r2,-12(fp)
10011a58:	e0fffc17 	ldw	r3,-16(fp)
10011a5c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011a60:	e0bffc17 	ldw	r2,-16(fp)
10011a64:	10c00017 	ldw	r3,0(r2)
10011a68:	e0bffd17 	ldw	r2,-12(fp)
10011a6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011a70:	e0bffc17 	ldw	r2,-16(fp)
10011a74:	10800017 	ldw	r2,0(r2)
10011a78:	e0fffd17 	ldw	r3,-12(fp)
10011a7c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011a80:	e0bffc17 	ldw	r2,-16(fp)
10011a84:	e0fffd17 	ldw	r3,-12(fp)
10011a88:	10c00015 	stw	r3,0(r2)

  return 0;  
10011a8c:	0005883a 	mov	r2,zero
}
10011a90:	e037883a 	mov	sp,fp
10011a94:	dfc00117 	ldw	ra,4(sp)
10011a98:	df000017 	ldw	fp,0(sp)
10011a9c:	dec00204 	addi	sp,sp,8
10011aa0:	f800283a 	ret

10011aa4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10011aa4:	defffd04 	addi	sp,sp,-12
10011aa8:	dfc00215 	stw	ra,8(sp)
10011aac:	df000115 	stw	fp,4(sp)
10011ab0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011ab4:	00840074 	movhi	r2,4097
10011ab8:	108a9604 	addi	r2,r2,10840
10011abc:	e0bfff15 	stw	r2,-4(fp)
10011ac0:	00000606 	br	10011adc <_do_ctors+0x38>
        (*ctor) (); 
10011ac4:	e0bfff17 	ldw	r2,-4(fp)
10011ac8:	10800017 	ldw	r2,0(r2)
10011acc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011ad0:	e0bfff17 	ldw	r2,-4(fp)
10011ad4:	10bfff04 	addi	r2,r2,-4
10011ad8:	e0bfff15 	stw	r2,-4(fp)
10011adc:	e0ffff17 	ldw	r3,-4(fp)
10011ae0:	00840074 	movhi	r2,4097
10011ae4:	108a9704 	addi	r2,r2,10844
10011ae8:	18bff62e 	bgeu	r3,r2,10011ac4 <__alt_data_end+0xf8011ac4>
        (*ctor) (); 
}
10011aec:	0001883a 	nop
10011af0:	e037883a 	mov	sp,fp
10011af4:	dfc00117 	ldw	ra,4(sp)
10011af8:	df000017 	ldw	fp,0(sp)
10011afc:	dec00204 	addi	sp,sp,8
10011b00:	f800283a 	ret

10011b04 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10011b04:	defffd04 	addi	sp,sp,-12
10011b08:	dfc00215 	stw	ra,8(sp)
10011b0c:	df000115 	stw	fp,4(sp)
10011b10:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011b14:	00840074 	movhi	r2,4097
10011b18:	108a9604 	addi	r2,r2,10840
10011b1c:	e0bfff15 	stw	r2,-4(fp)
10011b20:	00000606 	br	10011b3c <_do_dtors+0x38>
        (*dtor) (); 
10011b24:	e0bfff17 	ldw	r2,-4(fp)
10011b28:	10800017 	ldw	r2,0(r2)
10011b2c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011b30:	e0bfff17 	ldw	r2,-4(fp)
10011b34:	10bfff04 	addi	r2,r2,-4
10011b38:	e0bfff15 	stw	r2,-4(fp)
10011b3c:	e0ffff17 	ldw	r3,-4(fp)
10011b40:	00840074 	movhi	r2,4097
10011b44:	108a9704 	addi	r2,r2,10844
10011b48:	18bff62e 	bgeu	r3,r2,10011b24 <__alt_data_end+0xf8011b24>
        (*dtor) (); 
}
10011b4c:	0001883a 	nop
10011b50:	e037883a 	mov	sp,fp
10011b54:	dfc00117 	ldw	ra,4(sp)
10011b58:	df000017 	ldw	fp,0(sp)
10011b5c:	dec00204 	addi	sp,sp,8
10011b60:	f800283a 	ret

10011b64 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011b64:	deffff04 	addi	sp,sp,-4
10011b68:	df000015 	stw	fp,0(sp)
10011b6c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10011b70:	0001883a 	nop
10011b74:	e037883a 	mov	sp,fp
10011b78:	df000017 	ldw	fp,0(sp)
10011b7c:	dec00104 	addi	sp,sp,4
10011b80:	f800283a 	ret

10011b84 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011b84:	defff904 	addi	sp,sp,-28
10011b88:	dfc00615 	stw	ra,24(sp)
10011b8c:	df000515 	stw	fp,20(sp)
10011b90:	df000504 	addi	fp,sp,20
10011b94:	e13ffc15 	stw	r4,-16(fp)
10011b98:	e17ffd15 	stw	r5,-12(fp)
10011b9c:	e1bffe15 	stw	r6,-8(fp)
10011ba0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011ba4:	e0800217 	ldw	r2,8(fp)
10011ba8:	d8800015 	stw	r2,0(sp)
10011bac:	e1ffff17 	ldw	r7,-4(fp)
10011bb0:	e1bffe17 	ldw	r6,-8(fp)
10011bb4:	e17ffd17 	ldw	r5,-12(fp)
10011bb8:	e13ffc17 	ldw	r4,-16(fp)
10011bbc:	0011d340 	call	10011d34 <alt_iic_isr_register>
}  
10011bc0:	e037883a 	mov	sp,fp
10011bc4:	dfc00117 	ldw	ra,4(sp)
10011bc8:	df000017 	ldw	fp,0(sp)
10011bcc:	dec00204 	addi	sp,sp,8
10011bd0:	f800283a 	ret

10011bd4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011bd4:	defff904 	addi	sp,sp,-28
10011bd8:	df000615 	stw	fp,24(sp)
10011bdc:	df000604 	addi	fp,sp,24
10011be0:	e13ffe15 	stw	r4,-8(fp)
10011be4:	e17fff15 	stw	r5,-4(fp)
10011be8:	e0bfff17 	ldw	r2,-4(fp)
10011bec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011bf0:	0005303a 	rdctl	r2,status
10011bf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011bf8:	e0fffb17 	ldw	r3,-20(fp)
10011bfc:	00bfff84 	movi	r2,-2
10011c00:	1884703a 	and	r2,r3,r2
10011c04:	1001703a 	wrctl	status,r2
  
  return context;
10011c08:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011c0c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10011c10:	00c00044 	movi	r3,1
10011c14:	e0bffa17 	ldw	r2,-24(fp)
10011c18:	1884983a 	sll	r2,r3,r2
10011c1c:	1007883a 	mov	r3,r2
10011c20:	d0a6d617 	ldw	r2,-25768(gp)
10011c24:	1884b03a 	or	r2,r3,r2
10011c28:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011c2c:	d0a6d617 	ldw	r2,-25768(gp)
10011c30:	100170fa 	wrctl	ienable,r2
10011c34:	e0bffc17 	ldw	r2,-16(fp)
10011c38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011c3c:	e0bffd17 	ldw	r2,-12(fp)
10011c40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011c44:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10011c48:	0001883a 	nop
}
10011c4c:	e037883a 	mov	sp,fp
10011c50:	df000017 	ldw	fp,0(sp)
10011c54:	dec00104 	addi	sp,sp,4
10011c58:	f800283a 	ret

10011c5c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011c5c:	defff904 	addi	sp,sp,-28
10011c60:	df000615 	stw	fp,24(sp)
10011c64:	df000604 	addi	fp,sp,24
10011c68:	e13ffe15 	stw	r4,-8(fp)
10011c6c:	e17fff15 	stw	r5,-4(fp)
10011c70:	e0bfff17 	ldw	r2,-4(fp)
10011c74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011c78:	0005303a 	rdctl	r2,status
10011c7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011c80:	e0fffb17 	ldw	r3,-20(fp)
10011c84:	00bfff84 	movi	r2,-2
10011c88:	1884703a 	and	r2,r3,r2
10011c8c:	1001703a 	wrctl	status,r2
  
  return context;
10011c90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011c94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10011c98:	00c00044 	movi	r3,1
10011c9c:	e0bffa17 	ldw	r2,-24(fp)
10011ca0:	1884983a 	sll	r2,r3,r2
10011ca4:	0084303a 	nor	r2,zero,r2
10011ca8:	1007883a 	mov	r3,r2
10011cac:	d0a6d617 	ldw	r2,-25768(gp)
10011cb0:	1884703a 	and	r2,r3,r2
10011cb4:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011cb8:	d0a6d617 	ldw	r2,-25768(gp)
10011cbc:	100170fa 	wrctl	ienable,r2
10011cc0:	e0bffc17 	ldw	r2,-16(fp)
10011cc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011cc8:	e0bffd17 	ldw	r2,-12(fp)
10011ccc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011cd0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10011cd4:	0001883a 	nop
}
10011cd8:	e037883a 	mov	sp,fp
10011cdc:	df000017 	ldw	fp,0(sp)
10011ce0:	dec00104 	addi	sp,sp,4
10011ce4:	f800283a 	ret

10011ce8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011ce8:	defffc04 	addi	sp,sp,-16
10011cec:	df000315 	stw	fp,12(sp)
10011cf0:	df000304 	addi	fp,sp,12
10011cf4:	e13ffe15 	stw	r4,-8(fp)
10011cf8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011cfc:	000530fa 	rdctl	r2,ienable
10011d00:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10011d04:	00c00044 	movi	r3,1
10011d08:	e0bfff17 	ldw	r2,-4(fp)
10011d0c:	1884983a 	sll	r2,r3,r2
10011d10:	1007883a 	mov	r3,r2
10011d14:	e0bffd17 	ldw	r2,-12(fp)
10011d18:	1884703a 	and	r2,r3,r2
10011d1c:	1004c03a 	cmpne	r2,r2,zero
10011d20:	10803fcc 	andi	r2,r2,255
}
10011d24:	e037883a 	mov	sp,fp
10011d28:	df000017 	ldw	fp,0(sp)
10011d2c:	dec00104 	addi	sp,sp,4
10011d30:	f800283a 	ret

10011d34 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011d34:	defff504 	addi	sp,sp,-44
10011d38:	dfc00a15 	stw	ra,40(sp)
10011d3c:	df000915 	stw	fp,36(sp)
10011d40:	df000904 	addi	fp,sp,36
10011d44:	e13ffc15 	stw	r4,-16(fp)
10011d48:	e17ffd15 	stw	r5,-12(fp)
10011d4c:	e1bffe15 	stw	r6,-8(fp)
10011d50:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10011d54:	00bffa84 	movi	r2,-22
10011d58:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011d5c:	e0bffd17 	ldw	r2,-12(fp)
10011d60:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011d64:	e0bff817 	ldw	r2,-32(fp)
10011d68:	10800808 	cmpgei	r2,r2,32
10011d6c:	1000271e 	bne	r2,zero,10011e0c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011d70:	0005303a 	rdctl	r2,status
10011d74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011d78:	e0fffb17 	ldw	r3,-20(fp)
10011d7c:	00bfff84 	movi	r2,-2
10011d80:	1884703a 	and	r2,r3,r2
10011d84:	1001703a 	wrctl	status,r2
  
  return context;
10011d88:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011d8c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10011d90:	00840074 	movhi	r2,4097
10011d94:	109a9a04 	addi	r2,r2,27240
10011d98:	e0fff817 	ldw	r3,-32(fp)
10011d9c:	180690fa 	slli	r3,r3,3
10011da0:	10c5883a 	add	r2,r2,r3
10011da4:	e0fffe17 	ldw	r3,-8(fp)
10011da8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011dac:	00840074 	movhi	r2,4097
10011db0:	109a9a04 	addi	r2,r2,27240
10011db4:	e0fff817 	ldw	r3,-32(fp)
10011db8:	180690fa 	slli	r3,r3,3
10011dbc:	10c5883a 	add	r2,r2,r3
10011dc0:	10800104 	addi	r2,r2,4
10011dc4:	e0ffff17 	ldw	r3,-4(fp)
10011dc8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10011dcc:	e0bffe17 	ldw	r2,-8(fp)
10011dd0:	10000526 	beq	r2,zero,10011de8 <alt_iic_isr_register+0xb4>
10011dd4:	e0bff817 	ldw	r2,-32(fp)
10011dd8:	100b883a 	mov	r5,r2
10011ddc:	e13ffc17 	ldw	r4,-16(fp)
10011de0:	0011bd40 	call	10011bd4 <alt_ic_irq_enable>
10011de4:	00000406 	br	10011df8 <alt_iic_isr_register+0xc4>
10011de8:	e0bff817 	ldw	r2,-32(fp)
10011dec:	100b883a 	mov	r5,r2
10011df0:	e13ffc17 	ldw	r4,-16(fp)
10011df4:	0011c5c0 	call	10011c5c <alt_ic_irq_disable>
10011df8:	e0bff715 	stw	r2,-36(fp)
10011dfc:	e0bffa17 	ldw	r2,-24(fp)
10011e00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011e04:	e0bff917 	ldw	r2,-28(fp)
10011e08:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10011e0c:	e0bff717 	ldw	r2,-36(fp)
}
10011e10:	e037883a 	mov	sp,fp
10011e14:	dfc00117 	ldw	ra,4(sp)
10011e18:	df000017 	ldw	fp,0(sp)
10011e1c:	dec00204 	addi	sp,sp,8
10011e20:	f800283a 	ret

10011e24 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011e24:	defff804 	addi	sp,sp,-32
10011e28:	dfc00715 	stw	ra,28(sp)
10011e2c:	df000615 	stw	fp,24(sp)
10011e30:	dc000515 	stw	r16,20(sp)
10011e34:	df000604 	addi	fp,sp,24
10011e38:	e13ffb15 	stw	r4,-20(fp)
10011e3c:	e17ffc15 	stw	r5,-16(fp)
10011e40:	e1bffd15 	stw	r6,-12(fp)
10011e44:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10011e48:	e1bffe17 	ldw	r6,-8(fp)
10011e4c:	e17ffd17 	ldw	r5,-12(fp)
10011e50:	e13ffc17 	ldw	r4,-16(fp)
10011e54:	00120ac0 	call	100120ac <open>
10011e58:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10011e5c:	e0bffa17 	ldw	r2,-24(fp)
10011e60:	10002216 	blt	r2,zero,10011eec <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011e64:	04040074 	movhi	r16,4097
10011e68:	840f3e04 	addi	r16,r16,15608
10011e6c:	e0bffa17 	ldw	r2,-24(fp)
10011e70:	01400304 	movi	r5,12
10011e74:	1009883a 	mov	r4,r2
10011e78:	000d8680 	call	1000d868 <__mulsi3>
10011e7c:	8085883a 	add	r2,r16,r2
10011e80:	10c00017 	ldw	r3,0(r2)
10011e84:	e0bffb17 	ldw	r2,-20(fp)
10011e88:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011e8c:	04040074 	movhi	r16,4097
10011e90:	840f3e04 	addi	r16,r16,15608
10011e94:	e0bffa17 	ldw	r2,-24(fp)
10011e98:	01400304 	movi	r5,12
10011e9c:	1009883a 	mov	r4,r2
10011ea0:	000d8680 	call	1000d868 <__mulsi3>
10011ea4:	8085883a 	add	r2,r16,r2
10011ea8:	10800104 	addi	r2,r2,4
10011eac:	10c00017 	ldw	r3,0(r2)
10011eb0:	e0bffb17 	ldw	r2,-20(fp)
10011eb4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011eb8:	04040074 	movhi	r16,4097
10011ebc:	840f3e04 	addi	r16,r16,15608
10011ec0:	e0bffa17 	ldw	r2,-24(fp)
10011ec4:	01400304 	movi	r5,12
10011ec8:	1009883a 	mov	r4,r2
10011ecc:	000d8680 	call	1000d868 <__mulsi3>
10011ed0:	8085883a 	add	r2,r16,r2
10011ed4:	10800204 	addi	r2,r2,8
10011ed8:	10c00017 	ldw	r3,0(r2)
10011edc:	e0bffb17 	ldw	r2,-20(fp)
10011ee0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011ee4:	e13ffa17 	ldw	r4,-24(fp)
10011ee8:	00108580 	call	10010858 <alt_release_fd>
  }
} 
10011eec:	0001883a 	nop
10011ef0:	e6ffff04 	addi	sp,fp,-4
10011ef4:	dfc00217 	ldw	ra,8(sp)
10011ef8:	df000117 	ldw	fp,4(sp)
10011efc:	dc000017 	ldw	r16,0(sp)
10011f00:	dec00304 	addi	sp,sp,12
10011f04:	f800283a 	ret

10011f08 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10011f08:	defffb04 	addi	sp,sp,-20
10011f0c:	dfc00415 	stw	ra,16(sp)
10011f10:	df000315 	stw	fp,12(sp)
10011f14:	df000304 	addi	fp,sp,12
10011f18:	e13ffd15 	stw	r4,-12(fp)
10011f1c:	e17ffe15 	stw	r5,-8(fp)
10011f20:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10011f24:	01c07fc4 	movi	r7,511
10011f28:	01800044 	movi	r6,1
10011f2c:	e17ffd17 	ldw	r5,-12(fp)
10011f30:	01040074 	movhi	r4,4097
10011f34:	210f4104 	addi	r4,r4,15620
10011f38:	0011e240 	call	10011e24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10011f3c:	01c07fc4 	movi	r7,511
10011f40:	000d883a 	mov	r6,zero
10011f44:	e17ffe17 	ldw	r5,-8(fp)
10011f48:	01040074 	movhi	r4,4097
10011f4c:	210f3e04 	addi	r4,r4,15608
10011f50:	0011e240 	call	10011e24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011f54:	01c07fc4 	movi	r7,511
10011f58:	01800044 	movi	r6,1
10011f5c:	e17fff17 	ldw	r5,-4(fp)
10011f60:	01040074 	movhi	r4,4097
10011f64:	210f4404 	addi	r4,r4,15632
10011f68:	0011e240 	call	10011e24 <alt_open_fd>
}  
10011f6c:	0001883a 	nop
10011f70:	e037883a 	mov	sp,fp
10011f74:	dfc00117 	ldw	ra,4(sp)
10011f78:	df000017 	ldw	fp,0(sp)
10011f7c:	dec00204 	addi	sp,sp,8
10011f80:	f800283a 	ret

10011f84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011f84:	defffe04 	addi	sp,sp,-8
10011f88:	dfc00115 	stw	ra,4(sp)
10011f8c:	df000015 	stw	fp,0(sp)
10011f90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011f94:	d0a00b17 	ldw	r2,-32724(gp)
10011f98:	10000326 	beq	r2,zero,10011fa8 <alt_get_errno+0x24>
10011f9c:	d0a00b17 	ldw	r2,-32724(gp)
10011fa0:	103ee83a 	callr	r2
10011fa4:	00000106 	br	10011fac <alt_get_errno+0x28>
10011fa8:	d0a6d204 	addi	r2,gp,-25784
}
10011fac:	e037883a 	mov	sp,fp
10011fb0:	dfc00117 	ldw	ra,4(sp)
10011fb4:	df000017 	ldw	fp,0(sp)
10011fb8:	dec00204 	addi	sp,sp,8
10011fbc:	f800283a 	ret

10011fc0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10011fc0:	defffb04 	addi	sp,sp,-20
10011fc4:	dfc00415 	stw	ra,16(sp)
10011fc8:	df000315 	stw	fp,12(sp)
10011fcc:	dc000215 	stw	r16,8(sp)
10011fd0:	df000304 	addi	fp,sp,12
10011fd4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10011fd8:	e0bffe17 	ldw	r2,-8(fp)
10011fdc:	10800217 	ldw	r2,8(r2)
10011fe0:	10d00034 	orhi	r3,r2,16384
10011fe4:	e0bffe17 	ldw	r2,-8(fp)
10011fe8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011fec:	e03ffd15 	stw	zero,-12(fp)
10011ff0:	00002306 	br	10012080 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011ff4:	04040074 	movhi	r16,4097
10011ff8:	840f3e04 	addi	r16,r16,15608
10011ffc:	e0bffd17 	ldw	r2,-12(fp)
10012000:	01400304 	movi	r5,12
10012004:	1009883a 	mov	r4,r2
10012008:	000d8680 	call	1000d868 <__mulsi3>
1001200c:	8085883a 	add	r2,r16,r2
10012010:	10c00017 	ldw	r3,0(r2)
10012014:	e0bffe17 	ldw	r2,-8(fp)
10012018:	10800017 	ldw	r2,0(r2)
1001201c:	1880151e 	bne	r3,r2,10012074 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10012020:	04040074 	movhi	r16,4097
10012024:	840f3e04 	addi	r16,r16,15608
10012028:	e0bffd17 	ldw	r2,-12(fp)
1001202c:	01400304 	movi	r5,12
10012030:	1009883a 	mov	r4,r2
10012034:	000d8680 	call	1000d868 <__mulsi3>
10012038:	8085883a 	add	r2,r16,r2
1001203c:	10800204 	addi	r2,r2,8
10012040:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10012044:	10000b0e 	bge	r2,zero,10012074 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10012048:	01400304 	movi	r5,12
1001204c:	e13ffd17 	ldw	r4,-12(fp)
10012050:	000d8680 	call	1000d868 <__mulsi3>
10012054:	1007883a 	mov	r3,r2
10012058:	00840074 	movhi	r2,4097
1001205c:	108f3e04 	addi	r2,r2,15608
10012060:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10012064:	e0bffe17 	ldw	r2,-8(fp)
10012068:	18800226 	beq	r3,r2,10012074 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1001206c:	00bffcc4 	movi	r2,-13
10012070:	00000806 	br	10012094 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10012074:	e0bffd17 	ldw	r2,-12(fp)
10012078:	10800044 	addi	r2,r2,1
1001207c:	e0bffd15 	stw	r2,-12(fp)
10012080:	d0a00a17 	ldw	r2,-32728(gp)
10012084:	1007883a 	mov	r3,r2
10012088:	e0bffd17 	ldw	r2,-12(fp)
1001208c:	18bfd92e 	bgeu	r3,r2,10011ff4 <__alt_data_end+0xf8011ff4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10012090:	0005883a 	mov	r2,zero
}
10012094:	e6ffff04 	addi	sp,fp,-4
10012098:	dfc00217 	ldw	ra,8(sp)
1001209c:	df000117 	ldw	fp,4(sp)
100120a0:	dc000017 	ldw	r16,0(sp)
100120a4:	dec00304 	addi	sp,sp,12
100120a8:	f800283a 	ret

100120ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100120ac:	defff604 	addi	sp,sp,-40
100120b0:	dfc00915 	stw	ra,36(sp)
100120b4:	df000815 	stw	fp,32(sp)
100120b8:	df000804 	addi	fp,sp,32
100120bc:	e13ffd15 	stw	r4,-12(fp)
100120c0:	e17ffe15 	stw	r5,-8(fp)
100120c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100120c8:	00bfffc4 	movi	r2,-1
100120cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100120d0:	00bffb44 	movi	r2,-19
100120d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100120d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100120dc:	d1600804 	addi	r5,gp,-32736
100120e0:	e13ffd17 	ldw	r4,-12(fp)
100120e4:	00123d00 	call	100123d0 <alt_find_dev>
100120e8:	e0bff815 	stw	r2,-32(fp)
100120ec:	e0bff817 	ldw	r2,-32(fp)
100120f0:	1000051e 	bne	r2,zero,10012108 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100120f4:	e13ffd17 	ldw	r4,-12(fp)
100120f8:	00124600 	call	10012460 <alt_find_file>
100120fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10012100:	00800044 	movi	r2,1
10012104:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10012108:	e0bff817 	ldw	r2,-32(fp)
1001210c:	10002b26 	beq	r2,zero,100121bc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10012110:	e13ff817 	ldw	r4,-32(fp)
10012114:	00125680 	call	10012568 <alt_get_fd>
10012118:	e0bff915 	stw	r2,-28(fp)
1001211c:	e0bff917 	ldw	r2,-28(fp)
10012120:	1000030e 	bge	r2,zero,10012130 <open+0x84>
    {
      status = index;
10012124:	e0bff917 	ldw	r2,-28(fp)
10012128:	e0bffa15 	stw	r2,-24(fp)
1001212c:	00002506 	br	100121c4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10012130:	01400304 	movi	r5,12
10012134:	e13ff917 	ldw	r4,-28(fp)
10012138:	000d8680 	call	1000d868 <__mulsi3>
1001213c:	1007883a 	mov	r3,r2
10012140:	00840074 	movhi	r2,4097
10012144:	108f3e04 	addi	r2,r2,15608
10012148:	1885883a 	add	r2,r3,r2
1001214c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10012150:	e0fffe17 	ldw	r3,-8(fp)
10012154:	00900034 	movhi	r2,16384
10012158:	10bfffc4 	addi	r2,r2,-1
1001215c:	1886703a 	and	r3,r3,r2
10012160:	e0bffc17 	ldw	r2,-16(fp)
10012164:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10012168:	e0bffb17 	ldw	r2,-20(fp)
1001216c:	1000051e 	bne	r2,zero,10012184 <open+0xd8>
10012170:	e13ffc17 	ldw	r4,-16(fp)
10012174:	0011fc00 	call	10011fc0 <alt_file_locked>
10012178:	e0bffa15 	stw	r2,-24(fp)
1001217c:	e0bffa17 	ldw	r2,-24(fp)
10012180:	10001016 	blt	r2,zero,100121c4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10012184:	e0bff817 	ldw	r2,-32(fp)
10012188:	10800317 	ldw	r2,12(r2)
1001218c:	10000826 	beq	r2,zero,100121b0 <open+0x104>
10012190:	e0bff817 	ldw	r2,-32(fp)
10012194:	10800317 	ldw	r2,12(r2)
10012198:	e1ffff17 	ldw	r7,-4(fp)
1001219c:	e1bffe17 	ldw	r6,-8(fp)
100121a0:	e17ffd17 	ldw	r5,-12(fp)
100121a4:	e13ffc17 	ldw	r4,-16(fp)
100121a8:	103ee83a 	callr	r2
100121ac:	00000106 	br	100121b4 <open+0x108>
100121b0:	0005883a 	mov	r2,zero
100121b4:	e0bffa15 	stw	r2,-24(fp)
100121b8:	00000206 	br	100121c4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
100121bc:	00bffb44 	movi	r2,-19
100121c0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100121c4:	e0bffa17 	ldw	r2,-24(fp)
100121c8:	1000090e 	bge	r2,zero,100121f0 <open+0x144>
  {
    alt_release_fd (index);  
100121cc:	e13ff917 	ldw	r4,-28(fp)
100121d0:	00108580 	call	10010858 <alt_release_fd>
    ALT_ERRNO = -status;
100121d4:	0011f840 	call	10011f84 <alt_get_errno>
100121d8:	1007883a 	mov	r3,r2
100121dc:	e0bffa17 	ldw	r2,-24(fp)
100121e0:	0085c83a 	sub	r2,zero,r2
100121e4:	18800015 	stw	r2,0(r3)
    return -1;
100121e8:	00bfffc4 	movi	r2,-1
100121ec:	00000106 	br	100121f4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
100121f0:	e0bff917 	ldw	r2,-28(fp)
}
100121f4:	e037883a 	mov	sp,fp
100121f8:	dfc00117 	ldw	ra,4(sp)
100121fc:	df000017 	ldw	fp,0(sp)
10012200:	dec00204 	addi	sp,sp,8
10012204:	f800283a 	ret

10012208 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10012208:	defffa04 	addi	sp,sp,-24
1001220c:	df000515 	stw	fp,20(sp)
10012210:	df000504 	addi	fp,sp,20
10012214:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012218:	0005303a 	rdctl	r2,status
1001221c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012220:	e0fffc17 	ldw	r3,-16(fp)
10012224:	00bfff84 	movi	r2,-2
10012228:	1884703a 	and	r2,r3,r2
1001222c:	1001703a 	wrctl	status,r2
  
  return context;
10012230:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10012234:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10012238:	e0bfff17 	ldw	r2,-4(fp)
1001223c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10012240:	e0bffd17 	ldw	r2,-12(fp)
10012244:	10800017 	ldw	r2,0(r2)
10012248:	e0fffd17 	ldw	r3,-12(fp)
1001224c:	18c00117 	ldw	r3,4(r3)
10012250:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10012254:	e0bffd17 	ldw	r2,-12(fp)
10012258:	10800117 	ldw	r2,4(r2)
1001225c:	e0fffd17 	ldw	r3,-12(fp)
10012260:	18c00017 	ldw	r3,0(r3)
10012264:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10012268:	e0bffd17 	ldw	r2,-12(fp)
1001226c:	e0fffd17 	ldw	r3,-12(fp)
10012270:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10012274:	e0bffd17 	ldw	r2,-12(fp)
10012278:	e0fffd17 	ldw	r3,-12(fp)
1001227c:	10c00015 	stw	r3,0(r2)
10012280:	e0bffb17 	ldw	r2,-20(fp)
10012284:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012288:	e0bffe17 	ldw	r2,-8(fp)
1001228c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10012290:	0001883a 	nop
10012294:	e037883a 	mov	sp,fp
10012298:	df000017 	ldw	fp,0(sp)
1001229c:	dec00104 	addi	sp,sp,4
100122a0:	f800283a 	ret

100122a4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100122a4:	defffb04 	addi	sp,sp,-20
100122a8:	dfc00415 	stw	ra,16(sp)
100122ac:	df000315 	stw	fp,12(sp)
100122b0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100122b4:	d0a00e17 	ldw	r2,-32712(gp)
100122b8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100122bc:	d0a6d817 	ldw	r2,-25760(gp)
100122c0:	10800044 	addi	r2,r2,1
100122c4:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100122c8:	00002e06 	br	10012384 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100122cc:	e0bffd17 	ldw	r2,-12(fp)
100122d0:	10800017 	ldw	r2,0(r2)
100122d4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100122d8:	e0bffd17 	ldw	r2,-12(fp)
100122dc:	10800403 	ldbu	r2,16(r2)
100122e0:	10803fcc 	andi	r2,r2,255
100122e4:	10000426 	beq	r2,zero,100122f8 <alt_tick+0x54>
100122e8:	d0a6d817 	ldw	r2,-25760(gp)
100122ec:	1000021e 	bne	r2,zero,100122f8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
100122f0:	e0bffd17 	ldw	r2,-12(fp)
100122f4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100122f8:	e0bffd17 	ldw	r2,-12(fp)
100122fc:	10800217 	ldw	r2,8(r2)
10012300:	d0e6d817 	ldw	r3,-25760(gp)
10012304:	18801d36 	bltu	r3,r2,1001237c <alt_tick+0xd8>
10012308:	e0bffd17 	ldw	r2,-12(fp)
1001230c:	10800403 	ldbu	r2,16(r2)
10012310:	10803fcc 	andi	r2,r2,255
10012314:	1000191e 	bne	r2,zero,1001237c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10012318:	e0bffd17 	ldw	r2,-12(fp)
1001231c:	10800317 	ldw	r2,12(r2)
10012320:	e0fffd17 	ldw	r3,-12(fp)
10012324:	18c00517 	ldw	r3,20(r3)
10012328:	1809883a 	mov	r4,r3
1001232c:	103ee83a 	callr	r2
10012330:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10012334:	e0bfff17 	ldw	r2,-4(fp)
10012338:	1000031e 	bne	r2,zero,10012348 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1001233c:	e13ffd17 	ldw	r4,-12(fp)
10012340:	00122080 	call	10012208 <alt_alarm_stop>
10012344:	00000d06 	br	1001237c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10012348:	e0bffd17 	ldw	r2,-12(fp)
1001234c:	10c00217 	ldw	r3,8(r2)
10012350:	e0bfff17 	ldw	r2,-4(fp)
10012354:	1887883a 	add	r3,r3,r2
10012358:	e0bffd17 	ldw	r2,-12(fp)
1001235c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10012360:	e0bffd17 	ldw	r2,-12(fp)
10012364:	10c00217 	ldw	r3,8(r2)
10012368:	d0a6d817 	ldw	r2,-25760(gp)
1001236c:	1880032e 	bgeu	r3,r2,1001237c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10012370:	e0bffd17 	ldw	r2,-12(fp)
10012374:	00c00044 	movi	r3,1
10012378:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1001237c:	e0bffe17 	ldw	r2,-8(fp)
10012380:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10012384:	e0fffd17 	ldw	r3,-12(fp)
10012388:	d0a00e04 	addi	r2,gp,-32712
1001238c:	18bfcf1e 	bne	r3,r2,100122cc <__alt_data_end+0xf80122cc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10012390:	0001883a 	nop
}
10012394:	0001883a 	nop
10012398:	e037883a 	mov	sp,fp
1001239c:	dfc00117 	ldw	ra,4(sp)
100123a0:	df000017 	ldw	fp,0(sp)
100123a4:	dec00204 	addi	sp,sp,8
100123a8:	f800283a 	ret

100123ac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100123ac:	deffff04 	addi	sp,sp,-4
100123b0:	df000015 	stw	fp,0(sp)
100123b4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100123b8:	000170fa 	wrctl	ienable,zero
}
100123bc:	0001883a 	nop
100123c0:	e037883a 	mov	sp,fp
100123c4:	df000017 	ldw	fp,0(sp)
100123c8:	dec00104 	addi	sp,sp,4
100123cc:	f800283a 	ret

100123d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100123d0:	defffa04 	addi	sp,sp,-24
100123d4:	dfc00515 	stw	ra,20(sp)
100123d8:	df000415 	stw	fp,16(sp)
100123dc:	df000404 	addi	fp,sp,16
100123e0:	e13ffe15 	stw	r4,-8(fp)
100123e4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100123e8:	e0bfff17 	ldw	r2,-4(fp)
100123ec:	10800017 	ldw	r2,0(r2)
100123f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100123f4:	e13ffe17 	ldw	r4,-8(fp)
100123f8:	00033340 	call	10003334 <strlen>
100123fc:	10800044 	addi	r2,r2,1
10012400:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10012404:	00000d06 	br	1001243c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10012408:	e0bffc17 	ldw	r2,-16(fp)
1001240c:	10800217 	ldw	r2,8(r2)
10012410:	e0fffd17 	ldw	r3,-12(fp)
10012414:	180d883a 	mov	r6,r3
10012418:	e17ffe17 	ldw	r5,-8(fp)
1001241c:	1009883a 	mov	r4,r2
10012420:	00127140 	call	10012714 <memcmp>
10012424:	1000021e 	bne	r2,zero,10012430 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10012428:	e0bffc17 	ldw	r2,-16(fp)
1001242c:	00000706 	br	1001244c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10012430:	e0bffc17 	ldw	r2,-16(fp)
10012434:	10800017 	ldw	r2,0(r2)
10012438:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1001243c:	e0fffc17 	ldw	r3,-16(fp)
10012440:	e0bfff17 	ldw	r2,-4(fp)
10012444:	18bff01e 	bne	r3,r2,10012408 <__alt_data_end+0xf8012408>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10012448:	0005883a 	mov	r2,zero
}
1001244c:	e037883a 	mov	sp,fp
10012450:	dfc00117 	ldw	ra,4(sp)
10012454:	df000017 	ldw	fp,0(sp)
10012458:	dec00204 	addi	sp,sp,8
1001245c:	f800283a 	ret

10012460 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10012460:	defffb04 	addi	sp,sp,-20
10012464:	dfc00415 	stw	ra,16(sp)
10012468:	df000315 	stw	fp,12(sp)
1001246c:	df000304 	addi	fp,sp,12
10012470:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10012474:	d0a00617 	ldw	r2,-32744(gp)
10012478:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1001247c:	00003106 	br	10012544 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10012480:	e0bffd17 	ldw	r2,-12(fp)
10012484:	10800217 	ldw	r2,8(r2)
10012488:	1009883a 	mov	r4,r2
1001248c:	00033340 	call	10003334 <strlen>
10012490:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10012494:	e0bffd17 	ldw	r2,-12(fp)
10012498:	10c00217 	ldw	r3,8(r2)
1001249c:	e0bffe17 	ldw	r2,-8(fp)
100124a0:	10bfffc4 	addi	r2,r2,-1
100124a4:	1885883a 	add	r2,r3,r2
100124a8:	10800003 	ldbu	r2,0(r2)
100124ac:	10803fcc 	andi	r2,r2,255
100124b0:	1080201c 	xori	r2,r2,128
100124b4:	10bfe004 	addi	r2,r2,-128
100124b8:	10800bd8 	cmpnei	r2,r2,47
100124bc:	1000031e 	bne	r2,zero,100124cc <alt_find_file+0x6c>
    {
      len -= 1;
100124c0:	e0bffe17 	ldw	r2,-8(fp)
100124c4:	10bfffc4 	addi	r2,r2,-1
100124c8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100124cc:	e0bffe17 	ldw	r2,-8(fp)
100124d0:	e0ffff17 	ldw	r3,-4(fp)
100124d4:	1885883a 	add	r2,r3,r2
100124d8:	10800003 	ldbu	r2,0(r2)
100124dc:	10803fcc 	andi	r2,r2,255
100124e0:	1080201c 	xori	r2,r2,128
100124e4:	10bfe004 	addi	r2,r2,-128
100124e8:	10800be0 	cmpeqi	r2,r2,47
100124ec:	1000081e 	bne	r2,zero,10012510 <alt_find_file+0xb0>
100124f0:	e0bffe17 	ldw	r2,-8(fp)
100124f4:	e0ffff17 	ldw	r3,-4(fp)
100124f8:	1885883a 	add	r2,r3,r2
100124fc:	10800003 	ldbu	r2,0(r2)
10012500:	10803fcc 	andi	r2,r2,255
10012504:	1080201c 	xori	r2,r2,128
10012508:	10bfe004 	addi	r2,r2,-128
1001250c:	10000a1e 	bne	r2,zero,10012538 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10012510:	e0bffd17 	ldw	r2,-12(fp)
10012514:	10800217 	ldw	r2,8(r2)
10012518:	e0fffe17 	ldw	r3,-8(fp)
1001251c:	180d883a 	mov	r6,r3
10012520:	e17fff17 	ldw	r5,-4(fp)
10012524:	1009883a 	mov	r4,r2
10012528:	00127140 	call	10012714 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1001252c:	1000021e 	bne	r2,zero,10012538 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10012530:	e0bffd17 	ldw	r2,-12(fp)
10012534:	00000706 	br	10012554 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10012538:	e0bffd17 	ldw	r2,-12(fp)
1001253c:	10800017 	ldw	r2,0(r2)
10012540:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10012544:	e0fffd17 	ldw	r3,-12(fp)
10012548:	d0a00604 	addi	r2,gp,-32744
1001254c:	18bfcc1e 	bne	r3,r2,10012480 <__alt_data_end+0xf8012480>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10012550:	0005883a 	mov	r2,zero
}
10012554:	e037883a 	mov	sp,fp
10012558:	dfc00117 	ldw	ra,4(sp)
1001255c:	df000017 	ldw	fp,0(sp)
10012560:	dec00204 	addi	sp,sp,8
10012564:	f800283a 	ret

10012568 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10012568:	defffa04 	addi	sp,sp,-24
1001256c:	dfc00515 	stw	ra,20(sp)
10012570:	df000415 	stw	fp,16(sp)
10012574:	dc000315 	stw	r16,12(sp)
10012578:	df000404 	addi	fp,sp,16
1001257c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10012580:	00bffa04 	movi	r2,-24
10012584:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10012588:	e03ffc15 	stw	zero,-16(fp)
1001258c:	00001d06 	br	10012604 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10012590:	04040074 	movhi	r16,4097
10012594:	840f3e04 	addi	r16,r16,15608
10012598:	e0bffc17 	ldw	r2,-16(fp)
1001259c:	01400304 	movi	r5,12
100125a0:	1009883a 	mov	r4,r2
100125a4:	000d8680 	call	1000d868 <__mulsi3>
100125a8:	8085883a 	add	r2,r16,r2
100125ac:	10800017 	ldw	r2,0(r2)
100125b0:	1000111e 	bne	r2,zero,100125f8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
100125b4:	04040074 	movhi	r16,4097
100125b8:	840f3e04 	addi	r16,r16,15608
100125bc:	e0bffc17 	ldw	r2,-16(fp)
100125c0:	01400304 	movi	r5,12
100125c4:	1009883a 	mov	r4,r2
100125c8:	000d8680 	call	1000d868 <__mulsi3>
100125cc:	8085883a 	add	r2,r16,r2
100125d0:	e0fffe17 	ldw	r3,-8(fp)
100125d4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100125d8:	d0e00a17 	ldw	r3,-32728(gp)
100125dc:	e0bffc17 	ldw	r2,-16(fp)
100125e0:	1880020e 	bge	r3,r2,100125ec <alt_get_fd+0x84>
      {
        alt_max_fd = i;
100125e4:	e0bffc17 	ldw	r2,-16(fp)
100125e8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
100125ec:	e0bffc17 	ldw	r2,-16(fp)
100125f0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100125f4:	00000606 	br	10012610 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100125f8:	e0bffc17 	ldw	r2,-16(fp)
100125fc:	10800044 	addi	r2,r2,1
10012600:	e0bffc15 	stw	r2,-16(fp)
10012604:	e0bffc17 	ldw	r2,-16(fp)
10012608:	10800810 	cmplti	r2,r2,32
1001260c:	103fe01e 	bne	r2,zero,10012590 <__alt_data_end+0xf8012590>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10012610:	e0bffd17 	ldw	r2,-12(fp)
}
10012614:	e6ffff04 	addi	sp,fp,-4
10012618:	dfc00217 	ldw	ra,8(sp)
1001261c:	df000117 	ldw	fp,4(sp)
10012620:	dc000017 	ldw	r16,0(sp)
10012624:	dec00304 	addi	sp,sp,12
10012628:	f800283a 	ret

1001262c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1001262c:	defffe04 	addi	sp,sp,-8
10012630:	df000115 	stw	fp,4(sp)
10012634:	df000104 	addi	fp,sp,4
10012638:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1001263c:	e0bfff17 	ldw	r2,-4(fp)
10012640:	10bffe84 	addi	r2,r2,-6
10012644:	10c00428 	cmpgeui	r3,r2,16
10012648:	18001a1e 	bne	r3,zero,100126b4 <alt_exception_cause_generated_bad_addr+0x88>
1001264c:	100690ba 	slli	r3,r2,2
10012650:	00840074 	movhi	r2,4097
10012654:	10899904 	addi	r2,r2,9828
10012658:	1885883a 	add	r2,r3,r2
1001265c:	10800017 	ldw	r2,0(r2)
10012660:	1000683a 	jmp	r2
10012664:	100126a4 	muli	zero,r2,1178
10012668:	100126a4 	muli	zero,r2,1178
1001266c:	100126b4 	orhi	zero,r2,1178
10012670:	100126b4 	orhi	zero,r2,1178
10012674:	100126b4 	orhi	zero,r2,1178
10012678:	100126a4 	muli	zero,r2,1178
1001267c:	100126ac 	andhi	zero,r2,1178
10012680:	100126b4 	orhi	zero,r2,1178
10012684:	100126a4 	muli	zero,r2,1178
10012688:	100126a4 	muli	zero,r2,1178
1001268c:	100126b4 	orhi	zero,r2,1178
10012690:	100126a4 	muli	zero,r2,1178
10012694:	100126ac 	andhi	zero,r2,1178
10012698:	100126b4 	orhi	zero,r2,1178
1001269c:	100126b4 	orhi	zero,r2,1178
100126a0:	100126a4 	muli	zero,r2,1178
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
100126a4:	00800044 	movi	r2,1
100126a8:	00000306 	br	100126b8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100126ac:	0005883a 	mov	r2,zero
100126b0:	00000106 	br	100126b8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
100126b4:	0005883a 	mov	r2,zero
  }
}
100126b8:	e037883a 	mov	sp,fp
100126bc:	df000017 	ldw	fp,0(sp)
100126c0:	dec00104 	addi	sp,sp,4
100126c4:	f800283a 	ret

100126c8 <atexit>:
100126c8:	200b883a 	mov	r5,r4
100126cc:	000f883a 	mov	r7,zero
100126d0:	000d883a 	mov	r6,zero
100126d4:	0009883a 	mov	r4,zero
100126d8:	00127901 	jmpi	10012790 <__register_exitproc>

100126dc <exit>:
100126dc:	defffe04 	addi	sp,sp,-8
100126e0:	000b883a 	mov	r5,zero
100126e4:	dc000015 	stw	r16,0(sp)
100126e8:	dfc00115 	stw	ra,4(sp)
100126ec:	2021883a 	mov	r16,r4
100126f0:	00128a80 	call	100128a8 <__call_exitprocs>
100126f4:	00840074 	movhi	r2,4097
100126f8:	1093b604 	addi	r2,r2,20184
100126fc:	11000017 	ldw	r4,0(r2)
10012700:	20800f17 	ldw	r2,60(r4)
10012704:	10000126 	beq	r2,zero,1001270c <exit+0x30>
10012708:	103ee83a 	callr	r2
1001270c:	8009883a 	mov	r4,r16
10012710:	0012a280 	call	10012a28 <_exit>

10012714 <memcmp>:
10012714:	01c000c4 	movi	r7,3
10012718:	3980192e 	bgeu	r7,r6,10012780 <memcmp+0x6c>
1001271c:	2144b03a 	or	r2,r4,r5
10012720:	11c4703a 	and	r2,r2,r7
10012724:	10000f26 	beq	r2,zero,10012764 <memcmp+0x50>
10012728:	20800003 	ldbu	r2,0(r4)
1001272c:	28c00003 	ldbu	r3,0(r5)
10012730:	10c0151e 	bne	r2,r3,10012788 <memcmp+0x74>
10012734:	31bfff84 	addi	r6,r6,-2
10012738:	01ffffc4 	movi	r7,-1
1001273c:	00000406 	br	10012750 <memcmp+0x3c>
10012740:	20800003 	ldbu	r2,0(r4)
10012744:	28c00003 	ldbu	r3,0(r5)
10012748:	31bfffc4 	addi	r6,r6,-1
1001274c:	10c00e1e 	bne	r2,r3,10012788 <memcmp+0x74>
10012750:	21000044 	addi	r4,r4,1
10012754:	29400044 	addi	r5,r5,1
10012758:	31fff91e 	bne	r6,r7,10012740 <__alt_data_end+0xf8012740>
1001275c:	0005883a 	mov	r2,zero
10012760:	f800283a 	ret
10012764:	20c00017 	ldw	r3,0(r4)
10012768:	28800017 	ldw	r2,0(r5)
1001276c:	18bfee1e 	bne	r3,r2,10012728 <__alt_data_end+0xf8012728>
10012770:	31bfff04 	addi	r6,r6,-4
10012774:	21000104 	addi	r4,r4,4
10012778:	29400104 	addi	r5,r5,4
1001277c:	39bff936 	bltu	r7,r6,10012764 <__alt_data_end+0xf8012764>
10012780:	303fe91e 	bne	r6,zero,10012728 <__alt_data_end+0xf8012728>
10012784:	003ff506 	br	1001275c <__alt_data_end+0xf801275c>
10012788:	10c5c83a 	sub	r2,r2,r3
1001278c:	f800283a 	ret

10012790 <__register_exitproc>:
10012790:	defffa04 	addi	sp,sp,-24
10012794:	dc000315 	stw	r16,12(sp)
10012798:	04040074 	movhi	r16,4097
1001279c:	8413b604 	addi	r16,r16,20184
100127a0:	80c00017 	ldw	r3,0(r16)
100127a4:	dc400415 	stw	r17,16(sp)
100127a8:	dfc00515 	stw	ra,20(sp)
100127ac:	18805217 	ldw	r2,328(r3)
100127b0:	2023883a 	mov	r17,r4
100127b4:	10003726 	beq	r2,zero,10012894 <__register_exitproc+0x104>
100127b8:	10c00117 	ldw	r3,4(r2)
100127bc:	010007c4 	movi	r4,31
100127c0:	20c00e16 	blt	r4,r3,100127fc <__register_exitproc+0x6c>
100127c4:	1a000044 	addi	r8,r3,1
100127c8:	8800221e 	bne	r17,zero,10012854 <__register_exitproc+0xc4>
100127cc:	18c00084 	addi	r3,r3,2
100127d0:	18c7883a 	add	r3,r3,r3
100127d4:	18c7883a 	add	r3,r3,r3
100127d8:	12000115 	stw	r8,4(r2)
100127dc:	10c7883a 	add	r3,r2,r3
100127e0:	19400015 	stw	r5,0(r3)
100127e4:	0005883a 	mov	r2,zero
100127e8:	dfc00517 	ldw	ra,20(sp)
100127ec:	dc400417 	ldw	r17,16(sp)
100127f0:	dc000317 	ldw	r16,12(sp)
100127f4:	dec00604 	addi	sp,sp,24
100127f8:	f800283a 	ret
100127fc:	00800034 	movhi	r2,0
10012800:	10800004 	addi	r2,r2,0
10012804:	10002626 	beq	r2,zero,100128a0 <__register_exitproc+0x110>
10012808:	01006404 	movi	r4,400
1001280c:	d9400015 	stw	r5,0(sp)
10012810:	d9800115 	stw	r6,4(sp)
10012814:	d9c00215 	stw	r7,8(sp)
10012818:	00000000 	call	10000000 <__alt_mem_sdram>
1001281c:	d9400017 	ldw	r5,0(sp)
10012820:	d9800117 	ldw	r6,4(sp)
10012824:	d9c00217 	ldw	r7,8(sp)
10012828:	10001d26 	beq	r2,zero,100128a0 <__register_exitproc+0x110>
1001282c:	81000017 	ldw	r4,0(r16)
10012830:	10000115 	stw	zero,4(r2)
10012834:	02000044 	movi	r8,1
10012838:	22405217 	ldw	r9,328(r4)
1001283c:	0007883a 	mov	r3,zero
10012840:	12400015 	stw	r9,0(r2)
10012844:	20805215 	stw	r2,328(r4)
10012848:	10006215 	stw	zero,392(r2)
1001284c:	10006315 	stw	zero,396(r2)
10012850:	883fde26 	beq	r17,zero,100127cc <__alt_data_end+0xf80127cc>
10012854:	18c9883a 	add	r4,r3,r3
10012858:	2109883a 	add	r4,r4,r4
1001285c:	1109883a 	add	r4,r2,r4
10012860:	21802215 	stw	r6,136(r4)
10012864:	01800044 	movi	r6,1
10012868:	12406217 	ldw	r9,392(r2)
1001286c:	30cc983a 	sll	r6,r6,r3
10012870:	4992b03a 	or	r9,r9,r6
10012874:	12406215 	stw	r9,392(r2)
10012878:	21c04215 	stw	r7,264(r4)
1001287c:	01000084 	movi	r4,2
10012880:	893fd21e 	bne	r17,r4,100127cc <__alt_data_end+0xf80127cc>
10012884:	11006317 	ldw	r4,396(r2)
10012888:	218cb03a 	or	r6,r4,r6
1001288c:	11806315 	stw	r6,396(r2)
10012890:	003fce06 	br	100127cc <__alt_data_end+0xf80127cc>
10012894:	18805304 	addi	r2,r3,332
10012898:	18805215 	stw	r2,328(r3)
1001289c:	003fc606 	br	100127b8 <__alt_data_end+0xf80127b8>
100128a0:	00bfffc4 	movi	r2,-1
100128a4:	003fd006 	br	100127e8 <__alt_data_end+0xf80127e8>

100128a8 <__call_exitprocs>:
100128a8:	defff504 	addi	sp,sp,-44
100128ac:	df000915 	stw	fp,36(sp)
100128b0:	dd400615 	stw	r21,24(sp)
100128b4:	dc800315 	stw	r18,12(sp)
100128b8:	dfc00a15 	stw	ra,40(sp)
100128bc:	ddc00815 	stw	r23,32(sp)
100128c0:	dd800715 	stw	r22,28(sp)
100128c4:	dd000515 	stw	r20,20(sp)
100128c8:	dcc00415 	stw	r19,16(sp)
100128cc:	dc400215 	stw	r17,8(sp)
100128d0:	dc000115 	stw	r16,4(sp)
100128d4:	d9000015 	stw	r4,0(sp)
100128d8:	2839883a 	mov	fp,r5
100128dc:	04800044 	movi	r18,1
100128e0:	057fffc4 	movi	r21,-1
100128e4:	00840074 	movhi	r2,4097
100128e8:	1093b604 	addi	r2,r2,20184
100128ec:	12000017 	ldw	r8,0(r2)
100128f0:	45005217 	ldw	r20,328(r8)
100128f4:	44c05204 	addi	r19,r8,328
100128f8:	a0001c26 	beq	r20,zero,1001296c <__call_exitprocs+0xc4>
100128fc:	a0800117 	ldw	r2,4(r20)
10012900:	15ffffc4 	addi	r23,r2,-1
10012904:	b8000d16 	blt	r23,zero,1001293c <__call_exitprocs+0x94>
10012908:	14000044 	addi	r16,r2,1
1001290c:	8421883a 	add	r16,r16,r16
10012910:	8421883a 	add	r16,r16,r16
10012914:	84402004 	addi	r17,r16,128
10012918:	a463883a 	add	r17,r20,r17
1001291c:	a421883a 	add	r16,r20,r16
10012920:	e0001e26 	beq	fp,zero,1001299c <__call_exitprocs+0xf4>
10012924:	80804017 	ldw	r2,256(r16)
10012928:	e0801c26 	beq	fp,r2,1001299c <__call_exitprocs+0xf4>
1001292c:	bdffffc4 	addi	r23,r23,-1
10012930:	843fff04 	addi	r16,r16,-4
10012934:	8c7fff04 	addi	r17,r17,-4
10012938:	bd7ff91e 	bne	r23,r21,10012920 <__alt_data_end+0xf8012920>
1001293c:	00800034 	movhi	r2,0
10012940:	10800004 	addi	r2,r2,0
10012944:	10000926 	beq	r2,zero,1001296c <__call_exitprocs+0xc4>
10012948:	a0800117 	ldw	r2,4(r20)
1001294c:	1000301e 	bne	r2,zero,10012a10 <__call_exitprocs+0x168>
10012950:	a0800017 	ldw	r2,0(r20)
10012954:	10003226 	beq	r2,zero,10012a20 <__call_exitprocs+0x178>
10012958:	a009883a 	mov	r4,r20
1001295c:	98800015 	stw	r2,0(r19)
10012960:	00000000 	call	10000000 <__alt_mem_sdram>
10012964:	9d000017 	ldw	r20,0(r19)
10012968:	a03fe41e 	bne	r20,zero,100128fc <__alt_data_end+0xf80128fc>
1001296c:	dfc00a17 	ldw	ra,40(sp)
10012970:	df000917 	ldw	fp,36(sp)
10012974:	ddc00817 	ldw	r23,32(sp)
10012978:	dd800717 	ldw	r22,28(sp)
1001297c:	dd400617 	ldw	r21,24(sp)
10012980:	dd000517 	ldw	r20,20(sp)
10012984:	dcc00417 	ldw	r19,16(sp)
10012988:	dc800317 	ldw	r18,12(sp)
1001298c:	dc400217 	ldw	r17,8(sp)
10012990:	dc000117 	ldw	r16,4(sp)
10012994:	dec00b04 	addi	sp,sp,44
10012998:	f800283a 	ret
1001299c:	a0800117 	ldw	r2,4(r20)
100129a0:	80c00017 	ldw	r3,0(r16)
100129a4:	10bfffc4 	addi	r2,r2,-1
100129a8:	15c01426 	beq	r2,r23,100129fc <__call_exitprocs+0x154>
100129ac:	80000015 	stw	zero,0(r16)
100129b0:	183fde26 	beq	r3,zero,1001292c <__alt_data_end+0xf801292c>
100129b4:	95c8983a 	sll	r4,r18,r23
100129b8:	a0806217 	ldw	r2,392(r20)
100129bc:	a5800117 	ldw	r22,4(r20)
100129c0:	2084703a 	and	r2,r4,r2
100129c4:	10000b26 	beq	r2,zero,100129f4 <__call_exitprocs+0x14c>
100129c8:	a0806317 	ldw	r2,396(r20)
100129cc:	2088703a 	and	r4,r4,r2
100129d0:	20000c1e 	bne	r4,zero,10012a04 <__call_exitprocs+0x15c>
100129d4:	89400017 	ldw	r5,0(r17)
100129d8:	d9000017 	ldw	r4,0(sp)
100129dc:	183ee83a 	callr	r3
100129e0:	a0800117 	ldw	r2,4(r20)
100129e4:	15bfbf1e 	bne	r2,r22,100128e4 <__alt_data_end+0xf80128e4>
100129e8:	98800017 	ldw	r2,0(r19)
100129ec:	153fcf26 	beq	r2,r20,1001292c <__alt_data_end+0xf801292c>
100129f0:	003fbc06 	br	100128e4 <__alt_data_end+0xf80128e4>
100129f4:	183ee83a 	callr	r3
100129f8:	003ff906 	br	100129e0 <__alt_data_end+0xf80129e0>
100129fc:	a5c00115 	stw	r23,4(r20)
10012a00:	003feb06 	br	100129b0 <__alt_data_end+0xf80129b0>
10012a04:	89000017 	ldw	r4,0(r17)
10012a08:	183ee83a 	callr	r3
10012a0c:	003ff406 	br	100129e0 <__alt_data_end+0xf80129e0>
10012a10:	a0800017 	ldw	r2,0(r20)
10012a14:	a027883a 	mov	r19,r20
10012a18:	1029883a 	mov	r20,r2
10012a1c:	003fb606 	br	100128f8 <__alt_data_end+0xf80128f8>
10012a20:	0005883a 	mov	r2,zero
10012a24:	003ffb06 	br	10012a14 <__alt_data_end+0xf8012a14>

10012a28 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10012a28:	defffd04 	addi	sp,sp,-12
10012a2c:	df000215 	stw	fp,8(sp)
10012a30:	df000204 	addi	fp,sp,8
10012a34:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10012a38:	0001883a 	nop
10012a3c:	e0bfff17 	ldw	r2,-4(fp)
10012a40:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10012a44:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10012a48:	10000226 	beq	r2,zero,10012a54 <_exit+0x2c>
    ALT_SIM_FAIL();
10012a4c:	002af070 	cmpltui	zero,zero,43969
10012a50:	00000106 	br	10012a58 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10012a54:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10012a58:	003fff06 	br	10012a58 <__alt_data_end+0xf8012a58>
